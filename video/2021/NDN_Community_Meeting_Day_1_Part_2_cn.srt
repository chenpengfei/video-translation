1
00:00:00,530 --> 00:00:02,970
>> 大家请到第一讨论小组

2
00:00:02,970 --> 00:00:05,580
在NDN应用开发上。

3
00:00:05,580 --> 00:00:08,250
这是学习到的内容，以及接下来的步骤。

4
00:00:08,250 --> 00:00:11,370
由 Davide Pesavento 主持。

5
00:00:11,370 --> 00:00:13,170
Davide是一名研究员

6
00:00:13,170 --> 00:00:15,120
在Nest工作了许多年

7
00:00:15,120 --> 00:00:17,190
已经成为主要的NDN之一

8
00:00:17,190 --> 00:00:19,065
协调开发人员。

9
00:00:19,065 --> 00:00:22,210
Davide，请继续。

10
00:00:24,230 --> 00:00:28,320
>> 大家好。欢迎回来。

11
00:00:28,320 --> 00:00:29,640
欢迎参加第一个小组讨论会

12
00:00:29,640 --> 00:00:32,010
2021年版

13
00:00:32,010 --> 00:00:34,035
NDN社区会议。

14
00:00:34,035 --> 00:00:37,440
我叫Davide Pesavento，今天我有

15
00:00:37,440 --> 00:00:39,195
的荣幸和荣誉

16
00:00:39,195 --> 00:00:41,555
的主持这个小组讨论。

17
00:00:41,555 --> 00:00:44,914
主题是应用程序开发。

18
00:00:44,914 --> 00:00:47,420
我们将会研究从中学到的教训。

19
00:00:47,420 --> 00:00:48,470
我们从中学到的

20
00:00:48,470 --> 00:00:50,120
多年来的开发和

21
00:00:50,120 --> 00:00:52,340
经过多年的开发和运行NDN应用程序。特别是我们将会关注

22
00:00:52,340 --> 00:00:53,990
特别是我们将会关注

23
00:00:53,990 --> 00:00:55,420
在接下来的步骤。

24
00:00:55,420 --> 00:00:57,590
我们接下来去哪里？

26
00:01:02,080 --> 00:01:05,945
我们有六位小组成员在场。

27
00:01:05,945 --> 00:01:07,760
您可以继续打开

28
00:01:07,760 --> 00:01:10,759
您可以继续打开您的相机。

29
00:01:10,759 --> 00:01:14,950
我将很快介绍他们。

30
00:01:14,950 --> 00:01:17,960
但在我这么做之前，我想要非常

31
00:01:17,960 --> 00:01:20,360
简要解释原因

32
00:01:20,360 --> 00:01:22,030
以及这个小组的目标。

33
00:01:22,030 --> 00:01:23,800
我会尽量简短。

34
00:01:23,800 --> 00:01:25,300
我想最大化利用时间。

35
00:01:25,300 --> 00:01:26,440
为了实际讨论。

36
00:01:26,440 --> 00:01:39,220
~!@#$%^&*()

37
00:01:39,220 --> 00:01:41,370
我们为什么要这么做？

38
00:01:41,370 --> 00:01:43,025
嗯，在研究的最后阶段

39
00:01:43,025 --> 00:01:44,620
现在已经持续进行了

40
00:01:44,620 --> 00:01:47,710
已经超过十年了，在此期间，

41
00:01:47,710 --> 00:01:51,280
已经有许多应用程序是使用NDN构建的。

42
00:01:51,280 --> 00:01:53,845
最近，我们已经

43
00:01:53,845 --> 00:01:56,440
听到了[听不清]的第一场演讲，

44
00:01:56,440 --> 00:01:58,660
今天的第一场演讲，

45
00:01:58,670 --> 00:02:02,400
NDN研究已经过渡

46
00:02:02,400 --> 00:02:11,350
研究方向已经过渡到以应用为驱动。

47
00:02:12,950 --> 00:02:17,610
我们认为应用对于

48
00:02:17,610 --> 00:02:18,930
NDN开发和

49
00:02:18,930 --> 00:02:22,570
整体的演变和研究。

50
00:02:22,590 --> 00:02:25,480
我们获得的经验，实际上，

51
00:02:25,480 --> 00:02:27,115
我们获得的经验，

52
00:02:27,115 --> 00:02:28,525
我们学到的教训，

53
00:02:28,525 --> 00:02:29,845
通过这个过程，

54
00:02:29,845 --> 00:02:31,450
已经非常宝贵了，对于

55
00:02:31,450 --> 00:02:33,290
the evolution of NDN 已经非常宝贵了，对于 to refine the architecture,

56
00:02:33,290 --> 00:02:35,200
为了完善架构，

57
00:02:35,200 --> 00:02:37,820
再次强调，应用程序将扮演重要角色。

58
00:02:38,070 --> 00:02:43,060
an extremely important critical role.

59
00:02:43,060 --> 00:02:45,085
在未来的NDN中发挥着至关重要的关键作用。

60
00:02:45,085 --> 00:02:47,660
在未来的NDN中。

61
00:02:47,660 --> 00:02:50,905
然而不幸的是，

62
00:02:50,905 --> 00:02:53,020
开发一个NDN应用程序

63
00:02:53,020 --> 00:02:55,525
仍然具有挑战性。

64
00:02:55,525 --> 00:02:58,480
它很难，需要付出巨大的努力。

65
00:02:58,480 --> 00:03:01,920
It's hard and requires a lot of effort. You need them to be an expert.

66
00:03:01,920 --> 00:03:03,985
你需要他们成为专家。

67
00:03:03,985 --> 00:03:07,210
在许多低层次的细节上

68
00:03:07,210 --> 00:03:10,290
NDN为了构建

69
00:03:10,290 --> 00:03:12,990
一个有效的应用程序不是

70
00:03:12,990 --> 00:03:15,460
一个玩具应用程序操作

71
00:03:15,460 --> 00:03:17,690
它能够做一些有用的事情。

72
00:03:19,490 --> 00:03:22,870
有一种想要远离~!@#$%^&*()

73
00:03:22,870 --> 00:03:26,220
这种低级别的个体处理

74
00:03:26,220 --> 00:03:28,320
对数据包中的感兴趣内容。

75
00:03:28,320 --> 00:03:32,720
面向更高级别API的线级。

76
00:03:32,720 --> 00:03:34,445
易于使用的库。

77
00:03:34,445 --> 00:03:38,060
本质上，这些面板带有

78
00:03:38,060 --> 00:03:42,690
愿景是让NDN更加易用，

79
00:03:44,390 --> 00:03:47,205
提升开发者体验。

80
00:03:47,205 --> 00:03:49,795
提升API，改进库，

81
00:03:49,795 --> 00:03:51,770
提供更好的工具，

82
00:03:51,770 --> 00:03:53,300
无论是为了开发，

83
00:03:53,300 --> 00:03:55,310
用于网络的调试。

84
00:03:55,310 --> 00:03:56,960
发生了什么事情在网络上，

85
00:03:56,960 --> 00:03:58,340
应用程序为什么不工作，

86
00:03:58,340 --> 00:04:01,625
为什么它的行为会是这样的。

87
00:04:01,625 --> 00:04:03,860
部署和引导过程可能会

88
00:04:03,860 --> 00:04:06,515
耗时而笨拙。

89
00:04:06,515 --> 00:04:07,520
但我就说到这里。

90
00:04:07,520 --> 00:04:08,765
另一位嘉宾，我不清楚。

91
00:04:08,765 --> 00:04:11,575
我会让小组成员来抱怨。

92
00:04:11,575 --> 00:04:14,280
我被告知了简单的愿望

93
00:04:14,280 --> 00:04:17,050
为了让NDN更加实用。

94
00:04:17,600 --> 00:04:19,860
当然，说起来容易

95
00:04:19,860 --> 00:04:25,485
完成了，这就是为什么有这个面板。

96
00:04:25,485 --> 00:04:28,250
我们想要走路

97
00:04:28,250 --> 00:04:31,070
离开这个面板时带着一份清单

98
00:04:31,070 --> 00:04:36,200
具体实用的项目和建议，我们作为一个社区可以

99
00:04:36,200 --> 00:04:38,510
采纳并取得进步。

100
00:04:38,510 --> 00:04:40,190
采纳并取得进步。

101
00:04:40,190 --> 00:04:42,440
在接下来的一年左右时间里。

102
00:04:42,440 --> 00:04:44,990
希望在接下来的一年左右时间里，

103
00:04:44,990 --> 00:04:46,640
在下一次社区会议上我们可以报告

104
00:04:46,640 --> 00:04:48,980
在下一次社区会议上我们可以报告回顾我们所取得的成就。

105
00:04:48,980 --> 00:04:50,900
我们不应该期待我们做

106
00:04:50,900 --> 00:04:52,640
我们今天所说的一切，

107
00:04:52,640 --> 00:04:54,785
即使我们只做到了百分之十

108
00:04:54,785 --> 00:04:57,080
我们今天所说的，

109
00:04:57,080 --> 00:05:00,360
这已经是一个很大的成就了，我认为。

110
00:05:04,700 --> 00:05:10,915
我们有一点多小时和

111
00:05:10,915 --> 00:05:13,100
我们有一点多小时和尽可能多的时间讨论~!@#$%^&*()

112
00:05:13,100 --> 00:05:15,035
尽可能地讨论

113
00:05:15,035 --> 00:05:16,590
而是进行口头陈述，

114
00:05:16,590 --> 00:05:19,400
所以我已经要求我们的小组成员限制

115
00:05:19,400 --> 00:05:20,510
他们的初始发言限制在

116
00:05:20,510 --> 00:05:21,890
大约五分钟左右。

117
00:05:21,890 --> 00:05:24,000
每个超过五分钟。

118
00:05:24,070 --> 00:05:27,540
如果少于这个时间，那就更好了。

119
00:05:28,950 --> 00:05:32,210
如前所述，两个

120
00:05:32,210 --> 00:05:33,890
主要方向，两个主要问题。

121
00:05:33,890 --> 00:05:36,070
主要痛点是什么？

122
00:05:36,070 --> 00:05:38,750
更加专注于第二个，

123
00:05:38,750 --> 00:05:41,030
这是我们可以如何改进

124
00:05:41,030 --> 00:05:45,230
应用程序开发者体验。

125
00:05:45,230 --> 00:05:48,840
[噪音] 不用多说

126
00:05:48,840 --> 00:05:54,690
我们将要去，

127
00:05:54,690 --> 00:05:56,790
在这里显示的那个列表中，

128
00:05:56,790 --> 00:05:58,880
在这个顺序中，让我

129
00:05:58,880 --> 00:06:00,319
介绍我们的第一位小组成员，

130
00:06:00,319 --> 00:06:04,190
介绍我们的第一位小组成员，Kathleen，你可以开始分享了。

131
00:06:04,190 --> 00:06:06,530
请开始分享吧。

132
00:06:06,530 --> 00:06:08,360
在我介绍你的时候，请分享你的屏幕。

133
00:06:08,360 --> 00:06:12,140
凯瑟琳·尼科尔斯是

134
00:06:12,140 --> 00:06:14,195
凯瑟琳·尼科尔斯是Pollere的首席技术官。

135
00:06:14,195 --> 00:06:17,450
他获得了电气工程博士学位。

136
00:06:17,450 --> 00:06:20,870
他很久以前从加州大学伯克利分校毕业。

137
00:06:20,870 --> 00:06:22,925
她的话，不是我的。

138
00:06:22,925 --> 00:06:25,490
她目前的兴趣在于使用NDN

139
00:06:25,490 --> 00:06:27,875
解决网络问题，

140
00:06:27,875 --> 00:06:29,360
这导致了开发

141
00:06:29,360 --> 00:06:33,979
开源的数据中心工具包或称为DCT。

142
00:06:33,979 --> 00:06:36,230
尽管她心中仍保留着一片柔软之地

143
00:06:36,230 --> 00:06:38,675
为了测量上网本的尺寸。

144
00:06:38,675 --> 00:06:41,975
凯瑟琳，轮到你发言了。

145
00:06:41,975 --> 00:06:43,910
我觉得我不会

146
00:06:43,910 --> 00:06:45,740
不去费心准备任何幻灯片。

147
00:06:45,740 --> 00:06:47,780
我现在就直接说吧，

148
00:06:47,780 --> 00:06:49,220
但是幻灯片[重叠]

149
00:06:49,220 --> 00:06:51,055
可以记录下来。

150
00:06:51,055 --> 00:06:53,960
我认为首先真正想要开始的是

151
00:06:53,960 --> 00:06:56,210
要说一些个人的事情，

152
00:06:56,210 --> 00:06:59,555
我的关系与ICN以及

153
00:06:59,555 --> 00:07:05,205
NDN起初是

154
00:07:05,205 --> 00:07:08,040
我和Van Jacobson结了婚，

155
00:07:08,040 --> 00:07:10,550
所以这些年来我主要有过

156
00:07:10,550 --> 00:07:13,250
所以这些年来我主要有过这个前排座位，但实际上并未参与进去

157
00:07:13,250 --> 00:07:16,310
直到过去几年，我才真正参与到这个领域。

158
00:07:16,310 --> 00:07:18,380
除了...之外

159
00:07:18,380 --> 00:07:20,360
大约在2010年左右，

160
00:07:20,360 --> 00:07:23,345
我花了一些时间，那时候它更多的是CCN。

161
00:07:23,345 --> 00:07:27,950
但实际上是一件非常有趣的事情

162
00:07:27,950 --> 00:07:29,480
但实际上是一件非常有趣的事情，是那些早期进入...

163
00:07:29,480 --> 00:07:33,410
这些早期涌现出来的想法

164
00:07:33,410 --> 00:07:39,035
那么2006年的讨论实际上是什么时候发生的。

165
00:07:39,035 --> 00:07:39,830
在

166
00:07:39,830 --> 00:07:42,620
九十年代，他大致讲了一下。

167
00:07:42,620 --> 00:07:46,670
杂乱的谈话中我没有意识到这一点，

168
00:07:46,670 --> 00:07:48,890
但他当时正在我身上尝试这个，在我们第一次晚餐约会中说，

169
00:07:48,890 --> 00:07:51,740
但他当时正在我身上尝试这个，在我们第一次晚餐约会中说，

170
00:07:51,740 --> 00:07:53,210
"嗯，在互联网中，"

171
00:07:53,210 --> 00:07:54,950
我们正在尝试连接终端，

172
00:07:54,950 --> 00:07:56,180
但我们真的很想

173
00:07:56,180 --> 00:07:57,290
这个关于某人的想法

174
00:07:57,290 --> 00:07:58,550
走进房间并且~!@#$%^&*()

175
00:07:58,550 --> 00:07:59,915
说谁拥有这

176
00:07:59,915 --> 00:08:02,360
时间，那么能够得到

177
00:08:02,360 --> 00:08:04,280
人给出的答案

179
00:08:07,990 --> 00:08:10,910
我想说的是

180
00:08:10,910 --> 00:08:13,490
我想说的是，那是一个我遇到的第一个攀登进入

181
00:08:13,490 --> 00:08:16,490
我遇到的第一个攀登进入

182
00:08:16,490 --> 00:08:18,905
这个竞技场就是~!@#$%^&*()

183
00:08:18,905 --> 00:08:20,300
确实看起来有很多

184
00:08:20,300 --> 00:08:21,440
的两种情况。

185
00:08:21,440 --> 00:08:22,820
一种是似乎存在很多

186
00:08:22,820 --> 00:08:24,350
存在很多反对意见如果你想要

187
00:08:24,350 --> 00:08:27,050
看待事物的角度不同或者如果你开始

188
00:08:27,050 --> 00:08:28,370
从不同的角度看待事物或者当你开始工作时，获得新的见解。

189
00:08:28,370 --> 00:08:30,500
当你开始处理事情时。

190
00:08:30,500 --> 00:08:34,150
我感觉它是

191
00:08:34,150 --> 00:08:36,340
发展初期的

192
00:08:36,340 --> 00:08:38,290
这种架构对我们来说是为了

193
00:08:38,290 --> 00:08:41,050
发展一种正统观念和

194
00:08:41,050 --> 00:08:42,295
我们如何看待事物。

195
00:08:42,295 --> 00:08:44,500
我认为我们需要保持开放的心态。

196
00:08:44,500 --> 00:08:47,630
因为从一个地方到另一个地方的想法

197
00:08:47,950 --> 00:08:51,425
端点导向的网络连接

198
00:08:51,425 --> 00:08:53,750
对这种网络观点

199
00:08:53,750 --> 00:08:56,240
对这种更加注重数据的网络观点确实不同，我们得绞尽脑汁，

200
00:08:56,240 --> 00:08:58,970
不同，我们得绞尽脑汁，

201
00:08:58,970 --> 00:09:01,520
我们得绞尽脑汁，正如丽莎经常说的，让百花齐放。

202
00:09:01,520 --> 00:09:04,535
让千花竞放。

203
00:09:04,535 --> 00:09:07,640
我遇到了另一个问题。

204
00:09:07,640 --> 00:09:09,440
我认为你之前已经提到过在

205
00:09:09,440 --> 00:09:12,305
开头部分，是代码库。

206
00:09:12,305 --> 00:09:14,840
需要找出我什么 ~!@#$%^&*()

207
00:09:14,840 --> 00:09:17,180
需要并解开事情然后

208
00:09:17,180 --> 00:09:19,280
试图弄清楚代码是从哪里来的

209
00:09:19,280 --> 00:09:22,085
废弃的研究生项目

210
00:09:22,085 --> 00:09:23,690
与核心内容相比。

211
00:09:23,690 --> 00:09:26,450
这非常难以定位。

212
00:09:26,450 --> 00:09:27,275
这非常难以定位。记得我一开始说的，

213
00:09:27,275 --> 00:09:28,730
记得我一开始说的，

214
00:09:28,730 --> 00:09:31,040
我是与Van Jacobson结婚的人。

215
00:09:31,040 --> 00:09:33,575
如果不是Van告诉我的话，

216
00:09:33,575 --> 00:09:36,785
"只管忽略那个，专注于这个，"

217
00:09:36,785 --> 00:09:38,030
''我觉得我本可以只是

218
00:09:38,030 --> 00:09:39,290
像放弃了一样说道，

219
00:09:39,290 --> 00:09:41,045
“这是一个巨大的混乱。”

220
00:09:41,045 --> 00:09:44,750
我也觉得我有权利来自

221
00:09:44,750 --> 00:09:46,220
敢于去尝试

222
00:09:46,220 --> 00:09:48,410
新事物，因为他会说，

223
00:09:48,410 --> 00:09:50,090
''我不喜欢那种做事方式

224
00:09:50,090 --> 00:09:52,265
那就尝试一些不同的方法。

225
00:09:52,265 --> 00:09:54,890
当然，我拥有的另一个优势是

226
00:09:54,890 --> 00:09:56,120
发生在我们世界上的大多数人身上。

227
00:09:56,120 --> 00:09:58,385
发生在我们世界上的大多数人身上。

228
00:09:58,385 --> 00:10:00,695
在2020年3月，

229
00:10:00,695 --> 00:10:02,555
我们开始进入封锁状态。

230
00:10:02,555 --> 00:10:05,360
我过去18个月里，

231
00:10:05,360 --> 00:10:07,970
即使我认为你们大多数人都认识Van，

232
00:10:07,970 --> 00:10:10,250
他现在不再以此为主业了。

233
00:10:10,250 --> 00:10:12,260
但我们已经花费了所有的时间在

234
00:10:12,260 --> 00:10:14,510
我们的晚餐谈话，遛狗，

235
00:10:14,510 --> 00:10:16,250
我们周末聊天，因为没有别的事情要做，

236
00:10:16,250 --> 00:10:17,720
我们周末聊天，因为没有别的事情要做，在过去的18个月里，谈论这个。

237
00:10:17,720 --> 00:10:21,960
在过去的18个月里，谈论这个。

238
00:10:22,060 --> 00:10:24,170
这部分是~!@#$%^&*()

239
00:10:24,170 --> 00:10:25,835
这真的很令人兴奋。

240
00:10:25,835 --> 00:10:27,530
我认为这是其中的一些事情

241
00:10:27,530 --> 00:10:29,420
，就像丽莎谈到的那样

242
00:10:29,420 --> 00:10:32,180
让我们思考一下边缘计算的应用场景。

243
00:10:32,180 --> 00:10:35,900
让我们想出新的方法来做事情。

244
00:10:35,900 --> 00:10:37,820
我认为已经有过

245
00:10:37,820 --> 00:10:41,150
这个过程真的很令人兴奋，而我

246
00:10:41,150 --> 00:10:43,310
真的觉得我们需要一种方式

247
00:10:43,310 --> 00:10:47,210
来向其他人介绍那个。

248
00:10:47,210 --> 00:10:49,160
我没有什么天才的想法，

249
00:10:49,160 --> 00:10:51,065
但我有一些想法。

250
00:10:51,065 --> 00:10:53,090
我总体的想法是

251
00:10:53,090 --> 00:10:55,610
社区需要对...表示欢迎

252
00:10:55,610 --> 00:10:57,410
那些有问题需要解决的人和

253
00:10:57,410 --> 00:11:00,020
提供清晰的使用指南。

254
00:11:00,020 --> 00:11:02,420
我的实际想法是我们可以考虑建立一个网站，

255
00:11:02,420 --> 00:11:06,170
可以考虑建立一个网站，

256
00:11:06,170 --> 00:11:09,635
有几种不同的应用途径。

257
00:11:09,635 --> 00:11:12,020
这里有这种类型的应用途径，可能是会议讲座的应用。

258
00:11:12,020 --> 00:11:15,425
这可能是会议讲座的应用。

259
00:11:15,425 --> 00:11:18,740
进入其中。你如何做到的？怎么做到的？

260
00:11:18,740 --> 00:11:20,360
这就是应用程序，所以

261
00:11:20,360 --> 00:11:21,560
有人可能会拉下来

262
00:11:21,560 --> 00:11:23,450
那段代码并且也许会对其进行一些更改并使其适应他们自己。

263
00:11:23,450 --> 00:11:26,720
对其进行一些更改并使其适应他们自己。

264
00:11:26,720 --> 00:11:29,300
然后，我一直在工作的一些事情

265
00:11:29,300 --> 00:11:31,640
在更公开的领域是物联网，

266
00:11:31,640 --> 00:11:32,945
然后我也一直在

267
00:11:32,945 --> 00:11:34,715
一直在与操作数网络合作，

268
00:11:34,715 --> 00:11:36,050
但这取决于

269
00:11:36,050 --> 00:11:37,730
但这取决于他们想要这份股份。

270
00:11:37,730 --> 00:11:40,640
但你可以拥有一个物联网应用程序，

271
00:11:40,640 --> 00:11:42,410
有人可以拉下来做这件事。

272
00:11:42,410 --> 00:11:45,680
那么其中的另一部分是每一个

273
00:11:45,680 --> 00:11:47,555
这些好看的、大的、友好的

274
00:11:47,555 --> 00:11:50,420
信可能已经联系上了

275
00:11:50,420 --> 00:11:53,060
可能已经联系上了的研究人员或他们的团队是

276
00:11:53,060 --> 00:11:55,610
可能已经联系上了的研究人员或他们的团队是

277
00:11:55,610 --> 00:11:57,500
特别感兴趣的是做

278
00:11:57,500 --> 00:11:58,760
把这个或者是谁放~!@#$%^&*()

279
00:11:58,760 --> 00:12:00,590
将这段代码放出去，以便

280
00:12:00,590 --> 00:12:02,645
有人可以联系他们。

281
00:12:02,645 --> 00:12:04,190
这可能是一个获取

282
00:12:04,190 --> 00:12:05,825
在工业资金方面，

283
00:12:05,825 --> 00:12:07,190
但这也可能是一种方式来

284
00:12:07,190 --> 00:12:08,884
吸引新研究生。

285
00:12:08,884 --> 00:12:10,280
但整个计划就是这样。

286
00:12:10,280 --> 00:12:11,870
需要易于使用，

287
00:12:11,870 --> 00:12:14,510
如果每一件事物都是

288
00:12:14,510 --> 00:12:16,280
围绕着一个特定类型的应用，

289
00:12:16,280 --> 00:12:17,600
围绕着一个特定类型的应用，

290
00:12:17,600 --> 00:12:19,130
这可能是一件好事。

291
00:12:19,130 --> 00:12:21,290
但我在这里不打算这么做，

292
00:12:21,290 --> 00:12:22,460
但我只是说这将会是

293
00:12:22,460 --> 00:12:23,870
一个好东西。

294
00:12:23,870 --> 00:12:26,060
总是很容易告诉别人应该怎么做。

295
00:12:26,060 --> 00:12:28,745
与实际去做相比，只是说说而已。

296
00:12:28,745 --> 00:12:31,625
我可能已经用完了我的时间，但还是谢谢。

297
00:12:31,625 --> 00:12:35,115
>> 谢谢你，凯瑟琳。

298
00:12:35,115 --> 00:12:37,885
接下来是彼得。

299
00:12:37,885 --> 00:12:40,750
彼得·古谢夫是一名软件工程师

300
00:12:40,750 --> 00:12:43,450
和加州大学洛杉矶分校REMAP的研究人员及工作人员。

301
00:12:43,450 --> 00:12:45,340
那是研究与工程

302
00:12:45,340 --> 00:12:47,490
在媒体与表演实验室。

303
00:12:47,490 --> 00:12:49,160
他的主要活动包括

304
00:12:49,160 --> 00:12:51,170
设计和原型制作实时

305
00:12:51,170 --> 00:12:53,060
交互式分布式系统用于

306
00:12:53,060 --> 00:12:55,580
剧院和现场表演。

307
00:12:55,580 --> 00:12:57,815
使用尖端技术

308
00:12:57,815 --> 00:12:59,910
为了实时感应，

309
00:13:00,820 --> 00:13:04,760
媒体处理，增强现实与虚拟现实。

310
00:13:04,760 --> 00:13:07,970
彼得积极参与

311
00:13:07,970 --> 00:13:09,859
NDN应用程序的开发

312
00:13:09,859 --> 00:13:12,170
实时可导航媒体和

313
00:13:12,170 --> 00:13:15,350
混合现实技术，例如NDN（命名数据网络）。

314
00:13:15,350 --> 00:13:17,779
在这个过程中，他也做出了贡献

315
00:13:17,779 --> 00:13:19,070
向开源NDN社区贡献了力量

316
00:13:19,070 --> 00:13:20,300
~!@#$%^&*()

317
00:13:20,300 --> 00:13:22,535
构建NDN工具和库。

318
00:13:22,535 --> 00:13:23,990
一个这样的例子是

319
00:13:23,990 --> 00:13:27,680
用于视频会议的DND RTC库。

320
00:13:27,680 --> 00:13:31,100
他以前的专业背景

321
00:13:31,100 --> 00:13:32,945
是网络软件，

322
00:13:32,945 --> 00:13:34,325
增强现实，

323
00:13:34,325 --> 00:13:35,780
移动应用开发，

324
00:13:35,780 --> 00:13:37,670
和视频流媒体软件。

325
00:13:37,670 --> 00:13:39,410
彼得拥有学士学位

326
00:13:39,410 --> 00:13:41,120
和硕士学位专业是

327
00:13:41,120 --> 00:13:42,950
Informatics and Computer Science from 和硕士学位专业是 информатика и вычислительная техника от

328
00:13:42,950 --> 00:13:44,180
Bauman Moscow State Technical University

329
00:13:44,180 --> 00:13:45,755
工业大学，

330
00:13:45,755 --> 00:13:47,600
以及硕士学位专业是

331
00:13:47,600 --> 00:13:49,430
商业信息系统专业来自 Throswap University of Technology.

332
00:13:49,430 --> 00:13:52,890
特罗斯瓦普理工大学。

333
00:13:53,080 --> 00:13:56,240
彼得，开始吧。

334
00:13:56,240 --> 00:13:59,690
>> 谢谢，达维德。对不起，文本有点长，

335
00:13:59,690 --> 00:14:01,740
我应该把它缩短一些。

336
00:14:02,290 --> 00:14:04,895
你看到我的幻灯片了吗？

337
00:14:04,895 --> 00:14:08,630
>> 是的。

338
00:14:08,630 --> 00:14:12,080
>> 希望我的演讲

339
00:14:12,080 --> 00:14:13,865
将会简短迅速。

340
00:14:13,865 --> 00:14:16,490
我一直参与着NDN工作，在不同的职能中度过了过去八年。

341
00:14:16,490 --> 00:14:20,660
在不同的职能中度过了过去八年。

342
00:14:20,660 --> 00:14:23,900
我没有积极参与

343
00:14:23,900 --> 00:14:25,985
过去的两年里

344
00:14:25,985 --> 00:14:30,110
目前我又回到了一个小项目上。

345
00:14:30,110 --> 00:14:34,100
我有一些构建NDN库的经验。

346
00:14:34,100 --> 00:14:38,490
自2013年以来，我有一些构建NDN（命名数据网络）库和应用程序的经验。

347
00:14:38,890 --> 00:14:42,050
我认为主要的难点是

348
00:14:42,050 --> 00:14:45,455
我认为主要的难点是那个NDN项目缺乏人手，

349
00:14:45,455 --> 00:14:47,930
的人将致力于

350
00:14:47,930 --> 00:14:51,540
他们将致力于使NDN平台用户友好。

351
00:14:54,310 --> 00:14:56,705
这是一个复杂的问题。

352
00:14:56,705 --> 00:15:00,770
我们将会在本次会议中讨论这个问题。

353
00:15:00,770 --> 00:15:02,525
我们将会在本次会议中讨论这个问题。

354
00:15:02,525 --> 00:15:04,760
但我现在想要集中讨论

355
00:15:04,760 --> 00:15:07,265
在少数几件确实如此的事情上，

356
00:15:07,265 --> 00:15:09,650
我认为从我的立场来看

357
00:15:09,650 --> 00:15:11,915
的应用程序开发者，

358
00:15:11,915 --> 00:15:15,890
我会说被宠坏的应用程序开发者，

359
00:15:15,890 --> 00:15:20,940
现代网络命名数据（NDN）应该具备的一些特性。

360
00:15:22,030 --> 00:15:24,110
今天被宠坏了

361
00:15:24,110 --> 00:15:25,820
应用程序开发者像我这样的人，

362
00:15:25,820 --> 00:15:27,860
他们希望能上一个网站并且

363
00:15:27,860 --> 00:15:31,865
他们希望能看到一个快速入门指南。

364
00:15:31,865 --> 00:15:33,830
他们听说了一些关于~!@#$%^&*()

365
00:15:33,830 --> 00:15:34,880
他们听说了一些关于这项技术，然后他们想要立刻尝试一下。

366
00:15:34,880 --> 00:15:37,040
他们想要立刻尝试一下。

367
00:15:37,040 --> 00:15:39,035
在最初的15分钟里，

368
00:15:39,035 --> 00:15:40,970
他们想要一起玩耍

369
00:15:40,970 --> 00:15:42,530
它，然后决定是否他们

370
00:15:42,530 --> 00:15:43,835
想要更进一步

371
00:15:43,835 --> 00:15:47,150
想要查看有哪些库可用，

372
00:15:47,150 --> 00:15:51,005
要查看有哪些用例可以被这项技术覆盖

373
00:15:51,005 --> 00:15:52,805
可以被这项技术覆盖

374
00:15:52,805 --> 00:15:55,650
可以开始构建他们自己的应用程序。

375
00:15:55,660 --> 00:16:01,085
当我访问IPFS的主网站时，

376
00:16:01,085 --> 00:16:07,085
我看到了关于IPFS的巨大字母，

377
00:16:07,085 --> 00:16:08,540
它是什么，它就是

378
00:16:08,540 --> 00:16:10,340
它是什么，它就是，只有四个字，然后有两个按钮，

379
00:16:10,340 --> 00:16:11,360
然后有两个按钮，

380
00:16:11,360 --> 00:16:13,365
开始使用和它的工作原理。

381
00:16:13,365 --> 00:16:18,050
很清楚。那么你可以去查看一下。

382
00:16:18,050 --> 00:16:21,650
名称数据网络网站及其

383
00:16:21,650 --> 00:16:24,350
相当难以弄清楚我应该从哪里开始。

384
00:16:24,350 --> 00:16:25,910
弄清楚我应该从哪里开始。

385
00:16:25,910 --> 00:16:30,050
即使是常见问题，

386
00:16:30,050 --> 00:16:32,660
他们没有这个问题的答案；

387
00:16:32,660 --> 00:16:34,500
我该从哪里开始？

388
00:16:36,280 --> 00:16:38,540
快速入门指南我认为

389
00:16:38,540 --> 00:16:40,910
是NDN必不可少的。

390
00:16:40,910 --> 00:16:44,360
The other thing that I think is confusing is the number of

我认为令人困惑的另一件事是数量的多少。

391
00:16:44,360 --> 00:16:46,910
我认为令人困惑的是数量的多少。

392
00:16:46,910 --> 00:16:48,170
不同的图书馆我们~!@#$%^&*()

393
00:16:48,170 --> 00:16:50,015
have for NDN and it's ~!@#$%^&*()

394
00:16:50,015 --> 00:16:54,420
不清楚该使用哪一个。

395
00:16:55,870 --> 00:16:58,550
我认为自从我加入项目以来，

396
00:16:58,550 --> 00:17:02,250
我们有ADN CPP，然后是NDN CXX。

397
00:17:03,240 --> 00:17:06,155
当我和其他人谈论

398
00:17:06,155 --> 00:17:09,260
我正在做的项目，

399
00:17:09,820 --> 00:17:13,100
第二个问题是为什么

400
00:17:13,100 --> 00:17:14,510
你在使用NDN CPP吗？

401
00:17:14,510 --> 00:17:16,820
NDN CXX与NDN CPP有什么区别？

402
00:17:16,820 --> 00:17:18,535
我感到困惑。

403
00:17:18,535 --> 00:17:19,915
我之前不知道

404
00:17:19,915 --> 00:17:22,660
有什么不同，我为什么要使用它？

405
00:17:22,740 --> 00:17:25,135
我认为应该有

406
00:17:25,135 --> 00:17:27,885
一个高级的单一库。

407
00:17:27,885 --> 00:17:31,020
By high level, I mean a library 是指一个高级的库。

408
00:17:31,020 --> 00:17:34,870
这是面向数据的，

409
00:17:34,870 --> 00:17:37,120
提供面向数据的API。

410
00:17:37,120 --> 00:17:39,040
这意味着我不必在意

411
00:17:39,040 --> 00:17:42,130
关于兴趣和数据包，

412
00:17:42,130 --> 00:17:43,570
我唯一需要关心的是

413
00:17:43,570 --> 00:17:46,870
我唯一需要关心的是从网络上获取我的数据。The library hopefully will

414
00:17:46,870 --> 00:17:49,990
图书馆希望能够

415
00:17:49,990 --> 00:17:51,900
处理多个部分，

416
00:17:51,900 --> 00:17:55,170
它将处理验证工作

417
00:17:55,170 --> 00:17:57,070
如果我提供了密钥，

418
00:17:57,070 --> 00:18:01,460
它将体现NDN原则

419
00:18:01,460 --> 00:18:03,140
像数据不可变性，

420
00:18:03,140 --> 00:18:04,940
并且它不允许我创建

421
00:18:04,940 --> 00:18:07,580
两个不同的数据对象

422
00:18:07,580 --> 00:18:09,630
具有相同名称。

423
00:18:12,520 --> 00:18:15,350
如果它能帮助我处理

424
00:18:15,350 --> 00:18:17,540
处理我的证书，这样我就不用

425
00:18:17,540 --> 00:18:21,290
处理我的证书，这样我就不用担心我应该如何签字，如果我想部署

426
00:18:21,290 --> 00:18:23,780
处理我的证书，这样我就不用担心我应该如何签字，如果我想部署。

427
00:18:23,780 --> 00:18:27,305
本地网络中有n个节点，

428
00:18:27,305 --> 00:18:28,520
如何设置

429
00:18:28,520 --> 00:18:31,235
层级关系，

430
00:18:31,235 --> 00:18:34,080
还是应该是一个信任网络？

431
00:18:36,760 --> 00:18:39,200
图书馆可以帮助我去做

432
00:18:39,200 --> 00:18:41,730
那在某种程度上。

433
00:18:42,670 --> 00:18:46,835
那年的另一个重点是

434
00:18:46,835 --> 00:18:49,085
建立NFD

435
00:18:49,085 --> 00:18:51,590
建立导电性。

436
00:18:51,590 --> 00:18:54,995
NDN总是在谈论以数据为中心。

437
00:18:54,995 --> 00:18:58,490
但一旦你开始使用它，

438
00:18:58,490 --> 00:19:00,695
你必须考虑到主机，

439
00:19:00,695 --> 00:19:01,970
他们是如何连接的，是否连接了？

440
00:19:01,970 --> 00:19:04,160
他们连接了吗？

441
00:19:04,160 --> 00:19:07,130
这些路线是什么？它们正确吗？

442
00:19:07,130 --> 00:19:09,470
然后你开始检查

443
00:19:09,470 --> 00:19:11,975
一天之内重复它20次因为

444
00:19:11,975 --> 00:19:14,120
数据包未能到达或者

445
00:19:14,120 --> 00:19:17,705
某些设置配置不当。

446
00:19:17,705 --> 00:19:23,940
手动配置是一个很大的缺点。

447
00:19:25,750 --> 00:19:29,040
作为演示示例，

448
00:19:29,470 --> 00:19:33,980
让我们展示一些演示示例。

449
00:19:33,980 --> 00:19:35,450
不是那些玩具应用程序，

450
00:19:35,450 --> 00:19:39,290
但是更接近现实的东西，这些

451
00:19:39,290 --> 00:19:41,720
只是两个例子

452
00:19:41,720 --> 00:19:44,465
我脑海中想到的，我正在研究的，

453
00:19:44,465 --> 00:19:47,480
所以这些就像是

454
00:19:47,480 --> 00:19:49,130
多宿主技术用于

455
00:19:49,130 --> 00:19:52,200
您的数据，冗余存储。

456
00:19:52,360 --> 00:19:55,100
这是NDN可以提供的东西，与IP相比具有明显的优势。

457
00:19:55,100 --> 00:19:59,015
可以提供与IP相比明显的好处。

458
00:19:59,015 --> 00:20:02,840
边缘服务比如机器学习，

459
00:20:02,840 --> 00:20:05,105
处理您的生活媒体，

460
00:20:05,105 --> 00:20:08,255
并处理这些数据

461
00:20:08,255 --> 00:20:10,130
由机器学习产生

462
00:20:10,130 --> 00:20:12,305
节点，我们正在移动它

463
00:20:12,305 --> 00:20:13,340
移动到管道中

464
00:20:13,340 --> 00:20:15,930
您的申请人分布式应用程序。

465
00:20:17,140 --> 00:20:21,500
也许再加一张幻灯片来举例说明

466
00:20:21,500 --> 00:20:23,120
我想要的API

467
00:20:23,120 --> 00:20:26,910
在NDN库中看到的。

468
00:20:28,720 --> 00:20:32,135
The API that to me looks very ~!@#$%^&*()

469
00:20:32,135 --> 00:20:34,460
数据为中心的地方，我不需要

470
00:20:34,460 --> 00:20:37,640
担心利益问题。

471
00:20:37,640 --> 00:20:39,140
我不必担心

472
00:20:39,140 --> 00:20:41,435
组装我的物体在哪里

473
00:20:41,435 --> 00:20:44,820
从多个数据包中。

474
00:20:44,860 --> 00:20:47,555
我只是对此作出反应

475
00:20:47,555 --> 00:20:49,700
借用术语

476
00:20:49,700 --> 00:20:51,185
来自响应式编程，

477
00:20:51,185 --> 00:20:52,610
我想要做出反应，在

478
00:20:52,610 --> 00:20:55,130
同步的方式去

479
00:20:55,130 --> 00:20:58,860
物体到达并促使网络响应。

480
00:21:00,340 --> 00:21:04,190
我认为我这边已经结束了。

481
00:21:04,190 --> 00:21:06,785
>> 谢谢。谢谢，彼得。

482
00:21:06,785 --> 00:21:08,675
下一个环节，但我想欢迎

483
00:21:08,675 --> 00:21:10,010
to the stage Marcin Spoczynski

484
00:21:10,010 --> 00:21:12,560
登上舞台的是Marcin Spoczynski

485
00:21:12,560 --> 00:21:13,970
是一位高级研究员在

486
00:21:13,970 --> 00:21:15,710
科学家在Inter实验室工作。

487
00:21:15,710 --> 00:21:17,720
他的研究兴趣在于~!@#$%^&*()

488
00:21:17,720 --> 00:21:20,375
边缘和云网络与计算设计，

489
00:21:20,375 --> 00:21:22,265
卸载云应用程序，

490
00:21:22,265 --> 00:21:23,375
工业控制，

491
00:21:23,375 --> 00:21:25,655
印度的确定性网络。

492
00:21:25,655 --> 00:21:28,339
他有超过15年的经验。

493
00:21:28,339 --> 00:21:29,540
在设计和开发

494
00:21:29,540 --> 00:21:30,935
端到端系统，

495
00:21:30,935 --> 00:21:32,690
网络应用与软件

496
00:21:32,690 --> 00:21:36,480
架构。Marcin, 接下来由你来讲。

497
00:21:37,660 --> 00:21:41,105
>> 让我分享屏幕。

498
00:21:41,105 --> 00:21:44,490
你们似乎有些问题。

499
00:21:48,940 --> 00:21:51,860
我不知道你是否能看到幻灯片。

500
00:21:51,860 --> 00:21:54,020
我认为我有一些问题。

501
00:21:54,020 --> 00:21:58,025
全屏模式。你能看到幻灯片吗？

502
00:21:58,025 --> 00:21:59,720
>> 是的。

503
00:21:59,720 --> 00:22:02,000
>> 好的。我不知道为什么但它不起作用。

504
00:22:02,000 --> 00:22:03,890
我不知道为什么但它不起作用。

505
00:22:03,890 --> 00:22:05,945
我将以不同的方式开始。

506
00:22:05,945 --> 00:22:08,630
我认为我们所在的位置，

507
00:22:08,630 --> 00:22:12,335
我们正在看到很多工作

508
00:22:12,335 --> 00:22:14,240
和尤其是在商业领域

509
00:22:14,240 --> 00:22:17,430
支持边缘系统。

510
00:22:17,980 --> 00:22:20,720
根据我的理解，

511
00:22:20,720 --> 00:22:22,280
和我们所做的研究，

512
00:22:22,280 --> 00:22:24,410
有很多机会用于

513
00:22:24,410 --> 00:22:28,250
NDN 将成为这一 Azure 进化的一部分。

514
00:22:28,250 --> 00:22:34,175
但我们首先想要看到的是，

515
00:22:34,175 --> 00:22:36,275
尤其是，许多这样的，

516
00:22:36,275 --> 00:22:38,330
Edge开发者们将要

517
00:22:38,330 --> 00:22:40,715
成为学生或者

518
00:22:40,715 --> 00:22:42,050
成为学生或者刚刚~!@#$%^&*()

519
00:22:42,050 --> 00:22:46,445
开始软件行业生涯等等。

520
00:22:46,445 --> 00:22:48,350
实际上我们想要看到在

521
00:22:48,350 --> 00:22:49,820
与其他人相比

522
00:22:49,820 --> 00:22:51,545
[笑声] 我们之前就在这里

523
00:22:51,545 --> 00:22:55,865
支持更多分散的语言。

524
00:22:55,865 --> 00:22:59,210
例如，我们知道我们有这个，

525
00:22:59,210 --> 00:23:00,950
我们的目标和支持在~!@#$%^&*()

526
00:23:00,950 --> 00:23:04,160
在NDN案例中的那一刻，但我们想要看到那些

527
00:23:04,160 --> 00:23:05,990
想要看到那些

528
00:23:05,990 --> 00:23:07,670
酷炫的语言，例如harass

529
00:23:07,670 --> 00:23:11,605
可以通过NDN得到支持。

530
00:23:11,605 --> 00:23:14,230
我确信那里需要的更少，即使在像

531
00:23:14,230 --> 00:23:16,780
那里需要的更少，即使在像这样的空间中。

532
00:23:16,780 --> 00:23:20,560
在那些像胶体一样的语言中

533
00:23:20,560 --> 00:23:26,260
C++和C因为很多推动，

534
00:23:26,260 --> 00:23:28,850
它是关于写作的。

535
00:23:28,850 --> 00:23:31,850
这些软件的部分很容易。

536
00:23:31,850 --> 00:23:33,320
我认为这很棒

537
00:23:33,320 --> 00:23:34,940
抓住机会总结一下

538
00:23:34,940 --> 00:23:37,850
对于任何新的软件开发者甚至

539
00:23:37,850 --> 00:23:43,989
将其交付给业务部门，

540
00:23:43,989 --> 00:23:47,305
是为了让那些支持

541
00:23:47,305 --> 00:23:49,750
那些新的云原生软件和

542
00:23:49,750 --> 00:23:51,130
尤其是它们带来的

543
00:23:51,130 --> 00:23:52,780
很多支持，

544
00:23:52,780 --> 00:23:57,690
特别是与安全等方面有关。

545
00:23:58,030 --> 00:24:03,590
另一个我认为非常

546
00:24:03,590 --> 00:24:06,665
重要的是提供

547
00:24:06,665 --> 00:24:08,030
这座桥梁是连接

548
00:24:08,030 --> 00:24:10,790
这座桥梁是连接商业和研究的。

549
00:24:10,790 --> 00:24:14,000
这是一种特殊情况，因为我见过它们。

550
00:24:14,000 --> 00:24:17,090
提出问题，

551
00:24:17,090 --> 00:24:18,815
为什么研究人员会

552
00:24:18,815 --> 00:24:20,840
需要对大脑进行

553
00:24:20,840 --> 00:24:23,420
需要对大脑进行整合以消除局限性，因为这不是一项研究。

554
00:24:23,420 --> 00:24:25,535
这不是一项研究。

555
00:24:25,535 --> 00:24:28,670
问题在于，商业永远不会，

556
00:24:28,670 --> 00:24:31,415
在大多数情况下，一个人会取一个代码，

557
00:24:31,415 --> 00:24:34,055
如果没人看到，这是一种简单的方式。

558
00:24:34,055 --> 00:24:38,120
接近软件的方式。

559
00:24:38,120 --> 00:24:40,640
如果没有这种集成，哪个

560
00:24:40,640 --> 00:24:44,359
意味着出色的API和集成

561
00:24:44,359 --> 00:24:47,239
带有所有那些自动化软件

562
00:24:47,239 --> 00:24:49,250
和他们中的大多数将会

563
00:24:49,250 --> 00:24:51,740
永远也抓不到，即使他们看见了

564
00:24:51,740 --> 00:24:54,905
它们清晰的收益。

565
00:24:54,905 --> 00:24:59,030
结合这一点，因为我们主要是在~!@#$%^&*()

566
00:24:59,030 --> 00:25:03,425
这个数据驱动的部分，对于数据驱动来说，

567
00:25:03,425 --> 00:25:05,480
我们需要有

568
00:25:05,480 --> 00:25:09,590
我们需要有 those observability tools.. At this moment, as I show, we must be using

569
00:25:09,590 --> 00:25:11,870
正如我所示，我们必须使用

570
00:25:11,870 --> 00:25:14,300
我们必须使用那些IP工具来进行可观测性。

571
00:25:14,300 --> 00:25:15,875
但我们希望看到的是，

572
00:25:15,875 --> 00:25:18,110
它只是一种本地化的支持方式

573
00:25:18,110 --> 00:25:21,034
这些与时间序列数据库一起使用

574
00:25:21,034 --> 00:25:23,930
或者拥有可能性

575
00:25:23,930 --> 00:25:28,250
以NDN方式运行查询？

576
00:25:28,250 --> 00:25:30,440
我，特别是当你看到地址空间时

577
00:25:30,440 --> 00:25:34,070
那些时间序列数据库。

578
00:25:34,070 --> 00:25:37,250
你会看到很多东西在

579
00:25:37,250 --> 00:25:41,910
与Windows NDN系统有很多共同之处。

580
00:25:42,580 --> 00:25:46,820
下一个要点是，

581
00:25:46,820 --> 00:25:49,595
它是一种思考，那些如何，

582
00:25:49,595 --> 00:25:53,465
NFD组件与软件，

583
00:25:53,465 --> 00:25:57,030
像对时间敏感的混乱事务。

584
00:25:57,130 --> 00:26:00,980
看着边缘和许多

585
00:26:00,980 --> 00:26:02,180
边缘用例和

586
00:26:02,180 --> 00:26:03,935
并不完全是工业的，

587
00:26:03,935 --> 00:26:05,630
我们看到了许多需求

588
00:26:05,630 --> 00:26:07,730
是为了有界延迟。

589
00:26:07,730 --> 00:26:11,089
但这种有界延迟应该以某种方式

590
00:26:11,089 --> 00:26:15,300
在这个NFD工作中暴露出来。

591
00:26:15,580 --> 00:26:19,280
我认为那是其中之一

592
00:26:19,280 --> 00:26:23,660
关键研究如何实际应用

593
00:26:23,660 --> 00:26:26,495
时限的概念

594
00:26:26,495 --> 00:26:30,335
对于块延迟或

595
00:26:30,335 --> 00:26:33,770
对于那些系统以及如何暴露

596
00:26:33,770 --> 00:26:38,430
这甚至包括与API开发者的合作。

597
00:26:38,500 --> 00:26:41,750
这是最后的，也是最多的。

598
00:26:41,750 --> 00:26:44,210
这是Edge所需工作的一部分，

599
00:26:44,210 --> 00:26:47,645
这就是我们提供那些钩子的方式。

600
00:26:47,645 --> 00:26:51,080
为了适应多种类型和

601
00:26:51,080 --> 00:26:52,220
尤其是我们拥有

602
00:26:52,220 --> 00:26:54,200
存在许多异质性，

603
00:26:54,200 --> 00:26:56,780
或从 x86 通过

604
00:26:56,780 --> 00:27:01,534
我支持的不同架构。

605
00:27:01,534 --> 00:27:04,790
我认为有很多需求，

606
00:27:04,790 --> 00:27:11,200
但问题是我只是认为它仅仅

607
00:27:11,200 --> 00:27:14,200
表明了那种可行性。

608
00:27:14,200 --> 00:27:18,940
可以轻松转化为业务需求，

609
00:27:18,940 --> 00:27:20,975
但这是必需的，

610
00:27:20,975 --> 00:27:22,355
我确实相信它的很多部分，

611
00:27:22,355 --> 00:27:23,885
从图书馆穿过

612
00:27:23,885 --> 00:27:26,225
集成等等。

613
00:27:26,225 --> 00:27:27,530
但那当然，

614
00:27:27,530 --> 00:27:29,630
它可以轻松地询问

615
00:27:29,630 --> 00:27:33,420
它可以轻松地询问企业来支持你的工作。Thank you.

616
00:27:35,580 --> 00:27:38,060
谢谢。

617
00:27:38,700 --> 00:27:41,680
>> 非常感谢你，Marcin。

618
00:27:41,680 --> 00:27:44,485
约翰，轮到你了。

619
00:27:44,485 --> 00:27:47,710
约翰·德哈特是一位高级研究科学家，在

620
00:27:47,710 --> 00:27:49,090
华盛顿大学圣路易斯分校的应用研究实验室

621
00:27:49,090 --> 00:27:51,535
华盛顿大学圣路易斯分校。

622
00:27:51,535 --> 00:27:53,440
他一直在研究网络原型。

623
00:27:53,440 --> 00:27:54,820
用于研究和开发

624
00:27:54,820 --> 00:27:57,085
网络部署和管理

625
00:27:57,085 --> 00:27:59,980
在过去的32年里。

626
00:27:59,980 --> 00:28:01,570
除了管理

627
00:28:01,570 --> 00:28:03,190
全球NDN测试床，

628
00:28:03,190 --> 00:28:05,530
他还管理着开放网络实验室，在

629
00:28:05,530 --> 00:28:08,140
他还在华盛顿大学工作，并且一直是团队的一部分

630
00:28:08,140 --> 00:28:10,405
26个实验室由纯粹的团队点缀。

631
00:28:10,405 --> 00:28:14,899
进行战术NDN网络仿真。

632
00:28:16,350 --> 00:28:19,240
>> 谢谢Davide。我将要讲述

633
00:28:19,240 --> 00:28:21,820
关于NDN测试平台以及它如何

634
00:28:21,820 --> 00:28:24,655
与我们的应用程序开发相结合

635
00:28:24,655 --> 00:28:27,305
和我们接下来应该怎么做。

636
00:28:27,305 --> 00:28:30,345
首先，我只想

637
00:28:30,345 --> 00:28:32,910
为那些可能还不熟悉测试平台是什么的人强调

638
00:28:32,910 --> 00:28:35,195
对于那些可能还不熟悉测试平台是什么的人来说，它是一个我们共享的资源。

639
00:28:35,195 --> 00:28:37,480
它是我们共享的资源。

640
00:28:37,480 --> 00:28:40,795
运行在一个全球性的测试平台上。

641
00:28:40,795 --> 00:28:43,614
目前有36个节点

642
00:28:43,614 --> 00:28:47,080
在五大洲的18个国家里，

643
00:28:47,080 --> 00:28:49,120
我们还没有完全到达

644
00:28:49,120 --> 00:28:52,495
我们还没有完全到达澳大利亚和南极洲。

645
00:28:52,495 --> 00:28:56,290
每个节点运行完整的套件

646
00:28:56,290 --> 00:28:57,730
的NDN软件，

647
00:28:57,730 --> 00:28:59,695
转发路由守护进程

648
00:28:59,695 --> 00:29:02,455
以及其他各种守护进程。

649
00:29:02,455 --> 00:29:07,465
我们一直在寻找新的网站加入。

650
00:29:07,465 --> 00:29:09,324
您专门提供一台机器，

651
00:29:09,324 --> 00:29:11,530
托管实体或虚拟的

652
00:29:11,530 --> 00:29:14,710
节点并指定一个人来

653
00:29:14,710 --> 00:29:17,050
担任物理本地操作员

654
00:29:17,050 --> 00:29:18,865
如果我们需要手动干预

655
00:29:18,865 --> 00:29:20,260
我们需要在现场进行干预。

656
00:29:20,260 --> 00:29:22,090
我们管理测试平台。

657
00:29:22,090 --> 00:29:24,970
来自圣路易斯的华盛顿大学。

658
00:29:24,970 --> 00:29:28,150
我们使用Ansible去执行外部操作并且

659
00:29:28,150 --> 00:29:29,890
维护版本的

660
00:29:29,890 --> 00:29:31,960
所有节点上的一切。

661
00:29:31,960 --> 00:29:33,850
~!@#$%^&*()

662
00:29:33,850 --> 00:29:36,310
当地操作员去做。

663
00:29:36,310 --> 00:29:39,399
试验台可供任何人使用。

664
00:29:39,399 --> 00:29:41,680
我们有的证书要么是基于场所的，要么是访客证书。

665
00:29:41,680 --> 00:29:44,570
基于场所的或访客证书。

666
00:29:44,880 --> 00:29:47,755
底部的链接用于

667
00:29:47,755 --> 00:29:50,410
状态页面用于显示当前状态

668
00:29:50,410 --> 00:29:53,260
如何找到Testbed以及如何加入

669
00:29:53,260 --> 00:29:57,325
如果你想加入Testbed的信息。

670
00:29:57,325 --> 00:30:00,205
我们从这里去哪里？

671
00:30:00,205 --> 00:30:03,700
人们经常问我的一个重大问题是，嗯，

672
00:30:03,700 --> 00:30:05,455
谁使用那个测试平台？

673
00:30:05,455 --> 00:30:07,240
这是一个非常好的问题。

674
00:30:07,240 --> 00:30:09,415
我没有一个真正好的答案。

675
00:30:09,415 --> 00:30:13,015
我有一个超级用户。

676
00:30:13,015 --> 00:30:15,610
总是在做事情的

677
00:30:15,610 --> 00:30:18,175
总是让我保持警觉。

678
00:30:18,175 --> 00:30:20,110
我非常感激

679
00:30:20,110 --> 00:30:23,900
江小在外面忙碌着。

680
00:30:24,840 --> 00:30:27,700
我对其他人很好奇，

681
00:30:27,700 --> 00:30:29,170
谁尝试过使用它，

682
00:30:29,170 --> 00:30:31,705
谁在努力，谁在做什么，

683
00:30:31,705 --> 00:30:33,205
你是如何使用的？

684
00:30:33,205 --> 00:30:35,995
你在做什么实验？

685
00:30:35,995 --> 00:30:38,050
你在使用什么服务和应用？

686
00:30:38,050 --> 00:30:40,300
尝试运行和托管在

687
00:30:40,300 --> 00:30:43,360
测试平台上，然后

688
00:30:43,360 --> 00:30:44,770
使用测试平台时，然后会使得使用Testbed更加容易和更好。

689
00:30:44,770 --> 00:30:47,290
使用Testbed将会更加容易和更好。

690
00:30:47,290 --> 00:30:49,060
当然一些事情

691
00:30:49,060 --> 00:30:50,290
我们正在看到

692
00:30:50,290 --> 00:30:53,230
在我们讨论过的Slack频道里已经有了，

693
00:30:53,230 --> 00:30:56,515
这些是像教程和模板这样的东西。

694
00:30:56,515 --> 00:30:58,540
我该如何为~!@#$%^&*()选择名字？

695
00:30:58,540 --> 00:31:01,120
我的数据，来自我的实验？

696
00:31:01,120 --> 00:31:02,380
我如何得到我的名字？

697
00:31:02,380 --> 00:31:04,615
测试平台上的前缀是怎么知道的？

698
00:31:04,615 --> 00:31:07,735
它将如何被路由到我所在的位置？

699
00:31:07,735 --> 00:31:10,750
它将在哪里运行我的服务或应用程序。

700
00:31:10,750 --> 00:31:13,750
我如何将我的机器连接到

701
00:31:13,750 --> 00:31:17,005
to a specific Testbed node?

702
00:31:17,005 --> 00:31:21,610
如果我想要运行系统

703
00:31:21,610 --> 00:31:23,875
遍布世界各地的连接到

704
00:31:23,875 --> 00:31:26,410
遍布世界各地的本地站点。

705
00:31:26,410 --> 00:31:28,750
如何在该国租用虚拟机

706
00:31:28,750 --> 00:31:31,855
并将其连接到测试平台。

707
00:31:31,855 --> 00:31:35,935
只是所有那些有用的创业提示

708
00:31:35,935 --> 00:31:37,195
那些人会有

709
00:31:37,195 --> 00:31:38,530
those people will have the research themselves. If we can find out.

710
00:31:38,530 --> 00:31:41,050
如果我们能找出来

711
00:31:41,050 --> 00:31:43,060
如果我们能找出来什么会让那变得更

712
00:31:43,060 --> 00:31:44,260
对人们更有用

713
00:31:44,260 --> 00:31:46,430
使这些提示可用。

714
00:31:46,430 --> 00:31:48,795
许多其他的测试平台

715
00:31:48,795 --> 00:31:51,630
存在于世界各地。

716
00:31:51,630 --> 00:31:53,490
这会有帮助吗？

717
00:31:53,490 --> 00:31:54,570
互操作性

718
00:31:54,570 --> 00:31:57,005
与其他一些测试平台有关联吗？

719
00:31:57,005 --> 00:32:00,070
安全性，我们总是在讨论这个话题。

720
00:32:00,070 --> 00:32:04,450
安全性对于NDN的重要性。

721
00:32:04,450 --> 00:32:07,630
我们是否拥有你作为用户现在所需的基础设施？

722
00:32:07,630 --> 00:32:09,880
用户现在需要

723
00:32:09,880 --> 00:32:12,475
或者是不是缺少了某部分内容？

724
00:32:12,475 --> 00:32:15,370
再次，教程和模板用于

725
00:32:15,370 --> 00:32:19,090
您如何利用NDN安全性。

726
00:32:19,090 --> 00:32:21,970
那么，正如我总是被提醒的那样

727
00:32:21,970 --> 00:32:24,910
我以前被称为超级用户，

728
00:32:24,910 --> 00:32:27,729
更加定期和频繁的更新

729
00:32:27,729 --> 00:32:30,340
对测试平台上的软件需要更加定期和频繁的更新，以保持其与正在发生的事情同步。

730
00:32:30,340 --> 00:32:32,950
保持其与正在发生的事情同步

731
00:32:32,950 --> 00:32:36,200
完成了开发工作。

732
00:32:36,200 --> 00:32:38,825
我就到这里了，Davide。

733
00:32:38,825 --> 00:32:42,100
>> 非常好。谢谢你，John。

734
00:32:42,100 --> 00:32:46,720
我们将转向马欣宇。

735
00:32:46,720 --> 00:32:48,610
他是一名博士研究生，在

736
00:32:48,610 --> 00:32:50,440
他是一名博士研究生，在加州大学洛杉矶分校，在Lisa Jiang教授的指导下。

737
00:32:50,440 --> 00:32:52,165
他目前的研究重点是江莉莎教授。

738
00:32:52,165 --> 00:32:54,490
他目前的研究重点是

739
00:32:54,490 --> 00:32:56,635
他目前的研究重点是天线应用和库。

740
00:32:56,635 --> 00:32:59,335
这是该面板的完美匹配。

741
00:32:59,335 --> 00:33:02,750
他是当前的维护者。

742
00:33:06,210 --> 00:33:10,210
~!@#$%^&*()

743
00:33:10,210 --> 00:33:12,400
>> 谢谢。我是说，

744
00:33:12,400 --> 00:33:13,600
他是目前的维护者

745
00:33:13,600 --> 00:33:15,339
Python NDN库

746
00:33:15,339 --> 00:33:17,920
和黄色的NFT文件夹。

747
00:33:17,920 --> 00:33:21,500
鑫宇，你可以开始了。

748
00:33:23,370 --> 00:33:26,170
>> 嗨，这是一个很好的机会

749
00:33:26,170 --> 00:33:28,975
对我来说，加入这个小组是一个很好的机会。

750
00:33:28,975 --> 00:33:32,620
我想分享的是被赋予的力量。

751
00:33:32,620 --> 00:33:36,985
开发者通过一个更高级别的库获得支持。

752
00:33:36,985 --> 00:33:39,940
许多现有的库

753
00:33:39,940 --> 00:33:42,010
发送许多好的设计到这里。

754
00:33:42,010 --> 00:33:43,840
我认为我们有诸如此类的。

755
00:33:43,840 --> 00:33:46,270
我们有SVS，而且为了安全，我们还有

756
00:33:46,270 --> 00:33:48,610
访问控制和模式化信任

757
00:33:48,610 --> 00:33:50,050
并允许其他事物

758
00:33:50,050 --> 00:33:51,880
例如顶点语言，

759
00:33:51,880 --> 00:33:53,545
~!@#$%^&*()

760
00:33:53,545 --> 00:33:59,439
为了存储，我们有奖励的涟漪。

761
00:33:59,439 --> 00:34:01,180
或者至少

762
00:34:01,180 --> 00:34:04,285
一些更复杂的应用程序。

763
00:34:04,285 --> 00:34:06,625
如果能得到帮助，那就太好了。

764
00:34:06,625 --> 00:34:09,175
我们可以轻松地将它们结合起来。

765
00:34:09,175 --> 00:34:12,985
例如，在HTTP世界中，

766
00:34:12,985 --> 00:34:14,560
我仍然记得当我

767
00:34:14,560 --> 00:34:17,050
我第一次尝试建立一个网站时，

768
00:34:17,050 --> 00:34:19,000
一个名为triangle的Python库帮助

769
00:34:19,000 --> 00:34:21,280
对我帮助很大，因为它

770
00:34:21,280 --> 00:34:23,905
不仅提供了HTTP服务器，

771
00:34:23,905 --> 00:34:26,515
它还有助于数据库管理，

772
00:34:26,515 --> 00:34:29,300
这正是我需要的。

773
00:34:29,310 --> 00:34:32,980
我想做的是我

774
00:34:32,980 --> 00:34:35,980
简单地说，应该有一个共同的接口用于

775
00:34:35,980 --> 00:34:37,540
这些不同的想法或者

776
00:34:37,540 --> 00:34:39,490
设计，以便它们可以被使用

777
00:34:39,490 --> 00:34:41,380
集成在一个项目中通过

778
00:34:41,380 --> 00:34:44,050
应用程序开发者可以轻松地。

779
00:34:44,050 --> 00:34:47,230
它可以是一个高级别的单一库。

780
00:34:47,230 --> 00:34:50,080
我们希望它足够灵活。

781
00:34:50,080 --> 00:34:51,910
我宁愿称它为一个~!@#$%^&*()

782
00:34:51,910 --> 00:34:56,350
框架，以便于那些想法或算法

783
00:34:56,350 --> 00:34:58,150
或者提出新的设计来适应

784
00:34:58,150 --> 00:35:00,760
不同的研究者可以被纳入

785
00:35:00,760 --> 00:35:03,940
这个框架作为一个组件或者作为

786
00:35:03,940 --> 00:35:05,320
一个模块，以便

787
00:35:05,320 --> 00:35:06,670
应用程序开发者可以使用

788
00:35:06,670 --> 00:35:08,545
的API来调用它们。我需要说这不是一个强制性的要求。

789
00:35:08,545 --> 00:35:11,290
我需要说这不是一个强制性的要求。

790
00:35:11,290 --> 00:35:14,650
图书馆们，因为NDN仍在不断发展。

791
00:35:14,650 --> 00:35:17,845
我们无法预测将会出现什么新图书馆

792
00:35:17,845 --> 00:35:19,465
发生在未来。

793
00:35:19,465 --> 00:35:21,760
而是一个计划，用于

794
00:35:21,760 --> 00:35:25,060
这个库的开发尤其是

795
00:35:25,060 --> 00:35:27,175
为了目前的NDN维护。

796
00:35:27,175 --> 00:35:28,810
因为我希望它能够

797
00:35:28,810 --> 00:35:30,460
灵活并且能够

798
00:35:30,460 --> 00:35:33,025
吸收那些新想法

799
00:35:33,025 --> 00:35:35,990
来自不同人和不同团队。

800
00:35:36,000 --> 00:35:38,320
为什么我相信这件事

801
00:35:38,320 --> 00:35:40,270
可能性是首要的。

802
00:35:40,270 --> 00:35:42,310
因为有一套

803
00:35:42,310 --> 00:35:43,765
类似的功能

804
00:35:43,765 --> 00:35:45,790
每个应用程序都需要具备

805
00:35:45,790 --> 00:35:47,365
需要具备，

806
00:35:47,365 --> 00:35:50,050
例如同步功能，

807
00:35:50,050 --> 00:35:51,310
以及信任管理，

808
00:35:51,310 --> 00:35:55,705
访问控制和这些事情上的代码仓库。

809
00:35:55,705 --> 00:35:58,960
第二，由于那些数据在~!@#$%^&*()

810
00:35:58,960 --> 00:36:00,940
NDN组织是有组织的

811
00:36:00,940 --> 00:36:02,725
按照它们的语义名称。

812
00:36:02,725 --> 00:36:04,780
编程也应该

813
00:36:04,780 --> 00:36:07,270
按名称来组织。

814
00:36:07,270 --> 00:36:09,730
我认为彼得已经展示过了

815
00:36:09,730 --> 00:36:13,165
高级库的代码。

816
00:36:13,165 --> 00:36:15,160
它非常模块化。

817
00:36:15,160 --> 00:36:17,890
如果程序的结构变得模块化，

818
00:36:17,890 --> 00:36:20,815
我们有可能提供

819
00:36:20,815 --> 00:36:23,890
我们有可能提供模块化的高级库，以便

820
00:36:23,890 --> 00:36:26,720
该应用程序可以以这种方式使用它。

821
00:36:26,780 --> 00:36:31,530
同步安全性和

822
00:36:31,530 --> 00:36:32,940
同步安全性和

823
00:36:32,940 --> 00:36:35,565
存储，它们是正交的。

824
00:36:35,565 --> 00:36:38,400
例如，我们的应用程序可能会使用

825
00:36:38,400 --> 00:36:43,305
发布/订阅模式结合一些特定的信任模式。

826
00:36:43,305 --> 00:36:46,935
它也可以选择使用Repo，

827
00:36:46,935 --> 00:36:49,125
但它们是独立的。

828
00:36:49,125 --> 00:36:51,690
应用程序是否使用发布/订阅模式

829
00:36:51,690 --> 00:36:54,300
或者一些其他的同步操作。

830
00:36:54,300 --> 00:36:57,780
不依赖于特定的信任模式

831
00:36:57,780 --> 00:36:59,775
或访问控制工具。

832
00:36:59,775 --> 00:37:02,260
它也不取决于在哪里

833
00:37:02,260 --> 00:37:05,215
以及它想要如何部署Repo。

834
00:37:05,215 --> 00:37:06,895
有一些功能

835
00:37:06,895 --> 00:37:08,920
跨越这些领域的，

836
00:37:08,920 --> 00:37:12,265
例如安全的密钥分发，

837
00:37:12,265 --> 00:37:15,670
可能需要同步或者

838
00:37:15,670 --> 00:37:17,410
将该密钥存储到仓库中。

839
00:37:17,410 --> 00:37:19,720
但在一个非常高的层面上，

840
00:37:19,720 --> 00:37:23,485
有三种正交的方面。

841
00:37:23,485 --> 00:37:25,480
应用程序应该能够选择

842
00:37:25,480 --> 00:37:27,295
选择一个规格然后

843
00:37:27,295 --> 00:37:30,050
选择另一个领域的其他选项。

844
00:37:31,710 --> 00:37:36,505
如果我放入所有可能的库，

845
00:37:36,505 --> 00:37:37,870
规格起始于

846
00:37:37,870 --> 00:37:40,660
手动低级别到自动化。

847
00:37:40,660 --> 00:37:43,930
我们可以这样得到频谱图。

848
00:37:43,930 --> 00:37:46,390
ndn-cxx 和

849
00:37:46,390 --> 00:37:47,770
初始现有

850
00:37:47,770 --> 00:37:51,445
Python-ndn 低级别库。

851
00:37:51,445 --> 00:37:54,850
有许多个项目

852
00:37:54,850 --> 00:37:56,875
正在使用现有的Python-ndn的。

853
00:37:56,875 --> 00:37:58,825
我很感激。

854
00:37:58,825 --> 00:38:01,840
我认为仍有空间可以

855
00:38:01,840 --> 00:38:02,920
改进，以便他们

856
00:38:02,920 --> 00:38:05,350
能够轻松编写他们的代码。

857
00:38:05,350 --> 00:38:07,270
有一些专门的库

858
00:38:07,270 --> 00:38:08,290
例如 psynch

859
00:38:08,290 --> 00:38:11,755
和SVS，那是即时同步。

860
00:38:11,755 --> 00:38:14,050
有一些现成的软件

861
00:38:14,050 --> 00:38:16,810
有一些现成的软件，比如ndn-cert和python-repo。

862
00:38:16,810 --> 00:38:20,395
我计划对python-ndn和~!@#$%^&*()

863
00:38:20,395 --> 00:38:24,310
我计划开发的新Go语言库已经在这里了。

864
00:38:24,310 --> 00:38:26,650
我们想要提供框架

865
00:38:26,650 --> 00:38:28,840
可以适应这个框架并且不同的设计

866
00:38:28,840 --> 00:38:30,670
可以适应这个框架并且

867
00:38:30,670 --> 00:38:31,960
可以适应这个框架并且应用开发者可以

868
00:38:31,960 --> 00:38:33,415
选择他们想要使用的组件，

869
00:38:33,415 --> 00:38:37,255
正如选择几个组件

870
00:38:37,255 --> 00:38:40,640
和编写一个程序。

871
00:38:43,060 --> 00:38:45,080
这就是全部了。谢谢。

872
00:38:45,080 --> 00:38:46,880
~!@#$%^&*()

873
00:38:46,880 --> 00:38:48,080
>> 好的，太棒了。

874
00:38:48,080 --> 00:38:50,930
谢谢。最后但同样重要的是，

875
00:38:50,930 --> 00:38:54,350
阿列克斯·阿法纳西耶夫，他是

876
00:38:54,350 --> 00:38:56,150
阿列克斯·阿法纳西耶夫，他是佛罗里达国际大学的一名助理教授。

877
00:38:56,150 --> 00:38:59,490
佛罗里达国际大学。

878
00:38:59,950 --> 00:39:03,320
我将其加入总监督。

879
00:39:03,320 --> 00:39:05,450
我担任了绝大多数的协调员。

880
00:39:05,450 --> 00:39:07,235
NDN软件栈。

881
00:39:07,235 --> 00:39:10,490
我相信你们很多人都认识他，

882
00:39:10,490 --> 00:39:13,700
他一直在NDN社区工作，致力于

883
00:39:13,700 --> 00:39:15,590
各个方面的

884
00:39:15,590 --> 00:39:19,320
研究问题超过十年了。

885
00:39:19,450 --> 00:39:22,865
亚历克斯，现在轮到你发言了。

886
00:39:22,865 --> 00:39:24,830
>> 谢谢。让我开始吧

887
00:39:24,830 --> 00:39:26,705
根据一些观察，

888
00:39:26,705 --> 00:39:27,980
所以再次根据情况

889
00:39:27,980 --> 00:39:29,480
在接下来的步骤中吸取的教训

890
00:39:29,480 --> 00:39:30,575
我尝试去获取

891
00:39:30,575 --> 00:39:32,870
也许是稍微低一些的步骤。

892
00:39:32,870 --> 00:39:35,480
首先，我们所拥有的是

893
00:39:35,480 --> 00:39:37,730
首先，我们所拥有的是一个代码库和北川 has highlighted a few things.

894
00:39:37,730 --> 00:39:39,530
北川强调了几点。

895
00:39:39,530 --> 00:39:41,150
我刚刚尝试了一下。

896
00:39:41,150 --> 00:39:43,370
将其以不同的方式分类。

897
00:39:43,370 --> 00:39:46,415
基本上，迄今为止我们主要有的是，

898
00:39:46,415 --> 00:39:48,920
基本上，迄今为止我们主要有的是，我们有一些像彼得这样的好例外，

899
00:39:48,920 --> 00:39:52,310
突出显示了，我希望英特尔的人们，

900
00:39:52,310 --> 00:39:52,790
~!@#$%^&*()

901
00:39:52,790 --> 00:39:54,170
集中了更多的关注在NDN团队的暗色调突出部分上。

902
00:39:54,170 --> 00:39:57,650
集中了很多关注在NDN团队上。

903
00:39:57,650 --> 00:39:59,345
一直在推进

904
00:39:59,345 --> 00:40:01,340
之前，以及目前，

905
00:40:01,340 --> 00:40:02,735
之前，以及目前，有很多的努力，forward and not just a single one,

906
00:40:02,735 --> 00:40:04,700
向前发展，而且不止一个，

907
00:40:04,700 --> 00:40:06,500
有第二个，第三个，

908
00:40:06,500 --> 00:40:08,375
第四个，我不知道，

909
00:40:08,375 --> 00:40:09,500
我已经数不清了，

910
00:40:09,500 --> 00:40:10,595
多少个货运代理和~!@#$%^&*()

911
00:40:10,595 --> 00:40:12,260
同时发生的事情。

912
00:40:12,260 --> 00:40:13,850
那就需要付出很多努力。

913
00:40:13,850 --> 00:40:15,530
那至少在早期，

914
00:40:15,530 --> 00:40:17,525
我们放入了一个图书馆。

915
00:40:17,525 --> 00:40:19,460
我认为我甚至没有列出来

916
00:40:19,460 --> 00:40:21,755
足够那些底层库

917
00:40:21,755 --> 00:40:24,290
支持真正基本的原语，

918
00:40:24,290 --> 00:40:27,320
支持真正核心的东西。

919
00:40:27,320 --> 00:40:30,260
核心员工和员工

920
00:40:30,260 --> 00:40:32,270
人们想要使用

921
00:40:32,270 --> 00:40:34,355
实际上是更高层次的东西。

922
00:40:34,355 --> 00:40:37,710
和面向应用程序的库。

923
00:40:37,930 --> 00:40:42,050
一些应用程序和库

924
00:40:42,050 --> 00:40:44,165
专注于字面意义上的

925
00:40:44,165 --> 00:40:46,160
早期采用者和应用程序。

926
00:40:46,160 --> 00:40:48,410
我真的很有希望

927
00:40:48,410 --> 00:40:50,630
我们实际上开始认真对待重要的事情了。

928
00:40:50,630 --> 00:40:53,075
~!@#$%^&*()

929
00:40:53,075 --> 00:40:55,880
专注于特定用例。

930
00:40:55,880 --> 00:40:58,250
整个代码开发是

931
00:40:58,250 --> 00:41:01,325
基本上是由特定的使用案例驱动的。

932
00:41:01,325 --> 00:41:03,890
但这实际上是我们所需要的。

933
00:41:03,890 --> 00:41:05,300
我们能看到这一点在未来。

934
00:41:05,300 --> 00:41:07,400
我们将来能看到这个。

935
00:41:07,400 --> 00:41:09,470
让我来强调一下

936
00:41:09,470 --> 00:41:11,495
一点点问题。

937
00:41:11,495 --> 00:41:14,285
对于高层面的观点，

938
00:41:14,285 --> 00:41:17,630
再说一次，这可能不完全正确，

939
00:41:17,630 --> 00:41:19,925
但有很多事情是这样的，

940
00:41:19,925 --> 00:41:23,045
作为NDN团队的一员，

941
00:41:23,045 --> 00:41:26,495
具体来说，我们遇到了一点困难。

942
00:41:26,495 --> 00:41:28,280
在一些基础层面的事务上。

943
00:41:28,280 --> 00:41:30,890
我们在预开发阶段不断向前推进以进行修复。

944
00:41:30,890 --> 00:41:32,120
我们即使在前进的过程中也要继续进行修复，这是一个确实必要的组成部分。

945
00:41:32,120 --> 00:41:34,700
确实必要的组成部分。

946
00:41:34,700 --> 00:41:37,550
我们需要更多的反馈或者

947
00:41:37,550 --> 00:41:41,280
我们需要从应用端获得更多理解。

948
00:41:42,250 --> 00:41:45,410
将那些目标从

949
00:41:45,410 --> 00:41:48,575
将那些应用程序放入现实中。

950
00:41:48,575 --> 00:41:50,060
有时候实际上

951
00:41:50,060 --> 00:41:51,350
目标上的冲突和

952
00:41:51,350 --> 00:41:55,100
这需要一些讨论。

953
00:41:55,100 --> 00:41:56,990
真正的风险需要一些理解。

954
00:41:56,990 --> 00:41:59,360
我们的目标是什么

955
00:41:59,360 --> 00:42:01,415
实际上是推进转发器还是会

956
00:42:01,415 --> 00:42:04,070
完全有独立的实现。

957
00:42:04,070 --> 00:42:06,170
我把几样东西放在这里，

958
00:42:06,170 --> 00:42:08,765
他们在谈论表现时候，

959
00:42:08,765 --> 00:42:11,840
突然一方面，

960
00:42:11,840 --> 00:42:13,190
这是一种传统的思维方式

961
00:42:13,190 --> 00:42:14,420
他们拥有的划手

962
00:42:14,420 --> 00:42:16,115
推送大量数据。

963
00:42:16,115 --> 00:42:17,000
但也有

964
00:42:17,000 --> 00:42:18,620
应用程序需要推送大量

965
00:42:18,620 --> 00:42:21,695
的数据，方式效率低下。

966
00:42:21,695 --> 00:42:23,600
但是还有另一部分

967
00:42:23,600 --> 00:42:25,100
谈论光谱的另一端时

968
00:42:25,100 --> 00:42:26,300
临时沟通

969
00:42:26,300 --> 00:42:27,230
当你谈论的时候

970
00:42:27,230 --> 00:42:29,584
一些类似家庭IT环境的地方，

971
00:42:29,584 --> 00:42:32,225
在那里有一个完全不同的目标，

972
00:42:32,225 --> 00:42:35,945
进行非常轻量级的沟通，

973
00:42:35,945 --> 00:42:37,340
进行非常轻量级的沟通，针对不同的目标，

974
00:42:37,340 --> 00:42:38,810
不同的潜在库，

975
00:42:38,810 --> 00:42:41,120
不同的前锋目标是进入港口。

976
00:42:41,120 --> 00:42:44,000
但再次，我们面临的主要问题是

977
00:42:44,000 --> 00:42:47,255
拥有的开发能力极为有限。

978
00:42:47,255 --> 00:42:49,070
我会尽力再强调

979
00:42:49,070 --> 00:42:50,480
我会尽力再强调这件事几次。

980
00:42:50,480 --> 00:42:53,145
我们没有全职员工。

981
00:42:53,145 --> 00:42:55,870
我看到有一个问题是为什么

982
00:42:55,870 --> 00:42:59,230
有些东西不在主流代码库中？

983
00:42:59,230 --> 00:43:01,595
我们没有专门的IT来处理那个。

984
00:43:01,595 --> 00:43:03,890
我们有可能来来去去的学生，

985
00:43:03,890 --> 00:43:05,600
可能有不同的接触经历。

986
00:43:05,600 --> 00:43:10,115
可能有不同的接触经历，但即使是学生，他们也到发展过程。

987
00:43:10,115 --> 00:43:12,710
也在发展过程中。

988
00:43:12,710 --> 00:43:15,350
主要集中在研究项目上。

989
00:43:15,350 --> 00:43:17,660
和研究项目未必一定会

990
00:43:17,660 --> 00:43:20,795
与代码库相关的事情。

991
00:43:20,795 --> 00:43:22,460
他们可以开发事物，

992
00:43:22,460 --> 00:43:24,230
有一些补丁被提交了。

993
00:43:24,230 --> 00:43:25,550
将会在代码审查中提及这一点，并且我

994
00:43:25,550 --> 00:43:27,390
将会在稍后提及这一点。

995
00:43:27,390 --> 00:43:29,770
但我们也有补丁，在

996
00:43:29,770 --> 00:43:31,390
多年来的代码审查因为~!@#$%^&*()

997
00:43:31,390 --> 00:43:32,815
没有人在推动它们。

998
00:43:32,815 --> 00:43:36,335
但这是人力的问题。

999
00:43:36,335 --> 00:43:40,250
我会在这里停下来。因为自…

1000
00:43:40,250 --> 00:43:41,450
~!@#$%^&*()

1001
00:43:41,450 --> 00:43:43,355
多年来有大量的代码，

1002
00:43:43,355 --> 00:43:46,385
我们想出了许多主意，

1003
00:43:46,385 --> 00:43:48,380
我们进行了很多讨论。

1004
00:43:48,380 --> 00:43:51,110
类似于我们现在进行的讨论，

1005
00:43:51,110 --> 00:43:53,405
迄今为止的效果讨论。

1006
00:43:53,405 --> 00:43:55,940
为了改善状况，提高可见度，

1007
00:43:55,940 --> 00:43:57,110
添加新工具。

1008
00:43:57,110 --> 00:43:59,270
但我们需要人来

1009
00:43:59,270 --> 00:44:01,580
实际上去做这些事情，我们已经做出了

1010
00:44:01,580 --> 00:44:05,390
我们自己以及作为NDN团队

1011
00:44:05,390 --> 00:44:07,760
无论这个NDN团队的定义何在，

1012
00:44:07,760 --> 00:44:10,685
它随时间而变化。

1013
00:44:10,685 --> 00:44:12,560
我们自己，不会

1014
00:44:12,560 --> 00:44:14,285
我们自己，不会能够做到那一点。

1015
00:44:14,285 --> 00:44:18,065
然后我挑选了一些东西。

1016
00:44:18,065 --> 00:44:20,630
一个主要的难点是~!@#$%^&*()

1017
00:44:20,630 --> 00:44:23,885
我们看到的可能不正确的看法是，

1018
00:44:23,885 --> 00:44:27,260
我们不时地看到的是，

1019
00:44:27,260 --> 00:44:29,720
我们的代码库在这个NDN代码库之上。

1020
00:44:29,720 --> 00:44:32,120
是受到保护的，

1021
00:44:32,120 --> 00:44:34,760
有一条规则是僵硬的，没有人可以修改。

1022
00:44:34,760 --> 00:44:36,995
这绝对不是真的。

1023
00:44:36,995 --> 00:44:38,750
首先，我们的代码库是

1024
00:44:38,750 --> 00:44:41,460
开源的，每个人都可以看到它。

1025
00:44:44,050 --> 00:44:46,430
我们唯一尝试的事情

1026
00:44:46,430 --> 00:44:48,125
就会影响代码的质量。

1027
00:44:48,125 --> 00:44:50,750
因为一旦我们接手了一些代码，

1028
00:44:50,750 --> 00:44:52,670
我们就需要负起责任来维护这些代码，

1029
00:44:52,670 --> 00:44:53,810
我们就需要负起责任来维护这些代码，

1030
00:44:53,810 --> 00:44:55,355
因此，

1031
00:44:55,355 --> 00:44:58,565
因为我们没有全职员工来做这项工作，

1032
00:44:58,565 --> 00:45:01,370
我们对支持的权力非常有限。

1033
00:45:01,370 --> 00:45:04,310
我们希望初始代码是良好的。

1034
00:45:04,310 --> 00:45:05,810
足以维护

1035
00:45:05,810 --> 00:45:08,370
通过非常有限的力量。

1036
00:45:10,630 --> 00:45:13,190
基本上，这些建议

1037
00:45:13,190 --> 00:45:15,425
我必须处理这些事情，

1038
00:45:15,425 --> 00:45:17,585
我必须处理这些事情，如果你想要代码，

1039
00:45:17,585 --> 00:45:19,190
如果你想要某种工具来

1040
00:45:19,190 --> 00:45:21,455
如果你想要某种工具来，请给我们提交部分代码。

1041
00:45:21,455 --> 00:45:23,945
请给我们代码，以便

1042
00:45:23,945 --> 00:45:25,430
请解释代码给我们。

1043
00:45:25,430 --> 00:45:27,440
如果这是一些有争议的事情。

1044
00:45:27,440 --> 00:45:29,510
有时候会有一些设计决策

1045
00:45:29,510 --> 00:45:30,560
需要讨论的事情，

1046
00:45:30,560 --> 00:45:32,960
我们确实每周都有电话会议。

1047
00:45:32,960 --> 00:45:34,040
任何人都可以加入的电话会议。

1048
00:45:34,040 --> 00:45:35,690
任何人都可以加入的电话会议。

1049
00:45:35,690 --> 00:45:37,790
宣布在公共邮件列表上。

1050
00:45:37,790 --> 00:45:39,860
你只需来找我们，解释你想要做的事情。

1051
00:45:39,860 --> 00:45:41,705
我们可以解释

1052
00:45:41,705 --> 00:45:44,210
我们想要从代码库中获取的是如果

1053
00:45:44,210 --> 00:45:47,180
我们想要从代码库中获取的是如果有争议的编码，然后推动代码的更新。

1054
00:45:47,180 --> 00:45:48,965
然后推动代码的更新。

1055
00:45:48,965 --> 00:45:50,600
我们可能会询问

1056
00:45:50,600 --> 00:45:52,625
一些小的结构调整，

1057
00:45:52,625 --> 00:45:54,590
一些这里那里的小变动测试。

1058
00:45:54,590 --> 00:45:57,590
但我们自己也没有全职员工。

1059
00:45:57,590 --> 00:46:01,055
推送你的补丁。

1060
00:46:01,055 --> 00:46:03,020
这是一件事情。

1061
00:46:03,020 --> 00:46:06,590
我将从这里开始投诉，然后为了

1062
00:46:06,590 --> 00:46:09,845
提升这方面的体验。

1063
00:46:09,845 --> 00:46:12,065
已经被说过很多次了。

1064
00:46:12,065 --> 00:46:15,080
凯西强调了几点，新宇，

1065
00:46:15,080 --> 00:46:16,130
强调了几点，

1066
00:46:16,130 --> 00:46:19,850
还有一些其他人也强调了这一点。

1067
00:46:19,850 --> 00:46:23,420
我们真的很快就需要一个高级API了。

1068
00:46:23,420 --> 00:46:25,130
我们的焦点很多

1069
00:46:25,130 --> 00:46:28,205
是在低级API上。

1070
00:46:28,205 --> 00:46:31,040
但那些并不总是应用程序的东西，

1071
00:46:31,040 --> 00:46:32,690
或者它们从技术上来说并不是

1072
00:46:32,690 --> 00:46:34,040
那些应用程序的构建模块

1073
00:46:34,040 --> 00:46:35,390
那些为了

1074
00:46:35,390 --> 00:46:37,430
应用程序库

1075
00:46:37,430 --> 00:46:38,810
那应该被使用。

1076
00:46:38,810 --> 00:46:42,275
我们需要更多这样的东西，我会说，

1077
00:46:42,275 --> 00:46:43,460
我们需要更多这样的东西，我会说，人们，讨论关于的例子和用例。

1078
00:46:43,460 --> 00:46:44,840
例子和用例，

1079
00:46:44,840 --> 00:46:47,585
所以我们需要更多这些的用例，

1080
00:46:47,585 --> 00:46:49,130
所以我们需要更多这些的用例，其中有一个库，multiple libraries, I have no clue.

1081
00:46:49,130 --> 00:46:52,505
多个库，我一点头绪也没有。

1082
00:46:52,505 --> 00:46:55,820
这真的必须来自

1083
00:46:55,820 --> 00:46:57,275
应用程序并告诉我们

1084
00:46:57,275 --> 00:46:59,855
是想要通过这个应用程序并告诉我们，

1085
00:46:59,855 --> 00:47:02,360
他们想要通过这个应用程序告诉我们什么需要被曝光。最近我们进行了一些对话

1086
00:47:02,360 --> 00:47:04,520
最近我们进行了一些对话

1087
00:47:04,520 --> 00:47:05,690
关于是否

1088
00:47:05,690 --> 00:47:07,640
这个中间库必须要

1089
00:47:07,640 --> 00:47:09,830
完全隐藏名称的概念，

1090
00:47:09,830 --> 00:47:11,210
数据包的概念

1091
00:47:11,210 --> 00:47:13,325
在图书馆内还是外。

1092
00:47:13,325 --> 00:47:16,445
从我的角度来看，这是一个问题，

1093
00:47:16,445 --> 00:47:17,495
我会说立刻

1094
00:47:17,495 --> 00:47:19,070
不，你不应该躲藏。

1095
00:47:19,070 --> 00:47:21,560
但这只是我的看法，因为

1096
00:47:21,560 --> 00:47:22,460
我不知道什么~!@#$%^&*()

1097
00:47:22,460 --> 00:47:23,840
实际应用程序所做的。

1098
00:47:23,840 --> 00:47:25,460
也许这个应用程序或

1099
00:47:25,460 --> 00:47:26,570
应用程序使用案例有

1100
00:47:26,570 --> 00:47:28,535
对此无能为力。

1101
00:47:28,535 --> 00:47:31,070
第二点尤其

1102
00:47:31,070 --> 00:47:32,225
重要的是这个

1103
00:47:32,225 --> 00:47:37,140
确实要回到那个时期的评论。

1104
00:47:37,140 --> 00:47:39,855
事物必须确实可用，

1105
00:47:39,855 --> 00:47:42,010
应用程序实际上不应该

1106
00:47:42,010 --> 00:47:44,855
应用程序实际上不应该关心任何与NFD的连接。

1107
00:47:44,855 --> 00:47:46,220
他们甚至不应该

1108
00:47:46,220 --> 00:47:47,360
他们甚至不应该意识到这个概念，

1109
00:47:47,360 --> 00:47:48,770
NFD仅仅是应用程序。

1110
00:47:48,770 --> 00:47:49,940
请求数据的那个程序。

1111
00:47:49,940 --> 00:47:52,610
有一种小心，甚至可能根本不需要小心。

1112
00:47:52,610 --> 00:47:55,580
请求数据但要发布某些内容。

1113
00:47:55,580 --> 00:47:57,350
如果高于某个值就订阅。

1114
00:47:57,350 --> 00:47:59,345
支持，同步一些数据集。

1115
00:47:59,345 --> 00:48:01,400
这是应用程序，

1116
00:48:01,400 --> 00:48:03,910
我们无论何时行动，我们

1117
00:48:03,910 --> 00:48:05,120
我们需要让这个运作起来。

1118
00:48:05,120 --> 00:48:06,515
和一切都在运转中。

1119
00:48:06,515 --> 00:48:08,640
在安全领域也是如此，

1120
00:48:08,640 --> 00:48:11,345
在安全领域，并不是所有事情都能自动化。

1121
00:48:11,345 --> 00:48:12,770
但对于所有能够自动化的事情，我们应该去自动化。

1122
00:48:12,770 --> 00:48:14,790
能够自动化的事情，应该去自动化。

1123
00:48:14,790 --> 00:48:16,985
问题又来了，

1124
00:48:16,985 --> 00:48:18,990
我们可以进一步讨论这个问题，

1125
00:48:18,990 --> 00:48:22,635
但我们没有全职员工来做这项工作。

1126
00:48:22,635 --> 00:48:24,535
如果有人有想法，

1127
00:48:24,535 --> 00:48:27,105
有人需要合作工作

1128
00:48:27,105 --> 00:48:30,335
将这所学校交给我们，

1129
00:48:30,335 --> 00:48:31,760
将这所学校交给社区，

1130
00:48:31,760 --> 00:48:33,650
我们将不得不将其放在网站上，

1131
00:48:33,650 --> 00:48:36,885
我们将不得不将其放在网站上，在我们的GitHub或者克隆者上，并且授予完整的权利去维护它。

1132
00:48:36,885 --> 00:48:40,445
授予完整的权利去维护它。

1133
00:48:40,445 --> 00:48:41,890
但我们再次拥有

1134
00:48:41,890 --> 00:48:45,855
志愿开发者的权力非常有限。

1135
00:48:45,855 --> 00:48:47,470
这是我想要表达的最后一点，

1136
00:48:47,470 --> 00:48:48,945
我试图表达的是，

1137
00:48:48,945 --> 00:48:51,270
我试图表达的是，我认为我真的

1138
00:48:51,270 --> 00:48:53,100
多次提及这个问题。

1139
00:48:53,100 --> 00:48:56,605
我们需要更多的对话来自~!@#$%^&*()

1140
00:48:56,605 --> 00:48:58,955
使用案例社区

1141
00:48:58,955 --> 00:49:01,690
对我们来说，否则的话，

1142
00:49:01,690 --> 00:49:03,995
我们不会再走太远了。

1143
00:49:03,995 --> 00:49:06,135
例如，最近的对话

1144
00:49:06,135 --> 00:49:07,700
在Slack上正在讨论的内容，

1145
00:49:07,700 --> 00:49:09,430
给出这个快速指南

1146
00:49:09,430 --> 00:49:11,405
给出这个快速指南, 到那个快速指南。

1147
00:49:11,405 --> 00:49:13,965
我不知道什么

1148
00:49:13,965 --> 00:49:15,320
应用程序是为了

1149
00:49:15,320 --> 00:49:17,135
提供具体的使用案例。

1150
00:49:17,135 --> 00:49:19,275
我可以想象，但那将会是

1151
00:49:19,275 --> 00:49:20,690
我的不同观点

1152
00:49:20,690 --> 00:49:23,375
精确地处理应用程序工作。

1153
00:49:23,375 --> 00:49:26,515
希望会有更多的对话。

1154
00:49:26,515 --> 00:49:27,620
来自邮件列表，

1155
00:49:27,620 --> 00:49:28,950
公共NDN、Slack，

1156
00:49:28,950 --> 00:49:31,205
或直接发送电子邮件，让我们知道您需要什么样的

1157
00:49:31,205 --> 00:49:32,330
告诉我们您需要什么样的

1158
00:49:32,330 --> 00:49:34,030
我们需要着手处理的用例，

1159
00:49:34,030 --> 00:49:37,830
像我们应该给出哪些例子。

1160
00:49:38,110 --> 00:49:39,795
再次，这是

1161
00:49:39,795 --> 00:49:40,730
最后一点或许是

1162
00:49:40,730 --> 00:49:43,455
为了更深入的内部讨论。

1163
00:49:43,455 --> 00:49:46,180
我们仍然有一些资源，例如，

1164
00:49:46,180 --> 00:49:48,770
Davide是开发的一个很好的资源。

1165
00:49:48,770 --> 00:49:50,860
~!@#$%^&*()

1166
00:49:50,860 --> 00:49:52,780
鉴于所有这些有限的资源，

1167
00:49:52,780 --> 00:49:56,410
我们仍然需要弄清楚如何使用它。

1168
00:49:56,410 --> 00:49:58,355
我们可能需要

1169
00:49:58,355 --> 00:49:59,170
改变一些

1170
00:49:59,170 --> 00:50:01,465
改变一些发展中的优先事项，

1171
00:50:01,465 --> 00:50:04,249
但希望能够减少

1172
00:50:04,249 --> 00:50:06,575
代码库的分裂。

1173
00:50:06,575 --> 00:50:07,700
这有一点儿

1174
00:50:07,700 --> 00:50:09,135
彼得之前说的话，

1175
00:50:09,135 --> 00:50:11,970
所以我会停下来。我说得太多了。

1176
00:50:13,450 --> 00:50:16,130
是的，你确实说得很多。

1177
00:50:16,130 --> 00:50:17,725
那很好。

1178
00:50:17,725 --> 00:50:19,220
很多很好的观点。

1179
00:50:19,220 --> 00:50:21,480
谢谢，亚历克斯。

1180
00:50:22,720 --> 00:50:27,270
我们已经完成了初步的评论。

1181
00:50:27,270 --> 00:50:29,840
我们可以得到

1182
00:50:29,840 --> 00:50:32,880
我们可以得到更深入的讨论阶段的这个小组。

1183
00:50:32,880 --> 00:50:35,255
我们看到很多来自不同背景的

1184
00:50:35,255 --> 00:50:37,295
不同背景的

1185
00:50:37,295 --> 00:50:39,000
各种不同的意见。

1186
00:50:39,000 --> 00:50:40,940
但我也很高兴看到

1187
00:50:40,940 --> 00:50:42,405
但我也很高兴看到似乎有很多

1188
00:50:42,405 --> 00:50:44,160
在几个要点上，

1189
00:50:44,160 --> 00:50:47,055
在至少我们的小组成员同意的地方，

1190
00:50:47,055 --> 00:50:47,990
在至少我们的小组成员同意的地方，似乎有一些共识在建立中

1191
00:50:47,990 --> 00:50:50,340
在建立中的一些共识

1192
00:50:50,340 --> 00:50:55,830
高级API和更易用的库。

1193
00:50:55,830 --> 00:50:59,670
关键是，我们怎么到达那里？

1194
00:50:59,670 --> 00:51:02,740
已经有超过100条评论了。

1195
00:51:02,740 --> 00:51:04,565
在Slack频道中。

1196
00:51:04,565 --> 00:51:07,005
有些已经是闲聊了。

1197
00:51:07,005 --> 00:51:09,990
和在小组成员之间来回讨论。

1198
00:51:15,280 --> 00:51:18,615
你们中有谁有强烈的感受吗？

1199
00:51:18,615 --> 00:51:22,250
关于其他小组成员所说的内容？

1200
00:51:22,250 --> 00:51:23,565
你是否非常同意其他小组成员所说的内容？

1201
00:51:23,565 --> 00:51:26,250
是否强烈同意还是强烈不同意？

1202
00:51:28,660 --> 00:51:30,795
仅仅作为一种挑衅。

1203
00:51:30,795 --> 00:51:31,910
我不知道这是否是

1204
00:51:31,910 --> 00:51:33,705
一个协议或不同意见。

1205
00:51:33,705 --> 00:51:38,295
我认为Marcin在谈论的是存在着

1206
00:51:38,295 --> 00:51:40,940
自动化工具的缺乏

1207
00:51:40,940 --> 00:51:43,155
与Ansible及其他相关工具一起。

1208
00:51:43,155 --> 00:51:45,500
我真的不太明白究竟是什么

1209
00:51:45,500 --> 00:51:47,000
缺乏，因为这是~!@#$%^&*()

1210
00:51:47,000 --> 00:51:49,130
只是部署的事情，

1211
00:51:49,130 --> 00:51:50,300
还有，

1212
00:51:50,300 --> 00:51:51,860
软件包那些[重叠]

1213
00:51:51,860 --> 00:51:54,380
>> 那个是部署。

1214
00:51:55,660 --> 00:51:57,980
对不起，你说得对。

1215
00:51:57,980 --> 00:51:59,140
这个正在部署中。

1216
00:51:59,140 --> 00:52:01,485
你是如何部署应用程序的。

1217
00:52:01,485 --> 00:52:03,780
但说实话，要成为部署者

1218
00:52:03,780 --> 00:52:06,720
通过商业等方式，

1219
00:52:06,720 --> 00:52:09,450
你需要提供那些集成服务。

1220
00:52:09,450 --> 00:52:12,170
例如，如果你有你自己的应用程序，

1221
00:52:12,170 --> 00:52:14,610
让我们看看你展示可行性的情况。

1222
00:52:14,610 --> 00:52:19,290
你需要以某种方式将其融入到流程中。

1223
00:52:19,290 --> 00:52:22,835
否则，你的申请

1224
00:52:22,835 --> 00:52:25,985
否则，你的申请将甚至不会被考虑在内。

1225
00:52:25,985 --> 00:52:29,395
在此时拥有

1226
00:52:29,395 --> 00:52:33,405
在应用中的成功甚至支持，

1227
00:52:33,405 --> 00:52:34,605
NDN网络，

1228
00:52:34,605 --> 00:52:35,775
您需要提供

1229
00:52:35,775 --> 00:52:37,940
几乎整个建筑盒子。

1230
00:52:37,940 --> 00:52:39,820
问题是，正如我们所知道的，我们

1231
00:52:39,820 --> 00:52:42,300
我们已经逐一研究过了，

1232
00:52:42,300 --> 00:52:43,940
我们已经逐一研究过了，这是一个很好的评论，from the Kaitlin Nichols,

1233
00:52:43,940 --> 00:52:45,555
来自Kaitlin Nichols，

1234
00:52:45,555 --> 00:52:50,750
需要谁来负责所有这些事情呢？

1235
00:52:50,750 --> 00:52:52,160
肯定需要由

1236
00:52:52,160 --> 00:52:54,110
企业和某人

1237
00:52:54,110 --> 00:52:56,155
支持这些用例的是谁。

1238
00:52:56,155 --> 00:52:57,570
但问题是，

1239
00:52:57,570 --> 00:53:04,460
如果你的应用程序不是很多，

1240
00:53:04,460 --> 00:53:06,110
那可以被完全承担由

1241
00:53:06,110 --> 00:53:09,045
企业和用户

1242
00:53:09,045 --> 00:53:14,165
并传播这个消息，谁应该接手呢？

1243
00:53:14,165 --> 00:53:16,695
谁应该做那项工作？

1244
00:53:16,695 --> 00:53:18,630
展示全部的可行性

1245
00:53:18,630 --> 00:53:23,310
和NDN的端到端集成？

1246
00:53:23,310 --> 00:53:25,520
正如我所说，我认为这是~!@#$%^&*()

1247
00:53:25,520 --> 00:53:27,440
正如我所说，我认为这是一个很好的时刻，因为我们~!@#$%^&*(), are at the start of the edge.

1248
00:53:27,440 --> 00:53:29,690
我们正处于边缘的开始。

1249
00:53:29,690 --> 00:53:31,295
我们看到很多

1250
00:53:31,295 --> 00:53:36,215
新的库来支持边缘部署。

1251
00:53:36,215 --> 00:53:38,409
我认为这里有一个很大的机会

1252
00:53:38,409 --> 00:53:40,140
但问题是，

1253
00:53:40,140 --> 00:53:42,535
时间和资源的不足

1254
00:53:42,535 --> 00:53:47,125
落后于时代

1255
00:53:47,125 --> 00:53:50,790
在许多情况下，为NDN增添光彩。

1256
00:53:51,660 --> 00:53:53,810
我认为那是正确的。

1257
00:53:53,810 --> 00:53:56,000
伴随着一个已经被Alex在他的幻灯片中，在他的演讲中提到的观点。

1258
00:53:56,000 --> 00:54:02,150
伴随着一个已经被Alex在他的幻灯片中，在他的演讲中提到的观点。

1259
00:54:02,150 --> 00:54:05,310
我亲眼见证了很多次，

1260
00:54:05,310 --> 00:54:06,615
似乎有不同

1261
00:54:06,615 --> 00:54:10,270
和有时是相互竞争的方向。

1262
00:54:10,270 --> 00:54:12,410
有一位研究者想要

1263
00:54:12,410 --> 00:54:15,350
进行NDN研究，这可能会

1264
00:54:15,350 --> 00:54:17,875
有不同的需求

1265
00:54:17,875 --> 00:54:19,965
来自应用程序开发者

1266
00:54:19,965 --> 00:54:21,770
那些在行业中的

1267
00:54:21,770 --> 00:54:22,995
那些只想要一个包裹的

1268
00:54:22,995 --> 00:54:24,290
并将其提起来

1269
00:54:24,290 --> 00:54:26,120
尽可能快地跑步，

1270
00:54:26,120 --> 00:54:27,885
尽可能轻松地，

1271
00:54:27,885 --> 00:54:29,420
他们不想浪费

1272
00:54:29,420 --> 00:54:32,145
他们不想在管道工作上浪费时间。

1273
00:54:32,145 --> 00:54:35,355
可能会有人

1274
00:54:35,355 --> 00:54:37,110
关心性能的，

1275
00:54:37,110 --> 00:54:39,045
他们不得不搬运大量~!@#$%^&*()

1276
00:54:39,045 --> 00:54:40,905
他们关心的大量数据。

1277
00:54:40,905 --> 00:54:44,085
其他人可能关心边缘计算环境。

1278
00:54:44,085 --> 00:54:45,290
性能可能并非是主要关注点。

1279
00:54:45,290 --> 00:54:47,775
性能可能并非是主要关注点，而是移动性。Alex指出了这一点，

1280
00:54:47,775 --> 00:54:49,985
亚历克斯指出了这一点，

1281
00:54:49,985 --> 00:54:52,980
在他的演讲快结束时他说，

1282
00:54:52,990 --> 00:54:57,795
在资源有限的情况下，施加一个限制，

1283
00:54:57,795 --> 00:54:59,090
我们拥有的资源，

1284
00:54:59,090 --> 00:55:01,055
我们应该选择一个方向。

1285
00:55:01,055 --> 00:55:02,850
并专注于那一个。

1286
00:55:02,850 --> 00:55:04,850
这是一个好方法吗？

1287
00:55:04,850 --> 00:55:08,120
别人怎么看呢？

1288
00:55:09,450 --> 00:55:11,605
>> 或者，我们只需要

1289
00:55:11,605 --> 00:55:12,940
拿到钱。

1290
00:55:12,940 --> 00:55:14,440
~!@#$%^&*()

1291
00:55:14,440 --> 00:55:15,140
>> 或者，如果

1292
00:55:15,140 --> 00:55:16,065
你拥有了更多资源，

1293
00:55:16,065 --> 00:55:19,400
你可以选择更多的方向，当然可以。

1294
00:55:21,390 --> 00:55:24,825
>> 当然可以增加。

1295
00:55:24,825 --> 00:55:26,000
>> 当然可以增加。

1296
00:55:26,000 --> 00:55:31,285
>> 你好。你能听到我吗？对我来说

1297
00:55:31,285 --> 00:55:33,405
我认为用例

1298
00:55:33,405 --> 00:55:35,875
更应该专注于的是

1299
00:55:35,875 --> 00:55:41,905
手头上的本地NFD节点设置。

1300
00:55:41,905 --> 00:55:44,785
也许它会稍微解决一些

1301
00:55:44,785 --> 00:55:46,855
亚历克斯对什么的问题

1302
00:55:46,855 --> 00:55:48,720
快速入门指南应该是。

1303
00:55:48,720 --> 00:55:51,100
有很多方面，我同意。

1304
00:55:51,100 --> 00:55:56,605
但当你登陆IPFS的页面时，

1305
00:55:56,605 --> 00:56:00,315
你可能有那么多命令。

1306
00:56:00,315 --> 00:56:04,800
你得运行命令来开始获取文件。

1307
00:56:04,800 --> 00:56:08,169
如果你本地有两台机器，

1308
00:56:08,169 --> 00:56:10,065
从每台机器上获取文件。

1309
00:56:10,065 --> 00:56:12,410
从每台机器上获取文件。

1310
00:56:12,410 --> 00:56:14,035
我认为快速入门指南，

1311
00:56:14,035 --> 00:56:18,385
我希望看到的是一个快速入门指南，

1312
00:56:18,385 --> 00:56:21,060
五台或十台机器或者

1313
00:56:21,060 --> 00:56:23,080
无论数字是多少

1314
00:56:23,080 --> 00:56:24,945
我只是运行命令。

1315
00:56:24,945 --> 00:56:27,220
那么这些机器，它们运行NDN，

1316
00:56:27,220 --> 00:56:28,590
那么我就可以运行

1317
00:56:28,590 --> 00:56:30,430
即使是最简单的应用程序

1318
00:56:30,430 --> 00:56:32,440
像印度粉红色一样是

1319
00:56:32,440 --> 00:56:34,210
像一个例子一样好或者去取

1320
00:56:34,210 --> 00:56:38,680
~!@#$%^&*()

1321
00:56:38,680 --> 00:56:41,740
但我不必担心

1322
00:56:41,740 --> 00:56:45,925
关于内置的D配置它，

1323
00:56:45,925 --> 00:56:49,810
配置路由，配置界面，

1324
00:56:49,810 --> 00:56:52,300
因为这是我经历过的。

1325
00:56:52,300 --> 00:56:55,190
这其实是我的亲身经历。

1326
00:56:55,360 --> 00:56:57,610
构建的应用程序。

1327
00:56:57,610 --> 00:56:59,455
它至少有五台电脑。

1328
00:56:59,455 --> 00:57:01,495
我得围着它们跑来跑去。

1329
00:57:01,495 --> 00:57:04,975
我得记下每台机器的IP地址，

1330
00:57:04,975 --> 00:57:06,320
然后我得想办法

1331
00:57:06,320 --> 00:57:07,720
前缀

1332
00:57:07,720 --> 00:57:10,690
应该自己去做所有的事情。

1333
00:57:10,690 --> 00:57:13,780
那么这只是一种不是

1334
00:57:13,780 --> 00:57:17,230
对人们来说是令人愉悦的

1335
00:57:17,230 --> 00:57:20,115
对于那些并不想投入某个项目的人来说，

1336
00:57:20,115 --> 00:57:21,850
对于那些只是想尝试一下的人来说。

1337
00:57:21,850 --> 00:57:24,970
他们将会在什么时候停止。

1338
00:57:24,970 --> 00:57:26,560
他们了解到他们需要

1339
00:57:26,560 --> 00:57:28,585
记住五个不同的IP地址

1340
00:57:28,585 --> 00:57:31,770
并注册路由，他们不会这么做。

1341
00:57:31,770 --> 00:57:34,060
对我来说，那就是结束。

1342
00:57:34,060 --> 00:57:36,130
快速入门指南的。

1343
00:57:36,720 --> 00:57:39,140
>> 我认为你是

1344
00:57:39,140 --> 00:57:41,065
解决完全相同的问题。

1345
00:57:41,065 --> 00:57:45,490
For example, this [无法听清]

1346
00:57:45,490 --> 00:57:46,900
导致了许多情况

1347
00:57:46,900 --> 00:57:49,930
导致了许多情况，对[听不清]或任何其他库 that are using those Cloud-native deployment.

1348
00:57:49,930 --> 00:57:53,185
这些使用了那些云原生部署的。

1349
00:57:53,185 --> 00:57:54,860
即使你正在部署

1350
00:57:54,860 --> 00:57:58,610
你的 Kubernetes 或者任何其他软件，

1351
00:57:59,670 --> 00:58:03,565
你有外部库的3D实例。

1352
00:58:03,565 --> 00:58:05,980
这是一次很棒的经历。

1353
00:58:05,980 --> 00:58:08,430
有人只需五分钟就可以，

1354
00:58:08,430 --> 00:58:11,805
仅需五次点击，即可部署系统。

1355
00:58:11,805 --> 00:58:14,889
伟大的成功典范

1356
00:58:14,889 --> 00:58:18,840
~!@#$%^&*()

1357
00:58:18,840 --> 00:58:20,505
意思是当某人带着

1358
00:58:20,505 --> 00:58:21,940
两次点击就能完成。

1359
00:58:21,940 --> 00:58:25,900
Windows或Linux机器上也可以

1360
00:58:25,900 --> 00:58:28,614
可以进行多主机部署

1361
00:58:28,614 --> 00:58:30,420
~!@#$%^&*()

1362
00:58:30,420 --> 00:58:32,769
提供一个IP地址列表

1363
00:58:32,769 --> 00:58:39,490
它需要被部署的地方。

1364
00:58:39,490 --> 00:58:41,950
它将会处理

1365
00:58:41,950 --> 00:58:44,980
安全层以及所有那些层。

1366
00:58:44,980 --> 00:58:46,585
~!@#$%^&*()

1367
00:58:46,585 --> 00:58:50,440
称为完全无缝体验

1368
00:58:50,440 --> 00:58:54,235
对于开发者或

1369
00:58:54,235 --> 00:58:56,370
即使是将来的操作员也会

1370
00:58:56,370 --> 00:58:59,340
尝试系统并且他们正在使用。

1371
00:58:59,340 --> 00:59:01,605
我认为关键是汽车。

1372
00:59:01,605 --> 00:59:03,915
在这一刻，因为正如你所说，

1373
00:59:03,915 --> 00:59:06,685
这一切都是关键组成部分。

1374
00:59:06,685 --> 00:59:12,310
你应该有这种简单的部署方式。

1375
00:59:12,310 --> 00:59:14,560
并且它在各个方面展示了

1376
00:59:14,560 --> 00:59:17,155
开发者以及研究社区。

1377
00:59:17,155 --> 00:59:20,090
因为每个人都来自这里，

1378
00:59:20,120 --> 00:59:24,610
我们的环境将会有

1379
00:59:25,520 --> 00:59:28,935
我们的环境将会有一些收获，作为开发者，

1380
00:59:28,935 --> 00:59:33,815
我们的环境将会有一些收获，作为开发者，操作员，以及任何想尝试的人。>> There seems to be also an issue

1381
00:59:33,815 --> 00:59:36,190
>> 似乎还存在一个问题

1382
00:59:36,190 --> 00:59:38,090
规模上可能会

1383
00:59:38,090 --> 00:59:40,360
普通的应用程序开发者

1384
00:59:40,360 --> 00:59:43,165
根本就不想要处理Kubernetes，

1385
00:59:43,165 --> 00:59:44,920
它不需要部署

1386
00:59:44,920 --> 00:59:45,800
一个完整的网络只是

1387
00:59:45,800 --> 00:59:46,875
来测试他们的应用程序。

1388
00:59:46,875 --> 00:59:51,280
我认为也许那就是原因

1389
00:59:51,280 --> 00:59:53,200
是建造的最初目标之一

1390
00:59:53,200 --> 00:59:56,804
这项由Joel维护的印度任务。

1391
00:59:56,804 --> 00:59:58,420
但看起来人们并不是

1392
00:59:58,420 --> 01:00:00,160
正在使用它或者也许

1393
01:00:00,160 --> 01:00:01,450
没有那么多

1394
01:00:01,450 --> 01:00:03,595
首先的应用程序。

1395
01:00:03,595 --> 01:00:05,970
但这当然不容易。

1396
01:00:05,970 --> 01:00:09,730
作为一个社区的其中一个输入项

1397
01:00:09,730 --> 01:00:14,095
也是为什么人们不使用它的原因，

1398
01:00:14,095 --> 01:00:17,225
我们如何能够改善那种体验。

1399
01:00:17,225 --> 01:00:19,830
绕开整个问题，

1400
01:00:19,830 --> 01:00:22,330
我需要部署一个网络部分。

1401
01:00:22,330 --> 01:00:24,145
如果你能使用一个测试位

1402
01:00:24,145 --> 01:00:27,075
进行一些快速测试，

1403
01:00:27,075 --> 01:00:28,370
然后你可以绕过

1404
01:00:28,370 --> 01:00:30,620
整个部署部分，

1405
01:00:30,690 --> 01:00:33,165
为什么这不起作用？

1406
01:00:33,165 --> 01:00:35,620
也许彼得在这方面有经验

1407
01:00:35,620 --> 01:00:40,570
那个，作为一个应用程序开发者。

1408
01:00:40,570 --> 01:00:42,625
~!@#$%^&*()

1409
01:00:42,625 --> 01:00:49,420
>> 我对测试有一个简短的评论，

1410
01:00:49,420 --> 01:00:50,710
询问原因为何？

1411
01:00:50,710 --> 01:00:51,985
人们没有使用它？

1412
01:00:51,985 --> 01:00:54,220
好吧，关于使用场景

1413
01:00:54,220 --> 01:00:56,160
我之前解释过的，

1414
01:00:56,160 --> 01:00:58,390
当我在本地设置然后

1415
01:00:58,390 --> 01:01:00,885
我明白了，这有多简单，

1416
01:01:00,885 --> 01:01:02,295
我接下来要做的事情会是

1417
01:01:02,295 --> 01:01:04,260
我接下来要做的事情会是为我的应用程序思考迁移到云端，

1418
01:01:04,260 --> 01:01:05,530
迁移到测试环境或者

1419
01:01:05,530 --> 01:01:08,815
迁移到EC2实例或其他类似的服务。

1420
01:01:08,815 --> 01:01:11,785
我认为就像最开始一样，

1421
01:01:11,785 --> 01:01:15,350
它很难，存在很多摩擦。

1422
01:01:17,010 --> 01:01:19,210
There's a lot of friction of ~!@#$%^&*()

1423
01:01:19,210 --> 01:01:21,145
在本地设置它。

1424
01:01:21,145 --> 01:01:23,630
人们甚至还没有考虑搬到

1425
01:01:23,630 --> 01:01:26,310
人们甚至还没有考虑搬到试验台上。这就是我的看法。Cathy,

1426
01:01:26,310 --> 01:01:28,990
我明白你的意思了，Cathy，

1427
01:01:28,990 --> 01:01:30,895
你说你想评论吗？

1428
01:01:30,895 --> 01:01:32,240
>> 我只是想说新的评论

1429
01:01:32,240 --> 01:01:34,400
~!@#$%^&*()

1430
01:01:34,400 --> 01:01:36,450
稍等一下。

1431
01:01:36,450 --> 01:01:39,010
我只是想说有些

1432
01:01:39,010 --> 01:01:42,655
的确，我的观点可能有些不同，因为我非常专注于

1433
01:01:42,655 --> 01:01:45,670
不同，因为我非常专注于

1434
01:01:45,670 --> 01:01:50,810
特定类型的应用程序用于测试

1435
01:01:50,810 --> 01:01:52,520
更好的是你对我说过的事情

1436
01:01:52,520 --> 01:01:54,525
因为我在思考

1437
01:01:54,525 --> 01:01:58,960
在边缘运作但实际上并不需要在互联网风格中转发，

1438
01:01:58,960 --> 01:02:03,855
实际上需要以互联网的方式转发，

1439
01:02:03,855 --> 01:02:05,410
实际上，转发是

1440
01:02:05,410 --> 01:02:08,090
一个反目标，因为

1441
01:02:08,090 --> 01:02:10,940
你不希望数据到处泄露。

1442
01:02:12,690 --> 01:02:18,280
我真的不想放置

1443
01:02:18,280 --> 01:02:20,530
放下正在有序进行的事情

1444
01:02:20,530 --> 01:02:23,325
为了建立更广泛的网络，

1445
01:02:23,325 --> 01:02:26,065
但我确实认为总是有一些途径

1446
01:02:26,065 --> 01:02:27,760
可以穿越我们所有人都做的一些共同事情。

1447
01:02:27,760 --> 01:02:29,950
穿越我们所有人都做的事情。

1448
01:02:29,950 --> 01:02:31,975
但那也让我回到了，

1449
01:02:31,975 --> 01:02:33,670
我想要自由去做……

1450
01:02:33,670 --> 01:02:36,115
我所做的这些事情给予

1451
01:02:36,115 --> 01:02:38,835
我不喜欢的建筑结构

1452
01:02:38,835 --> 01:02:41,410
是我不想拖着走的东西

1453
01:02:41,410 --> 01:02:45,340
是一堆拖累的东西，需要按顺序来处理

1454
01:02:45,340 --> 01:02:50,340
进行这种更具互联网风格的交流。

1455
01:02:50,340 --> 01:02:52,940
我不知道，也许这来自于

1456
01:02:52,940 --> 01:02:55,060
来自于更高级的发展

1457
01:02:55,060 --> 01:02:58,005
研究性的一面让我回到了这个想法

1458
01:02:58,005 --> 01:03:01,750
对人们表示欢迎，

1459
01:03:01,750 --> 01:03:04,465
进行不同的应用程序操作，

1460
01:03:04,465 --> 01:03:06,505
尤其是如果你要进行应用程序操作，

1461
01:03:06,505 --> 01:03:08,380
面向而不是，

1462
01:03:08,380 --> 01:03:10,120
我们如何将这个从

1463
01:03:10,120 --> 01:03:12,840
从这里到这里，定向了吗？

1464
01:03:18,120 --> 01:03:20,530
[无法听清] 几乎完全是这样的。

1465
01:03:20,530 --> 01:03:25,350
[无法听清] 几乎完全是这样的。Not all applications have any sense to you, the tester.

1466
01:03:25,350 --> 01:03:28,220
对你来说，作为测试者，这没有任何意义。

1467
01:03:28,220 --> 01:03:30,530
一个平静的环境，

1468
01:03:30,530 --> 01:03:33,450
~!@#$%^&*()

1469
01:03:33,450 --> 01:03:35,930
我甚至不知道怎么插上这个

1470
01:03:35,930 --> 01:03:38,420
~!@#$%^&*()

1471
01:03:38,420 --> 01:03:42,855
>> 当然，是的。说得好。

1472
01:03:42,855 --> 01:03:44,690
>> 大卫，你有

1473
01:03:44,690 --> 01:03:47,115
观众中有人举手。

1474
01:03:47,115 --> 01:03:50,075
>> 嗯，我看到了。我只是按顺序来的。

1475
01:03:50,075 --> 01:03:50,900
>> 好的。

1476
01:03:50,900 --> 01:03:55,050
>> 嗯。什么事？

1477
01:03:55,050 --> 01:03:59,750
是的。[听不清]桑普森。

1478
01:03:59,800 --> 01:04:02,660
是的。大家好。非常感谢。

1479
01:04:02,660 --> 01:04:03,800
>> 你有一个问题。

1480
01:04:03,800 --> 01:04:06,420
>> 我能。你能听见我吗？

1481
01:04:06,420 --> 01:04:08,400
>> 好的。继续说。

1482
01:04:08,400 --> 01:04:11,690
>> 好的。这可能有点

1483
01:04:11,690 --> 01:04:13,220
这确实有点让人惊讶，它出乎我们的意料。

1484
01:04:13,220 --> 01:04:15,120
确实让我们有点惊讶，我必须承认。

1485
01:04:15,120 --> 01:04:17,000
但我们一直在研究一个项目已经有

1486
01:04:17,000 --> 01:04:19,070
十年来，它看起来似乎是这样的，

1487
01:04:19,070 --> 01:04:20,355
即将推向市场

1488
01:04:20,355 --> 01:04:22,400
建立一个相当可观的预算

1489
01:04:22,400 --> 01:04:24,065
一个全球网络

1490
01:04:24,065 --> 01:04:25,670
使用许多原则

1491
01:04:25,670 --> 01:04:29,495
印度和以行为为中心的网络。

1492
01:04:29,495 --> 01:04:30,560
有很多历史

1493
01:04:30,560 --> 01:04:31,545
我不会详述，

1494
01:04:31,545 --> 01:04:34,400
但实质上，我们可能将要

1495
01:04:34,400 --> 01:04:36,230
可能会成为相当大的用户

1496
01:04:36,230 --> 01:04:37,415
的印度图书馆。

1497
01:04:37,415 --> 01:04:39,740
我们绝对喜欢印度的图书馆。

1498
01:04:39,740 --> 01:04:41,865
因为我们是从零开始建设的。

1499
01:04:41,865 --> 01:04:44,805
图书馆对我们来说非常有用。

1500
01:04:44,805 --> 01:04:47,460
测试床非常有用。

1501
01:04:47,460 --> 01:04:49,365
Everything you're doing is incredibly ~!@#$%^&*()

1502
01:04:49,365 --> 01:04:50,620
有用，除了我之前在一些评论中提到的那样，

1503
01:04:50,620 --> 01:04:51,995
在一些评论中提到的，

1504
01:04:51,995 --> 01:04:53,535
我们只需要再多一点儿

1505
01:04:53,535 --> 01:04:54,885
用户文档以帮助

1506
01:04:54,885 --> 01:04:56,925
我们找到我们的路。

1507
01:04:56,925 --> 01:05:01,635
看，我完全承认我们是一个典型的用户，

1508
01:05:01,635 --> 01:05:04,970
但我认为只是

1509
01:05:04,970 --> 01:05:08,700
作为我们正在合作的那些人，

1510
01:05:08,700 --> 01:05:10,190
我们正在寻找的，我们

1511
01:05:10,190 --> 01:05:11,740
可能是你们正在寻找的，

1512
01:05:11,740 --> 01:05:15,380
这是一个相当严肃的应用。

1513
01:05:15,380 --> 01:05:17,220
的技术。

1514
01:05:17,220 --> 01:05:19,220
希望我们能在接下来的几周内知道

1515
01:05:19,220 --> 01:05:20,975
希望我们能在接下来的几周内知道。

1516
01:05:20,975 --> 01:05:22,450
我们有一份工作说明书。

1517
01:05:22,450 --> 01:05:25,085
与潜在客户。

1518
01:05:25,085 --> 01:05:27,350
组建一个20人的团队。

1519
01:05:27,350 --> 01:05:30,180
我们需要一年时间来建造这个。

1520
01:05:30,180 --> 01:05:32,600
这是一个相当严肃的项目，

1521
01:05:32,600 --> 01:05:35,790
它将会是一个全球性网络。

1522
01:05:36,740 --> 01:05:39,190
我猜这就是我微不足道的意见。

1523
01:05:39,190 --> 01:05:40,750
这对我们来说真的很重要。

1524
01:05:40,750 --> 01:05:42,250
你正在做的事情太棒了。

1525
01:05:42,250 --> 01:05:43,970
这真是太棒了。

1526
01:05:43,970 --> 01:05:46,460
它与我们正在做的事情完美契合。

1527
01:05:46,460 --> 01:05:49,850
实际上有些

1528
01:05:49,850 --> 01:05:50,630
实际上有些早先的演讲者已经

1529
01:05:50,630 --> 01:05:52,280
实际上有些早先的演讲者已经谈到了缺失的部分。Build schedule has all of that in it.

1530
01:05:52,280 --> 01:05:54,650
建设进度表已经包含了所有这些内容。

1531
01:05:54,650 --> 01:05:58,035
我们已经采用了DevOps，特别是

1532
01:05:58,035 --> 01:06:00,225
分布式优化

1533
01:06:00,225 --> 01:06:02,840
的路由和转发，

1534
01:06:02,840 --> 01:06:04,595
基于内容的路由和转发。

1535
01:06:04,595 --> 01:06:05,240
我们正在和一个人合作。

1536
01:06:05,240 --> 01:06:06,200
我们正在和一个叫Hemi Locker的人合作。

1537
01:06:06,200 --> 01:06:09,335
我们正在和一个叫Hemi Locker的人合作，他可能在线也可能不在线的贝尔实验室的一员。

1538
01:06:09,335 --> 01:06:11,180
我们正在和一个叫Hemi Locker的人合作，他可能在线也可能不在线的贝尔实验室的一员，who is one of the world leaders in network optimization.

1539
01:06:11,180 --> 01:06:14,105
网络优化领域的世界领导者。

1540
01:06:14,105 --> 01:06:19,055
我有点绕圈子。

1541
01:06:19,055 --> 01:06:21,395
>> 那真是太好了。

1542
01:06:21,395 --> 01:06:24,425
谢谢。知道这个很好。

1543
01:06:24,425 --> 01:06:27,080
我既高兴又惊讶。

1544
01:06:27,080 --> 01:06:30,440
尽管有人甚至在做这些

1545
01:06:30,440 --> 01:06:32,140
尽管有这些痛苦来源于~!@#$%^&*()

1546
01:06:32,140 --> 01:06:34,190
我们的图书馆已经……(Translation is incomplete due to insufficient input for a complete sentence)

1547
01:06:34,190 --> 01:06:37,125
显然从我们今天的发言嘉宾那里可以看出来。

1548
01:06:37,125 --> 01:06:41,165
这种经历听起来很让人耳目一新。

1549
01:06:41,165 --> 01:06:42,710
好吧，我不得不承认我们还没有深入研究这些库，

1550
01:06:42,710 --> 01:06:44,495
不得不承认我们还没有深入研究这些库，

1551
01:06:44,495 --> 01:06:45,650
所以我可能会有

1552
01:06:45,650 --> 01:06:48,150
所以我可能会有一种不同的看法，一旦我们那样做。

1553
01:06:51,430 --> 01:06:53,660
>> 我正在仔细研究一些

1554
01:06:53,660 --> 01:06:58,470
Slack 频道中众多的评论。

1555
01:06:59,200 --> 01:07:02,930
我认为这是Cathy说的。

1556
01:07:02,930 --> 01:07:04,800
我认为这是Cathy说的。

1557
01:07:04,800 --> 01:07:07,160
她对这个概念感到担忧。

1558
01:07:07,160 --> 01:07:11,145
彼得提到的一个图书馆。

1559
01:07:11,145 --> 01:07:16,020
这与方向问题有关。

1560
01:07:16,020 --> 01:07:18,590
他说也许她想要说

1561
01:07:18,590 --> 01:07:22,320
直接对着麦克风。

1562
01:07:23,040 --> 01:07:25,120
存在一些问题

1563
01:07:25,120 --> 01:07:26,650
存在一些问题的驱动程序

1564
01:07:26,650 --> 01:07:27,820
在外面，它似乎可以更有效率。

1565
01:07:27,820 --> 01:07:29,560
似乎它们可以更高效。

1566
01:07:29,560 --> 01:07:30,970
我不愿意扼杀

1567
01:07:30,970 --> 01:07:33,400
改进和创新。

1568
01:07:34,140 --> 01:07:37,865
我们正在冒险

1569
01:07:37,865 --> 01:07:40,190
选择一个方向

1570
01:07:40,190 --> 01:07:43,170
或者专注于一个库。

1571
01:07:44,700 --> 01:07:48,260
>> 那是我发现的一个问题，在

1572
01:07:48,260 --> 01:07:52,810
那可能也会发生在其他人身上的一些特别的事情。

1573
01:07:52,810 --> 01:07:54,550
那可能也会发生在其他人身上的一些特别的事情。

1574
01:07:54,550 --> 01:07:56,830
~!@#$%^&*()

1575
01:07:56,830 --> 01:07:58,855
当我想要放进去时

1576
01:07:58,855 --> 01:08:04,350
将文件签名放入包裹时，

1577
01:08:04,350 --> 01:08:06,285
一切都如此纠缠不清。

1578
01:08:06,285 --> 01:08:07,520
如此紧密地联系在一起。

1579
01:08:07,520 --> 01:08:09,140
真的很难做到这一点。

1580
01:08:09,140 --> 01:08:12,095
这就是为什么我已经~!@#$%^&*()

1581
01:08:12,095 --> 01:08:15,005
不得不把它拿出来，我确实放进去了

1582
01:08:15,005 --> 01:08:18,260
不得不把它拿出来，我确实放进去了，在工具箱里，以防其他人需要

1583
01:08:18,260 --> 01:08:19,885
万一有其他人需要

1584
01:08:19,885 --> 01:08:22,800
进行实验。

1585
01:08:27,120 --> 01:08:29,400
我认为我们应该使其

1586
01:08:29,400 --> 01:08:30,920
尽可能让人们能够

1587
01:08:30,920 --> 01:08:33,885
尽可能让人们能够尝试新事物并鼓励这种行为。

1588
01:08:33,885 --> 01:08:35,840
我有点担心

1589
01:08:35,840 --> 01:08:37,970
如果我们走向图书馆，

1590
01:08:37,970 --> 01:08:40,280
特别是那些非常

1591
01:08:40,280 --> 01:08:42,800
纠缠不清，难以解决

1592
01:08:42,800 --> 01:08:44,860
一个模块和工作

1593
01:08:44,860 --> 01:08:46,690
如果这是你的研究兴趣所在

1594
01:08:46,690 --> 01:08:51,310
在你的包裹签名或类似的事情上。

1595
01:08:51,310 --> 01:08:52,910
我的意思是，你本不应该

1596
01:08:52,910 --> 01:08:55,065
你本不应该学习所有这些其他的东西。

1597
01:08:55,065 --> 01:08:57,200
我只是担心

1598
01:08:57,200 --> 01:08:59,265
我们应该只有这个想法是说

1599
01:08:59,265 --> 01:09:01,200
我们应该只有一个图书馆因为

1600
01:09:01,200 --> 01:09:02,960
那些外面的图书馆

1601
01:09:02,960 --> 01:09:05,940
似乎让我感到纠缠不清。

1602
01:09:08,050 --> 01:09:11,630
>> 对这一点还有其他评论吗？

1603
01:09:11,630 --> 01:09:14,775
>> 我可以快速评论一下。

1604
01:09:14,775 --> 01:09:16,690
我是从这个角度来看的

1605
01:09:16,690 --> 01:09:18,095
一个或许不同的视角

1606
01:09:18,095 --> 01:09:20,810
更多地关注研究或应用开发，

1607
01:09:20,810 --> 01:09:23,265
但更像是一个

1608
01:09:23,265 --> 01:09:25,545
通用型半开发者。

1609
01:09:25,545 --> 01:09:28,570
你会首选的

1610
01:09:28,570 --> 01:09:31,770
你会首选的图书馆，

1611
01:09:32,470 --> 01:09:34,935
这是一个高级图书馆。

1612
01:09:34,935 --> 01:09:37,370
在这里你不必担心

1613
01:09:37,370 --> 01:09:40,730
将你的数据分割成段落并且

1614
01:09:40,730 --> 01:09:44,760
然后在另一端重新组装起来。

1615
01:09:48,120 --> 01:09:50,660
我还想要提到的另一件事是

1616
01:09:50,660 --> 01:09:52,400
提到在我的幻灯片中忘记了

1617
01:09:52,400 --> 01:09:55,130
实际上是CNL图书馆

1618
01:09:55,130 --> 01:09:59,370
这实际上是为了实现这个目标而进行的

1619
01:09:59,370 --> 01:10:03,560
这是一个高层次的名称。

1620
01:10:03,560 --> 01:10:07,910
以数据为中心的库。

1621
01:10:07,910 --> 01:10:10,850
~!@#$%^&*()

1622
01:10:10,850 --> 01:10:13,425
我认为它已经过时了或者有什么问题。

1623
01:10:13,425 --> 01:10:16,350
所以它没有得到支持。

1624
01:10:16,350 --> 01:10:18,620
没有人在维护它。

1625
01:10:19,410 --> 01:10:21,965
我认为就是这样。

1626
01:10:21,965 --> 01:10:26,690
我们应该反思的一个好例子。

1627
01:10:26,690 --> 01:10:29,505
为什么它被遗弃了？

1628
01:10:29,505 --> 01:10:33,330
我认为它从来没有足够的用户。

1629
01:10:33,330 --> 01:10:35,200
然后资源就耗尽了。

1630
01:10:35,200 --> 01:10:38,190
然后一切都停止了。

1631
01:10:38,190 --> 01:10:40,935
但或许我们不需要

1632
01:10:40,935 --> 01:10:43,190
不必去发明新的库，

1633
01:10:43,190 --> 01:10:44,815
也许我们已经有了

1634
01:10:44,815 --> 01:10:48,200
旧的碎片散落在角落里

1635
01:10:48,200 --> 01:10:49,485
我们需要绘制图表并且

1636
01:10:49,485 --> 01:10:55,720
开始让它重新焕发生机。

1637
01:10:55,720 --> 01:10:58,190
[笑声]。

1638
01:10:58,190 --> 01:11:00,155
>> 资源再次短缺。

1639
01:11:00,155 --> 01:11:02,750
这似乎是一种基本的紧张关系

1640
01:11:02,750 --> 01:11:04,970
之间构建简单的东西

1641
01:11:04,970 --> 01:11:07,545
可以让人们玩耍或者工作的，

1642
01:11:07,545 --> 01:11:11,315
更换零件或替换零件。

1643
01:11:11,315 --> 01:11:13,260
通过组件，我的意思是子组件。

1644
01:11:13,260 --> 01:11:14,705
图书馆的一部分。

1645
01:11:14,705 --> 01:11:17,820
更像是凯西提到的签名。

1646
01:11:17,820 --> 01:11:19,430
这和张力之间

1647
01:11:19,430 --> 01:11:22,690
包括随时可用的旧电池

1648
01:11:22,690 --> 01:11:25,900
适用于应用程序开发者的软件包

1649
01:11:25,900 --> 01:11:27,720
不想处理那个。

1650
01:11:27,720 --> 01:11:29,765
我不确定是否

1651
01:11:29,765 --> 01:11:32,360
我看到了缓解这种紧张关系的解决办法。

1652
01:11:32,360 --> 01:11:35,070
也许不一定非得有一个解决办法。

1653
01:11:35,260 --> 01:11:43,600
Isha有一个评论。Isha。

1654
01:11:43,600 --> 01:11:46,380
是的，这是很久以前的事了。

1655
01:11:46,380 --> 01:11:48,300
但是让我快速地做一下。

1656
01:11:48,300 --> 01:11:50,865
我认为那个[听不清]提到了~!@#$%^&*()

1657
01:11:50,865 --> 01:11:52,530
我们以前的网络做...

1658
01:11:52,530 --> 01:11:54,150
没有达到测试环境的要求。

1659
01:11:54,150 --> 01:11:55,980
这取决于具体情况。

1660
01:11:55,980 --> 01:11:57,315
这取决于具体情况。

1661
01:11:57,315 --> 01:11:59,160
家庭网络完全受控

1662
01:11:59,160 --> 01:12:00,480
由最终用户控制。

1663
01:12:00,480 --> 01:12:03,720
我们现在排除条款。

1664
01:12:03,720 --> 01:12:06,425
云资源总是~!@#$%^&*()

1665
01:12:06,425 --> 01:12:10,220
有用的是因为它享受规模经济的好处。

1666
01:12:10,220 --> 01:12:11,420
基础的事情是

1667
01:12:11,420 --> 01:12:13,195
真的，谁在掌控一切？

1668
01:12:13,195 --> 01:12:17,205
在安装时与外界断开连接。

1669
01:12:17,205 --> 01:12:18,615
那是发生过的事情。

1670
01:12:18,615 --> 01:12:20,820
很久以前，当那需要付出一些努力。

1671
01:12:20,820 --> 01:12:22,590
但现在，看看她们的谈话吧。

1672
01:12:22,590 --> 01:12:25,560
大约是关于一个图书馆或多个图书馆的事情。

1673
01:12:25,560 --> 01:12:27,225
大概是，

1674
01:12:27,225 --> 01:12:28,860
有不同的方法

1675
01:12:28,860 --> 01:12:30,435
来看待那个问题。

1676
01:12:30,435 --> 01:12:33,270
彼得提到了他为什么想要看到那个在

1677
01:12:33,270 --> 01:12:35,970
彼得提到了他为什么想要看到那个在一方面层次的库，它实际上具有所有的组件，以便

1678
01:12:35,970 --> 01:12:38,490
实际上具有所有的组件，以便

1679
01:12:38,490 --> 01:12:41,925
~!@#$%^&*()

1680
01:12:41,925 --> 01:12:44,400
去购物的人在……

1681
01:12:44,400 --> 01:12:45,465
一件艺术品一个地方，

1682
01:12:45,465 --> 01:12:48,945
考虑到这些艺术品来自不同的地方。

1683
01:12:48,945 --> 01:12:52,170
但同时，我认为凯蒂是对的。

1684
01:12:52,170 --> 01:12:56,445
在这个时候的研究中，

1685
01:12:56,445 --> 01:12:58,620
我们应该让百花齐放。

1686
01:12:58,620 --> 01:13:00,810
[无法听清]有他自己的方式。

1687
01:13:00,810 --> 01:13:03,120
他想要建立图书馆。

1688
01:13:03,120 --> 01:13:05,010
他想要得到

1689
01:13:05,010 --> 01:13:07,620
他想要得到Python库并在外出时使用。

1690
01:13:07,620 --> 01:13:12,150
to utilize resources already

同样，足够灵活并能够利用已有资源。

1691
01:13:12,150 --> 01:13:14,790
利用已有资源

1692
01:13:14,790 --> 01:13:16,440
利用为其他图书馆建造的资源。

1693
01:13:16,440 --> 01:13:18,300
我认为那听起来

1694
01:13:18,300 --> 01:13:20,250
我认为那听起来对我来说是一个好的方向。

1695
01:13:20,250 --> 01:13:22,200
事实上，我不是

1696
01:13:22,200 --> 01:13:24,975
为他的图书馆做广告，

1697
01:13:24,975 --> 01:13:27,735
为了Python，这...

1698
01:13:27,735 --> 01:13:31,260
为了非常快速地得到，已经相当晚了

1699
01:13:31,260 --> 01:13:33,555
为了非常快速地得到，已经相当晚了，the pick that by some recent, applications like a professor.

1700
01:13:33,555 --> 01:13:36,090
应用程序就像一个教授。

1701
01:13:36,090 --> 01:13:39,015
~!@#$%^&*()

1702
01:13:39,015 --> 01:13:41,715
是一款增强现实应用程序，

1703
01:13:41,715 --> 01:13:43,665
位于哪里？

1704
01:13:43,665 --> 01:13:46,200
那么新开始的项目呢？

1705
01:13:46,200 --> 01:13:47,460
我认为我们是一致的

1706
01:13:47,460 --> 01:13:48,480
明天要谈的内容，

1707
01:13:48,480 --> 01:13:49,800
大概是

1708
01:13:49,800 --> 01:13:52,290
液压分布式存储系统。

1709
01:13:52,290 --> 01:13:54,030
它也正在建设之中

1710
01:13:54,030 --> 01:13:56,560
Python库的顶部。

1711
01:13:57,050 --> 01:13:59,040
我认为它应该

1712
01:13:59,040 --> 01:14:00,630
吸引到其中一个图书馆去

1713
01:14:00,630 --> 01:14:03,030
>> 谢谢。

1714
01:14:03,030 --> 01:14:06,405
>> 谢谢，丽霞。我们的时间不多了。

1715
01:14:06,405 --> 01:14:08,550
我想看看是否还有最后一轮

1716
01:14:08,550 --> 01:14:12,030
每条评论一秒钟。

1717
01:14:12,030 --> 01:14:13,170
~!@#$%^&*()

1718
01:14:13,170 --> 01:14:13,950
好的，让我来。

1719
01:14:13,950 --> 01:14:16,090
好的，让我来。

1720
01:14:16,670 --> 01:14:19,380
我感受到了紧张的气氛。

1721
01:14:19,380 --> 01:14:21,540
这个单一图书馆的想法，

1722
01:14:21,540 --> 01:14:25,365
我们需要做一些创业方面的事情。

1723
01:14:25,365 --> 01:14:27,420
组装完整的工具包

1724
01:14:27,420 --> 01:14:29,640
对于开发应用程序的人来说。

1725
01:14:29,640 --> 01:14:31,230
我认为我们已经到了这样一个地步，在这里

1726
01:14:31,230 --> 01:14:33,630
我们需要的应用程序开发

1727
01:14:33,630 --> 01:14:35,670
退后一步并且

1728
01:14:35,670 --> 01:14:37,020
开始建造踏步

1729
01:14:37,020 --> 01:14:38,475
为人们铺设石头。

1730
01:14:38,475 --> 01:14:41,130
可以使用来做那个第一次应用。

1731
01:14:41,130 --> 01:14:43,830
可以使用来做那个第一次应用。

1732
01:14:43,830 --> 01:14:47,430
那么如果我们来看看同步库，

1733
01:14:47,430 --> 01:14:48,855
他们一直在成熟。

1734
01:14:48,855 --> 01:14:50,850
在过去的几年里。

1735
01:14:50,850 --> 01:14:53,250
我认为我们现在真的很专注。

1736
01:14:53,250 --> 01:14:56,115
一旦他们开始使用向量同步。

1737
01:14:56,115 --> 01:14:57,930
一旦他们开始使用向量同步，那第一块垫脚石在哪里

1738
01:14:57,930 --> 01:14:59,220
就在那里。

1739
01:14:59,220 --> 01:15:00,870
他们可以做一个简单的申请，

1740
01:15:00,870 --> 01:15:01,860
然后他们可以开始

1741
01:15:01,860 --> 01:15:03,090
使用类似同步的功能，

1742
01:15:03,090 --> 01:15:04,680
然后他们会意识到，嘿，

1743
01:15:04,680 --> 01:15:07,005
我需要加强安全性。

1744
01:15:07,005 --> 01:15:09,015
然后提高这个安全性。

1745
01:15:09,015 --> 01:15:10,770
可以使用的库，

1746
01:15:10,770 --> 01:15:12,420
以及人们使用

1747
01:15:12,420 --> 01:15:13,950
我们所使用的那些垫脚石，我们将不得不对它们进行完善，以...

1748
01:15:13,950 --> 01:15:15,450
我们将不得不对它们进行完善，以

1749
01:15:15,450 --> 01:15:17,265
我们将不得不对它们进行完善，以使它们更好、更实用。

1750
01:15:17,265 --> 01:15:18,855
但不要试图

1751
01:15:18,855 --> 01:15:21,150
但不要试图一次尝试所有的可能性，

1752
01:15:21,150 --> 01:15:22,545
但要确保我们有

1753
01:15:22,545 --> 01:15:23,910
坚实的垫脚石给

1754
01:15:23,910 --> 01:15:26,070
人们开始沿着那条路前进。

1755
01:15:26,070 --> 01:15:29,680
>> 那是一个很好的观点。谢谢，约翰。

1756
01:15:29,930 --> 01:15:32,700
>> 我只想说

1757
01:15:32,700 --> 01:15:36,015
我拥有的工具箱，

1758
01:15:36,015 --> 01:15:37,740
这不一定会发生

1759
01:15:37,740 --> 01:15:38,880
为了让每个人都受益。

1760
01:15:38,880 --> 01:15:41,040
但其中一点是，

1761
01:15:41,040 --> 01:15:47,760
存在一个进入信任模式的API，

1762
01:15:47,760 --> 01:15:50,550
受控传输是指

1763
01:15:50,550 --> 01:15:53,820
旨在某种程度上类似于MQTT。

1764
01:15:53,820 --> 01:15:56,579
你可以写一些东西。

1765
01:15:56,579 --> 01:15:59,580
在上面你可以发布和订阅，

1766
01:15:59,580 --> 01:16:01,140
而且你不需要

1767
01:16:01,140 --> 01:16:03,420
你不需要知道所有这些其他的事情。

1768
01:16:03,420 --> 01:16:06,060
很遗憾，你现在必须写。

1769
01:16:06,060 --> 01:16:07,770
搭建并运行NFT平台，

1770
01:16:07,770 --> 01:16:10,020
正在努力简化这一切，但我们正在

1771
01:16:10,020 --> 01:16:12,735
正在努力让这变得更简单。

1772
01:16:12,735 --> 01:16:15,090
我并不是说这就是结束，

1773
01:16:15,090 --> 01:16:16,830
但这是每个人都应该做的事情，

1774
01:16:16,830 --> 01:16:19,590
everyone should do, and after that, anyone else can take a look.

1775
01:16:19,590 --> 01:16:21,930
其他人可以看一看。

1776
01:16:21,930 --> 01:16:23,880
那么如果他们在的话，

1777
01:16:23,880 --> 01:16:26,115
看看哪些对他们有用，哪些没有。

1778
01:16:26,115 --> 01:16:28,440
我们已经尽力使它模块化并且

1779
01:16:28,440 --> 01:16:30,955
它涵盖了所有概念，C++，

1780
01:16:30,955 --> 01:16:35,100
这些库都是头文件，

1781
01:16:35,100 --> 01:16:38,340
所以它们更像是现代库的风格。

1782
01:16:38,340 --> 01:16:40,570
我就说到这里。

1783
01:16:41,720 --> 01:16:44,295
>> 谈论同步

1784
01:16:44,295 --> 01:16:45,765
彼得提到的那些图书馆，

1785
01:16:45,765 --> 01:16:47,490
好像没问题，

1786
01:16:47,490 --> 01:16:50,240
因为就被遗弃了

1787
01:16:50,240 --> 01:16:52,910
人手不足。

1788
01:16:52,910 --> 01:16:56,000
那个图书馆如果我没记错的话，

1789
01:16:56,000 --> 01:16:57,260
那是由一个人开发的。

1790
01:16:57,260 --> 01:16:58,640
那个人是

1791
01:16:58,640 --> 01:17:02,310
完成了，这样杠杆就会被放弃。

1792
01:17:02,310 --> 01:17:04,275
我认为没有

1793
01:17:04,275 --> 01:17:06,075
那个库的一个设计问题

1794
01:17:06,075 --> 01:17:10,065
而我的Python最终也是受到那个的启发。

1795
01:17:10,065 --> 01:17:12,240
而你经常会看到那个。

1796
01:17:12,240 --> 01:17:13,800
我想我会去

1797
01:17:13,800 --> 01:17:15,990
相同的方向或者

1798
01:17:15,990 --> 01:17:18,825
至少与目前的方向非常相似，

1799
01:17:18,825 --> 01:17:22,540
Python在印度的未来发展。

1800
01:17:23,930 --> 01:17:26,940
>> 这是一个好结果，对于

1801
01:17:26,940 --> 01:17:29,700
图书馆如果它激励了你去做更多的工作。

1802
01:17:29,700 --> 01:17:32,520
如果我正在复兴这个图书馆的话，

1803
01:17:32,520 --> 01:17:34,980
我把它更新到了印度的末端。

1804
01:17:34,980 --> 01:17:39,510
我最后想要补充的是

1805
01:17:39,510 --> 01:17:46,110
或许为了缓和我那些令人沮丧的评论，

1806
01:17:46,110 --> 01:17:48,060
其实并不是那么糟糕。

1807
01:17:48,060 --> 01:17:51,180
我尝试构建的东西，

1808
01:17:51,180 --> 01:17:53,370
我尝试记录并且

1809
01:17:53,370 --> 01:17:55,710
发布成易于使用的东西，

1810
01:17:55,710 --> 01:17:58,180
和我从中学到了很多，

1811
01:17:58,850 --> 01:18:01,620
我会说它有点儿

1812
01:18:01,620 --> 01:18:03,450
印度RPC库失败了。

1813
01:18:03,450 --> 01:18:05,175
没有人真正构建过

1814
01:18:05,175 --> 01:18:08,025
除了我使用这个库之外，没有人真的构建过一个应用程序。

1815
01:18:08,025 --> 01:18:11,730
除了我

1816
01:18:11,730 --> 01:18:14,940
构建新的库和组件，

1817
01:18:14,940 --> 01:18:17,080
努力去尽可能地让它对用户友好。

1818
01:18:17,090 --> 01:18:20,835
尽可能地使其对用户友好。

1819
01:18:20,835 --> 01:18:23,490
将其放入那个包管理器中。

1820
01:18:23,490 --> 01:18:24,870
像APT一样进行软件包管理，

1821
01:18:24,870 --> 01:18:26,430
所以人们可以安装

1822
01:18:26,430 --> 01:18:28,485
因此人们可以安装它而无需从源代码构建。

1823
01:18:28,485 --> 01:18:31,740
只需几个例子

1824
01:18:31,740 --> 01:18:35,430
就能立刻知道如何使用它，

1825
01:18:35,430 --> 01:18:38,970
我认为，如果创造它们的人能立刻知道如何使用它，他们自己的组件会尝试去做到这一点，

1826
01:18:38,970 --> 01:18:42,180
他们自己的组件会尝试去做到这一点，

1827
01:18:42,180 --> 01:18:44,100
这已经足够好了。

1828
01:18:44,100 --> 01:19:02,580
~!@#$%^&*()

1829
01:19:02,580 --> 01:19:06,100
>> 我必须要选吗？Marcin你先来。

1830
01:19:08,000 --> 01:19:11,010
>> 我听到的，就像很多钱涌入了那个图书馆

1831
01:19:11,010 --> 01:19:13,170
涌入那个图书馆的钱

1832
01:19:13,170 --> 01:19:15,930
和这个统一的观点

1833
01:19:15,930 --> 01:19:19,125
我们需要对我重写的一些内容有所了解。

1834
01:19:19,125 --> 01:19:21,345
我们需要有

1835
01:19:21,345 --> 01:19:25,200
我们需要有共享复合应用程序，这些程序能够完全支持并且能够

1836
01:19:25,200 --> 01:19:26,880
完全支持并且能够

1837
01:19:26,880 --> 01:19:29,580
能够完全显示可见性。

1838
01:19:29,580 --> 01:19:33,690
这确实取决于董事会的决定。

1839
01:19:33,690 --> 01:19:36,089
帮助他们并且重新集中他们的注意力。

1840
01:19:36,089 --> 01:19:38,670
从美高梅开始。

1841
01:19:38,670 --> 01:19:42,615
我认为那真的很有帮助。

1842
01:19:42,615 --> 01:19:46,470
我们听说的也是真的亏损。

1843
01:19:46,470 --> 01:19:50,145
满足这种类型需求的

1844
01:19:50,145 --> 01:19:52,320
API 被用来帮助

1845
01:19:52,320 --> 01:19:56,130
API 被用来帮助 the couple authors to build an application logs.

1846
01:19:56,130 --> 01:19:59,475
构建应用程序日志。

1847
01:19:59,475 --> 01:20:01,470
我认为不是这样的。

1848
01:20:01,470 --> 01:20:03,150
我们不需要只有一种语言。

1849
01:20:03,150 --> 01:20:04,589
我们需要多种语言。

1850
01:20:04,589 --> 01:20:06,390
即使图书馆，一个

1851
01:20:06,390 --> 01:20:08,730
他在许多方面给予支持，

1852
01:20:08,730 --> 01:20:10,740
如果你想运行所谓的使用

1853
01:20:10,740 --> 01:20:12,990
高兰，你不再需要高兰，

1854
01:20:12,990 --> 01:20:14,535
我们应该使用高兰

1855
01:20:14,535 --> 01:20:16,770
作为一种语言，

1856
01:20:16,770 --> 01:20:19,305
和C++也是一样的。

1857
01:20:19,305 --> 01:20:23,180
我们应该拥有完全的自由来

1858
01:20:23,180 --> 01:20:28,800
选择你的开发者和他们自己。

1859
01:20:31,820 --> 01:20:35,080
>> Alex，你想做个总结吗？

1860
01:20:35,630 --> 01:20:39,280
>> 当然，两点。

1861
01:20:39,640 --> 01:20:41,990
我们需要多个杠杆。

1862
01:20:41,990 --> 01:20:43,040
对多种语言来说是

1863
01:20:43,040 --> 01:20:44,405
仅仅是一个问题

1864
01:20:44,405 --> 01:20:45,680
我们到底要怎么办

1865
01:20:45,680 --> 01:20:47,150
支持所有这些东西。

1866
01:20:47,150 --> 01:20:49,310
这就是唯一的问题。

1867
01:20:49,310 --> 01:20:51,515
我没有其他问题。

1868
01:20:51,515 --> 01:20:53,130
我希望我们已经放置了

1869
01:20:53,130 --> 01:20:54,885
我们已经放置了每一种可能的语言在世界上。

1870
01:20:54,885 --> 01:20:58,020
谁喜欢令人难以置信的现代，

1871
01:20:58,020 --> 01:20:59,820
我不知道该怎么办。

1872
01:20:59,820 --> 01:21:01,875
比其他的都要高级。

1873
01:21:01,875 --> 01:21:04,470
>> 只需使用最高级的

1874
01:21:04,470 --> 01:21:06,740
现在。它是最伟大的。

1875
01:21:06,740 --> 01:21:08,210
也许适合列出清单。

1876
01:21:08,210 --> 01:21:11,375
但那会[听不清]耦合。

1877
01:21:11,375 --> 01:21:13,190
但另一个我

1878
01:21:13,190 --> 01:21:14,960
只想稍微评论一下，

1879
01:21:14,960 --> 01:21:16,475
关于约翰所说的内容，并没有真正得出结论。

1880
01:21:16,475 --> 01:21:18,325
关于约翰所说的内容。

1881
01:21:18,325 --> 01:21:20,040
我认为这个踏脚石是

1882
01:21:20,040 --> 01:21:21,645
我认为这个踏脚石是一种传统的前进方式，在地面上从头开始应用开发。

1883
01:21:21,645 --> 01:21:24,495
在地面上从头开始应用开发

1884
01:21:24,495 --> 01:21:27,060
在最后加上节奏证券。

1885
01:21:27,060 --> 01:21:29,220
有时候我们不知道

1886
01:21:29,220 --> 01:21:30,615
有时候我不知道怎么解决。

1887
01:21:30,615 --> 01:21:32,730
但或许Cathy的方式

1888
01:21:32,730 --> 01:21:36,180
的实施方式思考，

1889
01:21:36,180 --> 01:21:38,850
在应用程序开始的地方，

1890
01:21:38,850 --> 01:21:40,410
加固之后，然后你添加

1891
01:21:40,410 --> 01:21:42,450
一些沟通元素也许会有。

1892
01:21:42,450 --> 01:21:44,835
[笑声] 再来一次，

1893
01:21:44,835 --> 01:21:48,670
这就是我觉得这个问题有点奇怪的地方。

1894
01:21:51,680 --> 01:21:55,995
>> 谢谢。有了这个

1895
01:21:55,995 --> 01:21:58,500
我们已经超时七分钟了。

1896
01:21:58,500 --> 01:22:00,975
我觉得我们可以继续讨论好几个小时。

1897
01:22:00,975 --> 01:22:02,865
与非常有成效的，

1898
01:22:02,865 --> 01:22:04,604
有趣的讨论。

1899
01:22:04,604 --> 01:22:07,545
但不幸的是，我们必须结束讨论。

1900
01:22:07,545 --> 01:22:10,200
我们必须在这里停止。

1901
01:22:10,200 --> 01:22:13,660
我要再次感谢所有的小组成员。

1902
01:22:13,870 --> 01:22:20,630
我相信我们有一个午餐休息时间或类似的安排。

1903
01:22:20,630 --> 01:22:22,860
取决于我们所在的时区。

1904
01:22:25,430 --> 01:22:32,695
我们将在1:30恢复第二场会议。

1905
01:22:32,695 --> 01:22:35,475
我们将在1:30恢复第二场会议。1:30 Eastern. Thank you again.

1906
01:22:35,475 --> 01:22:39,820
我们将在东部时间1:30恢复第二场会议。再次感谢。

