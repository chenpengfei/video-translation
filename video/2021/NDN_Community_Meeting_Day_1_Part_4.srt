1
00:00:00,260 --> 00:00:03,360
>> Hey, welcome
back, everyone.

2
00:00:03,360 --> 00:00:05,650
Our next session
has a set of

3
00:00:05,650 --> 00:00:07,810
seven short
presentations and

4
00:00:07,810 --> 00:00:10,400
will be chaired
by Jay Misra.

5
00:00:10,400 --> 00:00:13,090
Jay is a computer
science professor

6
00:00:13,090 --> 00:00:15,415
at New Mexico
State University.

7
00:00:15,415 --> 00:00:17,050
His research interests

8
00:00:17,050 --> 00:00:19,030
include algorithm
and protocol

9
00:00:19,030 --> 00:00:20,620
design and development for

10
00:00:20,620 --> 00:00:22,645
anonymity and security,

11
00:00:22,645 --> 00:00:25,180
as well as network
survivability.

12
00:00:25,180 --> 00:00:28,105
Jay, go ahead, please.

13
00:00:28,105 --> 00:00:31,390
>> Thanks, Lotfi.
Welcome everyone

14
00:00:31,390 --> 00:00:33,505
to this short
presentation session.

15
00:00:33,505 --> 00:00:35,590
Like Lotfi
mentioned, we'll

16
00:00:35,590 --> 00:00:38,740
have several of
our panellists,

17
00:00:38,740 --> 00:00:41,340
almost seven attendees
making presentations.

18
00:00:41,340 --> 00:00:42,480
Without spending
much time, let

19
00:00:42,480 --> 00:00:45,050
me introduce our
first presenter.

20
00:00:45,050 --> 00:00:47,515
Our first presenter
is Dr Xtian,

21
00:00:47,515 --> 00:00:49,725
who received his PhD from

22
00:00:49,725 --> 00:00:50,360
the Department of

23
00:00:50,360 --> 00:00:51,680
Electrical and
Computer Engineering

24
00:00:51,680 --> 00:00:54,620
from the University of
Connecticut in 2010.

25
00:00:54,620 --> 00:00:56,870
He joined Intelligent
Fusion Technologies

26
00:00:56,870 --> 00:00:58,760
in Germantown,

27
00:00:58,760 --> 00:01:02,190
Maryland in 2010
and has done

28
00:01:02,190 --> 00:01:04,460
much research in
satellite communications,

29
00:01:04,460 --> 00:01:05,660
cognitive radio systems,

30
00:01:05,660 --> 00:01:06,920
and communication
networks.

31
00:01:06,920 --> 00:01:08,150
He's now the Network and

32
00:01:08,150 --> 00:01:09,815
Communication
Research Director at

33
00:01:09,815 --> 00:01:11,585
Intelligent Fusion
Technology.

34
00:01:11,585 --> 00:01:14,040
Go ahead Dr Xtian.

35
00:01:17,050 --> 00:01:19,410
>> [NOISE] Thank you.

36
00:01:21,760 --> 00:01:23,660
>> We can't see you clear.

37
00:01:23,660 --> 00:01:32,850
>> Off the screen.
Good afternoon.

38
00:01:34,750 --> 00:01:39,180
We're happy to attend
this workshop.

39
00:01:40,390 --> 00:01:44,230
We'll start work on NDN.

40
00:01:44,230 --> 00:01:45,960
This is work from

41
00:01:45,960 --> 00:01:47,700
Intelligent
Fusion Technology

42
00:01:47,700 --> 00:01:52,330
with Air Force
Research Lab.

43
00:01:52,640 --> 00:01:57,750
This top we'll talk
about the method

44
00:01:57,750 --> 00:02:00,600
for NDN based
data transfer

45
00:02:00,600 --> 00:02:03,460
in multi-path networking
environments.

46
00:02:05,330 --> 00:02:09,730
Here's the problem
description.

47
00:02:10,910 --> 00:02:16,560
In this part, I will
try to apply NDN

48
00:02:16,560 --> 00:02:19,110
to satellites
SATCOM networks

49
00:02:19,110 --> 00:02:22,245
and applications.

50
00:02:22,245 --> 00:02:25,680
There are many scenarios,

51
00:02:25,680 --> 00:02:27,120
that's network
environments,

52
00:02:27,120 --> 00:02:28,585
smart multi-path.

53
00:02:28,585 --> 00:02:32,270
For example, the satellite
constellation has

54
00:02:32,270 --> 00:02:35,105
LEO satellite
constellation station or

55
00:02:35,105 --> 00:02:39,900
has multiple paths like
oscillation coverage.

56
00:02:40,760 --> 00:02:44,800
It appears in
the multi-path.

57
00:02:45,780 --> 00:02:49,905
Another case is
when you have

58
00:02:49,905 --> 00:02:51,600
multiple networks from

59
00:02:51,600 --> 00:02:54,950
different providers
like Darla Nicolson,

60
00:02:54,950 --> 00:02:59,095
Aldi networks, all
personal networks.

61
00:02:59,095 --> 00:03:02,445
We're looking into
the application of

62
00:03:02,445 --> 00:03:06,019
NDN as an OLA network

63
00:03:06,019 --> 00:03:08,945
to be able to utilize

64
00:03:08,945 --> 00:03:13,510
the multi-path
communication network.

65
00:03:13,510 --> 00:03:17,180
Specifically, we want to

66
00:03:17,180 --> 00:03:20,030
get that improvement
for multi-path like

67
00:03:20,030 --> 00:03:23,915
a network throughput
and as a first goal

68
00:03:23,915 --> 00:03:26,690
and maybe also
an improvement

69
00:03:26,690 --> 00:03:30,900
in robustness for
certain applications.

70
00:03:32,180 --> 00:03:36,760
There are a few challenges
with multi-path.

71
00:03:37,010 --> 00:03:41,020
First is the multi-path,

72
00:03:41,020 --> 00:03:42,710
especially if you have

73
00:03:42,710 --> 00:03:44,760
a satellite network that

74
00:03:44,760 --> 00:03:46,200
is a different nature like

75
00:03:46,200 --> 00:03:50,430
a LEO network and lowers

76
00:03:50,430 --> 00:03:55,035
orbit or GEO is
a high orbit.

77
00:03:55,035 --> 00:03:57,840
The delay difference
can be very large,

78
00:03:57,840 --> 00:04:05,230
and so that's the
first challenge.

79
00:04:07,400 --> 00:04:10,425
So consider this
specific scenario,

80
00:04:10,425 --> 00:04:15,035
you have one consumer
and one data producer.

81
00:04:15,035 --> 00:04:17,125
You want to communicate,

82
00:04:17,125 --> 00:04:20,040
so these multi-path
network environments.

83
00:04:20,040 --> 00:04:24,560
The other one is the
end-to-end circle levels

84
00:04:24,560 --> 00:04:28,595
available from different
paths is unknown,

85
00:04:28,595 --> 00:04:32,555
so you need to learn them.

86
00:04:32,555 --> 00:04:35,430
The third one is

87
00:04:35,430 --> 00:04:39,555
the potential coupling
of the multi-paths,

88
00:04:39,555 --> 00:04:43,945
between a consumer
and a data producer.

89
00:04:43,945 --> 00:04:48,155
That is some challenges

90
00:04:48,155 --> 00:04:52,200
in this environment
for achieving high.

91
00:04:53,410 --> 00:04:57,650
Though we talk about
solutions because we

92
00:04:57,650 --> 00:05:05,750
also have Professor
Misra from UCLA.

93
00:05:05,750 --> 00:05:07,550
He'll help you
answer this.

94
00:05:07,550 --> 00:05:12,995
The first
solution is just,

95
00:05:12,995 --> 00:05:16,900
I think such
emphysema UCLA,

96
00:05:16,900 --> 00:05:18,620
he talked about
earlier, it's

97
00:05:18,620 --> 00:05:21,580
dynamic and multi-path
forwarding.

98
00:05:21,580 --> 00:05:24,665
They tried to develop

99
00:05:24,665 --> 00:05:26,660
unjust control rate

100
00:05:26,660 --> 00:05:29,030
based on congestion
control.

101
00:05:29,030 --> 00:05:31,715
Basically you match
the sending rate and

102
00:05:31,715 --> 00:05:33,860
the interest package
sending rate under

103
00:05:33,860 --> 00:05:36,050
the data package
coming back.

104
00:05:36,050 --> 00:05:42,260
I tried to deal with

105
00:05:42,260 --> 00:05:46,280
the delay difference in

106
00:05:46,280 --> 00:05:49,280
different assets
are a unique case.

107
00:05:49,280 --> 00:05:54,180
You have ash in the
middle network.

108
00:05:56,290 --> 00:05:59,970
But it's so

109
00:05:59,970 --> 00:06:02,780
the consumer side
is pretty simple.

110
00:06:02,780 --> 00:06:06,240
In that case, it's

111
00:06:08,900 --> 00:06:11,310
not easier but just

112
00:06:11,310 --> 00:06:12,825
control the sending rate,

113
00:06:12,825 --> 00:06:17,960
but our forwarders
need to try

114
00:06:17,960 --> 00:06:20,810
to match the incoming
interest rate

115
00:06:20,810 --> 00:06:23,375
and the package
return rate also,

116
00:06:23,375 --> 00:06:26,690
it has more complex

117
00:06:26,690 --> 00:06:28,010
decision-making with

118
00:06:28,010 --> 00:06:29,689
the forwarding decisions,

119
00:06:29,689 --> 00:06:33,035
like which one to use
a how much report to

120
00:06:33,035 --> 00:06:37,919
apply on it's your
face available.

121
00:06:39,890 --> 00:06:43,365
The data consumer
side just uses

122
00:06:43,365 --> 00:06:47,170
single congestion
to control.

123
00:06:47,450 --> 00:06:49,860
For other site has

124
00:06:49,860 --> 00:06:54,520
more compact forwarding
decision-making.

125
00:06:56,840 --> 00:06:59,340
There are a lot
of challenges,

126
00:06:59,340 --> 00:07:01,890
I think in this case

127
00:07:01,890 --> 00:07:04,830
is so the effective
throughput

128
00:07:04,830 --> 00:07:06,570
through the multi-path
network would

129
00:07:06,570 --> 00:07:10,550
be achieved between
the consumer and

130
00:07:10,550 --> 00:07:13,700
the data producer
actually depends

131
00:07:13,700 --> 00:07:17,955
on the decision-makers,
that are forwarders.

132
00:07:17,955 --> 00:07:20,415
When you have
many forwarders

133
00:07:20,415 --> 00:07:21,500
across a network,

134
00:07:21,500 --> 00:07:24,050
so it's a dynamic of

135
00:07:24,050 --> 00:07:26,030
the decision-making

136
00:07:26,030 --> 00:07:29,360
and the circle
levels make this,

137
00:07:29,360 --> 00:07:32,615
could be challenging
to handle,

138
00:07:32,615 --> 00:07:36,390
especially if you
have a longer delay.

139
00:07:36,440 --> 00:07:40,890
The dynamics, it's
hard to predict.

140
00:07:40,890 --> 00:07:43,115
I think there are
certain challenges

141
00:07:43,115 --> 00:07:44,900
in this approach,

142
00:07:44,900 --> 00:07:49,410
but it also has many
benefits. Of course.

143
00:07:50,410 --> 00:07:53,755
Next is,

144
00:07:53,755 --> 00:07:58,125
another solution we
think can be applied is,

145
00:07:58,125 --> 00:08:02,265
we add a flow ID

146
00:08:02,265 --> 00:08:04,560
into the NDN
interest packages.

147
00:08:04,560 --> 00:08:06,925
It's not a part

148
00:08:06,925 --> 00:08:10,970
of the name of the
user's name of

149
00:08:10,970 --> 00:08:14,780
the data but it's

150
00:08:14,780 --> 00:08:18,800
just a flow ID towards
the interests package.

151
00:08:18,800 --> 00:08:22,020
It's added by either
the consumer side.

152
00:08:22,020 --> 00:08:24,980
With a flow ID, basically,

153
00:08:24,980 --> 00:08:29,230
we can create water flow
through the network.

154
00:08:29,230 --> 00:08:34,305
In this example, you
have a spray flows.

155
00:08:34,305 --> 00:08:38,230
We'll put a
forwarder flighty.

156
00:08:38,230 --> 00:08:42,300
The decision-making
becomes simple.

157
00:08:42,300 --> 00:08:46,580
Though for a Package with

158
00:08:46,580 --> 00:08:50,140
a similar file
name and different

159
00:08:50,140 --> 00:08:51,320
flow ID you may

160
00:08:51,320 --> 00:08:54,915
use different
forwarding decisions.

161
00:08:54,915 --> 00:08:58,830
Forward interests
package with

162
00:08:58,830 --> 00:09:03,100
the same filename and
similar filename.

163
00:09:03,100 --> 00:09:04,955
Of course,
different segments

164
00:09:04,955 --> 00:09:07,850
and the simpler you use

165
00:09:07,850 --> 00:09:15,345
the same base before
as those packages.

166
00:09:15,345 --> 00:09:17,435
Basically, it's come
words that I have

167
00:09:17,435 --> 00:09:18,830
some multi-path
network [OVERLAPPING]

168
00:09:18,830 --> 00:09:21,545
environment into an
environmentalist

169
00:09:21,545 --> 00:09:23,715
multiple, single path.

170
00:09:23,715 --> 00:09:25,720
Use single path and

171
00:09:25,720 --> 00:09:27,605
[OVERLAPPING] the
consumer side.

172
00:09:27,605 --> 00:09:29,310
Yeah, you're used to

173
00:09:29,310 --> 00:09:30,975
its own congest control.

174
00:09:30,975 --> 00:09:33,080
Basically, in this case,

175
00:09:33,080 --> 00:09:36,065
you will handle the
delay variation

176
00:09:36,065 --> 00:09:40,470
problem with the flow ID.

177
00:09:40,470 --> 00:09:42,300
Also forwarding decisions

178
00:09:42,300 --> 00:09:45,250
either forwarders
are simple.

179
00:09:46,340 --> 00:09:50,580
Though the so-called
from each of

180
00:09:50,580 --> 00:09:55,240
the passages can be
effectively utilized.

181
00:09:56,150 --> 00:09:59,655
Though I think that's
a few advantages

182
00:09:59,655 --> 00:10:09,195
of a bush and also

183
00:10:09,195 --> 00:10:12,030
for the creation of
the attacker flows,

184
00:10:12,030 --> 00:10:13,560
we suggest to build

185
00:10:13,560 --> 00:10:15,930
the flows
sequentially like,

186
00:10:15,930 --> 00:10:17,810
you establish
the first flow.

187
00:10:17,810 --> 00:10:21,170
When the so-called
reaches a stable level,

188
00:10:21,170 --> 00:10:22,430
you start the next line.

189
00:10:22,430 --> 00:10:25,190
Helps forwarders
to identify

190
00:10:25,190 --> 00:10:31,210
independent paths for
the data transfer.

191
00:10:31,210 --> 00:10:37,640
That helps reduce
the coupling

192
00:10:37,640 --> 00:10:39,485
of different paths so

193
00:10:39,485 --> 00:10:41,939
you get better
performance.

194
00:10:42,300 --> 00:10:47,345
That's basically,
yeah, we're

195
00:10:47,345 --> 00:10:50,045
still trying to implement

196
00:10:50,045 --> 00:10:53,090
these solutions and
see how it works,

197
00:10:53,090 --> 00:10:54,590
and maybe compare it to

198
00:10:54,590 --> 00:10:59,500
the dynamic multi-path
forwarding strategy.

199
00:11:00,690 --> 00:11:06,160
>> Thank you very
much Dr. Xtian.

200
00:11:06,160 --> 00:11:08,110
For any questions
or follow up,

201
00:11:08,110 --> 00:11:09,520
you could probably use

202
00:11:09,520 --> 00:11:11,290
the Slack channel
for discussion.

203
00:11:11,290 --> 00:11:12,850
Since we have seven

204
00:11:12,850 --> 00:11:14,215
presentations
and 70 minutes,

205
00:11:14,215 --> 00:11:14,980
we basically have

206
00:11:14,980 --> 00:11:16,165
10 minutes per
presentation.

207
00:11:16,165 --> 00:11:17,815
This is really
interesting.

208
00:11:17,815 --> 00:11:20,125
Thank you for your
presentation.

209
00:11:20,125 --> 00:11:20,650
>> Thank you.

210
00:11:20,650 --> 00:11:21,850
>> The next
presentation is

211
00:11:21,850 --> 00:11:24,490
by Dr. Charif Mahmoudi,

212
00:11:24,490 --> 00:11:26,680
who's going to talk about

213
00:11:26,680 --> 00:11:27,910
NDN for next-generation

214
00:11:27,910 --> 00:11:29,485
of factory automation.

215
00:11:29,485 --> 00:11:32,230
Dr. Mahmoudi
received the Masters

216
00:11:32,230 --> 00:11:34,750
and PhD in Computer
Engineering from

217
00:11:34,750 --> 00:11:37,510
University of Paris EST

218
00:11:37,510 --> 00:11:40,555
in 2009 and 2014
respectively.

219
00:11:40,555 --> 00:11:42,760
After that, he was
a PostDoc at NIST.

220
00:11:42,760 --> 00:11:44,215
Then he
subsequently joined

221
00:11:44,215 --> 00:11:45,520
Siemens Corporate
Technology as

222
00:11:45,520 --> 00:11:48,265
a software architect for
intelligent systems.

223
00:11:48,265 --> 00:11:50,274
Participated as
a consultant,

224
00:11:50,274 --> 00:11:51,970
then software
architect for

225
00:11:51,970 --> 00:11:55,240
several successful
telecommunication projects

226
00:11:55,240 --> 00:11:59,140
with France Telecom
and Bouygues Telecom,

227
00:11:59,140 --> 00:12:01,825
and contributed to several
research projects.

228
00:12:01,825 --> 00:12:03,250
His area of interests

229
00:12:03,250 --> 00:12:04,330
are in distributed
systems,

230
00:12:04,330 --> 00:12:06,100
cloud computing,
mobile computing,

231
00:12:06,100 --> 00:12:07,270
and Internet of things.

232
00:12:07,270 --> 00:12:09,520
Thank you.
Please go ahead.

233
00:12:09,520 --> 00:12:12,160
>> Yeah. I hope that
you can hear me.

234
00:12:12,160 --> 00:12:13,555
>> Yes, we can.

235
00:12:13,555 --> 00:12:16,060
>> Excellent. Thanks for

236
00:12:16,060 --> 00:12:21,820
the nice introduction.

237
00:12:21,820 --> 00:12:27,520
I will share my screen
with my slides.

238
00:12:27,520 --> 00:12:30,385
I swear it will not be

239
00:12:30,385 --> 00:12:33,280
more than 10 minutes
presentation.

240
00:12:33,280 --> 00:12:34,480
>> I wish we could have

241
00:12:34,480 --> 00:12:36,535
everybody speak
for 20-25 minutes.

242
00:12:36,535 --> 00:12:37,300
It's interesting.

243
00:12:37,300 --> 00:12:38,800
[NOISE] [LAUGHTER]
Let's bet on time.

244
00:12:38,800 --> 00:12:41,260
Sorry, please go ahead.

245
00:12:41,260 --> 00:12:47,740
>> Excellent. Indeed.
Charif Mahmoudi

246
00:12:47,740 --> 00:12:49,945
currently working
at Siemens on

247
00:12:49,945 --> 00:12:52,915
topics related to
intelligence systems.

248
00:12:52,915 --> 00:12:56,950
I do have reasonable
NDN activity

249
00:12:56,950 --> 00:12:58,240
that I would like,

250
00:12:58,240 --> 00:13:00,070
at least, to share
some thoughts about.

251
00:13:00,070 --> 00:13:02,200
Mainly, my
rationale and how

252
00:13:02,200 --> 00:13:06,160
those concepts behind
NDN has been remapped,

253
00:13:06,160 --> 00:13:08,230
I guess, inside
my head too

254
00:13:08,230 --> 00:13:11,930
for more industrial
applications.

255
00:13:12,120 --> 00:13:15,340
My talk again, is
really about how we

256
00:13:15,340 --> 00:13:17,635
can apply NDN and

257
00:13:17,635 --> 00:13:19,900
those concepts for
the next generation

258
00:13:19,900 --> 00:13:23,485
of factory automation.

259
00:13:23,485 --> 00:13:27,445
What I would like to
highlight mainly is that

260
00:13:27,445 --> 00:13:29,920
the context data mainly

261
00:13:29,920 --> 00:13:31,660
evolving on right now,

262
00:13:31,660 --> 00:13:33,340
it's a context where

263
00:13:33,340 --> 00:13:35,950
we are building
intelligence and

264
00:13:35,950 --> 00:13:38,590
complex systems in order

265
00:13:38,590 --> 00:13:41,275
to support
manufacturing efforts.

266
00:13:41,275 --> 00:13:43,300
Over there, there is a lot

267
00:13:43,300 --> 00:13:45,190
of opportunities
and the same time,

268
00:13:45,190 --> 00:13:46,630
a lot of challenges.

269
00:13:46,630 --> 00:13:49,360
One big challenge
that we are

270
00:13:49,360 --> 00:13:52,315
trying to address
is to foster

271
00:13:52,315 --> 00:13:54,145
those architecture
on having

272
00:13:54,145 --> 00:13:56,740
a deterministic
communication

273
00:13:56,740 --> 00:13:58,900
for intelligence
C systems.

274
00:13:58,900 --> 00:14:01,060
In other words, there is

275
00:14:01,060 --> 00:14:05,410
a lot of opportunities.

276
00:14:05,410 --> 00:14:06,610
I don't know
what happened,

277
00:14:06,610 --> 00:14:09,770
I hope that you can
still see my screen.

278
00:14:11,130 --> 00:14:16,540
The point is, the
communication over 5G

279
00:14:16,540 --> 00:14:19,405
offers a new opportunity

280
00:14:19,405 --> 00:14:21,910
that we can leverage,

281
00:14:21,910 --> 00:14:23,695
especially with NDN,

282
00:14:23,695 --> 00:14:25,810
mainly from the
communication part

283
00:14:25,810 --> 00:14:27,115
of it at the edge,

284
00:14:27,115 --> 00:14:29,500
going to the applications

285
00:14:29,500 --> 00:14:30,910
and how we can leverage in

286
00:14:30,910 --> 00:14:33,040
the end to ensure
more resilience

287
00:14:33,040 --> 00:14:35,110
and more deterministic
communication,

288
00:14:35,110 --> 00:14:38,030
leveraging some
of its features.

289
00:14:38,520 --> 00:14:41,320
NDN parallelism, is it

290
00:14:41,320 --> 00:14:43,345
good or bad for
factory automation?

291
00:14:43,345 --> 00:14:45,190
It is still an
open question,

292
00:14:45,190 --> 00:14:47,410
at least from my side

293
00:14:47,410 --> 00:14:48,925
and from Siemens's side,

294
00:14:48,925 --> 00:14:51,115
and it's mainly
because there are

295
00:14:51,115 --> 00:14:54,250
some challenges
associated to do that.

296
00:14:54,250 --> 00:14:56,050
First one, it's regarding

297
00:14:56,050 --> 00:14:57,580
the context and
requirements

298
00:14:57,580 --> 00:15:00,805
or hard real time.

299
00:15:00,805 --> 00:15:02,485
It's really have
requirements

300
00:15:02,485 --> 00:15:04,315
that we are pushing,

301
00:15:04,315 --> 00:15:07,030
NDN application
has been explored

302
00:15:07,030 --> 00:15:09,655
along those
lines, but still,

303
00:15:09,655 --> 00:15:13,270
there is no solid
or mature effort

304
00:15:13,270 --> 00:15:15,370
that has been
supported yet.

305
00:15:15,370 --> 00:15:16,810
The other aspect is mainly

306
00:15:16,810 --> 00:15:18,685
regarding the
protocol supports.

307
00:15:18,685 --> 00:15:19,950
The brown field,

308
00:15:19,950 --> 00:15:22,305
it's not something
to ignore.

309
00:15:22,305 --> 00:15:24,930
The brown field is
the majority of

310
00:15:24,930 --> 00:15:28,110
the current deployments
that are happening.

311
00:15:28,110 --> 00:15:30,810
Compliance or interactions
with protocols

312
00:15:30,810 --> 00:15:33,555
like Fortinet and other
Real-Time Protocol,

313
00:15:33,555 --> 00:15:35,460
it is a quite
interesting feature

314
00:15:35,460 --> 00:15:38,100
that we believe
could really

315
00:15:38,100 --> 00:15:39,445
help the adaptation of

316
00:15:39,445 --> 00:15:43,270
NDN within the
factory automation.

317
00:15:43,270 --> 00:15:45,070
We are aware of
some work that

318
00:15:45,070 --> 00:15:46,825
has been done in
the community

319
00:15:46,825 --> 00:15:48,430
especially for IoT and

320
00:15:48,430 --> 00:15:51,205
adaptation to
IoT protocols,

321
00:15:51,205 --> 00:15:53,230
but still, it's not hard

322
00:15:53,230 --> 00:15:56,050
real-time requirements
or at least,

323
00:15:56,050 --> 00:15:58,615
as far as I understand it.

324
00:15:58,615 --> 00:16:02,065
The second vertically,
I would say,

325
00:16:02,065 --> 00:16:06,310
it's mainly the model
parallelism with IP.

326
00:16:06,310 --> 00:16:08,305
It is an assumption.

327
00:16:08,305 --> 00:16:10,330
Even if the stack is
totally different,

328
00:16:10,330 --> 00:16:11,800
and here I'm referring to

329
00:16:11,800 --> 00:16:14,170
standard NDN stack,

330
00:16:14,170 --> 00:16:16,975
still there is an
assumption that the

331
00:16:16,975 --> 00:16:19,120
IP packet it's more or

332
00:16:19,120 --> 00:16:24,250
less the center
of this design.

333
00:16:24,250 --> 00:16:26,500
However, some of those
real time protocols

334
00:16:26,500 --> 00:16:27,910
have literally jumped from

335
00:16:27,910 --> 00:16:32,455
layer 2 to layer 7 on
the networking stack.

336
00:16:32,455 --> 00:16:33,880
I think a big question in

337
00:16:33,880 --> 00:16:35,260
my head it's mainly,

338
00:16:35,260 --> 00:16:40,030
how we can leverage NDN
with those protocols.

339
00:16:40,030 --> 00:16:42,055
Also, real time here.

340
00:16:42,055 --> 00:16:43,420
This is what I'm
showing mainly,

341
00:16:43,420 --> 00:16:44,710
the real-time feature is

342
00:16:44,710 --> 00:16:45,940
this champion term of

343
00:16:45,940 --> 00:16:48,099
protocol to
enable real-time.

344
00:16:48,099 --> 00:16:49,900
This is something that is

345
00:16:49,900 --> 00:16:51,670
quite interesting and NDN

346
00:16:51,670 --> 00:16:52,990
parallelism offers

347
00:16:52,990 --> 00:16:56,005
something quite
unique to look

348
00:16:56,005 --> 00:16:58,405
at this real time
communication

349
00:16:58,405 --> 00:17:01,210
on a totally different
perspective.

350
00:17:01,210 --> 00:17:04,030
Last and not least,
sorry first,

351
00:17:04,030 --> 00:17:06,535
for the short
or for the low,

352
00:17:06,535 --> 00:17:08,620
I guess, the policy here.

353
00:17:08,620 --> 00:17:10,810
But there are few efforts,

354
00:17:10,810 --> 00:17:11,890
some of them I have

355
00:17:11,890 --> 00:17:13,825
been directly involved on,

356
00:17:13,825 --> 00:17:15,190
some others I'm aware

357
00:17:15,190 --> 00:17:18,070
that NIST guys are
really pushing

358
00:17:18,070 --> 00:17:19,660
along those
lines regarding

359
00:17:19,660 --> 00:17:22,750
the evaluation of
performance and also,

360
00:17:22,750 --> 00:17:24,280
the investigation of

361
00:17:24,280 --> 00:17:27,220
a high-performance
stacks like 5G;

362
00:17:27,220 --> 00:17:31,060
what Sloppy and his
team are looking at.

363
00:17:31,060 --> 00:17:32,920
Over there, I
think it's really

364
00:17:32,920 --> 00:17:36,850
a nice opportunity that
could be leveraged.

365
00:17:36,850 --> 00:17:39,205
In other words,
the performance of

366
00:17:39,205 --> 00:17:43,375
NDN can be enhanced
much more.

367
00:17:43,375 --> 00:17:45,850
The visualization
techniques and

368
00:17:45,850 --> 00:17:47,635
the acceleration
techniques that are

369
00:17:47,635 --> 00:17:50,710
offered by technologies
that are used on

370
00:17:50,710 --> 00:17:54,550
5G or other environment,

371
00:17:54,550 --> 00:17:56,200
that's something
that can really

372
00:17:56,200 --> 00:17:58,135
boost the use of NDN.

373
00:17:58,135 --> 00:18:00,670
Again, here I'm
referring to some of

374
00:18:00,670 --> 00:18:02,230
the high-speed forwarders

375
00:18:02,230 --> 00:18:03,370
that has been explored,

376
00:18:03,370 --> 00:18:06,220
that niche or other
alternative up-process

377
00:18:06,220 --> 00:18:10,855
for forwarding using AI.

378
00:18:10,855 --> 00:18:12,790
Again, my main points

379
00:18:12,790 --> 00:18:14,650
about this slide is, yes,

380
00:18:14,650 --> 00:18:17,560
we are exploring
novel architecture

381
00:18:17,560 --> 00:18:19,240
for factory automation,

382
00:18:19,240 --> 00:18:20,905
and yes, NDN is

383
00:18:20,905 --> 00:18:22,990
a really intriguing chance

384
00:18:22,990 --> 00:18:24,355
of the parallelism.

385
00:18:24,355 --> 00:18:26,830
However, its
application to

386
00:18:26,830 --> 00:18:31,134
real time protocol it's
still challenging.

387
00:18:31,134 --> 00:18:33,325
With that, I think

388
00:18:33,325 --> 00:18:36,730
almost less than a couple
more minutes left.

389
00:18:36,730 --> 00:18:39,355
I will just mention
now that, yes,

390
00:18:39,355 --> 00:18:42,325
please free to contact me.

391
00:18:42,325 --> 00:18:43,840
I would love to discuss

392
00:18:43,840 --> 00:18:47,500
these topics with
the community and

393
00:18:47,500 --> 00:18:48,820
mainly to figure
out how we

394
00:18:48,820 --> 00:18:52,870
can push that forward.

395
00:18:52,870 --> 00:18:55,880
With that, back to you.

396
00:18:55,920 --> 00:18:58,945
>> Thanks, Dr.
Mahmoudi. We have

397
00:18:58,945 --> 00:19:00,820
a minute for any questions

398
00:19:00,820 --> 00:19:03,650
[NOISE] within the
audience might have.

399
00:19:04,350 --> 00:19:07,610
Does anybody have
any questions?

400
00:19:07,680 --> 00:19:10,540
We can just move
the questions to

401
00:19:10,540 --> 00:19:11,890
the slack channel [NOISE]

402
00:19:11,890 --> 00:19:14,860
and maybe give everybody
a minute at the end.

403
00:19:14,860 --> 00:19:17,020
Thank you again for
the great talk.

404
00:19:17,020 --> 00:19:18,340
I have some
questions, I'll

405
00:19:18,340 --> 00:19:19,780
post them on the
slack channel.

406
00:19:19,780 --> 00:19:21,730
>> Thanks for
the opportunity.

407
00:19:21,730 --> 00:19:23,830
>> Thank you.
Let me introduce

408
00:19:23,830 --> 00:19:26,155
our next speaker,

409
00:19:26,155 --> 00:19:28,690
Mr. Jeff White, on

410
00:19:28,690 --> 00:19:31,015
information management
in the emerging edge.

411
00:19:31,015 --> 00:19:33,610
Jeff leads the
autonomous system and

412
00:19:33,610 --> 00:19:39,910
edge technical
ecosystem development

413
00:19:39,910 --> 00:19:41,050
and composable system,

414
00:19:41,050 --> 00:19:43,150
technical strategy
initiatives for

415
00:19:43,150 --> 00:19:44,590
the Global Chief
Technology Officer,

416
00:19:44,590 --> 00:19:45,805
Dell Technologies.

417
00:19:45,805 --> 00:19:47,080
He also chairs the

418
00:19:47,080 --> 00:19:48,760
Automotive Design
Authority Council

419
00:19:48,760 --> 00:19:50,500
providing technical
leadership

420
00:19:50,500 --> 00:19:52,420
of Dell's automotive
vertical,

421
00:19:52,420 --> 00:19:54,430
which is responsible
for technical design of

422
00:19:54,430 --> 00:19:56,590
automotive enterprise
and transformation

423
00:19:56,590 --> 00:19:59,215
solutions. Jeff the
floor is yours.

424
00:19:59,215 --> 00:20:03,340
>> Thank you, especially
to Dr. Mahmoudi for

425
00:20:03,340 --> 00:20:08,255
finishing on such a
compressed timescale.

426
00:20:08,255 --> 00:20:11,270
Can everyone
see my slides?

427
00:20:15,180 --> 00:20:18,355
The answer is yes, please
let me know if not.

428
00:20:18,355 --> 00:20:22,390
Jeff White, I work for
a Dell Technologies,

429
00:20:22,390 --> 00:20:24,385
and we're involved in

430
00:20:24,385 --> 00:20:26,725
defining the modern Edge.

431
00:20:26,725 --> 00:20:29,200
Moving beyond IoT and

432
00:20:29,200 --> 00:20:33,230
forward into a modern
computational Edge.

433
00:20:33,630 --> 00:20:36,640
This is our
definition that we

434
00:20:36,640 --> 00:20:39,535
put together a year
and a half or so ago.

435
00:20:39,535 --> 00:20:41,380
At the core of

436
00:20:41,380 --> 00:20:44,290
any Edge deployment is
applications and data.

437
00:20:44,290 --> 00:20:46,510
Then, you layer
on various layers

438
00:20:46,510 --> 00:20:50,259
of orchestration in
application management,

439
00:20:50,259 --> 00:20:52,750
ultimately the
infrastructure management,

440
00:20:52,750 --> 00:20:53,215
and then,

441
00:20:53,215 --> 00:20:54,625
of course, we
can never forget

442
00:20:54,625 --> 00:20:56,560
all the devices,
sensors, vehicles,

443
00:20:56,560 --> 00:20:59,320
and physical capabilities
that are required

444
00:20:59,320 --> 00:21:02,920
to build out a
modern Edge.

445
00:21:02,920 --> 00:21:05,230
One of the central
themes here,

446
00:21:05,230 --> 00:21:06,430
you can see it
in almost every

447
00:21:06,430 --> 00:21:07,810
line, is data.

448
00:21:07,810 --> 00:21:09,190
Managing data in the

449
00:21:09,190 --> 00:21:11,470
Edge is quite challenging.

450
00:21:11,470 --> 00:21:13,555
If you think about it,

451
00:21:13,555 --> 00:21:16,495
Edge is neither On-prem
nor in the Cloud,

452
00:21:16,495 --> 00:21:17,875
it is in between.

453
00:21:17,875 --> 00:21:20,920
Data will be transitory
to the Edge,

454
00:21:20,920 --> 00:21:22,210
but many functions will be

455
00:21:22,210 --> 00:21:23,890
performed on
including ingest,

456
00:21:23,890 --> 00:21:24,940
processing, inference,

457
00:21:24,940 --> 00:21:25,870
analytics, and the list

458
00:21:25,870 --> 00:21:27,115
goes on and on and on.

459
00:21:27,115 --> 00:21:28,570
But it's moving,

460
00:21:28,570 --> 00:21:31,150
it exists as part
of a pipeline Edge.

461
00:21:31,150 --> 00:21:33,999
Autonomous systems like
autonomous vehicles,

462
00:21:33,999 --> 00:21:36,190
but many more systems
that are autonomous,

463
00:21:36,190 --> 00:21:37,735
robotic process
automation,

464
00:21:37,735 --> 00:21:40,150
the list will be
endless of things that

465
00:21:40,150 --> 00:21:42,655
we embed autonomous
technology into.

466
00:21:42,655 --> 00:21:45,100
Everything from factory
assembly lines,

467
00:21:45,100 --> 00:21:47,365
as Dr. Muhammad
is familiar with,

468
00:21:47,365 --> 00:21:51,280
to autonomous vehicles,
to retail stores,

469
00:21:51,280 --> 00:21:53,200
and controlling certain
systems within.

470
00:21:53,200 --> 00:21:55,735
They're going to
need to rely on

471
00:21:55,735 --> 00:21:57,955
Edge-based computation
and support

472
00:21:57,955 --> 00:22:00,235
for a variety of reasons.

473
00:22:00,235 --> 00:22:02,575
The next two
are really big.

474
00:22:02,575 --> 00:22:04,360
The assumption
that your data is

475
00:22:04,360 --> 00:22:06,220
going to be local
is not guaranteed

476
00:22:06,220 --> 00:22:07,840
for Edge and every

477
00:22:07,840 --> 00:22:10,270
application
ever developed,

478
00:22:10,270 --> 00:22:12,685
and I know this is a
big impact statement,

479
00:22:12,685 --> 00:22:15,970
but stick signals of
applications ever

480
00:22:15,970 --> 00:22:17,920
developed assume that data

481
00:22:17,920 --> 00:22:20,215
is either local or
it's reachable.

482
00:22:20,215 --> 00:22:22,105
Neither one of
those assumptions

483
00:22:22,105 --> 00:22:24,115
are very good
assumption in Edge.

484
00:22:24,115 --> 00:22:25,570
Data's going
to be produced

485
00:22:25,570 --> 00:22:27,010
by a variety of sensors,

486
00:22:27,010 --> 00:22:28,960
the Edge may be
co-located with it,

487
00:22:28,960 --> 00:22:30,310
but many times
it will not.

488
00:22:30,310 --> 00:22:31,660
The whole purpose
of deploying in

489
00:22:31,660 --> 00:22:33,330
Edge is to put

490
00:22:33,330 --> 00:22:36,075
shared infrastructure
much nearer

491
00:22:36,075 --> 00:22:37,470
the source of data.

492
00:22:37,470 --> 00:22:39,180
Most of the key drivers

493
00:22:39,180 --> 00:22:41,165
of Edge relate to data.

494
00:22:41,165 --> 00:22:42,460
Then, if you think about

495
00:22:42,460 --> 00:22:44,185
reachability, you may say,

496
00:22:44,185 --> 00:22:45,550
''When we stopped
networking,

497
00:22:45,550 --> 00:22:46,990
we got great
access networks

498
00:22:46,990 --> 00:22:48,070
, we have wireless now.''

499
00:22:48,070 --> 00:22:49,750
All these great
things, it's

500
00:22:49,750 --> 00:22:51,085
very problematic for Edge,

501
00:22:51,085 --> 00:22:53,110
if you look at the
emerging workloads

502
00:22:53,110 --> 00:22:54,250
that are driving Edge,

503
00:22:54,250 --> 00:22:56,770
they produce a vast
amount of data.

504
00:22:56,770 --> 00:22:58,240
If you think about some of

505
00:22:58,240 --> 00:22:59,290
the talks that
were earlier

506
00:22:59,290 --> 00:23:00,625
today around DARPA,

507
00:23:00,625 --> 00:23:02,770
if you look at war
fighting capabilities,

508
00:23:02,770 --> 00:23:04,150
you look at
autonomous vehicles,

509
00:23:04,150 --> 00:23:05,740
you look at
factories, they are

510
00:23:05,740 --> 00:23:07,795
generating an immense
amount of data.

511
00:23:07,795 --> 00:23:09,760
This immense data coupled

512
00:23:09,760 --> 00:23:11,590
with access networks of

513
00:23:11,590 --> 00:23:14,710
varying bandwidth
will not allow you to

514
00:23:14,710 --> 00:23:18,190
reach the data in the
timeframes required.

515
00:23:18,190 --> 00:23:20,590
You can certainly
move the data.

516
00:23:20,590 --> 00:23:22,420
We worked with
customers that

517
00:23:22,420 --> 00:23:23,950
needed to move
five petabytes of

518
00:23:23,950 --> 00:23:27,205
data from North
America to Japan.

519
00:23:27,205 --> 00:23:30,550
That's a multi-week
process of

520
00:23:30,550 --> 00:23:32,050
transmitting data even at

521
00:23:32,050 --> 00:23:34,345
10 gigabits per second
through a Cloud.

522
00:23:34,345 --> 00:23:35,890
If you think about that

523
00:23:35,890 --> 00:23:37,600
now moving into the Edge,

524
00:23:37,600 --> 00:23:39,805
that is a huge problem.

525
00:23:39,805 --> 00:23:41,290
Actually, it turned
out it was easier

526
00:23:41,290 --> 00:23:43,870
to load up a storage
system and put it on

527
00:23:43,870 --> 00:23:45,190
an airplane than
it was to use

528
00:23:45,190 --> 00:23:47,920
the Internet in the
case of reachability.

529
00:23:47,920 --> 00:23:49,030
Think about that applied

530
00:23:49,030 --> 00:23:50,290
to the Edge when
you're dealing with

531
00:23:50,290 --> 00:23:52,450
multi hundreds of
terabytes and ultimately

532
00:23:52,450 --> 00:23:55,270
petabytes of data
wondering around the Edge.

533
00:23:55,270 --> 00:23:57,190
Visibility is
also problematic.

534
00:23:57,190 --> 00:23:58,270
You're not in the Cloud,

535
00:23:58,270 --> 00:24:02,770
you're not in your
end-user location,

536
00:24:02,770 --> 00:24:04,390
so getting visibility on

537
00:24:04,390 --> 00:24:05,590
this data is a challenge.

538
00:24:05,590 --> 00:24:07,120
Provenance, security,

539
00:24:07,120 --> 00:24:10,000
IP, multicast and unicast.

540
00:24:10,000 --> 00:24:12,535
The future of Edge is
not a CDN problem,

541
00:24:12,535 --> 00:24:14,335
it is a reverse
CDN problem.

542
00:24:14,335 --> 00:24:15,640
You have a vast number of

543
00:24:15,640 --> 00:24:17,440
sources trying to
aggregate data

544
00:24:17,440 --> 00:24:19,150
to ultimately get
it to places like

545
00:24:19,150 --> 00:24:22,344
the Cloud and core where
it can be analyzed.

546
00:24:22,344 --> 00:24:24,820
The Edge will also
include mobile workloads,

547
00:24:24,820 --> 00:24:26,935
which is problematic
even for NDN,

548
00:24:26,935 --> 00:24:28,900
although there's great
ideas around how to

549
00:24:28,900 --> 00:24:30,760
manage mobility with that.

550
00:24:30,760 --> 00:24:31,360
But a lot of

551
00:24:31,360 --> 00:24:32,440
these workloads
are going to start

552
00:24:32,440 --> 00:24:34,765
to be portable and
ultimately mobile.

553
00:24:34,765 --> 00:24:37,600
IT approaches are not much

554
00:24:37,600 --> 00:24:39,010
better than
Internet approaches

555
00:24:39,010 --> 00:24:40,490
to managing the data.

556
00:24:40,490 --> 00:24:42,330
In fact, I would
say in many cases

557
00:24:42,330 --> 00:24:43,575
they're not as well.

558
00:24:43,575 --> 00:24:45,900
My boss coined the
term polydirectional,

559
00:24:45,900 --> 00:24:47,400
which I like
because the data's

560
00:24:47,400 --> 00:24:48,900
moving in a lot of
different directions,

561
00:24:48,900 --> 00:24:50,955
it's not all moving
in one direction.

562
00:24:50,955 --> 00:24:53,190
In current solutions
from Cloud,

563
00:24:53,190 --> 00:24:54,390
and quite frankly, others,

564
00:24:54,390 --> 00:24:55,710
focus on storage as

565
00:24:55,710 --> 00:24:58,250
a service analytics,
AI enablement.

566
00:24:58,250 --> 00:24:59,680
They're not really focused

567
00:24:59,680 --> 00:25:00,760
on the problem of,

568
00:25:00,760 --> 00:25:03,310
how do I apply services
for governance and

569
00:25:03,310 --> 00:25:06,475
how do I apply a movement
policy to the data?

570
00:25:06,475 --> 00:25:08,080
Then lastly,

571
00:25:08,080 --> 00:25:09,565
and I think this is
super important.

572
00:25:09,565 --> 00:25:12,040
If you look at
Kubernetes or

573
00:25:12,040 --> 00:25:14,635
other orchestration
frameworks, Mesos,

574
00:25:14,635 --> 00:25:17,120
the HCI frameworks
that Dell sells,

575
00:25:17,120 --> 00:25:18,555
very few of them

576
00:25:18,555 --> 00:25:21,090
consider data a
first-class citizen.

577
00:25:21,090 --> 00:25:23,730
Many of the orchestrator
frameworks will

578
00:25:23,730 --> 00:25:26,560
make decisions without
considering data.

579
00:25:26,560 --> 00:25:28,135
They may move
the workload,

580
00:25:28,135 --> 00:25:30,220
but they're not
considering reachability.

581
00:25:30,220 --> 00:25:31,810
This is a huge problem,

582
00:25:31,810 --> 00:25:34,390
and plugging that into

583
00:25:34,390 --> 00:25:37,730
existing frameworks
is not easy to do.

584
00:25:38,160 --> 00:25:41,455
We've been working in
a research project

585
00:25:41,455 --> 00:25:43,930
and we leverage NDN
in a significant way.

586
00:25:43,930 --> 00:25:46,480
It has a lot of
different aspects

587
00:25:46,480 --> 00:25:47,590
in this research project.

588
00:25:47,590 --> 00:25:49,060
It is an Edge
research project,

589
00:25:49,060 --> 00:25:51,505
but NDN offer
some advantages.

590
00:25:51,505 --> 00:25:53,230
First of all,
the data naming

591
00:25:53,230 --> 00:25:56,515
capability can provide
semantic information,

592
00:25:56,515 --> 00:25:58,240
and location and
where the data

593
00:25:58,240 --> 00:26:01,000
is invisibility
super important.

594
00:26:01,000 --> 00:26:04,360
If you use a data
naming framework

595
00:26:04,360 --> 00:26:08,485
in a "shim" layer that
does the application,

596
00:26:08,485 --> 00:26:10,990
that allows the
applications

597
00:26:10,990 --> 00:26:12,340
to interact with the NDN

598
00:26:12,340 --> 00:26:14,260
without the applications
necessarily

599
00:26:14,260 --> 00:26:16,135
knowing they're
interacting with the NDN,

600
00:26:16,135 --> 00:26:18,460
can be super helpful,

601
00:26:18,460 --> 00:26:19,720
and fits very well.

602
00:26:19,720 --> 00:26:22,600
A State Vector Sync
is very efficient in

603
00:26:22,600 --> 00:26:24,280
terms of doing distributed

604
00:26:24,280 --> 00:26:25,630
database synchronization,

605
00:26:25,630 --> 00:26:26,230
and a lot of

606
00:26:26,230 --> 00:26:29,110
these Edge applications
will require

607
00:26:29,110 --> 00:26:31,360
streaming and a continuous

608
00:26:31,360 --> 00:26:33,670
capability to stream
and process data.

609
00:26:33,670 --> 00:26:35,350
State Vector
Sync actually,

610
00:26:35,350 --> 00:26:37,375
it's inherent within NDN,

611
00:26:37,375 --> 00:26:39,430
provides the
capability to do that,

612
00:26:39,430 --> 00:26:40,075
and if you look at

613
00:26:40,075 --> 00:26:41,620
other more
traditional ways

614
00:26:41,620 --> 00:26:44,560
of using Kafka or Flink,

615
00:26:44,560 --> 00:26:45,400
and all these other things

616
00:26:45,400 --> 00:26:46,030
that are coming out

617
00:26:46,030 --> 00:26:47,995
of the Linux Foundation,

618
00:26:47,995 --> 00:26:49,660
those are all
pretty heavyweight.

619
00:26:49,660 --> 00:26:51,160
They're designed
for IT. We've had

620
00:26:51,160 --> 00:26:52,900
customers that have
turned on Kafka and

621
00:26:52,900 --> 00:26:54,085
then Edge environment then

622
00:26:54,085 --> 00:26:56,710
had significant
challenges because of

623
00:26:56,710 --> 00:26:58,750
the amount of state and

624
00:26:58,750 --> 00:27:02,200
computational
resources it requires.

625
00:27:02,200 --> 00:27:04,870
Lastly, with NDN,

626
00:27:04,870 --> 00:27:07,180
you can integrate with
a policy framework

627
00:27:07,180 --> 00:27:10,525
the ability to manage
a movement policy.

628
00:27:10,525 --> 00:27:12,910
If you had capabilities

629
00:27:12,910 --> 00:27:15,100
that could
classify data and

630
00:27:15,100 --> 00:27:17,110
understand the
application framework

631
00:27:17,110 --> 00:27:18,460
and be able to

632
00:27:18,460 --> 00:27:21,130
understand the intent of

633
00:27:21,130 --> 00:27:23,065
what the data is
going to be used for,

634
00:27:23,065 --> 00:27:24,940
you can apply a
movement policy.

635
00:27:24,940 --> 00:27:26,830
If you're in an
autonomous vehicle,

636
00:27:26,830 --> 00:27:28,915
you may have some data
that's important,

637
00:27:28,915 --> 00:27:30,850
yet you may be going
through a 5G or

638
00:27:30,850 --> 00:27:33,160
4G link and it's
not possible to

639
00:27:33,160 --> 00:27:34,750
move that terabyte worth

640
00:27:34,750 --> 00:27:36,370
of unstructured data in

641
00:27:36,370 --> 00:27:37,870
any reasonable
timeframe at

642
00:27:37,870 --> 00:27:40,270
any reasonable costs
through that 5G link.

643
00:27:40,270 --> 00:27:41,470
But you could cue

644
00:27:41,470 --> 00:27:43,420
that data so that when
you're plugged in

645
00:27:43,420 --> 00:27:44,560
at home or when you're

646
00:27:44,560 --> 00:27:46,810
recharging your
car or whatever,

647
00:27:46,810 --> 00:27:48,460
and you have a lower cost

648
00:27:48,460 --> 00:27:49,930
higher bandwidth link

649
00:27:49,930 --> 00:27:51,580
to move that data

650
00:27:51,580 --> 00:27:53,005
through that may
not be metered,

651
00:27:53,005 --> 00:27:54,820
then you could move
the data through.

652
00:27:54,820 --> 00:27:57,505
NDN provides
capabilities to do that,

653
00:27:57,505 --> 00:27:59,170
not directly within NDN,

654
00:27:59,170 --> 00:28:02,095
but with a "shim" layer,

655
00:28:02,095 --> 00:28:03,805
which we call IML,

656
00:28:03,805 --> 00:28:05,440
that could manage NDN

657
00:28:05,440 --> 00:28:07,210
and manage this
movement policies,

658
00:28:07,210 --> 00:28:09,505
and then do the
advertisement, etc.

659
00:28:09,505 --> 00:28:11,335
This is what
we're working on.

660
00:28:11,335 --> 00:28:13,480
Again, I could talk
about it for hours,

661
00:28:13,480 --> 00:28:14,560
but this is just a

662
00:28:14,560 --> 00:28:16,225
really nice little
picture down here about

663
00:28:16,225 --> 00:28:17,860
some of the capabilities

664
00:28:17,860 --> 00:28:19,510
that we're building
in around it.

665
00:28:19,510 --> 00:28:21,625
Of course, Edge
is distributed

666
00:28:21,625 --> 00:28:23,380
across many domains

667
00:28:23,380 --> 00:28:25,870
and how to manage
that data and

668
00:28:25,870 --> 00:28:29,230
move it economically
is a key component.

669
00:28:29,230 --> 00:28:32,785
Wish lists, NDN ideas
for the future.

670
00:28:32,785 --> 00:28:35,275
A lot of the capabilities

671
00:28:35,275 --> 00:28:37,960
would be eased
if we didn't

672
00:28:37,960 --> 00:28:39,460
have to do
interests flooding

673
00:28:39,460 --> 00:28:40,480
because many times

674
00:28:40,480 --> 00:28:41,650
we're going to be
moving a single

675
00:28:41,650 --> 00:28:43,105
object or a single file,

676
00:28:43,105 --> 00:28:44,410
and the ability to send

677
00:28:44,410 --> 00:28:46,300
a "ranged"
interests without

678
00:28:46,300 --> 00:28:47,845
having to flood interests

679
00:28:47,845 --> 00:28:49,690
would be very useful.

680
00:28:49,690 --> 00:28:52,090
We could send one
interest and with

681
00:28:52,090 --> 00:28:53,650
a range of bring
all these segments

682
00:28:53,650 --> 00:28:55,060
and it could bring
segments back.

683
00:28:55,060 --> 00:28:56,350
Also, we're thinking about

684
00:28:56,350 --> 00:28:57,760
things like using coding

685
00:28:57,760 --> 00:28:59,860
and where you do

686
00:28:59,860 --> 00:29:02,020
have data that's
used in the Edge,

687
00:29:02,020 --> 00:29:04,150
partially downloading
the file and using

688
00:29:04,150 --> 00:29:06,175
network coding
like CDNs do,

689
00:29:06,175 --> 00:29:07,870
where you have a partial
file and then when

690
00:29:07,870 --> 00:29:09,875
it's used to pull the
rest of the data down.

691
00:29:09,875 --> 00:29:11,370
Having the ability to send

692
00:29:11,370 --> 00:29:13,170
a "ranged" interests would

693
00:29:13,170 --> 00:29:14,550
be very useful

694
00:29:14,550 --> 00:29:16,920
towards a
high-performance NFD.

695
00:29:16,920 --> 00:29:18,390
One of the reasons I
got invited to this,

696
00:29:18,390 --> 00:29:20,555
we're working
within this team

697
00:29:20,555 --> 00:29:25,075
that is working on
high-performance NFD.

698
00:29:25,075 --> 00:29:26,650
High-performance doesn't

699
00:29:26,650 --> 00:29:28,300
necessarily mean
high bandwidth,

700
00:29:28,300 --> 00:29:31,150
it could mean low
latency as well.

701
00:29:31,150 --> 00:29:32,980
We need lightweight
versions

702
00:29:32,980 --> 00:29:34,645
which there are
many coming.

703
00:29:34,645 --> 00:29:36,040
I was happy to see

704
00:29:36,040 --> 00:29:38,275
the code-based discussion
earlier today.

705
00:29:38,275 --> 00:29:41,560
But we also need the
ability to move lots of

706
00:29:41,560 --> 00:29:43,360
data and not have

707
00:29:43,360 --> 00:29:45,145
a significant
penalty for that.

708
00:29:45,145 --> 00:29:47,470
Continued development
of State Vector Sync,

709
00:29:47,470 --> 00:29:50,440
I think it has
great capabilities.

710
00:29:50,440 --> 00:29:52,810
One of the ideas that
we came up with here

711
00:29:52,810 --> 00:29:55,300
is Kubernetes as
concept of the CSI,

712
00:29:55,300 --> 00:29:56,845
Container Storage
Interface

713
00:29:56,845 --> 00:29:58,060
where they support

714
00:29:58,060 --> 00:30:00,715
storage primitives

715
00:30:00,715 --> 00:30:02,409
for different types
of capabilities,

716
00:30:02,409 --> 00:30:03,610
whether it's AWS,

717
00:30:03,610 --> 00:30:04,960
or Adele storage system,

718
00:30:04,960 --> 00:30:06,400
there's a whole list
on the internet,

719
00:30:06,400 --> 00:30:07,285
you can look it up.

720
00:30:07,285 --> 00:30:07,810
What would be

721
00:30:07,810 --> 00:30:09,715
a really cool
project is to build

722
00:30:09,715 --> 00:30:11,350
a Container
Storage Interface

723
00:30:11,350 --> 00:30:13,540
directly for NDN
with Kubernetes.

724
00:30:13,540 --> 00:30:14,680
It would be a very

725
00:30:14,680 --> 00:30:16,330
interesting thing where
you could directly

726
00:30:16,330 --> 00:30:20,040
manage from Kubernetes,
the NDN environment.

727
00:30:20,040 --> 00:30:22,050
That was just a crazy
idea we had here,

728
00:30:22,050 --> 00:30:23,520
but it ultimately

729
00:30:23,520 --> 00:30:25,315
could be really
interesting.

730
00:30:25,315 --> 00:30:27,040
This is from my
development team,

731
00:30:27,040 --> 00:30:28,675
they wanted to make
sure I got it.

732
00:30:28,675 --> 00:30:30,520
These are things that

733
00:30:30,520 --> 00:30:32,530
we look at as we've used

734
00:30:32,530 --> 00:30:35,110
NDN in our research
environment

735
00:30:35,110 --> 00:30:36,640
and our test environments.

736
00:30:36,640 --> 00:30:38,800
Improved network
deployment tools.

737
00:30:38,800 --> 00:30:40,990
If we have to set up
complex topologies

738
00:30:40,990 --> 00:30:43,450
which you may see an
Edge and elsewhere,

739
00:30:43,450 --> 00:30:47,050
it's pretty error
prone to set those up.

740
00:30:47,050 --> 00:30:49,195
It's not very
user-friendly.

741
00:30:49,195 --> 00:30:52,930
Observability is a
bit of a challenge,

742
00:30:52,930 --> 00:30:56,245
NDN uses a quite old
school approach.

743
00:30:56,245 --> 00:30:59,095
Most folks are using
Prometheus today.

744
00:30:59,095 --> 00:31:01,270
If we had integration
with that,

745
00:31:01,270 --> 00:31:03,190
be able to look at
metrics through NDN,

746
00:31:03,190 --> 00:31:04,000
would actually be in

747
00:31:04,000 --> 00:31:05,650
a single observable
framework.

748
00:31:05,650 --> 00:31:07,360
You can look at
Prometheus style

749
00:31:07,360 --> 00:31:09,490
online and see
what it does.

750
00:31:09,490 --> 00:31:12,565
Then, formal plug-in
architecture.

751
00:31:12,565 --> 00:31:13,990
There's a lot of
really cool tools,

752
00:31:13,990 --> 00:31:16,150
NDN trace, the list
goes on and on and on.

753
00:31:16,150 --> 00:31:17,950
They're all
managed separately

754
00:31:17,950 --> 00:31:19,795
outside of NFD.

755
00:31:19,795 --> 00:31:22,390
If you can have a formal
plug-in framework,

756
00:31:22,390 --> 00:31:24,190
then people would
be able to build

757
00:31:24,190 --> 00:31:26,080
their own tools
and then integrate

758
00:31:26,080 --> 00:31:28,300
that into NFD without

759
00:31:28,300 --> 00:31:30,220
having to do a lot of
custom development.

760
00:31:30,220 --> 00:31:33,025
It will make it a lot
more modern looking.

761
00:31:33,025 --> 00:31:36,025
Of course, NFD is a
high performance.

762
00:31:36,025 --> 00:31:38,710
It's the heart of
how NDN works.

763
00:31:38,710 --> 00:31:40,210
You have to
balance that with

764
00:31:40,210 --> 00:31:42,415
the risk of making
NFD less stable.

765
00:31:42,415 --> 00:31:43,870
These are wish list things

766
00:31:43,870 --> 00:31:45,130
we want to share with
the community and

767
00:31:45,130 --> 00:31:46,855
some of the things
we found is we

768
00:31:46,855 --> 00:31:48,460
continue to do
our development

769
00:31:48,460 --> 00:31:50,660
and research around Edge.

770
00:31:52,470 --> 00:31:54,925
>> Thank you. That is

771
00:31:54,925 --> 00:31:56,080
really nice
presentation that has

772
00:31:56,080 --> 00:31:59,830
a lot of interesting
pointers.

773
00:31:59,830 --> 00:32:04,900
We'll move the
discussion to the Slack.

774
00:32:04,900 --> 00:32:08,695
The next presenter,
Junxiao.

775
00:32:08,695 --> 00:32:11,930
Junxiao Shi is
going to present

776
00:32:11,930 --> 00:32:15,580
NDNts video

777
00:32:15,580 --> 00:32:17,840
streaming using QUIC
and WebTransport.

778
00:32:17,840 --> 00:32:20,200
Junxiao is a guest
researcher at NIST.

779
00:32:20,200 --> 00:32:21,460
He's a core NDN developer

780
00:32:21,460 --> 00:32:22,180
and has been developing

781
00:32:22,180 --> 00:32:24,469
NDN network for a
while since 2013.

782
00:32:24,469 --> 00:32:26,315
Also enjoys building
websites and

783
00:32:26,315 --> 00:32:28,750
browsers based
NDN applications.

784
00:32:28,750 --> 00:32:29,875
Junxiao, go ahead.

785
00:32:29,875 --> 00:32:32,890
>> Hi, this is Junxiao.
I'm presenting.

786
00:32:32,890 --> 00:32:35,105
This one is my
personal project of

787
00:32:35,105 --> 00:32:36,745
NDNts video streaming

788
00:32:36,745 --> 00:32:38,935
using QUIC and
WebTransport.

789
00:32:38,935 --> 00:32:40,745
>> Junxiao, can
you increase

790
00:32:40,745 --> 00:32:43,540
the volume from your
side it's a little low.

791
00:32:43,670 --> 00:32:45,670
I think it could be okay.

792
00:32:45,670 --> 00:32:46,550
I think it should
be. Go ahead.

793
00:32:46,550 --> 00:32:49,630
>> Yes. I'm Junxiao.

794
00:32:49,630 --> 00:32:51,100
This is my
personal project,

795
00:32:51,100 --> 00:32:52,985
NDNts video
streaming using

796
00:32:52,985 --> 00:33:00,750
QUIC and WebTransport
[NOISE].

797
00:33:00,750 --> 00:33:02,470
NDNts video is a website.

798
00:33:02,470 --> 00:33:05,030
It's a web application
that performs

799
00:33:05,030 --> 00:33:06,690
pre-recorded video

800
00:33:06,690 --> 00:33:08,780
streaming over
the NDN network.

801
00:33:08,780 --> 00:33:11,320
I started developing
this website

802
00:33:11,320 --> 00:33:13,300
in parallel with
iViSA which is

803
00:33:13,300 --> 00:33:16,300
a paper in ICN 20 to test

804
00:33:16,300 --> 00:33:17,765
NDNts congestion
controls or

805
00:33:17,765 --> 00:33:20,065
congestion control
in my library.

806
00:33:20,065 --> 00:33:23,290
Both NDNts video
and iViSA uses

807
00:33:23,290 --> 00:33:25,270
the same streaming
library which is

808
00:33:25,270 --> 00:33:27,725
the Shaka Player and
the Shaka Packager.

809
00:33:27,725 --> 00:33:29,945
Since Black Friday 2020,

810
00:33:29,945 --> 00:33:33,785
I started publishing my
own content because I

811
00:33:33,785 --> 00:33:35,320
believe it's content that

812
00:33:35,320 --> 00:33:37,600
attracts viewers,
not the technology.

813
00:33:37,600 --> 00:33:38,830
Viewer doesn't really care

814
00:33:38,830 --> 00:33:40,130
whether it's NDN or not,

815
00:33:40,130 --> 00:33:41,800
so I have the content.

816
00:33:41,800 --> 00:33:43,660
My content is encoded in

817
00:33:43,660 --> 00:33:44,825
the DASH format with

818
00:33:44,825 --> 00:33:47,470
four resolutions
up to 720p.

819
00:33:47,470 --> 00:33:49,960
Earlier this year
I experimented

820
00:33:49,960 --> 00:33:52,665
with QuicTransport in
the Chrome browser

821
00:33:52,665 --> 00:33:54,775
and this talk is

822
00:33:54,775 --> 00:33:58,040
mainly a report of
this experiment.

823
00:33:58,040 --> 00:34:00,490
Why do we want
to use QUIC?

824
00:34:00,490 --> 00:34:04,570
Traditionally, web
applications in

825
00:34:04,570 --> 00:34:05,740
NDN connect to

826
00:34:05,740 --> 00:34:08,450
the NDN network
through WebSockets.

827
00:34:08,450 --> 00:34:10,720
NFD is a forwarding
software

828
00:34:10,720 --> 00:34:12,480
itself, supports
WebSocket.

829
00:34:12,480 --> 00:34:14,700
There are other global
NDN testbeds there

830
00:34:14,700 --> 00:34:17,305
is nginx reverse
proxies software that

831
00:34:17,305 --> 00:34:19,465
exposed NFD WebSocket over

832
00:34:19,465 --> 00:34:21,645
HTTPS so that browsers

833
00:34:21,645 --> 00:34:23,450
can see could it
connect with.

834
00:34:23,450 --> 00:34:25,200
But a problem is I'm

835
00:34:25,200 --> 00:34:26,845
developing congestion
control and

836
00:34:26,845 --> 00:34:28,270
other NDN library also

837
00:34:28,270 --> 00:34:30,625
has started to have
congestion control.

838
00:34:30,625 --> 00:34:33,095
The congestion control
algorithm is more or

839
00:34:33,095 --> 00:34:35,440
less derived from TCP,

840
00:34:35,440 --> 00:34:37,835
so it's a TCP-like a
congestion control.

841
00:34:37,835 --> 00:34:41,740
But WebSocket protocol
itself rests over TCP.

842
00:34:41,740 --> 00:34:43,900
While we have NDN
congestion control,

843
00:34:43,900 --> 00:34:46,845
TCP-like and also
WebSocket over TCP,

844
00:34:46,845 --> 00:34:48,375
this is effective running

845
00:34:48,375 --> 00:34:50,050
TCP congestion
control over

846
00:34:50,050 --> 00:34:51,880
TCP and a TCP over

847
00:34:51,880 --> 00:34:54,700
TCP is known to lead to

848
00:34:54,700 --> 00:34:58,415
better performance and
other misbehaviors.

849
00:34:58,415 --> 00:35:00,630
Therefore, QUIC
is different

850
00:35:00,630 --> 00:35:03,715
because QUIC itself
rests over UDP.

851
00:35:03,715 --> 00:35:07,030
In particular, Quictransport
API it provides

852
00:35:07,030 --> 00:35:11,110
unreliable datagram
service just like UDP.

853
00:35:11,110 --> 00:35:13,120
The difference
from plain UDP

854
00:35:13,120 --> 00:35:14,955
is that it is
encrypted and

855
00:35:14,955 --> 00:35:18,275
authenticated to fulfill
the web-trans model

856
00:35:18,275 --> 00:35:20,770
and effective
the hosting is

857
00:35:20,770 --> 00:35:22,580
UDP all the way
and therefore

858
00:35:22,580 --> 00:35:24,165
our consumer side of

859
00:35:24,165 --> 00:35:26,875
TCP-like congestion
control can work well.

860
00:35:26,875 --> 00:35:28,310
But a lot of people don't

861
00:35:28,310 --> 00:35:29,745
support QUIC therefore,

862
00:35:29,745 --> 00:35:32,155
I built NDN-QUIC
gateway with

863
00:35:32,155 --> 00:35:35,080
aioquic and
python-ndn libraries.

864
00:35:35,080 --> 00:35:37,175
The gateway
serves as a proxy

865
00:35:37,175 --> 00:35:39,200
between QUIC and
a plain UDP.

866
00:35:39,200 --> 00:35:41,430
Each QUIC
connection becomes

867
00:35:41,430 --> 00:35:45,705
a UDP face on
the local NFD.

868
00:35:45,705 --> 00:35:48,310
Local NFD on the same
machine as a gateway,

869
00:35:48,310 --> 00:35:49,840
it can provide
forwading and

870
00:35:49,840 --> 00:35:52,645
caching into the
wider NDN network.

871
00:35:52,645 --> 00:35:54,605
This is how I deployed

872
00:35:54,605 --> 00:35:57,065
NDN-QUIC during
the experiment.

873
00:35:57,065 --> 00:35:59,220
On the testbed I deployed

874
00:35:59,220 --> 00:36:02,375
the two replicas of my
NDNts-videos-servers,

875
00:36:02,375 --> 00:36:04,470
they serve the same
content of ram Buffalo

876
00:36:04,470 --> 00:36:07,405
in New York, and
Tokyo, Japan.

877
00:36:07,405 --> 00:36:09,950
Then I deploy the
three instance

878
00:36:09,950 --> 00:36:12,770
of NDN-QUIC gateway
located in Amsterdam,

879
00:36:12,770 --> 00:36:14,540
Los Angeles, and Tokyo.

880
00:36:14,540 --> 00:36:16,085
They all connect to

881
00:36:16,085 --> 00:36:18,340
the testbed and
each gateway has

882
00:36:18,340 --> 00:36:19,480
a local NFD with

883
00:36:19,480 --> 00:36:22,805
a cache capacity up
to 98,000 entrants.

884
00:36:22,805 --> 00:36:25,735
The viewers in different
continents they are

885
00:36:25,735 --> 00:36:27,470
directed to connect to

886
00:36:27,470 --> 00:36:29,540
a nearby NDN-QUIC gateway.

887
00:36:29,540 --> 00:36:31,715
This is a static
assignment.

888
00:36:31,715 --> 00:36:34,295
If the user is not
using Chrome browser,

889
00:36:34,295 --> 00:36:36,590
since only chrome
support QUIC or

890
00:36:36,590 --> 00:36:39,055
if the user cannot
connect to QUIC,

891
00:36:39,055 --> 00:36:41,010
that they will
still connect to

892
00:36:41,010 --> 00:36:43,710
the testbed over
Websocket as usual.

893
00:36:43,710 --> 00:36:45,880
I also have HTTP

894
00:36:45,880 --> 00:36:47,710
beacon servers
that can collect

895
00:36:47,710 --> 00:36:48,890
a video quality of

896
00:36:48,890 --> 00:36:50,215
experience metrics

897
00:36:50,215 --> 00:36:53,610
using navigator
send Beacon API.

898
00:36:53,610 --> 00:36:55,640
What is my content?

899
00:36:55,640 --> 00:36:58,175
My content is my
push-up videos.

900
00:36:58,175 --> 00:37:00,490
I made this website and

901
00:37:00,490 --> 00:37:02,735
put my content on
there and then I

902
00:37:02,735 --> 00:37:04,390
posted a link to

903
00:37:04,390 --> 00:37:07,820
LowEndTalk and
LowEndSpirit forums.

904
00:37:07,820 --> 00:37:11,135
Those push up
will soon become

905
00:37:11,135 --> 00:37:12,645
a meme in the
forum because

906
00:37:12,645 --> 00:37:14,800
other users are also
talking about it.

907
00:37:14,800 --> 00:37:16,540
Those forum
members, they will

908
00:37:16,540 --> 00:37:18,895
click and watch
my push-ups.

909
00:37:18,895 --> 00:37:21,755
The benefit for
me is I get

910
00:37:21,755 --> 00:37:23,675
real-world usage
statistics

911
00:37:23,675 --> 00:37:24,890
of my application.

912
00:37:24,890 --> 00:37:28,010
During the 32 days of
data collection period,

913
00:37:28,010 --> 00:37:30,990
I received 541
viewers from

914
00:37:30,990 --> 00:37:33,280
six continents and
that they represent

915
00:37:33,280 --> 00:37:36,520
a total of 6.4 hours
of playback time.

916
00:37:36,520 --> 00:37:39,370
This is uncontrolled
experiment

917
00:37:39,370 --> 00:37:41,200
but I believe my
method is more

918
00:37:41,200 --> 00:37:43,630
realistic than iViSA
because iViSA they

919
00:37:43,630 --> 00:37:45,005
run emulated the viewers

920
00:37:45,005 --> 00:37:46,245
in Amazon Web Service,

921
00:37:46,245 --> 00:37:48,355
but the real viewers
don't have as

922
00:37:48,355 --> 00:37:52,225
good data center quality
network connections.

923
00:37:52,225 --> 00:37:55,615
This diagram shows
video resolution

924
00:37:55,615 --> 00:37:58,505
that according to
my statistics,

925
00:37:58,505 --> 00:38:01,000
the brown bars are from

926
00:38:01,000 --> 00:38:02,830
WebSocket connection
and the purple bars

927
00:38:02,830 --> 00:38:04,325
are from QUIC connections.

928
00:38:04,325 --> 00:38:06,095
The darker shade,

929
00:38:06,095 --> 00:38:07,770
that means higher
resolution.

930
00:38:07,770 --> 00:38:10,509
As we can see in Europe

931
00:38:11,220 --> 00:38:14,580
when a user is connected
over WebSocket,

932
00:38:14,580 --> 00:38:16,390
42 percent of the
time they are

933
00:38:16,390 --> 00:38:18,275
playing at the
highest resolution,

934
00:38:18,275 --> 00:38:19,925
but when they are
connected over

935
00:38:19,925 --> 00:38:22,620
QUIC 60 percent of
the time they are

936
00:38:22,620 --> 00:38:25,200
playing at the highest
resolution which

937
00:38:25,200 --> 00:38:27,805
means QUIC

938
00:38:27,805 --> 00:38:31,005
provides improvement
in video resolution.

939
00:38:31,005 --> 00:38:33,645
We also see the similar
improvements in

940
00:38:33,645 --> 00:38:35,185
Asia and North America

941
00:38:35,185 --> 00:38:36,980
but to a smaller extent.

942
00:38:36,980 --> 00:38:39,425
I also attract as
a startup delay,

943
00:38:39,425 --> 00:38:41,080
which is duration between

944
00:38:41,080 --> 00:38:43,805
the user press
the Start button

945
00:38:43,805 --> 00:38:46,790
until they can see
my awesome push-ups.

946
00:38:46,790 --> 00:38:49,300
Since it's tracked
separately

947
00:38:49,300 --> 00:38:50,795
for Europe and
North America

948
00:38:50,795 --> 00:38:52,370
and Asia and we
can see that

949
00:38:52,370 --> 00:38:54,345
in both Europe and Asia,

950
00:38:54,345 --> 00:38:56,220
we see a startup daily

951
00:38:56,220 --> 00:38:58,670
decreased up by more
than 1.5 seconds.

952
00:38:58,670 --> 00:39:00,400
In North America,
this decrease

953
00:39:00,400 --> 00:39:02,845
is 500 milliseconds.

954
00:39:02,845 --> 00:39:06,695
Since I start to
experiment in February and

955
00:39:06,695 --> 00:39:08,160
March this year I'm keep

956
00:39:08,160 --> 00:39:10,820
improving NDNts
video application.

957
00:39:10,820 --> 00:39:12,345
First, in the
Chrome browser.

958
00:39:12,345 --> 00:39:14,110
Chrome browsers,
they decided to

959
00:39:14,110 --> 00:39:16,765
replace a QuicTransport
with WebTransport.

960
00:39:16,765 --> 00:39:20,530
The difference is that
it uses HTTPS/3 for

961
00:39:20,530 --> 00:39:22,375
better [inaudible]
but it's

962
00:39:22,375 --> 00:39:24,900
still the same
datagram service.

963
00:39:24,900 --> 00:39:28,445
Original trial of
WebTransport just ended

964
00:39:28,445 --> 00:39:29,875
so we cannot use

965
00:39:29,875 --> 00:39:31,765
WebTransport or
QUIC right now,

966
00:39:31,765 --> 00:39:34,120
but it's scheduled to
be shipping in Chrome

967
00:39:34,120 --> 00:39:37,145
97 released
early next year.

968
00:39:37,145 --> 00:39:39,365
I hope the global
NDN testbed

969
00:39:39,365 --> 00:39:41,970
can support WebTransport
at the time.

970
00:39:41,970 --> 00:39:43,930
I'm also building ndn6,

971
00:39:43,930 --> 00:39:45,965
my own global
scale NDN network.

972
00:39:45,965 --> 00:39:47,525
It currently has
nine routers

973
00:39:47,525 --> 00:39:49,595
with peering with
the testbed.

974
00:39:49,595 --> 00:39:53,579
It supports WebTransport
on most locations.

975
00:39:53,579 --> 00:39:54,910
I have already moved

976
00:39:54,910 --> 00:39:56,405
my video producers there,

977
00:39:56,405 --> 00:39:59,075
but I'm still
improving this setup.

978
00:39:59,075 --> 00:40:00,850
Here are some links so

979
00:40:00,850 --> 00:40:02,105
that you can read later

980
00:40:02,105 --> 00:40:05,545
more about these
experiments. Thank you.

981
00:40:05,545 --> 00:40:06,610
>> Thank you,

982
00:40:06,610 --> 00:40:09,320
Junxiao. Really
interesting presentation.

983
00:40:09,320 --> 00:40:10,890
Again, for those

984
00:40:10,890 --> 00:40:11,975
of you who have
any queries,

985
00:40:11,975 --> 00:40:13,895
I'm sure you have many
questions to Junxiao.

986
00:40:13,895 --> 00:40:16,705
Please use the Slack
channel for comments.

987
00:40:16,705 --> 00:40:18,699
I will move to the
next presentation,

988
00:40:18,699 --> 00:40:22,195
which is NDN play by
Varun Patil from UCLA.

989
00:40:22,195 --> 00:40:23,800
Varun is a graduate
student in

990
00:40:23,800 --> 00:40:25,860
the Computer Science
Department at UCLA,

991
00:40:25,860 --> 00:40:29,010
his research interests
are in systems and

992
00:40:29,010 --> 00:40:30,360
data-centric
networking and is

993
00:40:30,360 --> 00:40:32,725
currently working on
NDN sync protocols.

994
00:40:32,725 --> 00:40:34,850
Thank you, Varun. Please
go ahead and share.

995
00:40:34,850 --> 00:40:36,700
>> Thank you, Jay

996
00:40:39,320 --> 00:40:41,575
Can you see my screen?

997
00:40:41,575 --> 00:40:42,760
>> Yes.

998
00:40:42,760 --> 00:40:44,970
>> Great. I'm going

999
00:40:44,970 --> 00:40:47,110
to be giving a live
demo of NDN Play,

1000
00:40:47,110 --> 00:40:48,970
which is a browser-based

1001
00:40:48,970 --> 00:40:50,780
NDN visualizer
and simulator.

1002
00:40:50,780 --> 00:40:53,020
But let me just first
have a couple of

1003
00:40:53,020 --> 00:40:55,320
slides here just to
give us some things.

1004
00:40:55,320 --> 00:40:57,450
First, thing is why did
we build this thing?

1005
00:40:57,450 --> 00:40:59,245
What is the
motivation behind it?

1006
00:40:59,245 --> 00:41:01,720
As was the theme
of the first panel

1007
00:41:01,720 --> 00:41:03,095
today and what Peter said,

1008
00:41:03,095 --> 00:41:06,215
that getting started
with NDN is not easy.

1009
00:41:06,215 --> 00:41:09,320
Newcomer might ask,
where do I start?

1010
00:41:09,320 --> 00:41:12,250
For example, just to
run the first line

1011
00:41:12,250 --> 00:41:14,895
of code for someone
new to NDN,

1012
00:41:14,895 --> 00:41:16,300
they have to do
a lot of things

1013
00:41:16,300 --> 00:41:18,130
like get NDN Cxx

1014
00:41:18,130 --> 00:41:19,300
then setup NFD on

1015
00:41:19,300 --> 00:41:20,800
their local machine and

1016
00:41:20,800 --> 00:41:22,030
then write the C++ code,

1017
00:41:22,030 --> 00:41:23,540
compile it and run it.

1018
00:41:23,540 --> 00:41:25,390
It's a lot of things
that they need to do

1019
00:41:25,390 --> 00:41:26,260
before they can write

1020
00:41:26,260 --> 00:41:27,525
their first line of code.

1021
00:41:27,525 --> 00:41:28,955
The second thing is that

1022
00:41:28,955 --> 00:41:30,625
visual demonstrations
are nice

1023
00:41:30,625 --> 00:41:31,985
no matter whether
you are a new

1024
00:41:31,985 --> 00:41:33,865
or whether you're
an expert on NDN,

1025
00:41:33,865 --> 00:41:36,875
looking at things always
makes more sense.

1026
00:41:36,875 --> 00:41:38,620
Finally, it's
the flip side of

1027
00:41:38,620 --> 00:41:40,120
the first one that we

1028
00:41:40,120 --> 00:41:42,905
also need tools to
showcase NDN to newcomers.

1029
00:41:42,905 --> 00:41:44,710
For example,
students or people

1030
00:41:44,710 --> 00:41:45,550
who don't really know that

1031
00:41:45,550 --> 00:41:46,620
much about networking,

1032
00:41:46,620 --> 00:41:48,875
if we had tools
that we could show

1033
00:41:48,875 --> 00:41:50,200
them as something
about NDN,

1034
00:41:50,200 --> 00:41:51,630
then that would be great.

1035
00:41:51,630 --> 00:41:54,480
That's why I
built NDN-Play,

1036
00:41:54,480 --> 00:41:56,380
which is a playground
for NDN that

1037
00:41:56,380 --> 00:41:57,690
runs completely
in the browser.

1038
00:41:57,690 --> 00:41:58,600
It's serverless.

1039
00:41:58,600 --> 00:42:00,065
It's deployed
on GitHub pages

1040
00:42:00,065 --> 00:42:01,660
and the link is below,

1041
00:42:01,660 --> 00:42:02,945
you can just open
it if you want to.

1042
00:42:02,945 --> 00:42:04,555
It's play.ndn.today.

1043
00:42:04,555 --> 00:42:07,240
The NDN Play simulates
an NDN network in

1044
00:42:07,240 --> 00:42:08,740
the browser and it

1045
00:42:08,740 --> 00:42:10,615
has some
visualizations in it.

1046
00:42:10,615 --> 00:42:12,190
Of course, it's
open source and

1047
00:42:12,190 --> 00:42:14,195
there are examples
available.

1048
00:42:14,195 --> 00:42:17,015
Some features of
NDN-Play are that it

1049
00:42:17,015 --> 00:42:18,310
obviously has a visual

1050
00:42:18,310 --> 00:42:19,945
topology editor
pretty standard.

1051
00:42:19,945 --> 00:42:23,120
It can also export the
topology to mini NDN,

1052
00:42:23,120 --> 00:42:24,580
where you can run
real experiments

1053
00:42:24,580 --> 00:42:26,420
with a real NDN code.

1054
00:42:26,420 --> 00:42:28,295
It simulates

1055
00:42:28,295 --> 00:42:29,950
NDN network, as I
mentioned earlier.

1056
00:42:29,950 --> 00:42:33,520
It can also run NDNts
code in the browser,

1057
00:42:33,520 --> 00:42:34,700
which I will demonstrate.

1058
00:42:34,700 --> 00:42:36,970
You can actually run
simple NDN experiments

1059
00:42:36,970 --> 00:42:37,600
right in the browser

1060
00:42:37,600 --> 00:42:38,955
without setting
up anything.

1061
00:42:38,955 --> 00:42:40,300
Along with that,
you can capture

1062
00:42:40,300 --> 00:42:41,500
the traffic that
goes along in

1063
00:42:41,500 --> 00:42:43,240
the simulation and
you can visualize

1064
00:42:43,240 --> 00:42:44,200
this traffic and you

1065
00:42:44,200 --> 00:42:45,275
can see what is
going where,

1066
00:42:45,275 --> 00:42:47,475
and you can also look
into the traffic,

1067
00:42:47,475 --> 00:42:49,670
what the TLVs are.

1068
00:42:49,670 --> 00:42:51,845
Again, I'll
demonstrate this.

1069
00:42:51,845 --> 00:42:53,100
Just a quick note before I

1070
00:42:53,100 --> 00:42:54,510
start the real demo,

1071
00:42:54,510 --> 00:42:57,005
that ongoing work is in

1072
00:42:57,005 --> 00:42:58,960
integration of
this NDN Play

1073
00:42:58,960 --> 00:43:00,450
with mini NDN where we

1074
00:43:00,450 --> 00:43:03,510
can see the packets
flowing around as they

1075
00:43:03,510 --> 00:43:06,435
actually get around
in the back-end

1076
00:43:06,435 --> 00:43:07,960
of mini NDN and we can

1077
00:43:07,960 --> 00:43:09,670
also change the
topology on the fly,

1078
00:43:09,670 --> 00:43:11,695
git status repos
graphs on.

1079
00:43:11,695 --> 00:43:13,620
Also there's a
plan to have

1080
00:43:13,620 --> 00:43:15,010
security visualization

1081
00:43:15,010 --> 00:43:16,655
and some template
experiments,

1082
00:43:16,655 --> 00:43:17,560
so new people can

1083
00:43:17,560 --> 00:43:18,910
just click a
button and then

1084
00:43:18,910 --> 00:43:21,810
run some experiments
that we defined earlier.

1085
00:43:21,810 --> 00:43:24,470
Now, I'll go to the Demo.

1086
00:43:24,570 --> 00:43:27,560
This is the NDN-Play
user interface.

1087
00:43:27,560 --> 00:43:28,715
But the first thing
that you see is

1088
00:43:28,715 --> 00:43:30,200
the network topology.

1089
00:43:30,200 --> 00:43:32,820
You can just add some
nodes here or you

1090
00:43:32,820 --> 00:43:35,635
can connect them up,
pretty standard.

1091
00:43:35,635 --> 00:43:37,995
So, as soon as you

1092
00:43:37,995 --> 00:43:40,190
create a new node or
you have a topology,

1093
00:43:40,190 --> 00:43:42,070
then NDN-Play
will start up

1094
00:43:42,070 --> 00:43:44,575
assimilated forward
on each of these.

1095
00:43:44,575 --> 00:43:46,570
It's not a real
forward like NFP,

1096
00:43:46,570 --> 00:43:49,600
but it's something
basic that works.

1097
00:43:49,600 --> 00:43:51,835
But it should get the
basic stuff done.

1098
00:43:51,835 --> 00:43:53,530
Now what I'm
going to do is

1099
00:43:53,530 --> 00:43:54,940
that I'm going to

1100
00:43:54,940 --> 00:43:56,615
select a node,
let's say this one.

1101
00:43:56,615 --> 00:43:58,795
There are some examples on

1102
00:43:58,795 --> 00:44:00,605
the GitHub that
I'm going to

1103
00:44:00,605 --> 00:44:02,735
just copy over here
for sake of time.

1104
00:44:02,735 --> 00:44:04,420
I'll just take a simple

1105
00:44:04,420 --> 00:44:05,945
producer-consumer example.

1106
00:44:05,945 --> 00:44:08,425
I go to the
editor, I put in.

1107
00:44:08,425 --> 00:44:11,470
The editor also has
syntax completion.

1108
00:44:11,470 --> 00:44:14,375
I just put on a
simple piece of code.

1109
00:44:14,375 --> 00:44:18,735
This node here c is
going to produce data on

1110
00:44:18,735 --> 00:44:21,300
the name NDN producer test

1111
00:44:21,300 --> 00:44:22,620
and the data
is going to be

1112
00:44:22,620 --> 00:44:23,995
hello from NDN producer.

1113
00:44:23,995 --> 00:44:25,090
It's just a few
lines of code

1114
00:44:25,090 --> 00:44:26,625
that resists a
piece of data.

1115
00:44:26,625 --> 00:44:29,630
Then I run this
code on this node.

1116
00:44:29,630 --> 00:44:32,560
Now, if you just
notice then it

1117
00:44:32,560 --> 00:44:33,755
registered new preface on

1118
00:44:33,755 --> 00:44:35,415
the local forwarder
on that node.

1119
00:44:35,415 --> 00:44:37,955
Now, I'll take the
other piece of code,

1120
00:44:37,955 --> 00:44:39,610
which is the
consumer, go to

1121
00:44:39,610 --> 00:44:42,250
a different node and
put it in there.

1122
00:44:42,250 --> 00:44:43,420
Now this code is

1123
00:44:43,420 --> 00:44:45,730
just sending an interest
for the data that we

1124
00:44:45,730 --> 00:44:46,900
produced on the other node

1125
00:44:46,900 --> 00:44:49,770
and then it'll just
say what data is.

1126
00:44:49,770 --> 00:44:50,860
Then you can come back

1127
00:44:50,860 --> 00:44:52,060
here and run the code,

1128
00:44:52,060 --> 00:44:53,450
so it'll fetch the data

1129
00:44:53,450 --> 00:44:55,850
and it just run the code.

1130
00:44:55,850 --> 00:44:58,210
The simple example may
not seem like much,

1131
00:44:58,210 --> 00:44:59,705
but if you notice,

1132
00:44:59,705 --> 00:45:03,610
I just ran real
actual NDN code in

1133
00:45:03,610 --> 00:45:05,375
a browser without
actually installing

1134
00:45:05,375 --> 00:45:08,890
NFD or any library
like that.

1135
00:45:08,890 --> 00:45:11,900
It just makes life
easier that way.

1136
00:45:11,900 --> 00:45:14,130
Now one more
thing is that I

1137
00:45:14,130 --> 00:45:15,090
mentioned that we had

1138
00:45:15,090 --> 00:45:17,010
Packet Capture and
visualization.

1139
00:45:17,010 --> 00:45:19,020
I can take any
intermediate node

1140
00:45:19,020 --> 00:45:20,890
and I go to the
Packet Capture,

1141
00:45:20,890 --> 00:45:22,180
I see all of the packets

1142
00:45:22,180 --> 00:45:23,440
that have gone
through this note,

1143
00:45:23,440 --> 00:45:25,115
and I can click on them to

1144
00:45:25,115 --> 00:45:28,630
examine the actual TLV
content of the packet.

1145
00:45:28,630 --> 00:45:32,555
One last thing is
that when I run

1146
00:45:32,555 --> 00:45:34,505
this experiment now
I can just dump it

1147
00:45:34,505 --> 00:45:36,635
to a file and share
it with someone else,

1148
00:45:36,635 --> 00:45:38,405
so they can just
load the file

1149
00:45:38,405 --> 00:45:40,880
and view the results
for themselves.

1150
00:45:40,880 --> 00:45:42,190
I also mentioned
that there is

1151
00:45:42,190 --> 00:45:44,285
mini NDN integration
that is in progress.

1152
00:45:44,285 --> 00:45:46,210
I will actually load
an experiment that

1153
00:45:46,210 --> 00:45:47,910
I ran some time
earlier that

1154
00:45:47,910 --> 00:45:49,880
was actually
running mini NDN

1155
00:45:49,880 --> 00:45:52,210
and now it is
imported in NDN-Play.

1156
00:45:52,210 --> 00:45:56,020
This experiment
actually run C++ code

1157
00:45:56,020 --> 00:45:57,730
and you can see

1158
00:45:57,730 --> 00:46:00,180
all the packet traces
in the browser itself.

1159
00:46:00,180 --> 00:46:01,120
I can share this file with

1160
00:46:01,120 --> 00:46:02,220
anyone and they can

1161
00:46:02,220 --> 00:46:04,555
examine what the
experience I had like.

1162
00:46:04,555 --> 00:46:07,840
I can examine
the TLV inside

1163
00:46:07,840 --> 00:46:09,460
the packets individualist
and something like

1164
00:46:09,460 --> 00:46:12,205
that and can
also replay what

1165
00:46:12,205 --> 00:46:14,080
traffic actually
flowed in the nitrile

1166
00:46:14,080 --> 00:46:16,300
during the time of
the experiment.

1167
00:46:16,300 --> 00:46:18,155
It can help you

1168
00:46:18,155 --> 00:46:19,630
identify hotspots
or something like

1169
00:46:19,630 --> 00:46:21,425
that or maybe figure

1170
00:46:21,425 --> 00:46:22,585
out where traffic
is going,

1171
00:46:22,585 --> 00:46:24,260
where is it not going.

1172
00:46:24,260 --> 00:46:28,060
I guess that's
all for my demo.

1173
00:46:28,490 --> 00:46:30,435
>> Thank you, Varun.

1174
00:46:30,435 --> 00:46:31,925
We have a few minutes if

1175
00:46:31,925 --> 00:46:35,530
anybody has any
questions on this.

1176
00:46:37,160 --> 00:46:39,250
Well, since we have time,

1177
00:46:39,250 --> 00:46:41,315
let me ask you one
quick question.

1178
00:46:41,315 --> 00:46:43,990
In the context of this,

1179
00:46:44,220 --> 00:46:46,625
is there a way
we could connect

1180
00:46:46,625 --> 00:46:49,955
your NDN-Play with
something like NDN SIM for

1181
00:46:49,955 --> 00:46:51,605
new programmers to be able

1182
00:46:51,605 --> 00:46:53,280
to build topologies on

1183
00:46:53,280 --> 00:46:54,790
NDN-Play and then
connected back to

1184
00:46:54,790 --> 00:46:59,830
the simulator, is
that [inaudible]

1185
00:46:59,830 --> 00:47:02,220
>> NDN SIM is not
something that I've used,

1186
00:47:02,220 --> 00:47:03,320
so I've not
worked with yet,

1187
00:47:03,320 --> 00:47:04,620
but similar is what

1188
00:47:04,620 --> 00:47:05,960
I'm working on
with mini NDN.

1189
00:47:05,960 --> 00:47:07,090
We just connected to mini

1190
00:47:07,090 --> 00:47:08,375
NDN and I can create

1191
00:47:08,375 --> 00:47:10,960
a topology on the Phi,

1192
00:47:10,960 --> 00:47:12,605
then the topology gets
built in mini NDN,

1193
00:47:12,605 --> 00:47:14,405
then you can run
real C++ code there

1194
00:47:14,405 --> 00:47:16,995
or any language
code in mini NDN.

1195
00:47:16,995 --> 00:47:19,810
>> This is very cool
for somebody who's new.

1196
00:47:19,810 --> 00:47:21,010
They can actually
just built

1197
00:47:21,010 --> 00:47:24,005
the topology using a
visual programming.

1198
00:47:24,005 --> 00:47:27,385
>> Exactly. That's
the intention.

1199
00:47:27,385 --> 00:47:29,110
Also in the future, the

1200
00:47:29,110 --> 00:47:30,120
last one that I mentioned

1201
00:47:30,120 --> 00:47:31,680
that I wanted to

1202
00:47:31,680 --> 00:47:33,155
have a set of
template experiments,

1203
00:47:33,155 --> 00:47:35,210
so you can actually run

1204
00:47:35,210 --> 00:47:37,470
the sync on three
or four notes

1205
00:47:37,470 --> 00:47:39,305
in the browser itself
and it still works,

1206
00:47:39,305 --> 00:47:41,230
so some experiment
like that

1207
00:47:41,230 --> 00:47:42,910
where user can come in

1208
00:47:42,910 --> 00:47:45,325
and run it and see
what's happening in NDN.

1209
00:47:45,325 --> 00:47:47,320
>> Now, we can
actually use these

1210
00:47:47,320 --> 00:47:48,965
for assignments

1211
00:47:48,965 --> 00:47:50,510
and computer
networks classes.

1212
00:47:50,510 --> 00:47:52,550
But I guess could
be browser.

1213
00:47:52,550 --> 00:47:54,860
That's good. Thank you.

1214
00:47:54,860 --> 00:47:58,120
Does anybody else
have any questions?

1215
00:47:58,120 --> 00:48:01,820
Let's move to our
next speaker.

1216
00:48:01,820 --> 00:48:05,315
Amar [inaudible].

1217
00:48:05,315 --> 00:48:07,385
His presentation
is Multiverse;

1218
00:48:07,385 --> 00:48:10,560
designing a network
management system NDN.

1219
00:48:10,560 --> 00:48:12,905
Amar did his PhD

1220
00:48:12,905 --> 00:48:14,620
on limited
networking in IoT.

1221
00:48:14,620 --> 00:48:16,715
He's currently,
I guess NIST,

1222
00:48:16,715 --> 00:48:19,200
working on the Multiverse
research platform

1223
00:48:19,200 --> 00:48:22,050
for network management.
Please go ahead now.

1224
00:48:22,050 --> 00:48:26,345
>> Thank you.
Multiverse is

1225
00:48:26,345 --> 00:48:28,210
a research platform
we develop at

1226
00:48:28,210 --> 00:48:29,230
NIST to

1227
00:48:29,230 --> 00:48:31,865
experiment with network
management systems.

1228
00:48:31,865 --> 00:48:34,835
Today, I'm
presenting how we

1229
00:48:34,835 --> 00:48:38,740
use and plan to use
NDN in our design.

1230
00:48:38,880 --> 00:48:41,830
Multiverse provides
centralized

1231
00:48:41,830 --> 00:48:43,510
management network with

1232
00:48:43,510 --> 00:48:45,620
a web based controller

1233
00:48:45,620 --> 00:48:48,580
and agents deployed
on network elements.

1234
00:48:48,580 --> 00:48:50,795
We currently work with

1235
00:48:50,795 --> 00:48:52,730
three types of
network technologies.

1236
00:48:52,730 --> 00:48:54,624
There is NDN networks

1237
00:48:54,624 --> 00:48:56,650
with NDN-DPDK forwarder,

1238
00:48:56,650 --> 00:48:59,315
which we are also
developing our group.

1239
00:48:59,315 --> 00:49:02,580
We play with IP networks
with Sonic NOS,

1240
00:49:02,580 --> 00:49:06,490
deployed in our lab and
we recently started

1241
00:49:06,490 --> 00:49:09,370
optical path
provisioning service

1242
00:49:09,370 --> 00:49:14,380
for quantum network
management.

1243
00:49:14,450 --> 00:49:16,965
These three
technologies need

1244
00:49:16,965 --> 00:49:19,415
common services
such as telemetry,

1245
00:49:19,415 --> 00:49:22,235
which we build as
a shared platform

1246
00:49:22,235 --> 00:49:24,920
for the three management.

1247
00:49:24,920 --> 00:49:28,680
But currently these
network technologies

1248
00:49:28,680 --> 00:49:30,865
have different features
and complexity

1249
00:49:30,865 --> 00:49:37,030
and have

1250
00:49:37,030 --> 00:49:38,920
different configuration
expectations.

1251
00:49:38,920 --> 00:49:39,930
But they may require

1252
00:49:39,930 --> 00:49:42,260
different management
approaches,

1253
00:49:44,660 --> 00:49:47,885
which may threaten
the consistency

1254
00:49:47,885 --> 00:49:49,940
of the Multiverse
platform.

1255
00:49:49,940 --> 00:49:51,425
For sake of time,

1256
00:49:51,425 --> 00:49:52,480
I cannot go into

1257
00:49:52,480 --> 00:49:54,340
the details of
the difference,

1258
00:49:54,340 --> 00:49:56,305
but this is a
quick summary of

1259
00:49:56,305 --> 00:49:59,300
the requirement
and features.

1260
00:49:59,650 --> 00:50:03,140
Multiverse includes
two researcher areas.

1261
00:50:03,140 --> 00:50:05,870
One is network
intelligence,

1262
00:50:05,870 --> 00:50:07,550
which consists on building

1263
00:50:07,550 --> 00:50:09,080
a Digital Twin
service with

1264
00:50:09,080 --> 00:50:10,460
a single network model

1265
00:50:10,460 --> 00:50:12,500
for the three networks.

1266
00:50:12,500 --> 00:50:14,990
We use it for
error detection

1267
00:50:14,990 --> 00:50:17,540
and configuration
validations.

1268
00:50:17,540 --> 00:50:20,510
The second one which
we're interested

1269
00:50:20,510 --> 00:50:23,910
in today is the Network
Management API.

1270
00:50:25,030 --> 00:50:28,310
We try to find a
balance between

1271
00:50:28,310 --> 00:50:31,550
quick prototyping
with IP and

1272
00:50:31,550 --> 00:50:33,860
deployment which we use IP

1273
00:50:33,860 --> 00:50:36,980
and also innovative
management schemas

1274
00:50:36,980 --> 00:50:39,290
we want to
experiment with NDN.

1275
00:50:39,290 --> 00:50:41,435
We also want to reuse

1276
00:50:41,435 --> 00:50:43,955
what we learned as
much as possible.

1277
00:50:43,955 --> 00:50:47,990
For that we design
pub/sub abstraction,

1278
00:50:47,990 --> 00:50:50,810
which is independent
of IP and NDN

1279
00:50:50,810 --> 00:50:56,340
to design our network
management APIs.

1280
00:50:56,800 --> 00:51:00,140
I illustrate
how we envision

1281
00:51:00,140 --> 00:51:01,695
this abstraction

1282
00:51:01,695 --> 00:51:06,115
with quantum
network management.

1283
00:51:06,115 --> 00:51:08,830
We consider using NDN

1284
00:51:08,830 --> 00:51:10,780
to experiment with quantum

1285
00:51:10,780 --> 00:51:12,225
network management,

1286
00:51:12,225 --> 00:51:14,150
because it's
simple enough and

1287
00:51:14,150 --> 00:51:15,920
we can start integrating

1288
00:51:15,920 --> 00:51:17,600
NDN from the beginning

1289
00:51:17,600 --> 00:51:19,775
of the pollution design.

1290
00:51:19,775 --> 00:51:20,795
Basically,

1291
00:51:20,795 --> 00:51:22,550
a quantum experiment
happens between

1292
00:51:22,550 --> 00:51:26,120
two experiment
sides and an

1293
00:51:26,120 --> 00:51:28,640
application user which
is usually run by

1294
00:51:28,640 --> 00:51:30,560
a scientist requests

1295
00:51:30,560 --> 00:51:33,425
a path setup from
the controller,

1296
00:51:33,425 --> 00:51:36,350
which computes the path
and sends commands

1297
00:51:36,350 --> 00:51:39,350
to switches to configure
cross connects.

1298
00:51:39,350 --> 00:51:42,380
Then the path can
be maintained,

1299
00:51:42,380 --> 00:51:46,025
it can be renewed as
needed by the user.

1300
00:51:46,025 --> 00:51:48,650
For this, we design

1301
00:51:48,650 --> 00:51:52,955
a simple management
API using pub/sub.

1302
00:51:52,955 --> 00:51:55,595
To provide the path
scheduling service,

1303
00:51:55,595 --> 00:51:57,980
we have our three
entities that share

1304
00:51:57,980 --> 00:52:01,115
a couple of topics through
publish-subscribe.

1305
00:52:01,115 --> 00:52:02,540
The application

1306
00:52:02,540 --> 00:52:05,015
publishes a request
for a path,

1307
00:52:05,015 --> 00:52:07,430
and the controller
receives

1308
00:52:07,430 --> 00:52:10,520
the request and
computes the path and

1309
00:52:10,520 --> 00:52:14,330
starts configuring
these which

1310
00:52:14,330 --> 00:52:18,005
is by sending commands
and receiving reports.

1311
00:52:18,005 --> 00:52:25,125
It's a very simple
API for this service.

1312
00:52:25,125 --> 00:52:28,180
But then we can define

1313
00:52:28,180 --> 00:52:30,790
a high level description
of this API that

1314
00:52:30,790 --> 00:52:32,230
contains both the
communication

1315
00:52:32,230 --> 00:52:33,970
aspects with topics,

1316
00:52:33,970 --> 00:52:37,110
message formats, and
pub/sub operations,

1317
00:52:37,110 --> 00:52:38,900
and the security aspects

1318
00:52:38,900 --> 00:52:42,740
with trust and
access control.

1319
00:52:42,740 --> 00:52:43,910
There is

1320
00:52:43,910 --> 00:52:46,505
an existing specification
initiative for

1321
00:52:46,505 --> 00:52:48,725
pub/sub API
called AsyncAPI

1322
00:52:48,725 --> 00:52:51,110
in spiked from OpenAPI.

1323
00:52:51,110 --> 00:52:56,270
As an example, I
represented a small part of

1324
00:52:56,270 --> 00:52:59,030
the path scheduling API we

1325
00:52:59,030 --> 00:53:03,935
designed using the
AsyncAPI approach.

1326
00:53:03,935 --> 00:53:06,530
We see the semantics
look very familiar

1327
00:53:06,530 --> 00:53:08,750
to NDN and non-NDN
people which

1328
00:53:08,750 --> 00:53:14,120
is a good way to
start with NDN for IP

1329
00:53:14,120 --> 00:53:16,670
or developers use to work

1330
00:53:16,670 --> 00:53:19,955
with other development
technologies.

1331
00:53:19,955 --> 00:53:23,300
But then we can
use some tooling

1332
00:53:23,300 --> 00:53:24,440
to generate code and

1333
00:53:24,440 --> 00:53:26,929
documentation for the
targeted environment,

1334
00:53:26,929 --> 00:53:29,195
which can be NDN.

1335
00:53:29,195 --> 00:53:32,000
In case we want to
experiment with NDN or

1336
00:53:32,000 --> 00:53:33,965
messaging platform for IP,

1337
00:53:33,965 --> 00:53:35,585
if we want to deploy

1338
00:53:35,585 --> 00:53:37,985
IP environment
with pub/sub.

1339
00:53:37,985 --> 00:53:39,485
But the key here is

1340
00:53:39,485 --> 00:53:41,030
the data-centric
security and

1341
00:53:41,030 --> 00:53:44,150
NDN can play an important
role as an enabler

1342
00:53:44,150 --> 00:53:47,465
of this abstraction or

1343
00:53:47,465 --> 00:53:51,270
unification of these
different technologies.

1344
00:53:53,590 --> 00:53:55,880
This leads us to

1345
00:53:55,880 --> 00:54:00,995
some open questions
and some thoughts.

1346
00:54:00,995 --> 00:54:03,800
One can be a
content encryption

1347
00:54:03,800 --> 00:54:06,335
and description in
pub/sub protocols,

1348
00:54:06,335 --> 00:54:08,870
which should be added

1349
00:54:08,870 --> 00:54:11,945
and be transparent
to applications.

1350
00:54:11,945 --> 00:54:13,880
This has been demonstrated

1351
00:54:13,880 --> 00:54:16,670
with data-centric
in syncps.

1352
00:54:16,670 --> 00:54:18,950
Access control
may be useful to

1353
00:54:18,950 --> 00:54:21,525
have in the same way.

1354
00:54:21,525 --> 00:54:23,770
Also again, high-level

1355
00:54:23,770 --> 00:54:25,450
description of pub/sub API

1356
00:54:25,450 --> 00:54:27,610
with both
communication aspects

1357
00:54:27,610 --> 00:54:30,460
and security in the
same definition.

1358
00:54:30,460 --> 00:54:33,280
Here also, there
is some work we

1359
00:54:33,280 --> 00:54:35,995
can leverage for us,

1360
00:54:35,995 --> 00:54:38,350
trust schema and
security description,

1361
00:54:38,350 --> 00:54:40,020
which is a VerSec.

1362
00:54:40,020 --> 00:54:44,360
Also AsyncAPI is not
required but it's

1363
00:54:44,360 --> 00:54:46,070
a pretty good way to

1364
00:54:46,070 --> 00:54:49,715
represent the pub/sub
interactions.

1365
00:54:49,715 --> 00:54:52,130
Also new users can
be introduced to

1366
00:54:52,130 --> 00:54:54,440
NDN from familiar
concepts such

1367
00:54:54,440 --> 00:54:57,410
as first API
application development

1368
00:54:57,410 --> 00:55:00,375
and pub/sub model.

1369
00:55:00,375 --> 00:55:04,270
Also migration tools
can be envisioned to

1370
00:55:04,270 --> 00:55:05,710
migrate from IP to

1371
00:55:05,710 --> 00:55:09,300
NDN applications
or vice versa.

1372
00:55:09,300 --> 00:55:12,995
Last point, not related to

1373
00:55:12,995 --> 00:55:16,220
development is
the extension of

1374
00:55:16,220 --> 00:55:19,085
the Digital-Twin service
I mentioned before

1375
00:55:19,085 --> 00:55:23,360
in the other research
area of multiverse.

1376
00:55:23,360 --> 00:55:26,930
We plan to extend
it to NDN for

1377
00:55:26,930 --> 00:55:32,045
configuration management
and error detection.

1378
00:55:32,045 --> 00:55:35,330
This will be more critical

1379
00:55:35,330 --> 00:55:37,370
when more features will

1380
00:55:37,370 --> 00:55:38,930
be added to NDN-DPDK,

1381
00:55:38,930 --> 00:55:43,140
which has
distributed routing.

1382
00:55:43,840 --> 00:55:47,490
That's it for
me. Thank you.

1383
00:56:12,610 --> 00:56:17,550
>> It's like Jay
got disconnected.

1384
00:56:17,800 --> 00:56:20,420
But I guess we can move

1385
00:56:20,420 --> 00:56:23,165
to the next presentation

1386
00:56:23,165 --> 00:56:31,230
by Xinyu Ma on NDN
forwarder manager demo.

1387
00:56:32,320 --> 00:56:37,220
Xinyu works with
[inaudible]

1388
00:56:37,220 --> 00:56:42,090
Phd student at UCLA.
Go ahead please.

1389
00:56:43,780 --> 00:56:47,300
>> This is just
advertisement

1390
00:56:47,300 --> 00:56:49,970
for the NDN for
the manager,

1391
00:56:49,970 --> 00:56:53,435
which is GUI tools
that implements

1392
00:56:53,435 --> 00:56:57,050
the AFT Management
Protocol

1393
00:56:57,050 --> 00:56:58,640
so you do not need to

1394
00:56:58,640 --> 00:57:01,650
remember those
command lines.

1395
00:57:02,530 --> 00:57:05,720
First let us just start

1396
00:57:05,720 --> 00:57:15,905
AFT and then start
the folder manager.

1397
00:57:15,905 --> 00:57:18,470
You can see here
will be our icon for

1398
00:57:18,470 --> 00:57:20,900
the folder manager and
we click "Save it".

1399
00:57:20,900 --> 00:57:23,435
It will open a browser UI.

1400
00:57:23,435 --> 00:57:27,680
We can see the Forwarder
Status and all

1401
00:57:27,680 --> 00:57:32,840
existing phases and our
routing strategies.

1402
00:57:32,840 --> 00:57:39,480
Here is the Face Event
notification screen,

1403
00:57:40,060 --> 00:57:44,045
and there is Auto
Configuration button.

1404
00:57:44,045 --> 00:57:45,620
This auto configuration

1405
00:57:45,620 --> 00:57:47,390
actually connects it to

1406
00:57:47,390 --> 00:57:50,930
the testbed and
the AFT/NDN routs.

1407
00:57:50,930 --> 00:57:54,005
If we just click
this button,

1408
00:57:54,005 --> 00:57:55,820
and we can see that they

1409
00:57:55,820 --> 00:57:58,205
automatically
have faced to

1410
00:57:58,205 --> 00:58:02,540
the most near the
testbed note.

1411
00:58:02,540 --> 00:58:05,285
You can also manually
add the faces here.

1412
00:58:05,285 --> 00:58:06,740
Just input the IP

1413
00:58:06,740 --> 00:58:08,135
addresses and
click "Create",

1414
00:58:08,135 --> 00:58:10,970
it will create a new face,

1415
00:58:10,970 --> 00:58:14,315
and the other
configuration also

1416
00:58:14,315 --> 00:58:18,800
have routes/NDN to
the new face ID.

1417
00:58:18,800 --> 00:58:21,500
Then, this is the
face we created.

1418
00:58:21,500 --> 00:58:23,390
Again, we can manually

1419
00:58:23,390 --> 00:58:27,270
create routes if
we need just here.

1420
00:58:30,550 --> 00:58:34,505
Here we have implement
NDN Ping tool.

1421
00:58:34,505 --> 00:58:36,065
This is actually ping,

1422
00:58:36,065 --> 00:58:38,930
which means we
can give express

1423
00:58:38,930 --> 00:58:42,125
customize interest and
download the result.

1424
00:58:42,125 --> 00:58:45,555
For example, if
we just do /NDN,

1425
00:58:45,555 --> 00:58:49,100
this CanBePrefix and
not MustBeFresh if you

1426
00:58:49,100 --> 00:58:53,525
just get some random
data on the NDN testbed.

1427
00:58:53,525 --> 00:58:56,585
Here we can get
response time

1428
00:58:56,585 --> 00:59:02,930
and freshness appearance
and content type.

1429
00:59:02,930 --> 00:59:05,030
We are able to
download this ping.

1430
00:59:05,030 --> 00:59:07,160
After we download
this, this would be

1431
00:59:07,160 --> 00:59:11,310
the contents of
this data packets.

1432
00:59:12,280 --> 00:59:16,220
When we are finished
with this face,

1433
00:59:16,220 --> 00:59:18,770
we can also delete
this face by clicking

1434
00:59:18,770 --> 00:59:21,710
the button here to
remove this face here,

1435
00:59:21,710 --> 00:59:23,960
and corresponding
results will

1436
00:59:23,960 --> 00:59:25,835
be automatically
removed also.

1437
00:59:25,835 --> 00:59:28,745
Here also we have our
key management team.

1438
00:59:28,745 --> 00:59:30,350
It's a tree.

1439
00:59:30,350 --> 00:59:35,035
This is all the
identities.

1440
00:59:35,035 --> 00:59:37,180
The star means the
default identity.

1441
00:59:37,180 --> 00:59:39,340
If I click on identity,

1442
00:59:39,340 --> 00:59:41,440
we can get a
list of keys and

1443
00:59:41,440 --> 00:59:42,490
by clicking on the key we

1444
00:59:42,490 --> 00:59:44,445
can get a certificate.

1445
00:59:44,445 --> 00:59:49,400
We can add a key to
NDMCC identity and

1446
00:59:49,400 --> 00:59:53,930
also we can create a
new identity, a test-2.

1447
00:59:53,930 --> 00:59:56,180
It will
automatically create

1448
00:59:56,180 --> 00:59:59,720
identity ndncc key chain.

1449
00:59:59,720 --> 01:00:02,180
Here is our default key.

1450
01:00:02,180 --> 01:00:07,170
We can also delete
the key here.

1451
01:00:07,210 --> 01:00:10,820
We can also delete
the existing

1452
01:00:10,820 --> 01:00:14,700
key or certificate
by clicking here.

1453
01:00:14,740 --> 01:00:18,060
If you shutdown NFD,

1454
01:00:18,670 --> 01:00:25,430
then control center says

1455
01:00:25,430 --> 01:00:26,720
NFD is not running

1456
01:00:26,720 --> 01:00:29,010
and if you start it again,

1457
01:00:30,070 --> 01:00:34,175
it shows it's
running again,

1458
01:00:34,175 --> 01:00:37,050
and every function
will work.

1459
01:00:38,140 --> 01:00:45,120
That's it. The code is
published to Github.

1460
01:00:45,280 --> 01:00:49,130
>> Thank you very
much. Not sure

1461
01:00:49,130 --> 01:00:52,950
whether there's
anything on Slack.

1462
01:00:54,400 --> 01:00:57,560
There are some
suggestions,

1463
01:00:57,560 --> 01:01:01,985
I guess from David,

1464
01:01:01,985 --> 01:01:04,040
Xinyu take a look

1465
01:01:04,040 --> 01:01:06,780
and continue the
discussion there.

1466
01:01:06,850 --> 01:01:11,370
Jay I can see you but
we couldn't hear you.

1467
01:01:12,370 --> 01:01:15,440
It's the end of
this session.

1468
01:01:15,440 --> 01:01:18,185
[LAUGHTER] Thank
you very much

1469
01:01:18,185 --> 01:01:20,210
Jay and all the

1470
01:01:20,210 --> 01:01:23,090
speakers for the
interesting thoughts.

1471
01:01:23,090 --> 01:01:24,830
Also thanks to all

1472
01:01:24,830 --> 01:01:26,150
the participants
who stayed

1473
01:01:26,150 --> 01:01:27,380
this late especially our

1474
01:01:27,380 --> 01:01:28,940
European and
Asian friends,

1475
01:01:28,940 --> 01:01:30,380
I can still see

1476
01:01:30,380 --> 01:01:35,360
a few names on BlueJeans
attendee list.

1477
01:01:35,360 --> 01:01:37,445
With that, I guess

1478
01:01:37,445 --> 01:01:39,830
I'll see you all
tomorrow at 10:00

1479
01:01:39,830 --> 01:01:42,215
AM Eastern Time and

1480
01:01:42,215 --> 01:01:44,510
have a nice rest of
your day everyone.

1481
01:01:44,510 --> 01:01:47,040
Bye.