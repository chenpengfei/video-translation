1
00:00:00,260 --> 00:00:03,360
>> 嘿，欢迎大家回来。

2
00:00:03,360 --> 00:00:05,650
我们接下来的环节有一组

3
00:00:05,650 --> 00:00:07,810
我们接下来的环节有一组七个简短的报告，

4
00:00:07,810 --> 00:00:10,400
将由Jay Misra主持。

5
00:00:10,400 --> 00:00:13,090
Jay是一位计算机科学教授。

6
00:00:13,090 --> 00:00:15,415
在新墨西哥州立大学。

7
00:00:15,415 --> 00:00:17,050
他的研究兴趣包括算法和协议

8
00:00:17,050 --> 00:00:19,030
包括算法和协议

9
00:00:19,030 --> 00:00:20,620
设计和开发用于

10
00:00:20,620 --> 00:00:22,645
匿名性和安全性，

11
00:00:22,645 --> 00:00:25,180
以及网络生存能力。

12
00:00:25,180 --> 00:00:28,105
Jay，请继续。

13
00:00:28,105 --> 00:00:31,390
>> 谢谢，洛特菲。欢迎大家

14
00:00:31,390 --> 00:00:33,505
参加这个简短的介绍会。

15
00:00:33,505 --> 00:00:35,590
像洛特菲提到的，我们将会

16
00:00:35,590 --> 00:00:38,740
我们将会有好几位小组成员，

17
00:00:38,740 --> 00:00:41,340
我们将有将近七位与会者进行演讲。

18
00:00:41,340 --> 00:00:42,480
我们将不会花费太多时间，请允许我介绍我们的第一位演讲者。

19
00:00:42,480 --> 00:00:45,050
让我来介绍我们的第一位演讲者。

20
00:00:45,050 --> 00:00:47,515
让我来介绍我们的第一位演讲者，Xtian 博士，

21
00:00:47,515 --> 00:00:49,725
获得他的博士学位来自

22
00:00:49,725 --> 00:00:50,360
电子与计算机工程系

23
00:00:50,360 --> 00:00:51,680
电子与计算机工程

24
00:00:51,680 --> 00:00:54,620
他于2010年从康涅狄格大学毕业。

25
00:00:54,620 --> 00:00:56,870
他加入了智能融合技术公司。

26
00:00:56,870 --> 00:00:58,760
在Germantown，

27
00:00:58,760 --> 00:01:02,190
2010年在马里兰州，并且已经完成了

28
00:01:02,190 --> 00:01:04,460
卫星通信领域的大量研究，

29
00:01:04,460 --> 00:01:05,660
认知无线电系统，

30
00:01:05,660 --> 00:01:06,920
和通信网络。

31
00:01:06,920 --> 00:01:08,150
他现在是网络和通信研究主任，在

32
00:01:08,150 --> 00:01:09,815
Intelligent Fusion Technology.

33
00:01:09,815 --> 00:01:11,585
智能融合技术。

34
00:01:11,585 --> 00:01:14,040
请继续，Xtian博士。

35
00:01:17,050 --> 00:01:19,410
>> [噪音] 谢谢。

36
00:01:21,760 --> 00:01:23,660
>> 我们看不清楚你。

37
00:01:23,660 --> 00:01:32,850
>> 屏幕外。下午好。

38
00:01:34,750 --> 00:01:39,180
我们很高兴参加这个研讨会。

39
00:01:40,390 --> 00:01:44,230
我们将开始进行NDN的工作。

40
00:01:44,230 --> 00:01:45,960
这是工作来自

41
00:01:45,960 --> 00:01:47,700
智能融合技术

42
00:01:47,700 --> 00:01:52,330
与美国空军研究实验室合作。

43
00:01:52,640 --> 00:01:57,750
这次我们将讨论的方法

44
00:01:57,750 --> 00:02:00,600
在基于NDN的数据传输中

45
00:02:00,600 --> 00:02:03,460
在多路径网络环境中。

46
00:02:05,330 --> 00:02:09,730
Here's the problem description.

47
00:02:10,910 --> 00:02:16,560
在这部分，我将尝试应用NDN。

48
00:02:16,560 --> 00:02:19,110
到卫星SATCOM网络

49
00:02:19,110 --> 00:02:22,245
和应用场景。

50
00:02:22,245 --> 00:02:25,680
有很多场景，

51
00:02:25,680 --> 00:02:27,120
网络环境下，

52
00:02:27,120 --> 00:02:28,585
智能多路径。

53
00:02:28,585 --> 00:02:32,270
例如，卫星星座具有

54
00:02:32,270 --> 00:02:35,105
LEO卫星星座站或

55
00:02:35,105 --> 00:02:39,900
具有类似振荡覆盖的多条路径。

56
00:02:40,760 --> 00:02:44,800
它出现在多路径中。

57
00:02:45,780 --> 00:02:49,905
另一个情况是当你有

58
00:02:49,905 --> 00:02:51,600
多个网络来自~!@#$%^&*()

59
00:02:51,600 --> 00:02:54,950
不同的供应商，例如Darla Nicolson，

60
00:02:54,950 --> 00:02:59,095
奥乐齐网络，所有个人网络。

61
00:02:59,095 --> 00:03:02,445
我们正在研究应用

62
00:03:02,445 --> 00:03:06,019
NDN作为一个OLA网络

63
00:03:06,019 --> 00:03:08,945
能够利用

64
00:03:08,945 --> 00:03:13,510
多路径通信网络。

65
00:03:13,510 --> 00:03:17,180
具体来说，我们想要

66
00:03:17,180 --> 00:03:20,030
获得类似多路径的那种改进

67
00:03:20,030 --> 00:03:23,915
网络吞吐量作为首要目标

68
00:03:23,915 --> 00:03:26,690
可能还有所改进

69
00:03:26,690 --> 00:03:30,900
在某些应用程序中的鲁棒性上。

70
00:03:32,180 --> 00:03:36,760
多路径存在一些挑战。

71
00:03:37,010 --> 00:03:41,020
多路径是首要的，

72
00:03:41,020 --> 00:03:42,710
尤其是如果你有

73
00:03:42,710 --> 00:03:44,760
一颗卫星网络，如果你有，是一种不同的性质，比如

74
00:03:44,760 --> 00:03:46,200
是一种不同的性质，比如

75
00:03:46,200 --> 00:03:50,430
一个低地球轨道(LEO)网络并降低了~!@#$%^&*()

76
00:03:50,430 --> 00:03:55,035
轨道或GEO是一个高轨道。

77
00:03:55,035 --> 00:03:57,840
时延差异可能非常大，

78
00:03:57,840 --> 00:04:05,230
因此，这是第一个挑战。

79
00:04:07,400 --> 00:04:10,425
因此，请考虑这个特定的场景，

80
00:04:10,425 --> 00:04:15,035
你有一个消费者和一个数据生产者。

81
00:04:15,035 --> 00:04:17,125
你想要沟通，

82
00:04:17,125 --> 00:04:20,040
所以这些多路径网络环境。

83
00:04:20,040 --> 00:04:24,560
另一个是端到端的圆形层级。

84
00:04:24,560 --> 00:04:28,595
可从不同路径获得的是未知的，

85
00:04:28,595 --> 00:04:32,555
所以你需要学习它们。

86
00:04:32,555 --> 00:04:35,430
第三个是

87
00:04:35,430 --> 00:04:39,555
多路径之间可能的耦合，

88
00:04:39,555 --> 00:04:43,945
在消费者和数据生产者之间。

89
00:04:43,945 --> 00:04:48,155
这是一些挑战。

90
00:04:48,155 --> 00:04:52,200
在这种环境下实现高成就。

91
00:04:53,410 --> 00:04:57,650
虽然我们讨论解决方案是因为我们

92
00:04:57,650 --> 00:05:05,750
我们也有来自加州大学洛杉矶分校的米斯拉教授。

93
00:05:05,750 --> 00:05:07,550
他会帮你回答这个问题。

94
00:05:07,550 --> 00:05:12,995
第一个解决方案是公正的，

95
00:05:12,995 --> 00:05:16,900
我认为这种肺气肿是加州大学洛杉矶分校的，

96
00:05:16,900 --> 00:05:18,620
他之前谈到的，就是

97
00:05:18,620 --> 00:05:21,580
他之前谈到的，就是动态的和多路径转发。

98
00:05:21,580 --> 00:05:24,665
他们试图开发

99
00:05:24,665 --> 00:05:26,660
不公正的控制速率

100
00:05:26,660 --> 00:05:29,030
基于拥塞控制。

101
00:05:29,030 --> 00:05:31,715
基本上你匹配发送速率和

102
00:05:31,715 --> 00:05:33,860
基本上你匹配发送速率和利息包发送率下的

103
00:05:33,860 --> 00:05:36,050
数据包的回传。

104
00:05:36,050 --> 00:05:42,260
我尝试处理

105
00:05:42,260 --> 00:05:46,280
延迟差在于~!@#$%^&*()

106
00:05:46,280 --> 00:05:49,280
不同资产是一个独特的案例。

107
00:05:49,280 --> 00:05:54,180
你的中间网络有灰尘。

108
00:05:56,290 --> 00:05:59,970
但它是如此

109
00:05:59,970 --> 00:06:02,780
消费者端相当简单。

110
00:06:02,780 --> 00:06:06,240
在那种情况下，它是

111
00:06:08,900 --> 00:06:11,310
不是更容易，而只是

112
00:06:11,310 --> 00:06:12,825
控制发送速率，

113
00:06:12,825 --> 00:06:17,960
但是我们的转发器需要尝试

114
00:06:17,960 --> 00:06:20,810
以匹配进入的利率

115
00:06:20,810 --> 00:06:23,375
以及包裹回报率也是如此，

116
00:06:23,375 --> 00:06:26,690
它更为复杂

117
00:06:26,690 --> 00:06:28,010
决策与

118
00:06:28,010 --> 00:06:29,689
转发决策，

119
00:06:29,689 --> 00:06:33,035
喜欢哪一个，以及报告使用了多少

120
00:06:33,035 --> 00:06:37,919
将其涂抹在你的脸上。

121
00:06:39,890 --> 00:06:43,365
数据消费方仅仅使用

122
00:06:43,365 --> 00:06:47,170
单一拥堵控制。

123
00:06:47,450 --> 00:06:49,860
对于其他站点有

124
00:06:49,860 --> 00:06:54,520
更紧凑的转发决策制定。

125
00:06:56,840 --> 00:06:59,340
有很多挑战，

126
00:06:59,340 --> 00:07:01,890
我认为在这种情况下

127
00:07:01,890 --> 00:07:04,830
的有效吞吐量是如此

128
00:07:04,830 --> 00:07:06,570
通过多路径网络可以

129
00:07:06,570 --> 00:07:10,550
可以在消费者和

130
00:07:10,550 --> 00:07:13,700
数据生产者实际上依赖于

131
00:07:13,700 --> 00:07:17,955
在决策者身上，他们是货运代理。

132
00:07:17,955 --> 00:07:20,415
当你有许多货运代理时

133
00:07:20,415 --> 00:07:21,500
跨越一个网络，

134
00:07:21,500 --> 00:07:24,050
跨越一个网络，所以它是一个动态的

135
00:07:24,050 --> 00:07:26,030
决策制定

136
00:07:26,030 --> 00:07:29,360
和圆形层次使得这个，

137
00:07:29,360 --> 00:07:32,615
可能难以处理，

138
00:07:32,615 --> 00:07:36,390
尤其是如果你遇到了较长时间的延迟。

139
00:07:36,440 --> 00:07:40,890
这种动态，很难预测。

140
00:07:40,890 --> 00:07:43,115
我认为存在一些挑战。

141
00:07:43,115 --> 00:07:44,900
在这种方法中，

142
00:07:44,900 --> 00:07:49,410
但它也有很多好处。当然。

143
00:07:50,410 --> 00:07:53,755
下一个是，

144
00:07:53,755 --> 00:07:58,125
我们认为可以应用的另一个解决方案是，

145
00:07:58,125 --> 00:08:02,265
我们添加了一个流ID

146
00:08:02,265 --> 00:08:04,560
添加到NDN兴趣包中。

147
00:08:04,560 --> 00:08:06,925
这不是一部分

148
00:08:06,925 --> 00:08:10,970
用户名称的名称的

149
00:08:10,970 --> 00:08:14,780
但它是数据

150
00:08:14,780 --> 00:08:18,800
只是一个指向利益包的流ID。

151
00:08:18,800 --> 00:08:22,020
它是由消费者端添加的。

152
00:08:22,020 --> 00:08:24,980
有了一个流ID，基本上，

153
00:08:24,980 --> 00:08:29,230
我们可以通过网络创建水流。

154
00:08:29,230 --> 00:08:34,305
在这个例子中，你有一个喷雾流动。

155
00:08:34,305 --> 00:08:38,230
我们将安排一个空运班机。

156
00:08:38,230 --> 00:08:42,300
决策变得简单。

157
00:08:42,300 --> 00:08:46,580
尽管对于一个包裹来说

158
00:08:46,580 --> 00:08:50,140
一个相似的文件名和不同的

159
00:08:50,140 --> 00:08:51,320
流ID，你可能会

160
00:08:51,320 --> 00:08:54,915
使用不同的转发决策。

161
00:08:54,915 --> 00:08:58,830
使用兴趣包进行转发

162
00:08:58,830 --> 00:09:03,100
相同的文件名和类似的文件名。

163
00:09:03,100 --> 00:09:04,955
当然，不同的部分

164
00:09:04,955 --> 00:09:07,850
和你使用的越简单

165
00:09:07,850 --> 00:09:15,345
这些包裹之前使用的是同样的基底。

166
00:09:15,345 --> 00:09:17,435
基本上，这些是我有的一些词汇。

167
00:09:17,435 --> 00:09:18,830
一些多路径网络[重叠]

168
00:09:18,830 --> 00:09:21,545
将环境转变为环保主义者

169
00:09:21,545 --> 00:09:23,715
单路径和多路径。

170
00:09:23,715 --> 00:09:25,720
使用单一路径和

171
00:09:25,720 --> 00:09:27,605
消费者端。

172
00:09:27,605 --> 00:09:29,310
是的，你已经习惯了

173
00:09:29,310 --> 00:09:30,975
它自己的拥塞控制。

174
00:09:30,975 --> 00:09:33,080
基本上，在这种情况下，

175
00:09:33,080 --> 00:09:36,065
你将处理延迟变化。

176
00:09:36,065 --> 00:09:40,470
流程ID存在问题。

177
00:09:40,470 --> 00:09:42,300
还有转发决策。

178
00:09:42,300 --> 00:09:45,250
转发器都很简单。

179
00:09:46,340 --> 00:09:50,580
尽管所谓的“各取所需”

180
00:09:50,580 --> 00:09:55,240
这些通道可以被有效利用。

181
00:09:56,150 --> 00:09:59,655
尽管我认为那有一些优势

182
00:09:59,655 --> 00:10:09,195
的一个灌木丛，还有

183
00:10:09,195 --> 00:10:12,030
为了创建攻击者流量，

184
00:10:12,030 --> 00:10:13,560
我们建议建立

185
00:10:13,560 --> 00:10:15,930
像这样依次建立流程，

186
00:10:15,930 --> 00:10:17,810
你建立了第一个流程。

187
00:10:17,810 --> 00:10:21,170
当所谓的达到一个稳定的水平时，

188
00:10:21,170 --> 00:10:22,430
你开始下一行。

189
00:10:22,430 --> 00:10:25,190
帮助货运代理识别

190
00:10:25,190 --> 00:10:31,210
独立的数据传输路径。

191
00:10:31,210 --> 00:10:37,640
这有助于减少耦合。

192
00:10:37,640 --> 00:10:39,485
不同路径因此

193
00:10:39,485 --> 00:10:41,939
你会获得更好的性能。

194
00:10:42,300 --> 00:10:47,345
那基本上是的，我们正在

195
00:10:47,345 --> 00:10:50,045
我们仍在努力实施这些解决方案并观察它的工作情况。

196
00:10:50,045 --> 00:10:53,090
我们仍在努力实施这些解决方案并观察它的工作情况，

197
00:10:53,090 --> 00:10:54,590
和也许比较一下它与

198
00:10:54,590 --> 00:10:59,500
动态多路径转发策略。

199
00:11:00,690 --> 00:11:06,160
>> 非常感谢Xtian博士。

200
00:11:06,160 --> 00:11:08,110
如有任何问题或后续事宜，

201
00:11:08,110 --> 00:11:09,520
您可能可以使用

202
00:11:09,520 --> 00:11:11,290
您可能可以使用Slack频道进行讨论。

203
00:11:11,290 --> 00:11:12,850
既然我们有七个

204
00:11:12,850 --> 00:11:14,215
演讲和70分钟，

205
00:11:14,215 --> 00:11:14,980
我们基本上有

206
00:11:14,980 --> 00:11:16,165
演讲每次10分钟。

207
00:11:16,165 --> 00:11:17,815
这真的很有趣。

208
00:11:17,815 --> 00:11:20,125
感谢您的演讲。

209
00:11:20,125 --> 00:11:20,650
>> 谢谢。

210
00:11:20,650 --> 00:11:21,850
>> 下一个报告是

211
00:11:21,850 --> 00:11:24,490
由Charif Mahmoudi博士，

212
00:11:24,490 --> 00:11:26,680
谁将要讲述

213
00:11:26,680 --> 00:11:27,910
NDN代表下一代

214
00:11:27,910 --> 00:11:29,485
的工厂自动化硕士学位。

215
00:11:29,485 --> 00:11:32,230
Dr. Mahmoudi received the Master's degree in Factory Automation and PhD in Computer Engineering from

216
00:11:32,230 --> 00:11:34,750
和计算机工程博士学位来自

217
00:11:34,750 --> 00:11:37,510
巴黎东方大学

218
00:11:37,510 --> 00:11:40,555
分别在2009年和2014年。

219
00:11:40,555 --> 00:11:42,760
在那之后，他在美国国家标准与技术研究院担任博士后。

220
00:11:42,760 --> 00:11:44,215
然后他随后加入了

221
00:11:44,215 --> 00:11:45,520
西门子企业技术部门担任

222
00:11:45,520 --> 00:11:48,265
担任智能系统的软件架构师。

223
00:11:48,265 --> 00:11:50,274
参与担任顾问，

224
00:11:50,274 --> 00:11:51,970
参与担任软件架构师，

225
00:11:51,970 --> 00:11:55,240
参与了几个成功的电信项目

226
00:11:55,240 --> 00:11:59,140
与法国电信和布依格电信合作，

227
00:11:59,140 --> 00:12:01,825
并为多个研究项目做出了贡献。

228
00:12:01,825 --> 00:12:03,250
他的兴趣领域

229
00:12:03,250 --> 00:12:04,330
分布式系统中,

230
00:12:04,330 --> 00:12:06,100
云计算、移动计算、

231
00:12:06,100 --> 00:12:07,270
和物联网。

232
00:12:07,270 --> 00:12:09,520
谢谢，请继续。

233
00:12:09,520 --> 00:12:12,160
>> 是的。我希望你能听到我。

234
00:12:12,160 --> 00:12:13,555
>> 是的，我们能做到。

235
00:12:13,555 --> 00:12:16,060
>> 很好。谢谢你为

236
00:12:16,060 --> 00:12:21,820
很好。谢谢你为漂亮的介绍。接下来，我将分享我的屏幕和幻灯片。

237
00:12:21,820 --> 00:12:27,520
我将分享我的屏幕和幻灯片。

238
00:12:27,520 --> 00:12:30,385
我发誓不会是

239
00:12:30,385 --> 00:12:33,280
超过10分钟的演讲。

240
00:12:33,280 --> 00:12:34,480
>> 我希望我们能够

241
00:12:34,480 --> 00:12:36,535
每个人发言20-25分钟。

242
00:12:36,535 --> 00:12:37,300
这很有趣。

243
00:12:37,300 --> 00:12:38,800
我们来赌时间吧。

244
00:12:38,800 --> 00:12:41,260
对不起，请继续。

245
00:12:41,260 --> 00:12:47,740
>> 极好的。确实。Charif Mahmoudi

246
00:12:47,740 --> 00:12:49,945
目前在西门子工作，在

247
00:12:49,945 --> 00:12:52,915
涉及智能系统的话题。

248
00:12:52,915 --> 00:12:56,950
我确实有合理的NDN活动。

249
00:12:56,950 --> 00:12:58,240
我想要，

250
00:12:58,240 --> 00:13:00,070
至少，分享一些关于的想法。

251
00:13:00,070 --> 00:13:02,200
至少，我的理念以及如何~!@#$%^&*()

252
00:13:02,200 --> 00:13:06,160
这些NDN背后的概念已经被重新映射了，

253
00:13:06,160 --> 00:13:08,230
我猜，我头脑里也是这样。

254
00:13:08,230 --> 00:13:11,930
为了更多的工业应用。

255
00:13:12,120 --> 00:13:15,340
我的演讲再次强调的是我们如何

256
00:13:15,340 --> 00:13:17,635
能够应用NDN并且

257
00:13:17,635 --> 00:13:19,900
这些概念适用于下一代

258
00:13:19,900 --> 00:13:23,485
的工厂自动化。

259
00:13:23,485 --> 00:13:27,445
我主要想强调的是

260
00:13:27,445 --> 00:13:29,920
上下文数据主要

261
00:13:29,920 --> 00:13:31,660
正在发展中，

262
00:13:31,660 --> 00:13:33,340
正在发展中的情境中，

263
00:13:33,340 --> 00:13:35,950
我们正在构建智能并且~!@#$%^&*()

264
00:13:35,950 --> 00:13:38,590
我们正在构建智能并且复杂的系统以支持制造业的努力。

265
00:13:38,590 --> 00:13:41,275
为了支持制造业的努力。

266
00:13:41,275 --> 00:13:43,300
在那边，有很多

267
00:13:43,300 --> 00:13:45,190
存在机会同时也有，

268
00:13:45,190 --> 00:13:46,630
面临着许多挑战。

269
00:13:46,630 --> 00:13:49,360
面临的一个重大挑战是

270
00:13:49,360 --> 00:13:52,315
努力解决的问题是要培养

271
00:13:52,315 --> 00:13:54,145
那些建立在拥有上的架构

272
00:13:54,145 --> 00:13:56,740
一种确定性通信

273
00:13:56,740 --> 00:13:58,900
为智能C系统。

274
00:13:58,900 --> 00:14:01,060
换句话说，有很多机会。

275
00:14:01,060 --> 00:14:05,410
有很多机会。

276
00:14:05,410 --> 00:14:06,610
我不知道发生了什么，

277
00:14:06,610 --> 00:14:09,770
我希望你还能看到我的屏幕。

278
00:14:11,130 --> 00:14:16,540
关键是，5G通信

279
00:14:16,540 --> 00:14:19,405
提供了一个新的机会

280
00:14:19,405 --> 00:14:21,910
我们可以利用的，

281
00:14:21,910 --> 00:14:23,695
尤其是在NDN（命名数据网络）方面，

282
00:14:23,695 --> 00:14:25,810
主要来自通信部分

283
00:14:25,810 --> 00:14:27,115
位于边缘的部分，

284
00:14:27,115 --> 00:14:29,500
应用程序的使用情况

285
00:14:29,500 --> 00:14:30,910
以及我们如何能够利用它来

286
00:14:30,910 --> 00:14:33,040
提高韧性。

287
00:14:33,040 --> 00:14:35,110
以及更加确定性的通信，

288
00:14:35,110 --> 00:14:38,030
利用它的一些特性。

289
00:14:38,520 --> 00:14:41,320
利用它的一些特性，NDN并行性，它是好是坏对于工厂自动化？

290
00:14:41,320 --> 00:14:43,345
对于工厂自动化来说是好是坏？

291
00:14:43,345 --> 00:14:45,190
这仍然是一个未决的问题，

292
00:14:45,190 --> 00:14:47,410
至少从我的角度来看，

293
00:14:47,410 --> 00:14:48,925
而从西门子这边来说，

294
00:14:48,925 --> 00:14:51,115
而这主要是因为存在着

295
00:14:51,115 --> 00:14:54,250
一些与此相关的挑战。

296
00:14:54,250 --> 00:14:56,050
首先，它关于

297
00:14:56,050 --> 00:14:57,580
上下文和要求

298
00:14:57,580 --> 00:15:00,805
或硬实时。

299
00:15:00,805 --> 00:15:02,485
它确实有要求。

300
00:15:02,485 --> 00:15:04,315
我们正在推动，

301
00:15:04,315 --> 00:15:07,030
NDN应用已经被探索过了

302
00:15:07,030 --> 00:15:09,655
在这方面，但仍然，

303
00:15:09,655 --> 00:15:13,270
在这方面，但仍然没有一个稳固或成熟的努力 that has been supported yet.

304
00:15:13,270 --> 00:15:15,370
这方面还没有得到支持。

305
00:15:15,370 --> 00:15:16,810
这方面主要是

306
00:15:16,810 --> 00:15:18,685
在协议支持方面。

307
00:15:18,685 --> 00:15:19,950
棕色的田野，

308
00:15:19,950 --> 00:15:22,305
这不是可以忽视的事情。

309
00:15:22,305 --> 00:15:24,930
棕色地带占据了大多数

310
00:15:24,930 --> 00:15:28,110
当前正在进行的部署。

311
00:15:28,110 --> 00:15:30,810
遵守或与协议的互动

312
00:15:30,810 --> 00:15:33,555
像Fortinet和其他实时协议，

313
00:15:33,555 --> 00:15:35,460
这是一个非常有趣的特性。

314
00:15:35,460 --> 00:15:38,100
我们相信这真的可以

315
00:15:38,100 --> 00:15:39,445
帮助适应

316
00:15:39,445 --> 00:15:43,270
工厂自动化中的NDN。

317
00:15:43,270 --> 00:15:45,070
我们知道社区中已经有一些工作

318
00:15:45,070 --> 00:15:46,825
在社区中已经有一些工作完成

319
00:15:46,825 --> 00:15:48,430
特别是针对物联网 (IoT) 和

320
00:15:48,430 --> 00:15:51,205
适配物联网协议，

321
00:15:51,205 --> 00:15:53,230
但即便如此，它并不难

322
00:15:53,230 --> 00:15:56,050
实时要求或至少，

323
00:15:56,050 --> 00:15:58,615
据我所理解。

324
00:15:58,615 --> 00:16:02,065
第二个是垂直方向上的，我认为。

325
00:16:02,065 --> 00:16:06,310
它主要是与IP相关的模型并行性。

326
00:16:06,310 --> 00:16:08,305
这是一个假设。

327
00:16:08,305 --> 00:16:10,330
即使技术栈完全不同，

328
00:16:10,330 --> 00:16:11,800
我在这里指的是

329
00:16:11,800 --> 00:16:14,170
标准的NDN堆栈，

330
00:16:14,170 --> 00:16:16,975
仍然有一个假设认为

331
00:16:16,975 --> 00:16:19,120
IP数据包它更多或者~!@#$%^&*()

332
00:16:19,120 --> 00:16:24,250
这个设计的中心较少。

333
00:16:24,250 --> 00:16:26,500
然而，一些实时协议

334
00:16:26,500 --> 00:16:27,910
已经直接跳跃到

335
00:16:27,910 --> 00:16:32,455
已经直接跳跃到网络堆栈的第2层到第7层。I think a big question in

336
00:16:32,455 --> 00:16:33,880
我认为一个重大的问题在于~!@#$%^&*()

337
00:16:33,880 --> 00:16:35,260
我的头主要是，

338
00:16:35,260 --> 00:16:40,030
我们如何利用NDN与这些协议结合。

339
00:16:40,030 --> 00:16:42,055
此外，这是实时的。

340
00:16:42,055 --> 00:16:43,420
这主要是我展示的内容，

341
00:16:43,420 --> 00:16:44,710
实时特性是

342
00:16:44,710 --> 00:16:45,940
这个冠军术语

343
00:16:45,940 --> 00:16:48,099
实时启用的协议。

344
00:16:48,099 --> 00:16:49,900
这是某种东西，它是

345
00:16:49,900 --> 00:16:51,670
相当有趣且是新颖的设计理念

346
00:16:51,670 --> 00:16:52,990
并行性提供了

347
00:16:52,990 --> 00:16:56,005
提供了一种相当独特的东西来观察

348
00:16:56,005 --> 00:16:58,405
在这种实时通信

349
00:16:58,405 --> 00:17:01,210
从一个完全不同的角度来看。

350
00:17:01,210 --> 00:17:04,030
最后但同样重要的，首先我要说声抱歉，

351
00:17:04,030 --> 00:17:06,535
为了短期或为了低成本，

352
00:17:06,535 --> 00:17:08,620
我猜，这里的政策是。

353
00:17:08,620 --> 00:17:10,810
但努力很少，

354
00:17:10,810 --> 00:17:11,890
其中一些我已经直接参与过，

355
00:17:11,890 --> 00:17:13,825
直接参与过的，

356
00:17:13,825 --> 00:17:15,190
有些其他的我知道

357
00:17:15,190 --> 00:17:18,070
有些其他的我知道，那些NIST的家伙们真的在大力推动，along those lines regarding~!@#$%^&*()

358
00:17:18,070 --> 00:17:19,660
~!@#$%^&*()

359
00:17:19,660 --> 00:17:22,750
绩效评估以及，

360
00:17:22,750 --> 00:17:24,280
调查研究

361
00:17:24,280 --> 00:17:27,220
高性能的技术栈，比如5G；

362
00:17:27,220 --> 00:17:31,060
Sloppy和他的团队正在研究的东西。

363
00:17:31,060 --> 00:17:32,920
在那边，我认为它真的是

364
00:17:32,920 --> 00:17:36,850
一个可以利用的好机会。

365
00:17:36,850 --> 00:17:39,205
换句话说，性能可以

366
00:17:39,205 --> 00:17:43,375
NDN可以得到更多的增强。

367
00:17:43,375 --> 00:17:45,850
可视化技术和

368
00:17:45,850 --> 00:17:47,635
加速技术是借助于

369
00:17:47,635 --> 00:17:50,710
所使用的技术提供的

370
00:17:50,710 --> 00:17:54,550
5G或其他环境，

371
00:17:54,550 --> 00:17:56,200
这确实是可以大大促进NDN使用的事情。

372
00:17:56,200 --> 00:17:58,135
促进NDN的使用。

373
00:17:58,135 --> 00:18:00,670
再次提到我所指的一些

374
00:18:00,670 --> 00:18:02,230
高速转发器

375
00:18:02,230 --> 00:18:03,370
已被探索过的，

376
00:18:03,370 --> 00:18:06,220
已被探索过的那个细分市场或其他替代上游过程，用于使用AI进行转发。

377
00:18:06,220 --> 00:18:10,855
用于使用AI进行转发。

378
00:18:10,855 --> 00:18:12,790
再次强调我的主要观点

379
00:18:12,790 --> 00:18:14,650
关于这张幻灯片，是的。

380
00:18:14,650 --> 00:18:17,560
我们正在探索新颖的架构

381
00:18:17,560 --> 00:18:19,240
为工厂自动化，

382
00:18:19,240 --> 00:18:20,905
为工厂自动化提供了一个非常吸引人的机会

383
00:18:20,905 --> 00:18:22,990
一个非常吸引人的机会

384
00:18:22,990 --> 00:18:24,355
的并行性。

385
00:18:24,355 --> 00:18:26,830
然而，将其应用到

386
00:18:26,830 --> 00:18:31,134
实时协议仍然具有挑战性。

387
00:18:31,134 --> 00:18:33,325
随着那个，我认为

388
00:18:33,325 --> 00:18:36,730
几乎不到几分钟了。

389
00:18:36,730 --> 00:18:39,355
我现在要提一下，是的，

390
00:18:39,355 --> 00:18:42,325
请随时联系我。

391
00:18:42,325 --> 00:18:43,840
我很想讨论

392
00:18:43,840 --> 00:18:47,500
这些话题与社区进行讨论，

393
00:18:47,500 --> 00:18:48,820
主要是为了弄清楚我们如何能够推动这一进程。

394
00:18:48,820 --> 00:18:52,870
可以推动这一进程。

395
00:18:52,870 --> 00:18:55,880
回到你这边。

396
00:18:55,920 --> 00:18:58,945
>> 谢谢，马哈茂迪博士。我们已经

397
00:18:58,945 --> 00:19:00,820
一分钟时间用于任何问题。

398
00:19:00,820 --> 00:19:03,650
观众中可能会有的。

399
00:19:04,350 --> 00:19:07,610
有人有问题吗？

400
00:19:07,680 --> 00:19:10,540
我们可以把问题转移到

401
00:19:10,540 --> 00:19:11,890
我们可以把问题转移到Slack频道上，[噪音]，也许在最后给大家一分钟时间。

402
00:19:11,890 --> 00:19:14,860
或许在最后给大家一分钟时间。

403
00:19:14,860 --> 00:19:17,020
谢谢你精彩的演讲。

404
00:19:17,020 --> 00:19:18,340
我有一些问题，我会

405
00:19:18,340 --> 00:19:19,780
把它们发布在Slack频道上。

406
00:19:19,780 --> 00:19:21,730
>> 谢谢这个机会。

407
00:19:21,730 --> 00:19:23,830
>> 谢谢。让我介绍

408
00:19:23,830 --> 00:19:26,155
我们的下一位演讲嘉宾，

409
00:19:26,155 --> 00:19:28,690
我们的下一位演讲嘉宾，Mr. Jeff White，在

410
00:19:28,690 --> 00:19:31,015
信息管理领域的新兴边缘技术。

411
00:19:31,015 --> 00:19:33,610
Jeff 领导自主系统和~!@#$%^&*()

412
00:19:33,610 --> 00:19:39,910
边缘技术生态系统开发

413
00:19:39,910 --> 00:19:41,050
和可组合系统，

414
00:19:41,050 --> 00:19:43,150
技术战略倡议

415
00:19:43,150 --> 00:19:44,590
全球首席技术官，

416
00:19:44,590 --> 00:19:45,805
戴尔科技。

417
00:19:45,805 --> 00:19:47,080
他还担任

418
00:19:47,080 --> 00:19:48,760
汽车设计权威委员会

419
00:19:48,760 --> 00:19:50,500
提供技术领导

420
00:19:50,500 --> 00:19:52,420
戴尔汽车垂直领域，

421
00:19:52,420 --> 00:19:54,430
负责技术设计的

422
00:19:54,430 --> 00:19:56,590
汽车企业和转型

423
00:19:56,590 --> 00:19:59,215
解决方案。Jeff，该你发言了。

424
00:19:59,215 --> 00:20:03,340
谢谢你，特别是感谢马哈茂迪博士。

425
00:20:03,340 --> 00:20:08,255
在如此紧凑的时间表上完成。

426
00:20:08,255 --> 00:20:11,270
大家能看到我的幻灯片吗？

427
00:20:15,180 --> 00:20:18,355
答案是肯定的，请告诉我如果不是。

428
00:20:18,355 --> 00:20:22,390
我是Jeff White，我在戴尔科技公司工作，

429
00:20:22,390 --> 00:20:24,385
我们参与了

430
00:20:24,385 --> 00:20:26,725
定义现代边缘计算。

431
00:20:26,725 --> 00:20:29,200
超越物联网并进入到现代计算边缘。

432
00:20:29,200 --> 00:20:33,230
向前迈进，进入现代计算边缘。

433
00:20:33,630 --> 00:20:36,640
这是我们的定义，我们~!@#$%^&*()

434
00:20:36,640 --> 00:20:39,535
大约一年半前拼凑起来的。

435
00:20:39,535 --> 00:20:41,380
在核心的是

436
00:20:41,380 --> 00:20:44,290
任何边缘部署的核心是应用程序和数据。

437
00:20:44,290 --> 00:20:46,510
然后，您可以叠加各种层次

438
00:20:46,510 --> 00:20:50,259
来进行应用管理中的编排工作，

439
00:20:50,259 --> 00:20:52,750
最终进行基础设施管理，

440
00:20:52,750 --> 00:20:53,215
然后，

441
00:20:53,215 --> 00:20:54,625
当然，我们永远不能忘记

442
00:20:54,625 --> 00:20:56,560
所有设备、传感器、车辆、

443
00:20:56,560 --> 00:20:59,320
和所需的物理能力

444
00:20:59,320 --> 00:21:02,920
构建一个现代化的边缘网络。

445
00:21:02,920 --> 00:21:05,230
这里的一个核心主题是，

446
00:21:05,230 --> 00:21:06,430
你几乎可以在每一个

447
00:21:06,430 --> 00:21:07,810
你几乎可以在每一行中找到数据。Managing data in the

448
00:21:07,810 --> 00:21:09,190
你几乎可以在每一行中找到数据。在边缘（Edge）管理数据相当具有挑战性。

449
00:21:09,190 --> 00:21:11,470
边缘（Edge）管理相当具有挑战性。

450
00:21:11,470 --> 00:21:13,555
如果你仔细想想，

451
00:21:13,555 --> 00:21:16,495
Edge既不是On-prem（本地部署）也不是在云端，

452
00:21:16,495 --> 00:21:17,875
它介于两者之间。

453
00:21:17,875 --> 00:21:20,920
数据将会是临时传输到边缘计算层，

454
00:21:20,920 --> 00:21:22,210
但是许多功能将会

455
00:21:22,210 --> 00:21:23,890
执行的操作包括摄取，

456
00:21:23,890 --> 00:21:24,940
处理，推断，

457
00:21:24,940 --> 00:21:25,870
分析，以及清单

458
00:21:25,870 --> 00:21:27,115
继续不断地进行着。

459
00:21:27,115 --> 00:21:28,570
但它在移动着，

460
00:21:28,570 --> 00:21:31,150
它存在于管道的边缘部分。

461
00:21:31,150 --> 00:21:33,999
像自动驾驶汽车这样的自主系统，

462
00:21:33,999 --> 00:21:36,190
但还有许多其他的自主系统，

463
00:21:36,190 --> 00:21:37,735
机器人流程自动化，

464
00:21:37,735 --> 00:21:40,150
列表将会无穷无尽，包括了那些……

465
00:21:40,150 --> 00:21:42,655
我们将自主技术嵌入到。

466
00:21:42,655 --> 00:21:45,100
我们将自主技术嵌入到一切从工厂装配线，

467
00:21:45,100 --> 00:21:47,365
正如穆罕默德博士所熟悉的，

468
00:21:47,365 --> 00:21:51,280
到自动驾驶汽车，到零售商店，

469
00:21:51,280 --> 00:21:53,200
和控制其中的某些系统。

470
00:21:53,200 --> 00:21:55,735
他们将需要依赖

471
00:21:55,735 --> 00:21:57,955
边缘计算和支持

472
00:21:57,955 --> 00:22:00,235
出于各种原因。

473
00:22:00,235 --> 00:22:02,575
接下来的两个真的很大。

474
00:22:02,575 --> 00:22:04,360
假设你的数据是

475
00:22:04,360 --> 00:22:06,220
将会是本地的并不是有保证的

476
00:22:06,220 --> 00:22:07,840
对于 Edge 和每一个

477
00:22:07,840 --> 00:22:10,270
应用程序开发过程中，

478
00:22:10,270 --> 00:22:12,685
这是一个重大的影响性声明，

479
00:22:12,685 --> 00:22:15,970
但是应用程序的信号粘连情况却始终存在

480
00:22:15,970 --> 00:22:17,920
开发时假定数据

481
00:22:17,920 --> 00:22:20,215
要么是本地的，要么是可以访问的。

482
00:22:20,215 --> 00:22:22,105
要么是本地的，要么是可以访问的，这两种假设都非常好，在边缘计算领域。

483
00:22:22,105 --> 00:22:24,115
在边缘计算领域是非常好的假设。

484
00:22:24,115 --> 00:22:25,570
数据将会被生成

485
00:22:25,570 --> 00:22:27,010
由各种传感器生成，

486
00:22:27,010 --> 00:22:28,960
边缘可能与它共同定位，

487
00:22:28,960 --> 00:22:30,310
但很多时候它不会这样。

488
00:22:30,310 --> 00:22:31,660
部署的整个目的是

489
00:22:31,660 --> 00:22:33,330
将边缘计算部署的整个目的是为了将共享基础设施部署得更近

490
00:22:33,330 --> 00:22:36,075
共享基础设施部署得更近

491
00:22:36,075 --> 00:22:37,470
数据源头。

492
00:22:37,470 --> 00:22:39,180
大多数关键驱动因素

493
00:22:39,180 --> 00:22:41,165
的边缘计算主要与数据相关。

494
00:22:41,165 --> 00:22:42,460
那么，如果你考虑一下

495
00:22:42,460 --> 00:22:44,185
可达性，你可能会说，

496
00:22:44,185 --> 00:22:45,550
当我们停止了网络连接，

497
00:22:45,550 --> 00:22:46,990
我们拥有了优秀的接入网络。

498
00:22:46,990 --> 00:22:48,070
，我们现在有了无线网络。

499
00:22:48,070 --> 00:22:49,750
所有这些了不起的事情，这是

500
00:22:49,750 --> 00:22:51,085
非常棘手的问题对于边缘计算来说，

501
00:22:51,085 --> 00:22:53,110
如果你关注那些新兴的工作负载

502
00:22:53,110 --> 00:22:54,250
它们正在推动边缘计算发展，

503
00:22:54,250 --> 00:22:56,770
它们产生了大量的数据。

504
00:22:56,770 --> 00:22:58,240
如果你考虑一些早先的讨论

505
00:22:58,240 --> 00:22:59,290
如果你考虑一些早先的讨论，今天在DARPA周围的讨论，

506
00:22:59,290 --> 00:23:00,625
今天在DARPA周围，

507
00:23:00,625 --> 00:23:02,770
如果你观察战斗能力，

508
00:23:02,770 --> 00:23:04,150
如果你观察自动驾驶汽车，

509
00:23:04,150 --> 00:23:05,740
如果你观察工厂，它们是

510
00:23:05,740 --> 00:23:07,795
产生大量的数据。

511
00:23:07,795 --> 00:23:09,760
产生大量的数据，并且结合了

512
00:23:09,760 --> 00:23:11,590
产生大量的数据，并且结合了接入网络的，不同的带宽将不允许你

513
00:23:11,590 --> 00:23:14,710
产生大量的数据，并且结合了接入网络的，不同的带宽将不允许你在所需的时间内达到数据。

514
00:23:14,710 --> 00:23:18,190
在所需的时间内达到数据。

515
00:23:18,190 --> 00:23:20,590
您当然可以移动数据。

516
00:23:20,590 --> 00:23:22,420
我们与客户合作过，

517
00:23:22,420 --> 00:23:23,950
需要移动五PB（petabytes）的

518
00:23:23,950 --> 00:23:27,205
数据从北美传输到日本。

519
00:23:27,205 --> 00:23:30,550
这是一个持续数周的过程。

520
00:23:30,550 --> 00:23:32,050
传输数据甚至以

521
00:23:32,050 --> 00:23:34,345
通过云端每秒10吉比特。

522
00:23:34,345 --> 00:23:35,890
如果你考虑一下这个

523
00:23:35,890 --> 00:23:37,600
现在进入边缘领域，

524
00:23:37,600 --> 00:23:39,805
这是一个巨大的问题。

525
00:23:39,805 --> 00:23:41,290
实际上，事情变得更简单了。

526
00:23:41,290 --> 00:23:43,870
装载一个存储系统并将其放置在

527
00:23:43,870 --> 00:23:45,190
比使用飞机还要难

528
00:23:45,190 --> 00:23:47,920
在可达性方面的互联网。

529
00:23:47,920 --> 00:23:49,030
考虑将其应用在

530
00:23:49,030 --> 00:23:50,290
考虑将其应用在边缘计算中，当你处理时

531
00:23:50,290 --> 00:23:52,450
数百个TB甚至最终达到

532
00:23:52,450 --> 00:23:55,270
数百个PB（petabytes）的数据在边缘网络中游荡。

533
00:23:55,270 --> 00:23:57,190
能见度也是个问题。

534
00:23:57,190 --> 00:23:58,270
你不在云端，

535
00:23:58,270 --> 00:24:02,770
你不在最终用户的位置上，

536
00:24:02,770 --> 00:24:04,390
所以获取可见性是一个挑战。

537
00:24:04,390 --> 00:24:05,590
这些数据是一个挑战。

538
00:24:05,590 --> 00:24:07,120
溯源，安全性，

539
00:24:07,120 --> 00:24:10,000
IP, 多播和单播。

540
00:24:10,000 --> 00:24:12,535
未来的边缘计算并不是一个CDN问题，

541
00:24:12,535 --> 00:24:14,335
它是一个反向CDN问题。

542
00:24:14,335 --> 00:24:15,640
你有大量的

543
00:24:15,640 --> 00:24:17,440
源头试图聚合数据

544
00:24:17,440 --> 00:24:19,150
最终将其传送到像这样的地方

545
00:24:19,150 --> 00:24:22,344
将其传送到云端和核心，以便进行分析。

546
00:24:22,344 --> 00:24:24,820
边缘计算也将包括移动工作负载，

547
00:24:24,820 --> 00:24:26,935
这即使对于NDN来说也是有问题的，

548
00:24:26,935 --> 00:24:28,900
虽然围绕如何有很多好主意，

549
00:24:28,900 --> 00:24:30,760
管理移动性。

550
00:24:30,760 --> 00:24:31,360
但很多

551
00:24:31,360 --> 00:24:32,440
这些工作负载将要开始

552
00:24:32,440 --> 00:24:34,765
要具备便携性并最终实现移动性。

553
00:24:34,765 --> 00:24:37,600
IT方法并没有太多优势

554
00:24:37,600 --> 00:24:39,010
比互联网方法更好

555
00:24:39,010 --> 00:24:40,490
在管理数据方面。

556
00:24:40,490 --> 00:24:42,330
实际上，我会说在很多情况下

557
00:24:42,330 --> 00:24:43,575
实际上，我会说在很多情况下，他们的状况也不是很好。My boss coined the term polydirectional,

558
00:24:43,575 --> 00:24:45,900
我的老板创造了“多向性”这个术语，

559
00:24:45,900 --> 00:24:47,400
它能够展示数据的多样性和复杂性，

560
00:24:47,400 --> 00:24:48,900
朝着许多不同的方向移动，

561
00:24:48,900 --> 00:24:50,955
它并非全都朝着一个方向移动。

562
00:24:50,955 --> 00:24:53,190
在当前的云计算解决方案中，

563
00:24:53,190 --> 00:24:54,390
和坦白说，其他人，

564
00:24:54,390 --> 00:24:55,710
专注于存储作为

565
00:24:55,710 --> 00:24:58,250
服务分析，人工智能赋能。

566
00:24:58,250 --> 00:24:59,680
他们并没有真正集中注意力。

567
00:24:59,680 --> 00:25:00,760
对于问题，

568
00:25:00,760 --> 00:25:03,310
我如何应用服务进行治理和~!@#$%^&*()

569
00:25:03,310 --> 00:25:06,475
如何对数据应用移动策略？

570
00:25:06,475 --> 00:25:08,080
那么最后，

571
00:25:08,080 --> 00:25:09,565
我认为这非常重要。

572
00:25:09,565 --> 00:25:12,040
如果你看一下Kubernetes或者其他编排框架，比如Mesos，

573
00:25:12,040 --> 00:25:14,635
其他编排框架，比如Mesos，

574
00:25:14,635 --> 00:25:17,120
戴尔销售的HCI框架，

575
00:25:17,120 --> 00:25:18,555
极少数的

576
00:25:18,555 --> 00:25:21,090
考虑将数据作为一等公民。

577
00:25:21,090 --> 00:25:23,730
许多编排框架将会

578
00:25:23,730 --> 00:25:26,560
在不考虑数据的情况下做出决策。

579
00:25:26,560 --> 00:25:28,135
他们可能会转移工作负载，

580
00:25:28,135 --> 00:25:30,220
但他们没有考虑到可达性。

581
00:25:30,220 --> 00:25:31,810
这是一个巨大的问题，

582
00:25:31,810 --> 00:25:34,390
将其插入到

583
00:25:34,390 --> 00:25:37,730
将其插入到现有框架中并不容易。

584
00:25:38,160 --> 00:25:41,455
我们一直在从事一个研究项目。

585
00:25:41,455 --> 00:25:43,930
我们在很大程度上利用了NDN。

586
00:25:43,930 --> 00:25:46,480
它有很多不同的方面。

587
00:25:46,480 --> 00:25:47,590
在这个研究项目中。

588
00:25:47,590 --> 00:25:49,060
这是一个边缘计算研究项目，

589
00:25:49,060 --> 00:25:51,505
但NDN提供了一些优势。

590
00:25:51,505 --> 00:25:53,230
首先，数据命名

591
00:25:53,230 --> 00:25:56,515
能力可以提供语义信息，

592
00:25:56,515 --> 00:25:58,240
和位置以及数据的来源

593
00:25:58,240 --> 00:26:01,000
隐身能力非常重要吗？

594
00:26:01,000 --> 00:26:04,360
如果您使用数据命名框架

595
00:26:04,360 --> 00:26:08,485
在一个“垫片”层中，该层执行应用程序，

596
00:26:08,485 --> 00:26:10,990
允许应用程序

597
00:26:10,990 --> 00:26:12,340
进行交互

598
00:26:12,340 --> 00:26:14,260
在应用程序不一定需要的情况下

599
00:26:14,260 --> 00:26:16,135
知道他们正在与NDN交互，

600
00:26:16,135 --> 00:26:18,460
可以非常有帮助，

601
00:26:18,460 --> 00:26:19,720
可以非常有帮助，和非常合适。A State Vector Sync is very efficient in

602
00:26:19,720 --> 00:26:22,600
terms of doing distributed

状态向量同步在进行分布式操作方面非常高效。

603
00:26:22,600 --> 00:26:24,280
在进行分布式操作方面

604
00:26:24,280 --> 00:26:25,630
数据库同步，

605
00:26:25,630 --> 00:26:26,230
以及大量的

606
00:26:26,230 --> 00:26:29,110
这些边缘应用程序将需要

607
00:26:29,110 --> 00:26:31,360
流媒体和持续的

608
00:26:31,360 --> 00:26:33,670
流媒体和数据处理能力。

609
00:26:33,670 --> 00:26:35,350
实际上，状态向量同步，

610
00:26:35,350 --> 00:26:37,375
它是NDN内在的，

611
00:26:37,375 --> 00:26:39,430
提供了这样做的能力，

612
00:26:39,430 --> 00:26:40,075
如果你看看

613
00:26:40,075 --> 00:26:41,620
其他更传统的方式

614
00:26:41,620 --> 00:26:44,560
使用Kafka或Flink，

615
00:26:44,560 --> 00:26:45,400
和所有这些其他事情

616
00:26:45,400 --> 00:26:46,030
正在推出的

617
00:26:46,030 --> 00:26:47,995
的Linux基金会，

618
00:26:47,995 --> 00:26:49,660
这些都相当重量级。

619
00:26:49,660 --> 00:26:51,160
他们是为IT设计的。我们已经有过

620
00:26:51,160 --> 00:26:52,900
客户已经启用了Kafka并且

621
00:26:52,900 --> 00:26:54,085
难以应对的边缘计算环境。

622
00:26:54,085 --> 00:26:56,710
面临了重大挑战，因为

623
00:26:56,710 --> 00:26:58,750
面临了重大挑战，因为它需要的计算资源的数量。

624
00:26:58,750 --> 00:27:02,200
它所需要的计算资源。

625
00:27:02,200 --> 00:27:04,870
最后，使用NDN（命名数据网络），

626
00:27:04,870 --> 00:27:07,180
您可以与策略框架集成

627
00:27:07,180 --> 00:27:10,525
您可以管理移动策略的能力。

628
00:27:10,525 --> 00:27:12,910
如果您具备能力

629
00:27:12,910 --> 00:27:15,100
可以对数据进行分类并且

630
00:27:15,100 --> 00:27:17,110
理解应用程序框架

631
00:27:17,110 --> 00:27:18,460
并且能够

632
00:27:18,460 --> 00:27:21,130
理解意图

633
00:27:21,130 --> 00:27:23,065
数据将被用于什么目的，

634
00:27:23,065 --> 00:27:24,940
你可以应用一个移动策略。

635
00:27:24,940 --> 00:27:26,830
如果你在一辆自动驾驶车辆中，

636
00:27:26,830 --> 00:27:28,915
你可能有一些重要的数据，

637
00:27:28,915 --> 00:27:30,850
但你可能正在使用5G或者4G链接，并且无法

638
00:27:30,850 --> 00:27:33,160
move that terabyte worth of data quickly.

639
00:27:33,160 --> 00:27:34,750
移动那1TB大小

640
00:27:34,750 --> 00:27:36,370
的非结构化数据在

641
00:27:36,370 --> 00:27:37,870
在任何合理的时间框架内

642
00:27:37,870 --> 00:27:40,270
通过那个5G链接产生的任何合理成本。

643
00:27:40,270 --> 00:27:41,470
但你可以提示

644
00:27:41,470 --> 00:27:43,420
那些数据，这样当你连接上时

645
00:27:43,420 --> 00:27:44,560
在家里或者当你在外面时候，

646
00:27:44,560 --> 00:27:46,810
给你的车充电或者其他什么事情，

647
00:27:46,810 --> 00:27:48,460
和你拥有一个更低的成本

648
00:27:48,460 --> 00:27:49,930
更高带宽的链接

649
00:27:49,930 --> 00:27:51,580
移动那些数据

650
00:27:51,580 --> 00:27:53,005
通过那可能不会被计量，

651
00:27:53,005 --> 00:27:54,820
那么你就可以传输数据了。

652
00:27:54,820 --> 00:27:57,505
NDN提供了实现这一功能的能力，

653
00:27:57,505 --> 00:27:59,170
而不是直接在NDN内部，

654
00:27:59,170 --> 00:28:02,095
而是通过一个"垫片"层，

655
00:28:02,095 --> 00:28:03,805
我们称之为IML，

656
00:28:03,805 --> 00:28:05,440
可以管理NDN

657
00:28:05,440 --> 00:28:07,210
可以管理这些移动策略，

658
00:28:07,210 --> 00:28:09,505
然后进行广告宣传等工作。

659
00:28:09,505 --> 00:28:11,335
我们正在做这个工作。

660
00:28:11,335 --> 00:28:13,480
再说，我可以谈论几个小时，

661
00:28:13,480 --> 00:28:14,560
但这仅仅是一个

662
00:28:14,560 --> 00:28:16,225
这里有一幅非常漂亮的小图片，关于

663
00:28:16,225 --> 00:28:17,860
我们正在其周围构建的一些功能

664
00:28:17,860 --> 00:28:19,510
我们正在其周围构建的功能。

665
00:28:19,510 --> 00:28:21,625
当然，Edge是分布式的，

666
00:28:21,625 --> 00:28:23,380
跨越多个领域

667
00:28:23,380 --> 00:28:25,870
以及如何管理这些数据以及

668
00:28:25,870 --> 00:28:29,230
经济地移动它是一个关键组成部分。

669
00:28:29,230 --> 00:28:32,785
愿望清单，NDN未来的想法。

670
00:28:32,785 --> 00:28:35,275
很多能力

671
00:28:35,275 --> 00:28:37,960
如果我们不这样做，就会减轻很多负担

672
00:28:37,960 --> 00:28:39,460
必须做的兴趣泛滥

673
00:28:39,460 --> 00:28:40,480
因为很多时候

674
00:28:40,480 --> 00:28:41,650
我们将要移动一个单独的

675
00:28:41,650 --> 00:28:43,105
我们将要移动一个单独的对象或一个单个文件，

676
00:28:43,105 --> 00:28:44,410
以及发送的能力

677
00:28:44,410 --> 00:28:46,300
一种“广泛”的兴趣，无须

678
00:28:46,300 --> 00:28:47,845
拥有广泛的兴趣

679
00:28:47,845 --> 00:28:49,690
会非常有用。

680
00:28:49,690 --> 00:28:52,090
我们可以发送一个兴趣点并且通过~!@#$%^&*()

681
00:28:52,090 --> 00:28:53,650
一系列带回所有这些部分

682
00:28:53,650 --> 00:28:55,060
并且它可以带回这些部分。

683
00:28:55,060 --> 00:28:56,350
此外，我们正在考虑

684
00:28:56,350 --> 00:28:57,760
进行编码之类的事情

685
00:28:57,760 --> 00:28:59,860
和你在哪里进行

686
00:28:59,860 --> 00:29:02,020
在边缘计算中使用的数据，

687
00:29:02,020 --> 00:29:04,150
部分下载文件并使用

688
00:29:04,150 --> 00:29:06,175
网络编码，就像内容分发网络(CDNs)那样，

689
00:29:06,175 --> 00:29:07,870
你有一个部分的文件，然后当

690
00:29:07,870 --> 00:29:09,875
它用于拉取其余的数据。

691
00:29:09,875 --> 00:29:11,370
具有发送能力

692
00:29:11,370 --> 00:29:13,170
涉猎广泛的兴趣会

693
00:29:13,170 --> 00:29:14,550
会非常有用

694
00:29:14,550 --> 00:29:16,920
朝着高性能NFD的方向。

695
00:29:16,920 --> 00:29:18,390
我被邀请参加这个的原因之一，

696
00:29:18,390 --> 00:29:20,555
我们正在这个团队内工作。

697
00:29:20,555 --> 00:29:25,075
正在研究高性能NFD的。

698
00:29:25,075 --> 00:29:26,650
高性能并不一定意味着高带宽，

699
00:29:26,650 --> 00:29:28,300
不一定意味着高带宽，

700
00:29:28,300 --> 00:29:31,150
它也可能意味着低延迟。

701
00:29:31,150 --> 00:29:32,980
我们需要轻量级版本。

702
00:29:32,980 --> 00:29:34,645
将会有许多人来。

703
00:29:34,645 --> 00:29:36,040
我很高兴见到

704
00:29:36,040 --> 00:29:38,275
今天早些时候基于代码的讨论。

705
00:29:38,275 --> 00:29:41,560
但我们也需要能够大量移动

706
00:29:41,560 --> 00:29:43,360
数据而不是拥有

707
00:29:43,360 --> 00:29:45,145
对此将会有严重的惩罚。

708
00:29:45,145 --> 00:29:47,470
持续发展状态向量同步，

709
00:29:47,470 --> 00:29:50,440
我认为它有很大的潜能。

710
00:29:50,440 --> 00:29:52,810
我们在这里提出的一个想法是

711
00:29:52,810 --> 00:29:55,300
Kubernetes 作为 CSI（Container Storage Interface）的概念，

712
00:29:55,300 --> 00:29:56,845
容器存储接口

713
00:29:56,845 --> 00:29:58,060
他们支持

714
00:29:58,060 --> 00:30:00,715
存储原语

715
00:30:00,715 --> 00:30:02,409
针对不同类型的能力，

716
00:30:02,409 --> 00:30:03,610
无论是AWS，

717
00:30:03,610 --> 00:30:04,960
或者是Adele存储系统，

718
00:30:04,960 --> 00:30:06,400
互联网上有一整个列表，

719
00:30:06,400 --> 00:30:07,285
你可以查一查。

720
00:30:07,285 --> 00:30:07,810
你可以查一查。一个非常酷的项目是去建造

721
00:30:07,810 --> 00:30:09,715
一个非常酷的项目是去建造

722
00:30:09,715 --> 00:30:11,350
容器存储接口

723
00:30:11,350 --> 00:30:13,540
直接用于 Kubernetes 的 NDN。

724
00:30:13,540 --> 00:30:14,680
它将是一个非常

725
00:30:14,680 --> 00:30:16,330
它将是一个非常有趣的事物，你可以直接

726
00:30:16,330 --> 00:30:20,040
它将是一个非常有趣的事物，你可以直接从Kubernetes管理NDN环境。That was just a crazy idea we had here,

727
00:30:20,040 --> 00:30:22,050
这只是我们这里的一个疯狂想法，

728
00:30:22,050 --> 00:30:23,520
但它最终可能真的很有趣。

729
00:30:23,520 --> 00:30:25,315
可能真的很有趣。

730
00:30:25,315 --> 00:30:27,040
这是来自我的开发团队，

731
00:30:27,040 --> 00:30:28,675
他们想确保我收到了。

732
00:30:28,675 --> 00:30:30,520
这些是我们在使用时会考虑的事情。

733
00:30:30,520 --> 00:30:32,530
我们在使用时会考虑的事情

734
00:30:32,530 --> 00:30:35,110
NDN在我们的研究环境中

735
00:30:35,110 --> 00:30:36,640
和我们的测试环境。

736
00:30:36,640 --> 00:30:38,800
改进的网络部署工具。

737
00:30:38,800 --> 00:30:40,990
如果我们必须建立复杂的网络拓扑结构

738
00:30:40,990 --> 00:30:43,450
你可能会在Edge和其他地方看到它，

739
00:30:43,450 --> 00:30:47,050
设置它们相当容易出错。

740
00:30:47,050 --> 00:30:49,195
它不是很用户友好。

741
00:30:49,195 --> 00:30:52,930
可观察性有点挑战性，

742
00:30:52,930 --> 00:30:56,245
NDN采用了一种相当老派的方法。

743
00:30:56,245 --> 00:30:59,095
大多数人今天都在使用Prometheus。

744
00:30:59,095 --> 00:31:01,270
如果我们能与之集成，

745
00:31:01,270 --> 00:31:03,190
如果我们能与之集成，能够通过NDN查看指标，

746
00:31:03,190 --> 00:31:04,000
实际上会在一个可观测的框架中。

747
00:31:04,000 --> 00:31:05,650
在一个单一的可观测框架中。

748
00:31:05,650 --> 00:31:07,360
你可以看一下普罗米修斯风格

749
00:31:07,360 --> 00:31:09,490
在线上查看它的功能。

750
00:31:09,490 --> 00:31:12,565
然后是正式的插件架构。

751
00:31:12,565 --> 00:31:13,990
有许多非常酷的工具，

752
00:31:13,990 --> 00:31:16,150
NDN追踪，这个列表还在持续增长。

753
00:31:16,150 --> 00:31:17,950
它们都是分开管理的。

754
00:31:17,950 --> 00:31:19,795
它们都是在NFD之外分开管理的。

755
00:31:19,795 --> 00:31:22,390
如果你能有一个正式的插件框架，

756
00:31:22,390 --> 00:31:24,190
那么人们就能够构建

757
00:31:24,190 --> 00:31:26,080
自己的工具，然后集成

758
00:31:26,080 --> 00:31:28,300
that into NFD without 的工具，然后集成，having to do a lot of custom development.

759
00:31:28,300 --> 00:31:30,220
需要进行大量的定制开发。

760
00:31:30,220 --> 00:31:33,025
它会使其看起来更加现代。

761
00:31:33,025 --> 00:31:36,025
当然，NFD是高性能的。

762
00:31:36,025 --> 00:31:38,710
它是NDN工作方式的核心。

763
00:31:38,710 --> 00:31:40,210
你必须在此基础上保持平衡，

764
00:31:40,210 --> 00:31:42,415
承担使NFD变得不稳定的风险。

765
00:31:42,415 --> 00:31:43,870
这些是愿望清单上的事项。

766
00:31:43,870 --> 00:31:45,130
我们想要与社区分享的是

767
00:31:45,130 --> 00:31:46,855
我们发现的一些事情是我们

768
00:31:46,855 --> 00:31:48,460
继续进行我们的开发工作。

769
00:31:48,460 --> 00:31:50,660
和围绕边缘计算的研究。

770
00:31:52,470 --> 00:31:54,925
谢谢。那是

771
00:31:54,925 --> 00:31:56,080
非常精彩的演讲，它有

772
00:31:56,080 --> 00:31:59,830
很多有趣的要点。

773
00:31:59,830 --> 00:32:04,900
我们会将讨论转移到Slack上。

774
00:32:04,900 --> 00:32:08,695
下一位报告人，Junxiao。

775
00:32:08,695 --> 00:32:11,930
Junxiao Shi 将要进行报告。

776
00:32:11,930 --> 00:32:15,580
NDNts视频

777
00:32:15,580 --> 00:32:17,840
使用QUIC和WebTransport进行流媒体传输。

778
00:32:17,840 --> 00:32:20,200
Junxiao 是 NIST 的一名客座研究员。

779
00:32:20,200 --> 00:32:21,460
他是一个核心的NDN开发者。

780
00:32:21,460 --> 00:32:22,180
并且一直在开发

781
00:32:22,180 --> 00:32:24,469
自2013年以来一直在研究NDN网络。

782
00:32:24,469 --> 00:32:26,315
还喜欢构建网站和

783
00:32:26,315 --> 00:32:28,750
基于浏览器的NDN应用程序。

784
00:32:28,750 --> 00:32:29,875
俊霄，请继续。

785
00:32:29,875 --> 00:32:32,890
嗨，我是俊霄。我正在介绍。

786
00:32:32,890 --> 00:32:35,105
这是我的个人项目

787
00:32:35,105 --> 00:32:36,745
NDNts视频流媒体

788
00:32:36,745 --> 00:32:38,935
使用QUIC和WebTransport。

789
00:32:38,935 --> 00:32:40,745
>> 俊晓，你能增加

790
00:32:40,745 --> 00:32:43,540
你那边的音量有点小。

791
00:32:43,670 --> 00:32:45,670
我觉得应该可以。

792
00:32:45,670 --> 00:32:46,550
我觉得应该可以。继续吧。

793
00:32:46,550 --> 00:32:49,630
>> 是的。我是俊霄。

794
00:32:49,630 --> 00:32:51,100
这是我的个人项目，

795
00:32:51,100 --> 00:32:52,985
使用NDNts进行视频流传输

796
00:32:52,985 --> 00:33:00,750
QUIC和WebTransport [噪音]。

797
00:33:00,750 --> 00:33:02,470
NDNts视频是一个网站。

798
00:33:02,470 --> 00:33:05,030
它是一个执行操作的网络应用程序。

799
00:33:05,030 --> 00:33:06,690
预录制视频

800
00:33:06,690 --> 00:33:08,780
在NDN网络上进行流媒体传输。

801
00:33:08,780 --> 00:33:11,320
我开始开发这个网站

802
00:33:11,320 --> 00:33:13,300
与iViSA并行的是

803
00:33:13,300 --> 00:33:16,300
一篇在ICN 20上测试的论文

804
00:33:16,300 --> 00:33:17,765
NDNts拥塞控制或者

805
00:33:17,765 --> 00:33:20,065
我的库中的拥塞控制。

806
00:33:20,065 --> 00:33:23,290
Both NDNts video and iViSA use the same streaming library which is我的库中的拥塞控制。

807
00:33:23,290 --> 00:33:25,270
我的库中的拥塞控制。

808
00:33:25,270 --> 00:33:27,725
Shaka Player和Shaka Packager。

809
00:33:27,725 --> 00:33:29,945
自2020年黑色星期五以来，

810
00:33:29,945 --> 00:33:33,785
我开始发布自己的内容是因为我

811
00:33:33,785 --> 00:33:35,320
相信是内容本身吸引了观众，而不是技术。

812
00:33:35,320 --> 00:33:37,600
吸引观众的是内容本身，而不是技术。

813
00:33:37,600 --> 00:33:38,830
观众其实并不在乎

814
00:33:38,830 --> 00:33:40,130
观众其实并不在乎，是否是NDN。

815
00:33:40,130 --> 00:33:41,800
所以我有内容了。

816
00:33:41,800 --> 00:33:43,660
所以我的内容是以编码形式存在的。

817
00:33:43,660 --> 00:33:44,825
DASH格式支持

818
00:33:44,825 --> 00:33:47,470
四种分辨率，高达720p。

819
00:33:47,470 --> 00:33:49,960
今年早些时候我进行了实验

820
00:33:49,960 --> 00:33:52,665
在Chrome浏览器中使用QuicTransport

821
00:33:52,665 --> 00:33:54,775
这个演讲是

822
00:33:54,775 --> 00:33:58,040
这个演讲主要是对这个实验的报告。

823
00:33:58,040 --> 00:34:00,490
我们为什么要使用QUIC？

824
00:34:00,490 --> 00:34:04,570
传统上，网络应用程序在

825
00:34:04,570 --> 00:34:05,740
与NDN连接

826
00:34:05,740 --> 00:34:08,450
通过WebSockets连接NDN网络。

827
00:34:08,450 --> 00:34:10,720
NFD是一种转发软件。

828
00:34:10,720 --> 00:34:12,480
它本身支持WebSocket。

829
00:34:12,480 --> 00:34:14,700
全球还有其他的NDN测试平台。

830
00:34:14,700 --> 00:34:17,305
是一个Nginx反向代理软件，它……

831
00:34:17,305 --> 00:34:19,465
暴露了NFD WebSocket 连接

832
00:34:19,465 --> 00:34:21,645
HTTPS以便浏览器

833
00:34:21,645 --> 00:34:23,450
可以看到它是否能够连接。

834
00:34:23,450 --> 00:34:25,200
但问题是我

835
00:34:25,200 --> 00:34:26,845
开发拥塞控制和

836
00:34:26,845 --> 00:34:28,270
其他NDN库也已经开始有拥塞控制。

837
00:34:28,270 --> 00:34:30,625
已经开始有拥塞控制。

838
00:34:30,625 --> 00:34:33,095
拥塞控制算法更多地是

839
00:34:33,095 --> 00:34:35,440
与TCP关系不大，

840
00:34:35,440 --> 00:34:37,835
所以这是类似于TCP的拥塞控制。

841
00:34:37,835 --> 00:34:41,740
但是WebSocket协议本身是基于TCP之上的。

842
00:34:41,740 --> 00:34:43,900
虽然我们有NDN拥塞控制，

843
00:34:43,900 --> 00:34:46,845
类似TCP以及基于TCP的WebSocket，

844
00:34:46,845 --> 00:34:48,375
这是有效运行

845
00:34:48,375 --> 00:34:50,050
TCP拥塞控制机制

846
00:34:50,050 --> 00:34:51,880
TCP和TCP之上

847
00:34:51,880 --> 00:34:54,700
TCP被认为会导致

848
00:34:54,700 --> 00:34:58,415
更好的性能和其他不当行为。

849
00:34:58,415 --> 00:35:00,630
因此，QUIC是不同的

850
00:35:00,630 --> 00:35:03,715
因为QUIC本身是建立在UDP之上的。

851
00:35:03,715 --> 00:35:07,030
特别是，QuicTransport API它提供了

852
00:35:07,030 --> 00:35:11,110
不可靠的数据报服务，就像UDP一样。

853
00:35:11,110 --> 00:35:13,120
与普通UDP的区别

854
00:35:13,120 --> 00:35:14,955
它是加密的

855
00:35:14,955 --> 00:35:18,275
认证以满足Web传输模型需求

856
00:35:18,275 --> 00:35:20,770
以及托管的有效性

857
00:35:20,770 --> 00:35:22,580
UDP一直到底，因此

858
00:35:22,580 --> 00:35:24,165
我们的消费者端

859
00:35:24,165 --> 00:35:26,875
TCP类似的拥塞控制可以工作得很好。

860
00:35:26,875 --> 00:35:28,310
但是很多人不会

861
00:35:28,310 --> 00:35:29,745
支持QUIC，因此，

862
00:35:29,745 --> 00:35:32,155
我构建了支持NDN-QUIC的网关，借助

863
00:35:32,155 --> 00:35:35,080
我构建了支持NDN-QUIC的网关，借助aioquic和python-ndn库。网关作为一个代理

864
00:35:35,080 --> 00:35:37,175
网关作为一个代理

865
00:35:37,175 --> 00:35:39,200
在QUIC和普通UDP之间。

866
00:35:39,200 --> 00:35:41,430
每个QUIC连接成为

867
00:35:41,430 --> 00:35:45,705
一个在本地NFD上的UDP接口。

868
00:35:45,705 --> 00:35:48,310
作为网关在同一台机器上的本地NFD，

869
00:35:48,310 --> 00:35:49,840
它可以提供转发和

870
00:35:49,840 --> 00:35:52,645
缓存进入更广泛的NDN网络中。

871
00:35:52,645 --> 00:35:54,605
这就是我部署的方式。

872
00:35:54,605 --> 00:35:57,065
实验中使用的NDN-QUIC。

873
00:35:57,065 --> 00:35:59,220
在我部署的测试环境中

874
00:35:59,220 --> 00:36:02,375
在我部署的测试环境中，我的NDNts-videos-servers的两个副本，they serve the same content of ram Buffalo

875
00:36:02,375 --> 00:36:04,470
他们提供相同的ram Buffalo内容。

876
00:36:04,470 --> 00:36:07,405
在纽约和日本东京。

877
00:36:07,405 --> 00:36:09,950
然后我部署了三个实例

878
00:36:09,950 --> 00:36:12,770
的NDN-QUIC网关位于阿姆斯特丹，

879
00:36:12,770 --> 00:36:14,540
洛杉矶和东京。

880
00:36:14,540 --> 00:36:16,085
它们都连接到

881
00:36:16,085 --> 00:36:18,340
它们都连接到测试床和每个网关都有

882
00:36:18,340 --> 00:36:19,480
它们都连接到测试床和每个网关都有一个本地NFD，具有高达98,000个参与者的缓存容量。

883
00:36:19,480 --> 00:36:22,805
具有高达98,000个参与者的缓存容量。

884
00:36:22,805 --> 00:36:25,735
观众们分布在不同的大陆上。

885
00:36:25,735 --> 00:36:27,470
连接到

886
00:36:27,470 --> 00:36:29,540
附近的NDN-QUIC网关。

887
00:36:29,540 --> 00:36:31,715
这是一个静态分配。

888
00:36:31,715 --> 00:36:34,295
如果用户没有使用Chrome浏览器，

889
00:36:34,295 --> 00:36:36,590
既然只有Chrome支持QUIC，或者

890
00:36:36,590 --> 00:36:39,055
如果用户无法连接到QUIC，

891
00:36:39,055 --> 00:36:41,010
他们仍将连接到

892
00:36:41,010 --> 00:36:43,710
他们仍将通过Websocket连接到测试平台，像往常一样。

893
00:36:43,710 --> 00:36:45,880
我也有HTTP。

894
00:36:45,880 --> 00:36:47,710
可以收集数据的信标服务器

895
00:36:47,710 --> 00:36:48,890
视频质量

896
00:36:48,890 --> 00:36:50,215
体验指标

897
00:36:50,215 --> 00:36:53,610
使用 Navigator 发送 Beacon API。

898
00:36:53,610 --> 00:36:55,640
~!@#$%^&*()

899
00:36:55,640 --> 00:36:58,175
我的内容是我的俯卧撑视频。

900
00:36:58,175 --> 00:37:00,490
我制作了这个网站并且

901
00:37:00,490 --> 00:37:02,735
我把我的内容放在那儿然后我

902
00:37:02,735 --> 00:37:04,390
发布了一个链接到

903
00:37:04,390 --> 00:37:07,820
LowEndTalk和LowEndSpirit论坛。

904
00:37:07,820 --> 00:37:11,135
这些俯卧撑很快就会变成~!@#$%^&*()

905
00:37:11,135 --> 00:37:12,645
因为这些俯卧撑很快就会变成~!@#$%^&*(), 在论坛上已经成为了一个梗，其他用户也在谈论它。

906
00:37:12,645 --> 00:37:14,800
其他用户也在谈论它。

907
00:37:14,800 --> 00:37:16,540
那些论坛成员，他们会

908
00:37:16,540 --> 00:37:18,895
点击并观看我的俯卧撑。

909
00:37:18,895 --> 00:37:21,755
我得到的好处是我得到了

910
00:37:21,755 --> 00:37:23,675
现实世界使用统计数据

911
00:37:23,675 --> 00:37:24,890
的应用程序。

912
00:37:24,890 --> 00:37:28,010
在32天的数据收集期间，

913
00:37:28,010 --> 00:37:30,990
在32天的数据收集期间，我收到了来自六大洲的541位观众，他们代表着

914
00:37:30,990 --> 00:37:33,280
六大洲，他们代表着

915
00:37:33,280 --> 00:37:36,520
总共有6.4小时的播放时间。

916
00:37:36,520 --> 00:37:39,370
这是一个不受控制的实验。

917
00:37:39,370 --> 00:37:41,200
但我相信我的方法更加

918
00:37:41,200 --> 00:37:43,630
的方法更加现实，因为iViSA他们~!@#$%^&*()

919
00:37:43,630 --> 00:37:45,005
模拟了观众的运行情况

920
00:37:45,005 --> 00:37:46,245
在亚马逊网络服务中，

921
00:37:46,245 --> 00:37:48,355
但真正的观众并没有那么多

922
00:37:48,355 --> 00:37:52,225
优质的数据中心网络连接。

923
00:37:52,225 --> 00:37:55,615
该图表显示了视频分辨率。

924
00:37:55,615 --> 00:37:58,505
根据我的统计数据，

925
00:37:58,505 --> 00:38:01,000
棕色条形来自于

926
00:38:01,000 --> 00:38:02,830
WebSocket连接和紫色条形

927
00:38:02,830 --> 00:38:04,325
来自QUIC连接。

928
00:38:04,325 --> 00:38:06,095
更深的阴影色调，

929
00:38:06,095 --> 00:38:07,770
这意味着更高的分辨率。

930
00:38:07,770 --> 00:38:10,509
我们可以看到在欧洲

931
00:38:11,220 --> 00:38:14,580
当用户通过WebSocket连接时，

932
00:38:14,580 --> 00:38:16,390
他们有42%的时间是这样的

933
00:38:16,390 --> 00:38:18,275
在最高分辨率下播放时，

934
00:38:18,275 --> 00:38:19,925
但是当它们通过连接时

935
00:38:19,925 --> 00:38:22,620
QUIC在60%的时间里会

936
00:38:22,620 --> 00:38:25,200
播放最高分辨率的视频时，哪个

937
00:38:25,200 --> 00:38:27,805
在播放最高分辨率的视频时，QUIC提供了视频分辨率的提升。

938
00:38:27,805 --> 00:38:31,005
提供了视频分辨率的提升。

939
00:38:31,005 --> 00:38:33,645
我们也看到了类似的改进在

940
00:38:33,645 --> 00:38:35,185
亚洲和北美洲

941
00:38:35,185 --> 00:38:36,980
但程度较小。

942
00:38:36,980 --> 00:38:39,425
我也吸引了作为启动延迟，

943
00:38:39,425 --> 00:38:41,080
持续的时间在……之间

944
00:38:41,080 --> 00:38:43,805
用户按下开始按钮。

945
00:38:43,805 --> 00:38:46,790
直到他们能看到我那惊人的俯卧撑。

946
00:38:46,790 --> 00:38:49,300
既然它被单独追踪

947
00:38:49,300 --> 00:38:50,795
对于欧洲和北美

948
00:38:50,795 --> 00:38:52,370
在亚洲，我们可以看到

949
00:38:52,370 --> 00:38:54,345
在欧洲和亚洲 both

950
00:38:54,345 --> 00:38:56,220
我们每天都看到一家初创公司。

951
00:38:56,220 --> 00:38:58,670
减少了超过1.5秒。

952
00:38:58,670 --> 00:39:00,400
在北美，这种减少

953
00:39:00,400 --> 00:39:02,845
是500毫秒。

954
00:39:02,845 --> 00:39:06,695
自从我二月份开始实验以来，

955
00:39:06,695 --> 00:39:08,160
三月份我一直在~!@#$%^&*()

956
00:39:08,160 --> 00:39:10,820
改善NDNts视频应用程序。

957
00:39:10,820 --> 00:39:12,345
首先，在Chrome浏览器中。

958
00:39:12,345 --> 00:39:14,110
他们决定在Chrome浏览器中，

959
00:39:14,110 --> 00:39:16,765
他们决定在Chrome浏览器中，替换QuicTransport为WebTransport。The difference is that it uses HTTPS/3 for

960
00:39:16,765 --> 00:39:20,530
它的不同之处在于它使用了HTTPS/3来

961
00:39:20,530 --> 00:39:22,375
更好的[听不清楚]但它是~!@#$%^&*()

962
00:39:22,375 --> 00:39:24,900
依旧是同样的数据报服务。

963
00:39:24,900 --> 00:39:28,445
WebTransport 的原始试验刚刚结束

964
00:39:28,445 --> 00:39:29,875
所以我们现在无法使用

965
00:39:29,875 --> 00:39:31,765
所以我们现在无法使用WebTransport或QUIC，

966
00:39:31,765 --> 00:39:34,120
但它计划将在Chrome中发布。

967
00:39:34,120 --> 00:39:37,145
97将在明年初发布。

968
00:39:37,145 --> 00:39:39,365
我希望全球NDN测试平台

969
00:39:39,365 --> 00:39:41,970
可以在那时支持WebTransport。

970
00:39:41,970 --> 00:39:43,930
我也在构建ndn6，

971
00:39:43,930 --> 00:39:45,965
我自己的全球规模的NDN网络。

972
00:39:45,965 --> 00:39:47,525
它目前有九台路由器。

973
00:39:47,525 --> 00:39:49,595
它与测试床建立了对等连接。

974
00:39:49,595 --> 00:39:53,579
它在大多数地方支持WebTransport。

975
00:39:53,579 --> 00:39:54,910
我已经搬家了。

976
00:39:54,910 --> 00:39:56,405
我的视频制作人在那里，

977
00:39:56,405 --> 00:39:59,075
但我仍在完善这个设置。

978
00:39:59,075 --> 00:40:00,850
以下是一些链接，以便

979
00:40:00,850 --> 00:40:02,105
以便您稍后阅读。

980
00:40:02,105 --> 00:40:05,545
更多关于这些实验的信息。谢谢。

981
00:40:05,545 --> 00:40:06,610
谢谢您，

982
00:40:06,610 --> 00:40:09,320
俊霄，真是一次有趣的演讲。

983
00:40:09,320 --> 00:40:10,890
再次，对于那些

984
00:40:10,890 --> 00:40:11,975
对于那些有任何疑问的你们，

985
00:40:11,975 --> 00:40:13,895
我相信你们对于俊晓有很多问题。

986
00:40:13,895 --> 00:40:16,705
请使用Slack频道进行评论。

987
00:40:16,705 --> 00:40:18,699
我将继续进行下一个演讲，

988
00:40:18,699 --> 00:40:22,195
这是由加州大学洛杉矶分校的Varun Patil 所表演的NDN戏剧。

989
00:40:22,195 --> 00:40:23,800
Varun是加州大学洛杉矶分校的研究生，

990
00:40:23,800 --> 00:40:25,860
Varun是加州大学洛杉矶分校计算机科学系的研究生，他的研究兴趣在于系统和

991
00:40:25,860 --> 00:40:29,010
他的研究兴趣在于系统和

992
00:40:29,010 --> 00:40:30,360
他的研究兴趣在于系统和数据中心网络，并且目前正在研究NDN同步协议。

993
00:40:30,360 --> 00:40:32,725
目前正在研究NDN同步协议。

994
00:40:32,725 --> 00:40:34,850
谢谢你，Varun。请继续分享。

995
00:40:34,850 --> 00:40:36,700
谢谢你，Jay。

996
00:40:39,320 --> 00:40:41,575
你能看到我的屏幕吗？

997
00:40:41,575 --> 00:40:42,760
>> 是的。

998
00:40:42,760 --> 00:40:44,970
>> 太好了。我正准备去

999
00:40:44,970 --> 00:40:47,110
即将现场演示 NDN Play，

1000
00:40:47,110 --> 00:40:48,970
基于浏览器的

1001
00:40:48,970 --> 00:40:50,780
NDN 可视化和仿真器。

1002
00:40:50,780 --> 00:40:53,020
但是让我先说几句

1003
00:40:53,020 --> 00:40:55,320
这里有一些幻灯片，给我们一些资料。

1004
00:40:55,320 --> 00:40:57,450
首先，我们为什么要建造这个东西？

1005
00:40:57,450 --> 00:40:59,245
它背后的动机是什么？

1006
00:40:59,245 --> 00:41:01,720
第一个小组讨论的主题是什么？

1007
00:41:01,720 --> 00:41:03,095
今天以及彼得所说的内容。

1008
00:41:03,095 --> 00:41:06,215
开始使用NDN并不容易。

1009
00:41:06,215 --> 00:41:09,320
新手可能会问，我该从哪里开始？

1010
00:41:09,320 --> 00:41:12,250
例如，仅仅运行第一行代码

1011
00:41:12,250 --> 00:41:14,895
对于刚接触NDN的新手来说，

1012
00:41:14,895 --> 00:41:16,300
他们必须做很多事情。

1013
00:41:16,300 --> 00:41:18,130
They must do a lot of things, like get NDN Cxx, then setup NFD on ~!@#$%^&*().

1014
00:41:18,130 --> 00:41:19,300
然后在~!@#$%^&*()上设置NFD

1015
00:41:19,300 --> 00:41:20,800
他们的本地计算机上

1016
00:41:20,800 --> 00:41:22,030
然后编写C++代码，

1017
00:41:22,030 --> 00:41:23,540
编译并运行它。

1018
00:41:23,540 --> 00:41:25,390
他们需要做很多事情。

1019
00:41:25,390 --> 00:41:26,260
在他们能写下

1020
00:41:26,260 --> 00:41:27,525
在他们能写下他们的第一行代码之前。

1021
00:41:27,525 --> 00:41:28,955
在他们能写下他们的第一行代码之前，视觉演示很有帮助。

1022
00:41:28,955 --> 00:41:30,625
视觉演示很有帮助。

1023
00:41:30,625 --> 00:41:31,985
无论你是新手

1024
00:41:31,985 --> 00:41:33,865
或者你是NDN方面的专家，

1025
00:41:33,865 --> 00:41:36,875
观察事物总是更有意义。

1026
00:41:36,875 --> 00:41:38,620
终于，它是事物的另一面

1027
00:41:38,620 --> 00:41:40,120
我们第一个~!@#$%^&*()

1028
00:41:40,120 --> 00:41:42,905
也需要工具来向新来者展示NDN。

1029
00:41:42,905 --> 00:41:44,710
例如，学生或者人们

1030
00:41:44,710 --> 00:41:45,550
可能不太了解网络方面的知识，

1031
00:41:45,550 --> 00:41:46,620
可能不太了解网络方面的知识，

1032
00:41:46,620 --> 00:41:48,875
如果我们有可以展示的工具，

1033
00:41:48,875 --> 00:41:50,200
它们与NDN有关，

1034
00:41:50,200 --> 00:41:51,630
那就太好了。

1035
00:41:51,630 --> 00:41:54,480
这就是为什么我建立了NDN-Play，

1036
00:41:54,480 --> 00:41:56,380
这是一个用于NDN的游乐场，完全在浏览器中运行。

1037
00:41:56,380 --> 00:41:57,690
完全在浏览器中运行。

1038
00:41:57,690 --> 00:41:58,600
它是无服务器的。

1039
00:41:58,600 --> 00:42:00,065
它部署在GitHub页面上。

1040
00:42:00,065 --> 00:42:01,660
链接在下面。

1041
00:42:01,660 --> 00:42:02,945
如果你想的话，你可以直接打开它。

1042
00:42:02,945 --> 00:42:04,555
它是 play.ndn.today。

1043
00:42:04,555 --> 00:42:07,240
NDN Play模拟了一个NDN网络在

1044
00:42:07,240 --> 00:42:08,740
的浏览器中，并且它

1045
00:42:08,740 --> 00:42:10,615
在它里面有一些可视化元素。

1046
00:42:10,615 --> 00:42:12,190
当然，它是开源的并且

1047
00:42:12,190 --> 00:42:14,195
当然，它是开源的并且有示例可供参考。

1048
00:42:14,195 --> 00:42:17,015
NDN-Play 的一些特点是它

1049
00:42:17,015 --> 00:42:18,310
显然具有可视化特性。

1050
00:42:18,310 --> 00:42:19,945
拓扑编辑器相当标准。

1051
00:42:19,945 --> 00:42:23,120
它还可以将拓扑导出到mini NDN，

1052
00:42:23,120 --> 00:42:24,580
在那里你可以运行真实的实验

1053
00:42:24,580 --> 00:42:26,420
使用真实的NDN代码。

1054
00:42:26,420 --> 00:42:28,295
它模拟

1055
00:42:28,295 --> 00:42:29,950
它模拟NDN网络，正如我之前提到的。

1056
00:42:29,950 --> 00:42:33,520
它还能在浏览器中运行NDNts代码，

1057
00:42:33,520 --> 00:42:34,700
我将会进行演示。

1058
00:42:34,700 --> 00:42:36,970
您实际上可以运行简单的NDN实验。

1059
00:42:36,970 --> 00:42:37,600
直接在浏览器中

1060
00:42:37,600 --> 00:42:38,955
无需设置任何东西。

1061
00:42:38,955 --> 00:42:40,300
此外，你还可以捕获

1062
00:42:40,300 --> 00:42:41,500
通过的交通流量

1063
00:42:41,500 --> 00:42:43,240
模拟和你可以可视化

1064
00:42:43,240 --> 00:42:44,200
这个交通和你

1065
00:42:44,200 --> 00:42:45,275
可以看到谁在往哪里去，

1066
00:42:45,275 --> 00:42:47,475
并且你还可以查看交通情况，

1067
00:42:47,475 --> 00:42:49,670
TLVs是什么。

1068
00:42:49,670 --> 00:42:51,845
再次，我将演示这个。

1069
00:42:51,845 --> 00:42:53,100
在我开始之前，我想快速说明一下

1070
00:42:53,100 --> 00:42:54,510
开始真正的演示，

1071
00:42:54,510 --> 00:42:57,005
正在进行的工作是在

1072
00:42:57,005 --> 00:42:58,960
正在进行的工作是在集成这个NDN Play，

1073
00:42:58,960 --> 00:43:00,450
与迷你NDN一起，我们可以看到数据包在它们周围流动。

1074
00:43:00,450 --> 00:43:03,510
可以看到数据包在它们周围流动。

1075
00:43:03,510 --> 00:43:06,435
实际上可以在后端环境中进行操作。

1076
00:43:06,435 --> 00:43:07,960
实际上可以在后端环境中进行操作的mini NDN，我们可以在运行时动态地更改拓扑。

1077
00:43:07,960 --> 00:43:09,670
也可以动态地更改拓扑，

1078
00:43:09,670 --> 00:43:11,695
Git状态仓库图表开启。

1079
00:43:11,695 --> 00:43:13,620
还有一个计划是要有

1080
00:43:13,620 --> 00:43:15,010
安全可视化

1081
00:43:15,010 --> 00:43:16,655
和一些模板实验，

1082
00:43:16,655 --> 00:43:17,560
以便新人可以

1083
00:43:17,560 --> 00:43:18,910
只需点击一个按钮然后

1084
00:43:18,910 --> 00:43:21,810
我们之前定义的一些实验。

1085
00:43:21,810 --> 00:43:24,470
现在，我将去演示。

1086
00:43:24,570 --> 00:43:27,560
这是NDN-Play用户界面。

1087
00:43:27,560 --> 00:43:28,715
但你首先看到的是

1088
00:43:28,715 --> 00:43:30,200
网络拓扑。

1089
00:43:30,200 --> 00:43:32,820
你可以在这里添加一些节点或者你

1090
00:43:32,820 --> 00:43:35,635
你可以将它们连接起来，这是很标准的操作。

1091
00:43:35,635 --> 00:43:37,995
所以，一旦你

1092
00:43:37,995 --> 00:43:40,190
创建一个新节点或者你有一个拓扑图，

1093
00:43:40,190 --> 00:43:42,070
然后NDN-Play将会启动

1094
00:43:42,070 --> 00:43:44,575
每一个都进行了同化前向处理。

1095
00:43:44,575 --> 00:43:46,570
它不像NFP那样是真正的前向处理，

1096
00:43:46,570 --> 00:43:49,600
但它是一些基本但有效的东西。

1097
00:43:49,600 --> 00:43:51,835
但它应该能完成基本的工作。

1098
00:43:51,835 --> 00:43:53,530
现在我要做的是

1099
00:43:53,530 --> 00:43:54,940
我要做的是

1100
00:43:54,940 --> 00:43:56,615
选择一个节点，比如这个。

1101
00:43:56,615 --> 00:43:58,795
有一些例子在 ~!@#$%^&*()

1102
00:43:58,795 --> 00:44:00,605
我即将要去的GitHub

1103
00:44:00,605 --> 00:44:02,735
只是为了节省时间而复制过来。

1104
00:44:02,735 --> 00:44:04,420
我只是简单地

1105
00:44:04,420 --> 00:44:05,945
生产者-消费者示例。

1106
00:44:05,945 --> 00:44:08,425
我进入编辑器，我输入。

1107
00:44:08,425 --> 00:44:11,470
编辑器还具有语法补全功能。

1108
00:44:11,470 --> 00:44:14,375
我刚刚写了一段简单的代码。

1109
00:44:14,375 --> 00:44:18,735
这个节点c将要生产数据在

1110
00:44:18,735 --> 00:44:21,300
NDN生产者测试的名称

1111
00:44:21,300 --> 00:44:22,620
和数据将会是

1112
00:44:22,620 --> 00:44:23,995
你好，来自NDN生产者。

1113
00:44:23,995 --> 00:44:25,090
这只是几行代码

1114
00:44:25,090 --> 00:44:26,625
它抵抗了一条数据。

1115
00:44:26,625 --> 00:44:29,630
然后我在这个节点上运行这段代码。

1116
00:44:29,630 --> 00:44:32,560
如果你刚刚注意到的话，那么它~!@#$%^&*()

1117
00:44:32,560 --> 00:44:33,755
注册了新的前言在

1118
00:44:33,755 --> 00:44:35,415
在那个节点上的本地转发器。

1119
00:44:35,415 --> 00:44:37,955
现在，我将取另一段代码，

1120
00:44:37,955 --> 00:44:39,610
去找消费者，

1121
00:44:39,610 --> 00:44:42,250
去找一个不同的节点并将其放置进去。

1122
00:44:42,250 --> 00:44:43,420
现在这段代码是

1123
00:44:43,420 --> 00:44:45,730
刚刚发送了我们对数据的兴趣

1124
00:44:45,730 --> 00:44:46,900
在另一个节点上生成

1125
00:44:46,900 --> 00:44:49,770
然后它将会说明什么是数据。

1126
00:44:49,770 --> 00:44:50,860
然后你可以回来

1127
00:44:50,860 --> 00:44:52,060
然后在这里运行代码，

1128
00:44:52,060 --> 00:44:53,450
然后它会获取数据

1129
00:44:53,450 --> 00:44:55,850
然后它就会运行代码。

1130
00:44:55,850 --> 00:44:58,210
这个简单的例子可能看起来不怎么样，

1131
00:44:58,210 --> 00:44:59,705
但如果你仔细观察，

1132
00:44:59,705 --> 00:45:03,610
我刚刚真正运行了实际的NDN代码在

1133
00:45:03,610 --> 00:45:05,375
一个浏览器而不需要实际安装

1134
00:45:05,375 --> 00:45:08,890
NFD或者类似的库。

1135
00:45:08,890 --> 00:45:11,900
这样会让生活变得更轻松。

1136
00:45:11,900 --> 00:45:14,130
现在还有一件事就是我

1137
00:45:14,130 --> 00:45:15,090
提到我们有

1138
00:45:15,090 --> 00:45:17,010
数据包捕获和可视化。

1139
00:45:17,010 --> 00:45:19,020
我可以选择任何中间节点

1140
00:45:19,020 --> 00:45:20,890
并且我前往数据包捕获处，

1141
00:45:20,890 --> 00:45:22,180
我看到了所有的数据包

1142
00:45:22,180 --> 00:45:23,440
已经通过这个节点的，

1143
00:45:23,440 --> 00:45:25,115
并且我可以点击它们来

1144
00:45:25,115 --> 00:45:28,630
检查数据包的实际TLV内容。

1145
00:45:28,630 --> 00:45:32,555
最后一件事是当我运行时

1146
00:45:32,555 --> 00:45:34,505
这个实验现在我可以直接将它导出

1147
00:45:34,505 --> 00:45:36,635
以便将文件分享给其他人，

1148
00:45:36,635 --> 00:45:38,405
以便他们可以直接加载文件

1149
00:45:38,405 --> 00:45:40,880
并亲自查看结果。

1150
00:45:40,880 --> 00:45:42,190
我还提到有

1151
00:45:42,190 --> 00:45:44,285
正在进行中的迷你NDN集成。

1152
00:45:44,285 --> 00:45:46,210
我将实际上载入一个实验，

1153
00:45:46,210 --> 00:45:47,910
我早些时候运行了一段时间

1154
00:45:47,910 --> 00:45:49,880
实际上运行的是迷你NDN

1155
00:45:49,880 --> 00:45:52,210
现在它已经被导入到NDN-Play中。

1156
00:45:52,210 --> 00:45:56,020
这个实验实际上运行了C++代码。

1157
00:45:56,020 --> 00:45:57,730
您可以看到

1158
00:45:57,730 --> 00:46:00,180
所有的数据包跟踪都在浏览器本身中。

1159
00:46:00,180 --> 00:46:01,120
我可以与他人共享这个文件

1160
00:46:01,120 --> 00:46:02,220
任何人都可以

1161
00:46:02,220 --> 00:46:04,555
审视我所经历的是什么样的体验。

1162
00:46:04,555 --> 00:46:07,840
我可以检查内部的TLV。

1163
00:46:07,840 --> 00:46:09,460
数据包的个体主义者和类似的东西

1164
00:46:09,460 --> 00:46:12,205
那个也能重放什么

1165
00:46:12,205 --> 00:46:14,080
交通实际上在丁腈中流动。

1166
00:46:14,080 --> 00:46:16,300
在实验期间。

1167
00:46:16,300 --> 00:46:18,155
它可以帮助你

1168
00:46:18,155 --> 00:46:19,630
识别热点或类似的东西

1169
00:46:19,630 --> 00:46:21,425
那或者也许是弄清楚

1170
00:46:21,425 --> 00:46:22,585
弄清楚交通往哪里去，

1171
00:46:22,585 --> 00:46:24,260
它没有去哪里。

1172
00:46:24,260 --> 00:46:28,060
我猜我的演示就到这里吧。

1173
00:46:28,490 --> 00:46:30,435
>> 谢谢你，Varun。

1174
00:46:30,435 --> 00:46:31,925
我们还有几分钟时间如果

1175
00:46:31,925 --> 00:46:35,530
有人对此有疑问吗？

1176
00:46:37,160 --> 00:46:39,250
既然我们有时间，

1177
00:46:39,250 --> 00:46:41,315
让我快速问你一个问题。

1178
00:46:41,315 --> 00:46:43,990
在这个情境下，

1179
00:46:44,220 --> 00:46:46,625
在这个情境下，我们是否有办法能够建立连接，your NDN-Play with something like NDN SIM for

1180
00:46:46,625 --> 00:46:49,955
在这个情境下，我们是否有办法能够建立连接，将你的NDN-Play与类似NDN SIM这样的东西结合起来，

1181
00:46:49,955 --> 00:46:51,605
让新程序员能够

1182
00:46:51,605 --> 00:46:53,280
构建拓扑结构在

1183
00:46:53,280 --> 00:46:54,790
NDN-Play 然后重新连接回去

1184
00:46:54,790 --> 00:46:59,830
模拟器，那是[听不清]。

1185
00:46:59,830 --> 00:47:02,220
NDN SIM是我还没有使用过的东西，

1186
00:47:02,220 --> 00:47:03,320
我还没有使用过的东西，

1187
00:47:03,320 --> 00:47:04,620
但是类似的是什么？

1188
00:47:04,620 --> 00:47:05,960
我正在使用mini NDN工作。

1189
00:47:05,960 --> 00:47:07,090
我们刚刚连接到了mini

1190
00:47:07,090 --> 00:47:08,375
NDN和我可以创造

1191
00:47:08,375 --> 00:47:10,960
一个在Phi上的拓扑结构，

1192
00:47:10,960 --> 00:47:12,605
然后在mini NDN中构建了拓扑结构，

1193
00:47:12,605 --> 00:47:14,405
然后你可以在那里运行真实的C++代码。

1194
00:47:14,405 --> 00:47:16,995
或者在mini NDN中运行任何语言的代码。

1195
00:47:16,995 --> 00:47:19,810
这对新手来说非常酷。

1196
00:47:19,810 --> 00:47:21,010
他们实际上可以仅仅构建~!@#$%^&*()

1197
00:47:21,010 --> 00:47:24,005
他们实际上可以仅仅使用视觉编程来构建拓扑。

1198
00:47:24,005 --> 00:47:27,385
确实如此。这就是意图。

1199
00:47:27,385 --> 00:47:29,110
未来也将会如此。

1200
00:47:29,110 --> 00:47:30,120
上一个我提到的

1201
00:47:30,120 --> 00:47:31,680
我想要

1202
00:47:31,680 --> 00:47:33,155
有一套模板实验，

1203
00:47:33,155 --> 00:47:35,210
因此你实际上可以运行

1204
00:47:35,210 --> 00:47:37,470
同步三个或四个音符

1205
00:47:37,470 --> 00:47:39,305
在浏览器本身中也同样有效。

1206
00:47:39,305 --> 00:47:41,230
因此有些实验就是这样进行的。

1207
00:47:41,230 --> 00:47:42,910
用户可以进入的地方

1208
00:47:42,910 --> 00:47:45,325
并运行它，观察在NDN中发生了什么。

1209
00:47:45,325 --> 00:47:47,320
现在，我们实际上可以使用这些

1210
00:47:47,320 --> 00:47:48,965
来完成作业

1211
00:47:48,965 --> 00:47:50,510
和计算机网络课程。

1212
00:47:50,510 --> 00:47:52,550
但我猜可能是浏览器的问题。

1213
00:47:52,550 --> 00:47:54,860
这很好。谢谢你。

1214
00:47:54,860 --> 00:47:58,120
还有其他人有问题吗？

1215
00:47:58,120 --> 00:48:01,820
让我们转向下一位发言人。

1216
00:48:01,820 --> 00:48:05,315
~!@#$%^&*()

1217
00:48:05,315 --> 00:48:07,385
他的演讲主题是多元宇宙；

1218
00:48:07,385 --> 00:48:10,560
设计一个网络管理系统NDN。

1219
00:48:10,560 --> 00:48:12,905
Amar 完成了他的博士学位。

1220
00:48:12,905 --> 00:48:14,620
他目前在NIST，我猜，研究物联网中的有限网络问题。

1221
00:48:14,620 --> 00:48:16,715
他目前在NIST，我猜，

1222
00:48:16,715 --> 00:48:19,200
他目前在NIST，我猜，在Multiverse研究平台工作，用于网络管理。

1223
00:48:19,200 --> 00:48:22,050
用于网络管理。请现在继续。

1224
00:48:22,050 --> 00:48:26,345
>> 谢谢。Multiverse是

1225
00:48:26,345 --> 00:48:28,210
我们在开发的一项研究平台

1226
00:48:28,210 --> 00:48:29,230
国家标准与技术研究院

1227
00:48:29,230 --> 00:48:31,865
今天，我将展示我们如何实验网络管理系统。

1228
00:48:31,865 --> 00:48:34,835
experiment with the network management system and intend to incorporate Named Data Networking (NDN) into our design.

1229
00:48:34,835 --> 00:48:38,740
使用并计划在我们的设计中采用NDN。

1230
00:48:38,880 --> 00:48:41,830
Multiverse 提供了集中化的

1231
00:48:41,830 --> 00:48:43,510
管理网络与

1232
00:48:43,510 --> 00:48:45,620
基于网络的控制器

1233
00:48:45,620 --> 00:48:48,580
和部署在网络元素上的代理。

1234
00:48:48,580 --> 00:48:50,795
我们目前与~!@#$%^&*()

1235
00:48:50,795 --> 00:48:52,730
三种类型的网络技术。

1236
00:48:52,730 --> 00:48:54,624
有NDN网络

1237
00:48:54,624 --> 00:48:56,650
配合NDN-DPDK转发器，

1238
00:48:56,650 --> 00:48:59,315
我们的团队也在开发中。

1239
00:48:59,315 --> 00:49:02,580
我们使用Sonic NOS来进行IP网络的实验。

1240
00:49:02,580 --> 00:49:06,490
部署在我们的实验室中，我们最近开始了

1241
00:49:06,490 --> 00:49:09,370
光路配置服务

1242
00:49:09,370 --> 00:49:14,380
用于量子网络管理。

1243
00:49:14,450 --> 00:49:16,965
这三项技术需要

1244
00:49:16,965 --> 00:49:19,415
遥测等公共服务，

1245
00:49:19,415 --> 00:49:22,235
我们构建的作为一个共享平台

1246
00:49:22,235 --> 00:49:24,920
对于三个管理层面。

1247
00:49:24,920 --> 00:49:28,680
但目前这些网络技术

1248
00:49:28,680 --> 00:49:30,865
具有不同的特点和复杂性。

1249
00:49:30,865 --> 00:49:37,030
并且具有

1250
00:49:37,030 --> 00:49:38,920
不同的配置期望。

1251
00:49:38,920 --> 00:49:39,930
但他们可能需要

1252
00:49:39,930 --> 00:49:42,260
不同的管理方法，

1253
00:49:44,660 --> 00:49:47,885
可能会威胁到一致性

1254
00:49:47,885 --> 00:49:49,940
多元宇宙平台。

1255
00:49:49,940 --> 00:49:51,425
为了节省时间，

1256
00:49:51,425 --> 00:49:52,480
我无法进入~!@#$%^&*()

1257
00:49:52,480 --> 00:49:54,340
但这是差异细节的快速总结，

1258
00:49:54,340 --> 00:49:56,305
但这是差异细节的快速总结，

1259
00:49:56,305 --> 00:49:59,300
要求和特性。

1260
00:49:59,650 --> 00:50:03,140
多元宇宙包括两个研究领域。

1261
00:50:03,140 --> 00:50:05,870
一个是网络智能，

1262
00:50:05,870 --> 00:50:07,550
由构建组成

1263
00:50:07,550 --> 00:50:09,080
一个数字孪生服务，具有

1264
00:50:09,080 --> 00:50:10,460
一个单一网络模型

1265
00:50:10,460 --> 00:50:12,500
对于这三个网络。

1266
00:50:12,500 --> 00:50:14,990
我们用它来检测错误。

1267
00:50:14,990 --> 00:50:17,540
和配置验证。

1268
00:50:17,540 --> 00:50:20,510
我们感兴趣的是第二个。

1269
00:50:20,510 --> 00:50:23,910
今天我们要讨论的是网络管理API。

1270
00:50:25,030 --> 00:50:28,310
我们试图找到一个平衡点

1271
00:50:28,310 --> 00:50:31,550
快速原型制作结合IP使用和

1272
00:50:31,550 --> 00:50:33,860
我们使用的部署方式结合了IP使用，

1273
00:50:33,860 --> 00:50:36,980
以及创新的管理模式

1274
00:50:36,980 --> 00:50:39,290
我们想尝试使用NDN。

1275
00:50:39,290 --> 00:50:41,435
我们也想要复用

1276
00:50:41,435 --> 00:50:43,955
我们尽可能地学习了。

1277
00:50:43,955 --> 00:50:47,990
为此，我们设计了发布/订阅抽象层，

1278
00:50:47,990 --> 00:50:50,810
它独立于IP和NDN。

1279
00:50:50,810 --> 00:50:56,340
来设计我们的网络管理API。

1280
00:50:56,800 --> 00:51:00,140
我展示了我们如何构想

1281
00:51:00,140 --> 00:51:01,695
这种抽象

1282
00:51:01,695 --> 00:51:06,115
我们考虑使用NDN进行量子网络管理。

1283
00:51:06,115 --> 00:51:08,830
我们考虑使用NDN

1284
00:51:08,830 --> 00:51:10,780
进行量子实验

1285
00:51:10,780 --> 00:51:12,225
网络管理，

1286
00:51:12,225 --> 00:51:14,150
因为它足够简单，而且

1287
00:51:14,150 --> 00:51:15,920
我们可以开始集成

1288
00:51:15,920 --> 00:51:17,600
我们可以从头开始NDN。

1289
00:51:17,600 --> 00:51:19,775
的污染设计。

1290
00:51:19,775 --> 00:51:20,795
基本上，

1291
00:51:20,795 --> 00:51:22,550
一个量子实验发生在

1292
00:51:22,550 --> 00:51:26,120
两个实验方面和一个

1293
00:51:26,120 --> 00:51:28,640
应用程序用户通常由~!@#$%^&*()

1294
00:51:28,640 --> 00:51:30,560
一位科学家请求

1295
00:51:30,560 --> 00:51:33,425
一条从控制器设置的路径，

1296
00:51:33,425 --> 00:51:36,350
计算路径并发送命令

1297
00:51:36,350 --> 00:51:39,350
以配置交叉连接的开关。

1298
00:51:39,350 --> 00:51:42,380
然后路径可以维护，

1299
00:51:42,380 --> 00:51:46,025
用户可以根据需要对其进行更新。

1300
00:51:46,025 --> 00:51:48,650
为此，我们设计了~!@#$%^&*()

1301
00:51:48,650 --> 00:51:52,955
为此，我们设计了一个简单的管理API，使用发布/订阅模式。

1302
00:51:52,955 --> 00:51:55,595
为了提供路径调度服务，

1303
00:51:55,595 --> 00:51:57,980
我们有三个实体共享

1304
00:51:57,980 --> 00:52:01,115
我们通过发布-订阅机制共享了一些话题。

1305
00:52:01,115 --> 00:52:02,540
应用程序

1306
00:52:02,540 --> 00:52:05,015
发布路径请求，

1307
00:52:05,015 --> 00:52:07,430
控制器接收

1308
00:52:07,430 --> 00:52:10,520
请求并计算路径和

1309
00:52:10,520 --> 00:52:14,330
开始配置这些，哪些

1310
00:52:14,330 --> 00:52:18,005
通过发送命令和接收报告来实现。

1311
00:52:18,005 --> 00:52:25,125
这个服务的API非常简单。

1312
00:52:25,125 --> 00:52:28,180
但是我们可以定义

1313
00:52:28,180 --> 00:52:30,790
一个高级别的描述，这个API它

1314
00:52:30,790 --> 00:52:32,230
包含了通信两方面的内容

1315
00:52:32,230 --> 00:52:33,970
涉及主题的方面，

1316
00:52:33,970 --> 00:52:37,110
消息格式，以及发布/订阅操作，

1317
00:52:37,110 --> 00:52:38,900
及安全方面

1318
00:52:38,900 --> 00:52:42,740
与信任和访问控制相关。

1319
00:52:42,740 --> 00:52:43,910
需要

1320
00:52:43,910 --> 00:52:46,505
现有的规范倡议

1321
00:52:46,505 --> 00:52:48,725
发布/订阅 API 称为 AsyncAPI

1322
00:52:48,725 --> 00:52:51,110
受到 OpenAPI 的启发。

1323
00:52:51,110 --> 00:52:56,270
作为一个例子，我展示了一小部分

1324
00:52:56,270 --> 00:52:59,030
我们的路径调度API是按照AsyncAPI方法设计的。

1325
00:52:59,030 --> 00:53:03,935
使用AsyncAPI方法设计。

1326
00:53:03,935 --> 00:53:06,530
我们看到这些语义看起来非常熟悉。

1327
00:53:06,530 --> 00:53:08,750
对于了解NDN和不了解NDN的人来说，这是一个很好的开始方式。

1328
00:53:08,750 --> 00:53:14,120
对于了解IP的人来说，这是开始学习NDN的好方法。

1329
00:53:14,120 --> 00:53:16,670
或者开发者用来工作的

1330
00:53:16,670 --> 00:53:19,955
与其他开发技术一起使用。

1331
00:53:19,955 --> 00:53:23,300
但接下来我们可以使用一些工具

1332
00:53:23,300 --> 00:53:24,440
生成代码和

1333
00:53:24,440 --> 00:53:26,929
针对目标环境的文档。

1334
00:53:26,929 --> 00:53:29,195
我们可能想要尝试使用NDN的情况下。

1335
00:53:29,195 --> 00:53:32,000
在我们可能想要尝试使用NDN的情况下，或者

1336
00:53:32,000 --> 00:53:33,965
消息平台用于IP，

1337
00:53:33,965 --> 00:53:35,585
如果我们想要部署~!@#$%^&*()

1338
00:53:35,585 --> 00:53:37,985
IP环境中具有发布/订阅功能。

1339
00:53:37,985 --> 00:53:39,485
但关键在于

1340
00:53:39,485 --> 00:53:41,030
数据中心安全和

1341
00:53:41,030 --> 00:53:44,150
NDN可以作为一个重要的促进者发挥作用

1342
00:53:44,150 --> 00:53:47,465
这种抽象或者

1343
00:53:47,465 --> 00:53:51,270
这些不同技术的统一。

1344
00:53:53,590 --> 00:53:55,880
这引导我们去

1345
00:53:55,880 --> 00:54:00,995
一些开放性的问题和一些思考。

1346
00:54:00,995 --> 00:54:03,800
一个可以是内容加密

1347
00:54:03,800 --> 00:54:06,335
和在发布/订阅协议中的描述，

1348
00:54:06,335 --> 00:54:08,870
应当被添加

1349
00:54:08,870 --> 00:54:11,945
并且对应用程序来说应该是透明的。

1350
00:54:11,945 --> 00:54:13,880
这已经得到了证明。

1351
00:54:13,880 --> 00:54:16,670
与数据为中心的同步过程中。

1352
00:54:16,670 --> 00:54:18,950
访问控制可能对...有用

1353
00:54:18,950 --> 00:54:21,525
可能同样有用。

1354
00:54:21,525 --> 00:54:23,770
同样地，高层次的

1355
00:54:23,770 --> 00:54:25,450
发布/订阅 API 的描述

1356
00:54:25,450 --> 00:54:27,610
与通信的双方面

1357
00:54:27,610 --> 00:54:30,460
和安全在同一个定义中。

1358
00:54:30,460 --> 00:54:33,280
在这里，我们也有一些工作可以利用，

1359
00:54:33,280 --> 00:54:35,995
可以为我们利用，

1360
00:54:35,995 --> 00:54:38,350
信任模式和安全描述，

1361
00:54:38,350 --> 00:54:40,020
这是一个VerSec。

1362
00:54:40,020 --> 00:54:44,360
但是AsyncAPI不是必需的，它是

1363
00:54:44,360 --> 00:54:46,070
represent the pub/sub interactions.

1364
00:54:46,070 --> 00:54:49,715
代表发布/订阅交互。

1365
00:54:49,715 --> 00:54:52,130
也可以向新用户介绍

1366
00:54:52,130 --> 00:54:54,440
NDN从熟悉的概念开始讲起，

1367
00:54:54,440 --> 00:54:57,410
作为首个API应用程序开发

1368
00:54:57,410 --> 00:55:00,375
和发布/订阅模型。

1369
00:55:00,375 --> 00:55:04,270
还可以设想出用于迁移的工具，以

1370
00:55:04,270 --> 00:55:05,710
可以迁移到IP协议的NDN应用程序，或者相反。

1371
00:55:05,710 --> 00:55:09,300
NDN应用程序或相反。

1372
00:55:09,300 --> 00:55:12,995
最后一点，与此无关

1373
00:55:12,995 --> 00:55:16,220
发展是……的延伸

1374
00:55:16,220 --> 00:55:19,085
我之前提到的数字孪生服务

1375
00:55:19,085 --> 00:55:23,360
在多元宇宙的其他研究领域。

1376
00:55:23,360 --> 00:55:26,930
我们计划将其扩展到NDN以实现

1377
00:55:26,930 --> 00:55:32,045
配置管理和错误检测。

1378
00:55:32,045 --> 00:55:35,330
这将会更加重要。

1379
00:55:35,330 --> 00:55:37,370
当更多功能将会

1380
00:55:37,370 --> 00:55:38,930
将被添加到NDN-DPDK中，

1381
00:55:38,930 --> 00:55:43,140
将会有分布式路由。

1382
00:55:43,840 --> 00:55:47,490
这就是我的全部了。谢谢。

1383
00:56:12,610 --> 00:56:17,550
>> 看起来Jay好像掉线了。

1384
00:56:17,800 --> 00:56:20,420
但我想我们可以继续进行下去

1385
00:56:20,420 --> 00:56:23,165
继续进行下一场演示

1386
00:56:23,165 --> 00:56:31,230
Xinyu Ma 主持的NDN前向器管理器演示。

1387
00:56:32,320 --> 00:56:37,220
Xinyu 与 [无法听清] 合作

1388
00:56:37,220 --> 00:56:42,090
加州大学洛杉矶分校的博士研究生。请继续。

1389
00:56:43,780 --> 00:56:47,300
这只是广告。

1390
00:56:47,300 --> 00:56:49,970
为经理的NDN，

1391
00:56:49,970 --> 00:56:53,435
哪个是实现了 GUI 工具的

1392
00:56:53,435 --> 00:56:57,050
AFT 管理协议

1393
00:56:57,050 --> 00:56:58,640
所以你不需要

1394
00:56:58,640 --> 00:57:01,650
记住那些命令行。

1395
00:57:02,530 --> 00:57:05,720
首先，我们就开始吧。

1396
00:57:05,720 --> 00:57:15,905
然后启动文件夹管理器。

1397
00:57:15,905 --> 00:57:18,470
这里将会是我们的图标

1398
00:57:18,470 --> 00:57:20,900
文件夹管理器，我们点击“保存”。

1399
00:57:20,900 --> 00:57:23,435
它将打开一个浏览器界面。

1400
00:57:23,435 --> 00:57:27,680
我们可以看到转发器状态和所有

1401
00:57:27,680 --> 00:57:32,840
现有的阶段和我们的路由策略。

1402
00:57:32,840 --> 00:57:39,480
这是面部事件通知界面，

1403
00:57:40,060 --> 00:57:44,045
这里有一个自动配置按钮。

1404
00:57:44,045 --> 00:57:45,620
这个自动配置按钮实际上将其连接到

1405
00:57:45,620 --> 00:57:47,390
实际上将其连接到

1406
00:57:47,390 --> 00:57:50,930
将其连接到测试平台和AFT/NDN路由。

1407
00:57:50,930 --> 00:57:54,005
如果我们只是点击这个按钮，

1408
00:57:54,005 --> 00:57:55,820
我们可以看到他们

1409
00:57:55,820 --> 00:57:58,205
自动面向

1410
00:57:58,205 --> 00:58:02,540
最接近测试平台的注释。

1411
00:58:02,540 --> 00:58:05,285
你也可以在这里手动添加表情。

1412
00:58:05,285 --> 00:58:06,740
只需输入IP地址

1413
00:58:06,740 --> 00:58:08,135
只需输入IP地址并点击“创建”，

1414
00:58:08,135 --> 00:58:10,970
它将创建一个新的界面，

1415
00:58:10,970 --> 00:58:14,315
它将创建一个新的界面，并且其他配置也会有路由/NDN指向新的界面ID。

1416
00:58:14,315 --> 00:58:18,800
将有路由/NDN指向新的界面ID。

1417
00:58:18,800 --> 00:58:21,500
接着，这就是我们创建的界面。

1418
00:58:21,500 --> 00:58:23,390
接着，我们可以手动

1419
00:58:23,390 --> 00:58:27,270
如果我们需要的话，就在这里创建路由。

1420
00:58:30,550 --> 00:58:34,505
这里我们已经实现了NDN Ping工具。

1421
00:58:34,505 --> 00:58:36,065
这实际上是ping，

1422
00:58:36,065 --> 00:58:38,930
这意味着我们可以快速提供服务。

1423
00:58:38,930 --> 00:58:42,125
定制兴趣并下载结果。

1424
00:58:42,125 --> 00:58:45,555
例如，如果我们只做/NDN，

1425
00:58:45,555 --> 00:58:49,100
如果您这样做，可以是CanBePrefix而不必是MustBeFresh。

1426
00:58:49,100 --> 00:58:53,525
随机获取一些NDN测试床上的数据。

1427
00:58:53,525 --> 00:58:56,585
在这里我们可以获得响应时间。

1428
00:58:56,585 --> 00:59:02,930
以及新鲜度、外观和内容类型。

1429
00:59:02,930 --> 00:59:05,030
我们能够下载这个ping。

1430
00:59:05,030 --> 00:59:07,160
在我们下载之后，这将会是

1431
00:59:07,160 --> 00:59:11,310
这些数据包的内容。

1432
00:59:12,280 --> 00:59:16,220
我们处理完这个面之后，

1433
00:59:16,220 --> 00:59:18,770
我们也可以通过点击来删除这个面。

1434
00:59:18,770 --> 00:59:21,710
点击这里的按钮来删除这个面。

1435
00:59:21,710 --> 00:59:23,960
和相应的结果将会

1436
00:59:23,960 --> 00:59:25,835
将会被自动移除。

1437
00:59:25,835 --> 00:59:28,745
这里我们也有我们的关键管理团队。

1438
00:59:28,745 --> 00:59:30,350
这是一棵树。

1439
00:59:30,350 --> 00:59:35,035
这是所有的身份。

1440
00:59:35,035 --> 00:59:37,180
星号代表默认身份。

1441
00:59:37,180 --> 00:59:39,340
如果我点击身份，

1442
00:59:39,340 --> 00:59:41,440
我们可以获取一个密钥列表和

1443
00:59:41,440 --> 00:59:42,490
通过点击密钥我们

1444
00:59:42,490 --> 00:59:44,445
我们可以获得一个证书。

1445
00:59:44,445 --> 00:59:49,400
我们可以给NDMCC身份添加一个密钥。

1446
00:59:49,400 --> 00:59:53,930
我们还可以创建一个新的身份，一个test-2。

1447
00:59:53,930 --> 00:59:56,180
它将会自动创建

1448
00:59:56,180 --> 00:59:59,720
身份ndncc密钥链。

1449
00:59:59,720 --> 01:00:02,180
这是我们的默认密钥。

1450
01:00:02,180 --> 01:00:07,170
我们也可以在这里删除密钥。

1451
01:00:07,210 --> 01:00:10,820
我们也可以删除现有的

1452
01:00:10,820 --> 01:00:14,700
我们也可以删除现有的密钥或证书，通过点击这里。如果你关闭了NFD，

1453
01:00:14,740 --> 01:00:18,060
如果你关闭了NFD，

1454
01:00:18,670 --> 01:00:25,430
那么控制中心就会显示

1455
01:00:25,430 --> 01:00:26,720
NFD未在运行

1456
01:00:26,720 --> 01:00:29,010
如果你再次启动它，

1457
01:00:30,070 --> 01:00:34,175
它显示它再次运行起来，

1458
01:00:34,175 --> 01:00:37,050
每个功能都将正常工作。

1459
01:00:38,140 --> 01:00:45,120
就是这样。代码已经发布到Github上了。

1460
01:00:45,280 --> 01:00:49,130
>> 非常感谢。不确定

1461
01:00:49,130 --> 01:00:52,950
是否有什么消息在Slack上。

1462
01:00:54,400 --> 01:00:57,560
有一些建议，

1463
01:00:57,560 --> 01:01:01,985
我猜是来自David的，

1464
01:01:01,985 --> 01:01:04,040
新宇看一下

1465
01:01:04,040 --> 01:01:06,780
并在那里继续讨论。

1466
01:01:06,850 --> 01:01:11,370
杰伊，我能看见你，但我们听不到你。

1467
01:01:12,370 --> 01:01:15,440
这是本次会议的结束。

1468
01:01:15,440 --> 01:01:18,185
非常感谢您

1469
01:01:18,185 --> 01:01:20,210
Jay和所有的~!@#$%^&*()

1470
01:01:20,210 --> 01:01:23,090
感谢所有发言者的有趣想法。

1471
01:01:23,090 --> 01:01:24,830
也感谢所有

1472
01:01:24,830 --> 01:01:26,150
参与者们留下来了

1473
01:01:26,150 --> 01:01:27,380
参与者们留下来了，尤其是我们这些晚来的欧洲和亚洲的朋友，

1474
01:01:27,380 --> 01:01:28,940
欧洲和亚洲的朋友们，

1475
01:01:28,940 --> 01:01:30,380
我仍然可以看到

1476
01:01:30,380 --> 01:01:35,360
蓝牛（BlueJeans）参会名单上的几个名字。

1477
01:01:35,360 --> 01:01:37,445
那么，我猜

1478
01:01:37,445 --> 01:01:39,830
我明天10:00见你们。

1479
01:01:39,830 --> 01:01:42,215
~!@#$%^&*()

1480
01:01:42,215 --> 01:01:44,510
祝大家有一个愉快的一天。

1481
01:01:44,510 --> 01:01:47,040
再见。

