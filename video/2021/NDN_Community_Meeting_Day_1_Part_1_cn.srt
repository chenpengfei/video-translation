1
00:00:00,650 --> 00:00:04,830
大家好，欢迎来到

2
00:00:04,830 --> 00:00:07,020
2021年版的

3
00:00:07,020 --> 00:00:08,940
命名数据网络

4
00:00:08,940 --> 00:00:11,220
社区会议我们希望将是一个很好的机会~!@#$%^&*()

5
00:00:11,220 --> 00:00:13,140
希望将是一个很好的机会

6
00:00:13,140 --> 00:00:16,350
向社区提交报告

7
00:00:16,350 --> 00:00:19,530
过去一年的工作并识别

8
00:00:19,530 --> 00:00:21,060
需要进行的新工作

9
00:00:21,060 --> 00:00:24,550
NDA开发和部署工具。

10
00:00:25,160 --> 00:00:29,190
我们有一个为期两天的完整议程安排。

11
00:00:29,190 --> 00:00:31,650
与三个小组讨论会

12
00:00:31,650 --> 00:00:34,255
和六个报告会议。

13
00:00:34,255 --> 00:00:36,650
我们已经编纂了摘要

14
00:00:36,650 --> 00:00:38,810
的所有演讲和讨论小组会议上

15
00:00:38,810 --> 00:00:40,820
他们可以在下面找到

16
00:00:40,820 --> 00:00:43,490
活动页面上的议程标签，

17
00:00:43,490 --> 00:00:47,160
如你从屏幕截图中所见。

18
00:00:48,740 --> 00:00:52,700
今年的主题正如你所能看出来的

19
00:00:52,700 --> 00:00:54,800
会议小组的名称是

20
00:00:54,800 --> 00:00:58,610
使NDN更易于访问和使用。

21
00:00:58,610 --> 00:01:02,390
提高易用性，以便为

22
00:01:02,390 --> 00:01:04,940
提高易用性，以便为NDN应用开发者 having a good set of libraries and APIs,

23
00:01:04,940 --> 00:01:08,485
拥有一套优良的库和API，

24
00:01:08,485 --> 00:01:10,500
和在可访问性方面

25
00:01:10,500 --> 00:01:12,410
使NDN代码库更加

26
00:01:12,410 --> 00:01:14,540
对每个想要的人都更容易访问

27
00:01:14,540 --> 00:01:17,700
进行NDN实验。

28
00:01:18,830 --> 00:01:21,490
在演讲环节中，

29
00:01:21,490 --> 00:01:25,210
我们总共有26个，混合了

30
00:01:25,210 --> 00:01:28,420
常规的20分钟报告会

31
00:01:28,420 --> 00:01:31,445
和简短的10分钟汇报。

32
00:01:31,445 --> 00:01:33,850
我们有一个广泛的光谱

33
00:01:33,850 --> 00:01:35,440
涵盖了

34
00:01:35,440 --> 00:01:38,110
学术和政府研究

35
00:01:38,110 --> 00:01:39,730
以及行业内的

36
00:01:39,730 --> 00:01:41,440
戴尔的演示,

37
00:01:41,440 --> 00:01:43,810
英特尔，智能融合，

38
00:01:43,810 --> 00:01:46,070
宝丽来和西门子。

39
00:01:46,890 --> 00:01:50,575
作为一个社区会议，理想情况下，

40
00:01:50,575 --> 00:01:53,320
除了分享进展情况外，

41
00:01:53,320 --> 00:01:55,675
和识别出悬而未决的问题，

42
00:01:55,675 --> 00:01:57,820
我们也想要识别出

43
00:01:57,820 --> 00:02:00,030
社区需要关注的重点。

44
00:02:00,030 --> 00:02:02,840
特别是沿着这个主题的方向

45
00:02:02,840 --> 00:02:03,860
的可用性和

46
00:02:03,860 --> 00:02:06,130
我刚才提到的可用性。

47
00:02:06,130 --> 00:02:09,150
今年，我们的联合主席有，

48
00:02:09,150 --> 00:02:10,900
今年，我们的联合主席有，Marie-Jose Montpetit 来自康考迪亚大学，

49
00:02:10,900 --> 00:02:12,995
来自康考迪亚大学，

50
00:02:12,995 --> 00:02:14,870
和Susmit Shannigrahi

51
00:02:14,870 --> 00:02:17,665
来自田纳西科技大学。

52
00:02:17,665 --> 00:02:20,750
玛丽-乔泽，我不知道你是否在线，

53
00:02:20,750 --> 00:02:22,855
如果你想说点什么。

54
00:02:22,855 --> 00:02:25,190
是的，我在。我甚至可以

55
00:02:25,190 --> 00:02:27,215
为几秒钟转动我的摄像头。

56
00:02:27,215 --> 00:02:28,185
>> 好的。

57
00:02:28,185 --> 00:02:30,295
>> 你好。嗯，

58
00:02:30,295 --> 00:02:31,730
非常感谢你让我这样做。

59
00:02:31,730 --> 00:02:33,110
允许我这样做。

60
00:02:33,110 --> 00:02:36,305
能够做这件事对我来说是一种快乐和荣幸。

61
00:02:36,305 --> 00:02:39,230
像你说的那样，还有

62
00:02:39,230 --> 00:02:41,870
苏斯米特可能还会补充这一点，

63
00:02:41,870 --> 00:02:43,460
我们想要确保我们

64
00:02:43,460 --> 00:02:46,345
我们想要确保我们正在举行一个真正的社区会议。

65
00:02:46,345 --> 00:02:47,975
我们想要

66
00:02:47,975 --> 00:02:50,690
我们想要每个人在你展示的时候都知道，

67
00:02:50,690 --> 00:02:53,240
我认为这不仅仅是一个展示，

68
00:02:53,240 --> 00:02:54,980
这是对话的开始。

69
00:02:54,980 --> 00:02:57,365
我认为我们已经做出了努力在

70
00:02:57,365 --> 00:03:00,080
确保我们能够进行对话

71
00:03:00,080 --> 00:03:02,015
确保我们能够进行对话

72
00:03:02,015 --> 00:03:04,280
确保我们能够进行对话, between the panelists and between the community members.

73
00:03:04,280 --> 00:03:07,375
小组成员和社区成员。

74
00:03:07,375 --> 00:03:10,900
Lofti你提到了主题

75
00:03:10,900 --> 00:03:14,240
是为了扩大NDN的可达性，但是

76
00:03:14,240 --> 00:03:15,560
也是为了吸引新人参与进来

77
00:03:15,560 --> 00:03:17,570
参与其中，我认为你会看到

78
00:03:17,570 --> 00:03:19,190
参与其中的人有些是新来的。

79
00:03:19,190 --> 00:03:23,035
会议中有些人是新来的。

80
00:03:23,035 --> 00:03:25,310
有几个人这么说过，嗯，

81
00:03:25,310 --> 00:03:28,025
我们对NDN一无所知，

82
00:03:28,025 --> 00:03:30,080
我们对数据了解很多，

83
00:03:30,080 --> 00:03:33,970
数据驱动的应用程序和伊芙·舒勒

84
00:03:33,970 --> 00:03:38,360
几个月前从精神上告诉了我

85
00:03:38,360 --> 00:03:40,610
那些数据现在是

86
00:03:40,610 --> 00:03:41,945
21世纪如此

87
00:03:41,945 --> 00:03:43,715
一切都是数据驱动的。

88
00:03:43,715 --> 00:03:45,740
我们在NDN中拥有一个庞大的社区。

89
00:03:45,740 --> 00:03:47,000
这可能已经意识到了

90
00:03:47,000 --> 00:03:48,220
这可能已经意识到了很长一段时间，

91
00:03:48,220 --> 00:03:50,195
所以也许是为了连接

92
00:03:50,195 --> 00:03:54,990
所以也许是为了连接所有以数据为中心的人们，

93
00:03:54,990 --> 00:03:57,550
在NDN内部和外部，

94
00:03:57,550 --> 00:03:58,820
我们将会让社区

95
00:03:58,820 --> 00:04:01,205
变得更大，我认为我们双方都会获益。

96
00:04:01,205 --> 00:04:03,630
Susmit，你还有什么要补充的吗？

97
00:04:07,030 --> 00:04:09,760
>> 是的，非常简短。

98
00:04:09,760 --> 00:04:12,015
>> 欢迎大家。

99
00:04:12,015 --> 00:04:21,240
我认为我要去了

100
00:04:21,240 --> 00:04:24,165
重复一下洛夫蒂和玛丽-乔丝所说的。

101
00:04:24,165 --> 00:04:26,405
我们希望这是一个社区会议。

102
00:04:26,405 --> 00:04:29,720
会议，所以它更像是

103
00:04:29,720 --> 00:04:33,455
陈述或较少的陈述

104
00:04:33,455 --> 00:04:34,880
我们正在做的事情以及更多相关内容

105
00:04:34,880 --> 00:04:37,640
与社区沟通，

106
00:04:37,640 --> 00:04:42,000
他们需要什么以及你接下来要去哪里？

107
00:04:43,310 --> 00:04:47,890
>> 谢谢，Marie-Jose和Susmit。

108
00:04:47,960 --> 00:04:52,785
最后，用于问答和讨论，

109
00:04:52,785 --> 00:04:55,450
让我们主要使用频道吧，

110
00:04:55,450 --> 00:04:57,725
我们为每个演示都准备了一个。

111
00:04:57,725 --> 00:05:00,635
我们为每个演示都准备了一个小组，正如你在这个列表上看到的。

112
00:05:00,635 --> 00:05:03,650
您也可以取消静音并且讲话。

113
00:05:03,650 --> 00:05:08,550
最好是使用举手功能。

114
00:05:10,030 --> 00:05:12,500
With that, I think we are on 到此为止，我认为我们已经准备好了。

115
00:05:12,500 --> 00:05:14,719
是时候开始第一环节了。

116
00:05:14,719 --> 00:05:18,170
It's time to start the first segment.

117
00:05:18,170 --> 00:05:19,280
现在开始并将会是

118
00:05:19,280 --> 00:05:21,904
由帕特里克·克劳利主持。

119
00:05:21,904 --> 00:05:23,690
帕特里克是一位教授，专攻于

120
00:05:23,690 --> 00:05:25,760
帕特里克是一位教授，专攻于计算机科学与工程，在圣路易斯的华盛顿大学。

121
00:05:25,760 --> 00:05:27,680
圣路易斯的华盛顿大学

122
00:05:27,680 --> 00:05:29,810
路易斯和主任

123
00:05:29,810 --> 00:05:31,250
应用研究实验室，

124
00:05:31,250 --> 00:05:33,260
它运营着多个测试平台，

125
00:05:33,260 --> 00:05:37,855
它运营着多个测试平台，包括ONL和全球NDN测试床。

126
00:05:37,855 --> 00:05:40,880
他是那些黏糊糊眼睛中的一个

127
00:05:40,880 --> 00:05:44,480
美国国家科学基金会资助的NDN项目。

128
00:05:44,480 --> 00:05:46,370
~,!@#$%^&*()

129
00:05:46,370 --> 00:05:48,750
你想先走吗？

130
00:05:50,420 --> 00:05:53,650
>> 谢谢你，洛夫蒂。

131
00:05:53,990 --> 00:05:56,900
能和你们在一起真是太好了，我期待着

132
00:05:56,900 --> 00:05:59,915
能和你们在一起真是太好了，我期待着

133
00:05:59,915 --> 00:06:02,840
看到你们每个人依次打开

134
00:06:02,840 --> 00:06:04,610
你们的摄像头来分享

135
00:06:04,610 --> 00:06:06,560
与其他NDN社区成员共享。

136
00:06:06,560 --> 00:06:08,555
正如Lofti所说，

137
00:06:08,555 --> 00:06:11,660
我的名字是Patrick Crowley，来自华盛顿。

138
00:06:11,660 --> 00:06:13,420
我想欢迎你来到

139
00:06:13,420 --> 00:06:15,820
本届的第一场

140
00:06:15,820 --> 00:06:19,150
今年的NDN社区会议。

141
00:06:19,150 --> 00:06:25,095
今年的第一个会议主题是

142
00:06:25,095 --> 00:06:29,110
NDN从过去到现在以及它的发展之路

143
00:06:29,110 --> 00:06:31,420
我们将继续的方式是我们

144
00:06:31,420 --> 00:06:33,460
会议中将有三位发言人，

145
00:06:33,460 --> 00:06:35,405
由于您所提供的内容不完整，我无法进行准确的翻译。如果您能提供完整的句子或段落，我将很乐意为您翻译。

146
00:06:35,405 --> 00:06:38,260
在他们发表评论之前，先对每个人进行介绍。

147
00:06:38,260 --> 00:06:41,590
他们将会发言15到16分钟，然后

148
00:06:41,590 --> 00:06:43,420
我们将会跑步四分钟。

149
00:06:43,420 --> 00:06:45,010
为了之后提问。

150
00:06:45,010 --> 00:06:48,535
所以在良好的社区交流中，

151
00:06:48,535 --> 00:06:49,900
一如既往地，

152
00:06:49,900 --> 00:06:51,100
我们将尽我们最大的努力去

153
00:06:51,100 --> 00:06:52,360
我们将尽我们最大的努力去回答每个人的问题，但时间当然是——

154
00:06:52,360 --> 00:06:55,070
一个我们都必须调和的限制。

155
00:06:55,070 --> 00:06:58,295
一个我们都必须调和的限制。

156
00:06:58,295 --> 00:07:00,650
我会密切关注

157
00:07:00,650 --> 00:07:03,380
~!@#$%^&*()

158
00:07:03,380 --> 00:07:04,670
还有你们这些

159
00:07:04,670 --> 00:07:06,625
没有办法使用Slack的你们。

160
00:07:06,625 --> 00:07:09,155
洛夫蒂说过，不客气。

161
00:07:09,155 --> 00:07:12,140
使用举手功能在内

162
00:07:12,140 --> 00:07:13,880
这个视频会议软件和你~!@#$%^&*()

163
00:07:13,880 --> 00:07:15,665
你可以用那种方式提出你自己的问题。

164
00:07:15,665 --> 00:07:18,005
否则，我将阅读那些问题。

165
00:07:18,005 --> 00:07:21,780
出现在Slack频道中。

166
00:07:21,890 --> 00:07:24,330
毫不犹豫地，

167
00:07:24,330 --> 00:07:27,135
毫不犹豫地，我很荣幸地向大家

168
00:07:27,135 --> 00:07:31,100
毫不犹豫地，我很荣幸地向大家介绍我们的第一位演讲嘉宾，Professor Lixia Zhang。

169
00:07:31,100 --> 00:07:34,160
加州大学洛杉矶分校的计算机科学系的Lixia Zhang教授

170
00:07:34,160 --> 00:07:37,045
加州大学洛杉矶分校的计算机科学系。

171
00:07:37,045 --> 00:07:40,620
Lixia 是该项目的主要负责人。

172
00:07:40,620 --> 00:07:42,980
NDN项目和

173
00:07:42,980 --> 00:07:44,900
一位了不起的领导者和

174
00:07:44,900 --> 00:07:47,195
一个对我们社区有远见的领袖。

175
00:07:47,195 --> 00:07:49,070
她将与我们分享

176
00:07:49,070 --> 00:07:52,990
今天回顾过去几年学到的教训。

177
00:07:52,990 --> 00:07:55,300
丽霞，请开始吧。

178
00:07:55,300 --> 00:07:58,215
>> 谢谢你，帕特里克。

179
00:07:58,215 --> 00:08:00,365
让我分享我的屏幕。

180
00:08:00,365 --> 00:08:02,850
我希望现在人们能看到了。

181
00:08:04,530 --> 00:08:05,950
~!@#$%^&*()

182
00:08:05,950 --> 00:08:08,720
我得到了做总结的任务。

183
00:08:08,720 --> 00:08:10,570
这真的是一个非常概括的总结

184
00:08:10,570 --> 00:08:13,175
去年的专家小组NDN

185
00:08:13,175 --> 00:08:17,660
达到了十年的里程碑，

186
00:08:17,660 --> 00:08:20,795
达到了十年的里程碑，我们从中学到了什么。

187
00:08:20,795 --> 00:08:23,345
我不得不说，这一年真的是光阴似箭。

188
00:08:23,345 --> 00:08:25,580
时间在快乐中飞逝。

189
00:08:25,580 --> 00:08:26,620
我认为头十年

190
00:08:26,620 --> 00:08:28,495
一晃就过去了。

191
00:08:28,495 --> 00:08:30,590
去年我们有一个很棒的小组讨论会。

192
00:08:30,590 --> 00:08:33,470
由Christian Tschudin主持。

193
00:08:33,960 --> 00:08:36,420
我们应该在这里做一个总结。

194
00:08:36,420 --> 00:08:39,910
我们本应该在小组讨论后再做这件事。

195
00:08:39,910 --> 00:08:43,000
但是其实也不算太晚。

196
00:08:43,000 --> 00:08:44,465
我们来补救吧。

197
00:08:44,465 --> 00:08:46,805
对于错过小组讨论的人来说，

198
00:08:46,805 --> 00:08:50,050
我们可以看看我们和他们讨论了什么。

199
00:08:50,220 --> 00:08:57,185
小组主席给了我们三个很好的话题；

200
00:08:57,185 --> 00:09:00,375
过去十年的亮点是什么？

201
00:09:00,375 --> 00:09:02,255
事情可能发生的地方

202
00:09:02,255 --> 00:09:04,500
改进了或者以其他方式，

203
00:09:04,500 --> 00:09:06,660
我们学到了什么教训？

204
00:09:06,660 --> 00:09:08,370
我们现在在哪里？

205
00:09:08,370 --> 00:09:10,355
这也导致了

206
00:09:10,355 --> 00:09:13,165
我们应该前往的方向。

207
00:09:13,165 --> 00:09:16,505
让我开始谈论，

208
00:09:16,505 --> 00:09:19,730
它是从哪里开始的？

209
00:09:21,050 --> 00:09:24,910
我们都知道Van Jacobson进行了这次演讲。

210
00:09:24,910 --> 00:09:27,825
现在，回想一下15年前的情景，

211
00:09:27,825 --> 00:09:30,560
看新的方式

212
00:09:30,560 --> 00:09:32,055
看待网络连接。

213
00:09:32,055 --> 00:09:33,370
我记得在

214
00:09:33,370 --> 00:09:35,090
在这场谈话的一开始，

215
00:09:35,090 --> 00:09:37,109
他做了一个很棒的类比。

216
00:09:37,109 --> 00:09:39,510
他在说~!@#$%^&*()

217
00:09:39,510 --> 00:09:43,340
互联网是一个更伟大的设计。

218
00:09:43,340 --> 00:09:45,790
这个问题并不是那么多关于是否

219
00:09:45,790 --> 00:09:48,485
互联网的设计是否糟糕，而是，

220
00:09:48,485 --> 00:09:51,090
互联网必须解决的问题

221
00:09:51,090 --> 00:09:54,740
随着时间的推移，解决问题的方法也发生了变化。

222
00:09:54,740 --> 00:09:57,195
主要问题是，

223
00:09:57,195 --> 00:10:03,905
就像柯伊伯带一样，你也可以引领革命。

224
00:10:03,905 --> 00:10:08,330
在那之前，当人们试图去理解

225
00:10:08,330 --> 00:10:09,815
星球的运动

226
00:10:09,815 --> 00:10:13,710
以地球为中心的宇宙，

227
00:10:13,710 --> 00:10:17,140
而事情看起来复杂难以解释。

228
00:10:17,140 --> 00:10:20,010
但通常情况下不会发生大的变化，

229
00:10:20,010 --> 00:10:23,230
说，中心处在阳光之下。

230
00:10:23,230 --> 00:10:25,280
那么总体上来说很快。

231
00:10:25,280 --> 00:10:30,390
所以，图片变得简单多了。

232
00:10:30,390 --> 00:10:33,810
因此，早在2010年，

233
00:10:33,810 --> 00:10:37,045
我们将最佳方案汇集成一个提案，

234
00:10:37,045 --> 00:10:38,475
创造这个大胆的，

235
00:10:38,475 --> 00:10:41,565
简单的新型网络方式。

236
00:10:41,565 --> 00:10:43,970
IP仅仅发送数据包。

237
00:10:43,970 --> 00:10:46,160
从一个地址发送到另一个地址。

238
00:10:46,160 --> 00:10:48,770
我们说网络~!@#$%^&*()

239
00:10:48,770 --> 00:10:51,915
确实是关于塑造各种合适的包的。

240
00:10:51,915 --> 00:10:54,505
直接解决配重问题

241
00:10:54,505 --> 00:10:55,835
网络问题

242
00:10:55,835 --> 00:10:59,530
只需请求那个名字来命名数据。

243
00:10:59,530 --> 00:11:02,309
我记得大卫·克拉克提到过

244
00:11:02,309 --> 00:11:05,120
在那最后一年的讨论小组中提到过，

245
00:11:05,120 --> 00:11:06,639
在一开始，

246
00:11:06,639 --> 00:11:08,330
在一开始，令人兴奋的是

247
00:11:08,330 --> 00:11:11,080
NDN的确是它的大胆之处，

248
00:11:11,080 --> 00:11:15,190
它与当前思维的背离。

249
00:11:15,190 --> 00:11:17,105
自然界的群落倾向于

250
00:11:17,105 --> 00:11:19,630
专注于数据平面的性能表现，

251
00:11:19,630 --> 00:11:22,955
高效的传递等等，

252
00:11:22,955 --> 00:11:26,315
但NDN是一种全新的方法。

253
00:11:26,315 --> 00:11:28,060
我认为那真的是我们的

254
00:11:28,060 --> 00:11:30,520
突出我们的第一位。

255
00:11:30,620 --> 00:11:33,140
它们是直接相关的。

256
00:11:33,140 --> 00:11:35,985
这整个新方法就是围绕这个中心的，

257
00:11:35,985 --> 00:11:38,950
语义命名了安全数据。

258
00:11:38,950 --> 00:11:42,750
十年的经验确实说明了这一点。

259
00:11:42,750 --> 00:11:46,320
告诉我们我们已经掌握了基本的正确概念。

260
00:11:46,320 --> 00:11:49,355
语义命名的安全数据

261
00:11:49,355 --> 00:11:52,040
是一个基本的构建模块。

262
00:11:52,040 --> 00:11:54,245
是一个基本的构建模块。从那里开始，有了这个词，the applications both people ~!@#$%^&*()

263
00:11:54,245 --> 00:11:56,625
应用程序既服务于人类

264
00:11:56,625 --> 00:11:57,610
也曾有过这样的想法，在

265
00:11:57,610 --> 00:12:01,420
时间以及那些只有在

266
00:12:01,420 --> 00:12:03,160
发明之后

267
00:12:03,160 --> 00:12:06,170
NDN项目已经启动。

268
00:12:06,170 --> 00:12:09,425
这个想法是，

269
00:12:09,425 --> 00:12:11,140
一切都是一袋子~!@#$%^&*()

270
00:12:11,140 --> 00:12:14,890
从电影、体育赛事，

271
00:12:14,890 --> 00:12:18,130
游戏，到物联网传感器，

272
00:12:18,130 --> 00:12:22,180
到命令，以及加密密钥，

273
00:12:22,180 --> 00:12:24,740
证书和安全策略。

274
00:12:24,740 --> 00:12:26,735
无论你想要什么，你都可以发出

275
00:12:26,735 --> 00:12:28,890
你的请求发送到网络上，

276
00:12:28,890 --> 00:12:31,680
网络会自动为你提供

277
00:12:31,680 --> 00:12:34,030
网络会自动为你提供正确答案的确认，终端用户可以进行验证。

278
00:12:34,030 --> 00:12:36,560
终端用户可以进行验证。

279
00:12:36,560 --> 00:12:38,565
我认为是语义命名

280
00:12:38,565 --> 00:12:41,140
反映了应用上下文，

281
00:12:41,140 --> 00:12:43,650
网络实体之间的关系，

282
00:12:43,650 --> 00:12:45,990
这为...奠定了基础

283
00:12:45,990 --> 00:12:47,235
...laid the foundation for content-specific security solution developments.

284
00:12:47,235 --> 00:12:49,490
安全解决方案的开发。

285
00:12:49,490 --> 00:12:50,900
像信任模式，

286
00:12:50,900 --> 00:12:53,330
我认为那是项目开始后不久的早期成果之一。

287
00:12:53,330 --> 00:12:57,025
项目开始后的几年。

288
00:12:57,025 --> 00:12:58,825
它代表了我认为的。

289
00:12:58,825 --> 00:13:01,130
一个全新的突破，我会说，

290
00:13:01,130 --> 00:13:02,485
正在解决

291
00:13:02,485 --> 00:13:03,825
这个喷泉

292
00:13:03,825 --> 00:13:06,490
我们今天面临的安全挑战。

293
00:13:06,490 --> 00:13:10,920
现在，从

294
00:13:10,920 --> 00:13:15,735
将数据命名为安全数据，

295
00:13:15,735 --> 00:13:17,945
我们将应用这个概念

296
00:13:17,945 --> 00:13:20,715
到许多不同的问题。

297
00:13:20,715 --> 00:13:22,485
物联网，正如我所提到的，

298
00:13:22,485 --> 00:13:24,115
那些需要联网，

299
00:13:24,115 --> 00:13:28,295
需要延迟容忍支持。

300
00:13:28,295 --> 00:13:31,340
孟菲斯的分销商社交应用程序

301
00:13:31,340 --> 00:13:35,560
在2019年的ICA上展示。

302
00:13:35,560 --> 00:13:38,645
存在一种对网络中断具有容忍性的技术。

303
00:13:38,645 --> 00:13:40,400
我认为研究人员在这个方向上进行了探索，并创造了那个。

304
00:13:40,400 --> 00:13:43,800
在这个方向上进行了探索，并创造了那个。

305
00:13:43,800 --> 00:13:45,885
最近，我们已经在这个方向上进行了探索，并创造了那个，seen satellite networking looking~!@#$%^&*()

306
00:13:45,885 --> 00:13:48,640
卫星网络观察

307
00:13:48,640 --> 00:13:50,840
应用于Endian

308
00:13:50,840 --> 00:13:53,115
解决他们的问题，

309
00:13:53,115 --> 00:13:56,470
因为Endian确实提供了

310
00:13:56,470 --> 00:13:59,930
内置的延迟容忍支持

311
00:13:59,930 --> 00:14:02,690
以及边缘计算。

312
00:14:02,690 --> 00:14:06,600
我们可以有伟大的想法，

313
00:14:06,600 --> 00:14:09,824
但没有国家科学基金会的支持

314
00:14:09,824 --> 00:14:13,050
伟大的想法不会走得很远。

315
00:14:13,050 --> 00:14:16,185
我认为整个团队都非常感激。

316
00:14:16,185 --> 00:14:19,730
持续不断的支持来自

317
00:14:19,730 --> 00:14:23,275
来自国家科学基金会以及全球社区的支持。

318
00:14:23,275 --> 00:14:25,705
那是在2010年开始的。

319
00:14:25,705 --> 00:14:27,790
我必须说话

320
00:14:27,790 --> 00:14:30,300
关于学到的教训和下一步的计划。

321
00:14:30,300 --> 00:14:31,835
我当时不知道

322
00:14:31,835 --> 00:14:34,310
~!@#$%^&*()

323
00:14:34,310 --> 00:14:38,080
但我觉得联邦航空管理局的项目是严肃的，

324
00:14:38,080 --> 00:14:41,095
我们在三年的末尾解决了这个问题。

325
00:14:41,095 --> 00:14:45,240
时间告诉了我们我们是多么地团结。

326
00:14:45,240 --> 00:14:48,940
但尽管如此，支持仍在持续。

327
00:14:48,940 --> 00:14:51,840
和来自美国国家科学基金会的支持与鼓励，

328
00:14:51,840 --> 00:14:53,315
因此，

329
00:14:53,315 --> 00:14:56,115
在接下来的两天里，你可以看到，

330
00:14:56,115 --> 00:14:58,775
在接下来的两天里，你可以看到，有一些很棒的新方向，pushing the frontier for~!@#$%^&*()

331
00:14:58,775 --> 00:15:02,080
推动前沿发展，为了

332
00:15:02,080 --> 00:15:03,730
网络和寻址

333
00:15:03,730 --> 00:15:05,080
这些迫切需要解决的问题

334
00:15:05,080 --> 00:15:08,940
在互联网上持续了许多年。

335
00:15:08,940 --> 00:15:11,075
我们真的有一个敬业

336
00:15:11,075 --> 00:15:12,440
我们真的有一个敬业和持之以恒的团队。

337
00:15:12,440 --> 00:15:15,045
我看向了会议主席。

338
00:15:15,045 --> 00:15:17,750
今年的Endian.com。

339
00:15:17,750 --> 00:15:19,790
我们可以看到大多数

340
00:15:19,790 --> 00:15:22,170
Endian PAs 结束了。

341
00:15:22,170 --> 00:15:24,560
团队从2010年开始，

342
00:15:24,560 --> 00:15:26,550
仍在这里的人正在推动，

343
00:15:26,550 --> 00:15:29,905
继续推动这个令人兴奋的方向。

344
00:15:29,905 --> 00:15:33,320
在您所看到的，有一个更广泛的社区。

345
00:15:33,320 --> 00:15:36,710
在接下来的两天里的报告中。

346
00:15:36,710 --> 00:15:41,360
在接下来的两天里的报告中，我只想传达几个观点。

347
00:15:41,360 --> 00:15:44,255
这次演讲并不反映

348
00:15:44,255 --> 00:15:47,910
本次演讲并不反映小组的共识，但这确实是个人观点。

349
00:15:47,910 --> 00:15:50,350
但这确实是个人观点。

350
00:15:50,350 --> 00:15:52,305
我希望我能走到最后。

351
00:15:52,305 --> 00:15:55,270
我认为Endian项目

352
00:15:55,270 --> 00:15:59,200
开始时，美国联邦航空管理局对所有人收费。

353
00:15:59,200 --> 00:16:00,210
我们需要分开

354
00:16:00,210 --> 00:16:03,125
新的互联网架构。

355
00:16:03,125 --> 00:16:05,010
起点在

356
00:16:05,010 --> 00:16:06,790
起点在专注于

357
00:16:06,790 --> 00:16:10,860
在我们如何支持大规模互联网方面。

358
00:16:10,860 --> 00:16:13,165
但想想看。

359
00:16:13,165 --> 00:16:16,195
我们一直在使用网络技术进行联络

360
00:16:16,195 --> 00:16:18,990
从那时起的水解反应，

361
00:16:18,990 --> 00:16:21,400
已经超过30年了。

362
00:16:21,400 --> 00:16:24,460
这个命名数据的想法

363
00:16:24,460 --> 00:16:27,425
和有状态转发一样

364
00:16:27,425 --> 00:16:30,570
两个新颖的概念和

365
00:16:30,570 --> 00:16:32,930
团队遭到了猛烈的轰炸

366
00:16:32,930 --> 00:16:34,294
面对所有这些问题。

367
00:16:34,294 --> 00:16:38,790
这些方法如何可能扩展呢？

368
00:16:38,790 --> 00:16:41,700
与其问你能用这些全新概念做什么？

369
00:16:41,700 --> 00:16:45,095
你能用这些全新概念做什么？

370
00:16:45,095 --> 00:16:47,675
我们确实花了最近几年的时间

371
00:16:47,675 --> 00:16:50,010
在他们专注于这些问题之后。

372
00:16:50,010 --> 00:16:52,075
这些是重要的问题，

373
00:16:52,075 --> 00:16:56,340
但不是最紧迫的问题。

374
00:16:56,340 --> 00:16:58,310
你会离开这个世界吗？

375
00:16:58,310 --> 00:17:00,480
更好的理解

376
00:17:00,480 --> 00:17:03,150
如何设计一种新的架构？

377
00:17:03,160 --> 00:17:08,405
架构解决应用问题，

378
00:17:08,405 --> 00:17:11,250
解决网络前进问题。

379
00:17:11,250 --> 00:17:12,675
因此它确实

380
00:17:12,675 --> 00:17:15,320
需要一个整体的画面。

381
00:17:15,320 --> 00:17:18,879
如果一个人只专注于网络如何

382
00:17:18,879 --> 00:17:22,580
能高效转发支付套件，

383
00:17:22,580 --> 00:17:24,690
仅仅是另一个网络层。

384
00:17:24,690 --> 00:17:28,290
你永远不会得到

385
00:17:28,290 --> 00:17:31,890
离开现有的IP模型。

386
00:17:31,890 --> 00:17:37,905
这确实是我的深刻见解，走出这个困境。

387
00:17:37,905 --> 00:17:40,280
确实是新的架构

388
00:17:40,280 --> 00:17:41,990
从边缘开始，

389
00:17:41,990 --> 00:17:44,850
即使作为IP的时候

390
00:17:44,850 --> 00:17:48,190
NIST 随着时间的推移已经发生了变化。

391
00:17:48,190 --> 00:17:50,290
IP起源于边缘

392
00:17:50,290 --> 00:17:53,205
通过解决紧迫问题。

393
00:17:53,205 --> 00:17:54,295
我们如何能够构建一个

394
00:17:54,295 --> 00:17:59,730
我们如何能够构建一个有韧性的通信系统，确保这种最大努力交付。

395
00:17:59,730 --> 00:18:02,550
的这种最大努力交付

396
00:18:02,550 --> 00:18:06,745
的数据报从任何地方发送到任何地方。

397
00:18:06,745 --> 00:18:10,190
为了让Endian真正实现~!@#$%^&*()

398
00:18:10,190 --> 00:18:13,030
启动一项新的架构演变，

399
00:18:13,030 --> 00:18:15,015
我们需要从边缘开始

400
00:18:15,015 --> 00:18:16,440
我们不应该从基础设施开始。

401
00:18:16,440 --> 00:18:18,640
我记得回到在

402
00:18:18,640 --> 00:18:23,195
2017年我们在加州大学洛杉矶分校举办了SITCOM，

403
00:18:23,195 --> 00:18:25,075
我们举行了非正式的项目负责人会议

404
00:18:25,075 --> 00:18:26,840
我们已经做到了。

405
00:18:26,840 --> 00:18:28,525
方向非常清晰

406
00:18:28,525 --> 00:18:31,330
Endian的边缘将会被切割。

407
00:18:33,290 --> 00:18:37,640
第2课。我们真的从

408
00:18:37,640 --> 00:18:40,430
去年我们如何

409
00:18:40,430 --> 00:18:44,320
回顾并理解我们自己的局限性。

410
00:18:44,320 --> 00:18:49,140
Van whose always sharp look ~!@#$%^&*()

411
00:18:49,140 --> 00:18:50,955
深入问题，探究事实。

412
00:18:50,955 --> 00:18:52,910
我记得他的评论。

413
00:18:52,910 --> 00:18:55,555
这似乎是很多

414
00:18:55,555 --> 00:18:57,630
研究是在~!@#$%^&*()

415
00:18:57,630 --> 00:19:00,740
研究人员的舒适区。

416
00:19:00,740 --> 00:19:02,985
我认为这个说法是

417
00:19:02,985 --> 00:19:06,165
有些过头了，

418
00:19:06,165 --> 00:19:08,595
但我可以看出那里

419
00:19:08,595 --> 00:19:11,675
是一个问题，他指出。

420
00:19:11,675 --> 00:19:13,170
我认为还有一层

421
00:19:13,170 --> 00:19:15,755
互联网架构在某种程度上

422
00:19:15,755 --> 00:19:17,700
似乎是如何被隔离开来的

423
00:19:17,700 --> 00:19:20,615
不仅是功能模块，

424
00:19:20,615 --> 00:19:22,880
但也包括研究界

425
00:19:22,880 --> 00:19:24,815
和各方面的专家。

426
00:19:24,815 --> 00:19:27,010
我必须承认大多数情况下

427
00:19:27,010 --> 00:19:29,300
~!@#$%^&*()

428
00:19:29,300 --> 00:19:31,460
我们因此拥有网络背景，

429
00:19:31,460 --> 00:19:36,055
我们没有完整的理解。

430
00:19:36,055 --> 00:19:38,120
我们没有完整的理解。关于什么是迫切的问题，that applications must dissolve.

431
00:19:38,120 --> 00:19:40,810
应用程序必须解散。

432
00:19:40,810 --> 00:19:43,820
我们仍然很不幸地如何

433
00:19:43,820 --> 00:19:45,860
杰夫·伯克教授，

434
00:19:45,860 --> 00:19:48,195
他来自应用领域。

435
00:19:48,195 --> 00:19:49,460
我认为他提供了

436
00:19:49,460 --> 00:19:52,485
他提供了巨大而宝贵的输入，

437
00:19:52,485 --> 00:19:56,440
仍然有研究在朝着这些问题的解决方向进行。

438
00:19:56,440 --> 00:20:00,780
解决这些问题的方向。

439
00:20:01,780 --> 00:20:04,580
我认为这十年

440
00:20:04,580 --> 00:20:06,320
培训真的是...的地方

441
00:20:06,320 --> 00:20:09,065
...的地方，能够看到大局并成为

442
00:20:09,065 --> 00:20:11,090
能够看到大局并成为

443
00:20:11,090 --> 00:20:12,845
能够看到大局并成为一名记者而不是专家的

444
00:20:12,845 --> 00:20:14,570
一名专家具有

445
00:20:14,570 --> 00:20:17,315
以叙事为中心的研究议程。

446
00:20:17,315 --> 00:20:20,015
如何发展架构？

447
00:20:20,015 --> 00:20:23,030
我认为随着时间的推移，

448
00:20:23,030 --> 00:20:26,120
我们实际上看得更清楚了。

449
00:20:26,120 --> 00:20:27,890
最终的目标是

450
00:20:27,890 --> 00:20:30,530
网络的目的是为了支持应用程序。

451
00:20:30,530 --> 00:20:32,180
然后我们实际上正在投入

452
00:20:32,180 --> 00:20:33,740
年度报告中提到

453
00:20:33,740 --> 00:20:34,970
我们确实需要

454
00:20:34,970 --> 00:20:37,790
朝着这个应用程序前进

455
00:20:37,790 --> 00:20:40,040
驱动架构开发。

456
00:20:40,040 --> 00:20:42,754
因为解决实际问题会迫使

457
00:20:42,754 --> 00:20:44,300
解决具体细节上的问题

458
00:20:44,300 --> 00:20:47,630
您需要填写详细信息的表格。

459
00:20:47,630 --> 00:20:49,460
更重要的是，

460
00:20:49,460 --> 00:20:52,865
我们在这里帮助我们验证和确认。

461
00:20:52,865 --> 00:20:54,935
是否这个架构设计没有朝着正确的方向发展。

462
00:20:54,935 --> 00:20:57,365
没有朝着正确的方向发展。

463
00:20:57,365 --> 00:20:59,675
我认为在近几年来，

464
00:20:59,675 --> 00:21:01,175
特别是去年，

465
00:21:01,175 --> 00:21:02,660
重点已经转移

466
00:21:02,660 --> 00:21:05,315
朝着构建可用应用程序的方向发展。

467
00:21:05,315 --> 00:21:07,280
跟踪应用程序开发者的动态。

468
00:21:07,280 --> 00:21:08,480
~!@#$%^&*()

469
00:21:08,480 --> 00:21:13,115
从接下来的两天你可以看出来，

470
00:21:13,115 --> 00:21:15,065
在接下来的两天你可以看出来，有一个主要焦点是关于构建高级APIs，

471
00:21:15,065 --> 00:21:17,045
关于构建高级APIs，

472
00:21:17,045 --> 00:21:19,760
可用安全性，以及即插即用功能，以便我们共同解决问题。

473
00:21:19,760 --> 00:21:22,745
我们共同解决问题。

474
00:21:22,745 --> 00:21:25,220
我们还打开了大门以

475
00:21:25,220 --> 00:21:28,685
吸引了广大群众，

476
00:21:28,685 --> 00:21:31,400
关于我们现在所处的位置。

477
00:21:31,400 --> 00:21:32,975
让我快点处理。

478
00:21:32,975 --> 00:21:34,265
我快没时间了。

479
00:21:34,265 --> 00:21:36,620
我认为人们应该理解。

480
00:21:36,620 --> 00:21:40,700
发展建筑需要时间。

481
00:21:40,700 --> 00:21:42,695
互联网可能看起来

482
00:21:42,695 --> 00:21:45,200
像一夜成名的成功。

483
00:21:45,200 --> 00:21:47,120
但我想指出的是

484
00:21:47,120 --> 00:21:49,190
互联网[听不清]开始

485
00:21:49,190 --> 00:21:50,870
在20世纪70年代初

486
00:21:50,870 --> 00:21:53,495
实际上它大约需要20年，

487
00:21:53,495 --> 00:21:56,255
在白色刚刚形成的时候。

488
00:21:56,255 --> 00:22:00,970
但这之前花了20年时间才

489
00:22:00,970 --> 00:22:03,940
确定架构

490
00:22:03,940 --> 00:22:07,715
使实施成熟。

491
00:22:07,715 --> 00:22:11,435
从1981年到1990年代。

492
00:22:11,435 --> 00:22:15,260
十多年来，许多问题

493
00:22:15,260 --> 00:22:19,010
被识别并在[听不清]中修复了，

494
00:22:19,010 --> 00:22:20,345
我得到了PGP。

495
00:22:20,345 --> 00:22:23,990
拥堵可能会表现为~!@#$%^&*()

496
00:22:23,990 --> 00:22:26,450
一个真正的问题并且得到

497
00:22:26,450 --> 00:22:28,970
解决了这个软件和其他许多问题。

499
00:22:31,370 --> 00:22:34,490
我们现在所处的，那个漫长的开始。

500
00:22:34,490 --> 00:22:37,715
我们所学到的唯一其他过程。

501
00:22:37,715 --> 00:22:39,320
What are the most difficult ~!@#$%^&*()

502
00:22:39,320 --> 00:22:40,490
最难推动的事情

503
00:22:40,490 --> 00:22:43,805
NDN，我们学习了如何到达那里。

504
00:22:43,805 --> 00:22:45,515
这是边缘进入。

505
00:22:45,515 --> 00:22:47,390
这就是我的意思是，

506
00:22:47,390 --> 00:22:48,980
你真的需要发展

507
00:22:48,980 --> 00:22:50,330
尝试这些解决方案

508
00:22:50,330 --> 00:22:51,845
在边缘处

509
00:22:51,845 --> 00:22:54,335
像支持边缘计算。

510
00:22:54,335 --> 00:22:56,060
以及我们开发

511
00:22:56,060 --> 00:22:57,440
对于不能够

512
00:22:57,440 --> 00:23:01,385
真的可以覆盖任何东西，任何连接。

513
00:23:01,385 --> 00:23:06,440
我们可以测试这个架构来查看

514
00:23:06,440 --> 00:23:08,570
我们可以测试这个架构来查看这个架构在做什么，以及什么是正确的事情，还有什么可能是

515
00:23:08,570 --> 00:23:10,055
正确的事情以及可能的事情

516
00:23:10,055 --> 00:23:12,350
我们可以把它加起来。

517
00:23:12,350 --> 00:23:14,420
这是我的最后一张幻灯片。

518
00:23:14,420 --> 00:23:15,755
我只想说

519
00:23:15,755 --> 00:23:17,540
这是一个社区会议。

520
00:23:17,540 --> 00:23:19,655
你们很多人已经发言了。

521
00:23:19,655 --> 00:23:21,080
在接下来的两天里，

522
00:23:21,080 --> 00:23:22,340
我们真的很希望能够

523
00:23:22,340 --> 00:23:22,835
共享

524
00:23:22,835 --> 00:23:24,440
多年来的所有成就，

525
00:23:24,440 --> 00:23:26,030
识别新问题，

526
00:23:26,030 --> 00:23:28,070
然后收集输入以制定解决方案

527
00:23:28,070 --> 00:23:29,450
为了即将到来的一年

528
00:23:29,450 --> 00:23:32,160
即将到来的一年。非常感谢您。

529
00:23:36,580 --> 00:23:38,960
确保了你的时机

530
00:23:38,960 --> 00:23:41,315
是非凡的。做得好。

531
00:23:41,315 --> 00:23:44,915
我收到了一个通过聊天发来的问题。

532
00:23:44,915 --> 00:23:47,180
其他人，请做。

533
00:23:47,180 --> 00:23:48,980
希望我们能花接下来的几分钟时间

534
00:23:48,980 --> 00:23:52,370
在这里富有成效地挑选束缚的思维产品。

535
00:23:52,370 --> 00:23:54,530
一个问题要问你通过

536
00:23:54,530 --> 00:23:57,650
库马尔发来的聊天信息。

537
00:23:57,650 --> 00:24:00,710
NDN的规模是多少？

538
00:24:00,710 --> 00:24:02,150
~!@#$%^&*()

539
00:24:02,150 --> 00:24:04,110
理解那个问题？

540
00:24:05,950 --> 00:24:08,360
这是一个很好的问题。

541
00:24:08,360 --> 00:24:10,040
实际上，我没有时间去

542
00:24:10,040 --> 00:24:12,080
实际上，我没有时间去详细阐述这个问题去年。这是一个根本性问题。

543
00:24:12,080 --> 00:24:14,135
这是一个根本性问题。

544
00:24:14,135 --> 00:24:17,945
这是NDN的问题，不真正是我们的问题。

545
00:24:17,945 --> 00:24:20,420
我认为那是相关的问题。

546
00:24:20,420 --> 00:24:22,715
这是在读数刻度。

547
00:24:22,715 --> 00:24:25,085
我认为NDN从根本上来说

548
00:24:25,085 --> 00:24:27,320
提供了一种观察方式

549
00:24:27,320 --> 00:24:29,990
提供了一种观察方式，如何构建网络，the systems, starting from application.

550
00:24:29,990 --> 00:24:33,565
系统，从应用开始。

551
00:24:33,565 --> 00:24:35,020
因为就像我说的，

552
00:24:35,020 --> 00:24:37,585
我一直在使用非正式用语，

553
00:24:37,585 --> 00:24:39,430
应用是一个目标。

554
00:24:39,430 --> 00:24:41,635
我们所做的是为了

555
00:24:41,635 --> 00:24:44,400
提供所需的应用程序。

556
00:24:44,400 --> 00:24:46,670
因此，我可以考虑NDN

557
00:24:46,670 --> 00:24:48,560
作为解决[听不清]和

558
00:24:48,560 --> 00:24:50,480
伦理问题而不是

559
00:24:50,480 --> 00:24:53,645
对应用需求的清晰理解，

560
00:24:53,645 --> 00:24:57,710
你永远无法解决真正的问题。

561
00:24:57,710 --> 00:25:00,225
简单的例子可能是，

562
00:25:00,225 --> 00:25:04,685
IP侧的交付点。

563
00:25:04,685 --> 00:25:07,490
但隐藏了互联网是

564
00:25:07,490 --> 00:25:10,520
仍然只进行点对点的递送。

565
00:25:10,520 --> 00:25:13,370
它已经在几年前就变得重要了。

566
00:25:13,370 --> 00:25:15,905
今天我们所做的是我们正在传递。

567
00:25:15,905 --> 00:25:20,510
这种多播等效传播，

568
00:25:20,510 --> 00:25:22,460
但不是在网络层，因为

569
00:25:22,460 --> 00:25:24,620
IT没有改变。

570
00:25:24,620 --> 00:25:27,410
但它是一家CDN公司。

571
00:25:27,410 --> 00:25:29,510
提供在功能层面上，

572
00:25:29,510 --> 00:25:32,240
在应用层通过各种在功能层面上，技巧和作弊在架构上。

573
00:25:32,240 --> 00:25:37,470
技巧和作弊在架构上。

574
00:25:38,200 --> 00:25:40,700
理解应该纠正什么

575
00:25:40,700 --> 00:25:41,990
建筑积木，

576
00:25:41,990 --> 00:25:45,140
我们可以引导着改变未来，借助

577
00:25:45,140 --> 00:25:47,240
这个简单的架构和

578
00:25:47,240 --> 00:25:49,590
带有内置的安全功能。

579
00:25:49,840 --> 00:25:55,655
在过去的几分钟里，

580
00:25:55,655 --> 00:25:56,780
在过去的几分钟里，这里一对儿

581
00:25:56,780 --> 00:25:58,610
在过去的几分钟里，这里一对儿问题已经提出，所有这些问题都会合成你认为需要的东西吗？

582
00:25:58,610 --> 00:26:02,915
合成了你认为需要的东西吗？

583
00:26:02,915 --> 00:26:04,340
第一个问题是什么

584
00:26:04,340 --> 00:26:05,960
您认为需要什么来

585
00:26:05,960 --> 00:26:10,070
广泛应用于商业领域

586
00:26:10,070 --> 00:26:11,510
Widely used in commercial fields, that's the first and then the second are, ~!@#$%^&*()

587
00:26:11,510 --> 00:26:14,225
这是第一个，然后第二个是，

588
00:26:14,225 --> 00:26:16,565
你对此有什么看法？

589
00:26:16,565 --> 00:26:18,275
对此你有什么指点？

590
00:26:18,275 --> 00:26:20,630
对此你有什么指点？for important near chart research directions should be tackled next?

591
00:26:20,630 --> 00:26:23,390
接下来应该着手解决哪些研究方向？

592
00:26:23,390 --> 00:26:26,915
>> 让我先回答第二个问题，

593
00:26:26,915 --> 00:26:30,860
因为我们正在工作

594
00:26:30,860 --> 00:26:32,810
在收集那些要点。

595
00:26:32,810 --> 00:26:34,370
这还没到那个地步。

596
00:26:34,370 --> 00:26:36,380
但是一旦我们准备好了，

597
00:26:36,380 --> 00:26:38,405
我们会发送给社区。

598
00:26:38,405 --> 00:26:40,535
我们在考虑全球社区。

599
00:26:40,535 --> 00:26:43,310
我们首先需要收集一套

600
00:26:43,310 --> 00:26:46,250
教育性的指导意见给人们

601
00:26:46,250 --> 00:26:48,305
了解NDN和

602
00:26:48,305 --> 00:26:51,230
代码库的教程和

603
00:26:51,230 --> 00:26:53,795
人们遇到的问题

604
00:26:53,795 --> 00:26:54,950
对...感兴趣

605
00:26:54,950 --> 00:26:57,484
为解决方案的开发做出贡献。

606
00:26:57,484 --> 00:27:00,810
至于第一个。

607
00:27:04,300 --> 00:27:07,220
让我说一下，在早期，

608
00:27:07,220 --> 00:27:11,000
重点放在了自然水平上，以及这一点，

609
00:27:11,000 --> 00:27:12,590
所有这些竞争，

610
00:27:12,590 --> 00:27:15,380
尝试去使用诡计来

611
00:27:15,380 --> 00:27:17,150
尝试去使用诡计来改变NDN架构的设计。

612
00:27:17,150 --> 00:27:19,085
尝试将NDN架构作为一种设计。

613
00:27:19,085 --> 00:27:20,645
我指的是NDN架构。

614
00:27:20,645 --> 00:27:23,240
为了让NDN路由器运行得更快。

615
00:27:23,240 --> 00:27:26,540
我认为那不是正确的方向。

616
00:27:26,540 --> 00:27:28,970
NDN路由器需要运行得快。

617
00:27:28,970 --> 00:27:30,710
尽管如此，如果我们认为

618
00:27:30,710 --> 00:27:33,065
应用程序产生流量，

619
00:27:33,065 --> 00:27:36,050
建造它是没有意义的

620
00:27:36,050 --> 00:27:38,540
太字节NDN路由器

621
00:27:38,540 --> 00:27:40,280
基础的事情是，

622
00:27:40,280 --> 00:27:44,300
我说过，网络是为了使应用程序能够运行。

623
00:27:44,300 --> 00:27:46,910
如今，应用程序面临着问题，

624
00:27:46,910 --> 00:27:50,610
要真正扩展规模，

625
00:27:50,770 --> 00:27:54,020
要确保，更重要的是。

626
00:27:54,020 --> 00:27:55,700
我希望在实际尝试去

627
00:27:55,700 --> 00:27:57,620
鼓励我以前的学生去

628
00:27:57,620 --> 00:28:01,310
开始在该地区的房子

629
00:28:01,310 --> 00:28:06,125
发展应用程序的时代。

630
00:28:06,125 --> 00:28:08,945
你可以开发智能家居应用程序。

631
00:28:08,945 --> 00:28:13,655
这并不意味着要泄露你家的所有秘密。

632
00:28:13,655 --> 00:28:16,115
像我和我丈夫的对话。

633
00:28:16,115 --> 00:28:22,385
哦，天哪。把家里的设备搬到车里。

634
00:28:22,385 --> 00:28:24,680
安全的应用程序。

635
00:28:24,680 --> 00:28:26,330
那我们就不知道如何争辩了，

636
00:28:26,330 --> 00:28:29,225
关于亚马逊或谷歌，

637
00:28:29,225 --> 00:28:31,910
他们可能会说是出于考虑。

638
00:28:31,910 --> 00:28:33,995
如果你没有把你的数据

639
00:28:33,995 --> 00:28:35,960
备份到云端的话，

640
00:28:35,960 --> 00:28:36,620
如果你需要那个，

641
00:28:36,620 --> 00:28:41,030
使用云服务进行存档，

642
00:28:41,030 --> 00:28:43,535
你发送了加密数据。

643
00:28:43,535 --> 00:28:46,025
我认为我们可以提升因素级别，

644
00:28:46,025 --> 00:28:47,180
看很多

645
00:28:47,180 --> 00:28:49,295
正在进行的努力。

646
00:28:49,295 --> 00:28:51,800
让我们旨在修正

647
00:28:51,800 --> 00:28:54,650
现有的不足之处

648
00:28:54,650 --> 00:28:58,180
[背景] 解决方案而不是分割

649
00:28:58,180 --> 00:29:01,595
从第一原理出发的解决方案

650
00:29:01,595 --> 00:29:05,059
就是为了消除这些问题。

651
00:29:05,059 --> 00:29:07,835
我们再次建立起这个的时候，

652
00:29:07,835 --> 00:29:09,110
我们不仅应该

653
00:29:09,110 --> 00:29:11,150
列出短期项目，

654
00:29:11,150 --> 00:29:15,115
我们可能还可以列出我们的猜测，

655
00:29:15,115 --> 00:29:19,240
可能是紧迫的需求

656
00:29:19,240 --> 00:29:20,890
为了产品在

657
00:29:20,890 --> 00:29:23,390
市场上人们可以尝试的。

658
00:29:24,520 --> 00:29:26,945
>> 太棒了，Alicia。

659
00:29:26,945 --> 00:29:28,730
谢谢，我认为我们将继续

660
00:29:28,730 --> 00:29:31,235
重新审视你的一些想法。

661
00:29:31,235 --> 00:29:33,545
在接下来的两天里取得进展。

662
00:29:33,545 --> 00:29:35,270
非常感谢。

663
00:29:35,270 --> 00:29:36,485
非常感谢。

664
00:29:36,485 --> 00:29:40,550
时间不幸地在飞速流逝。

665
00:29:40,550 --> 00:29:44,540
接下来是第一场的下一位演讲者

666
00:29:44,540 --> 00:29:49,220
来自计算机科学系的张北川教授

667
00:29:49,220 --> 00:29:50,960
计算机科学系

668
00:29:50,960 --> 00:29:53,300
在亚利桑那大学。

669
00:29:53,300 --> 00:29:55,520
我将保持我的介绍简短，以便我们能够

670
00:29:55,520 --> 00:29:57,575
尽量简短以便我们能够

671
00:29:57,575 --> 00:30:02,810
尽量增加给演讲者的时间。

672
00:30:02,810 --> 00:30:08,615
他将给我们一个概览。

673
00:30:08,615 --> 00:30:11,195
的NDM代码库。

674
00:30:11,195 --> 00:30:14,720
的NDM代码库。Hopefully Beichuan, you can turn on your camera and start

675
00:30:14,720 --> 00:30:16,520
可以打开你的摄像头并开始

676
00:30:16,520 --> 00:30:19,145
分享你的幻灯片。欢迎，Beichuan。

677
00:30:19,145 --> 00:30:22,290
>> 帕特里克，你能看到我的幻灯片吗？

678
00:30:23,440 --> 00:30:26,345
>> 是的，确实，我们可以很清楚地看到它们。

679
00:30:26,345 --> 00:30:28,880
>> 太好了。谢谢你，帕特里克。

680
00:30:28,880 --> 00:30:31,700
很高兴能来到这里。

681
00:30:31,700 --> 00:30:34,175
来讨论如何的NDN

682
00:30:34,175 --> 00:30:36,155
向前发展NDN

683
00:30:36,155 --> 00:30:40,670
和整体的定价基础架构。

684
00:30:40,670 --> 00:30:43,820
我的任务在这个讲话中是要

685
00:30:43,820 --> 00:30:46,835
提供代码开发的概览。

686
00:30:46,835 --> 00:30:51,330
然而，在过去的10年里，

687
00:30:52,270 --> 00:30:55,400
原始的NDN产品团队以及

688
00:30:55,400 --> 00:30:57,740
同时还有整个NDN IC和

689
00:30:57,740 --> 00:31:01,730
社区已经开发了如此庞大的代码库。

690
00:31:01,730 --> 00:31:03,710
和如此多的软件。

691
00:31:03,710 --> 00:31:07,280
要想面面俱到是不可能的。

692
00:31:07,280 --> 00:31:08,960
也，我不认为

693
00:31:08,960 --> 00:31:10,730
这就是人们的目的。

694
00:31:10,730 --> 00:31:14,285
来参加这个社区会议。

695
00:31:14,285 --> 00:31:18,109
相比于进行全面的报道，

696
00:31:18,109 --> 00:31:20,960
我想快速概述一下

697
00:31:20,960 --> 00:31:23,120
一些主要的基础NDN(命名数据网络)

698
00:31:23,120 --> 00:31:26,120
软件开发工作和

699
00:31:26,120 --> 00:31:30,200
然后递归处理最近的进展情况。

700
00:31:30,200 --> 00:31:31,520
以及那些的状态。

701
00:31:31,520 --> 00:31:34,400
但其实主要意图是为了建立

702
00:31:34,400 --> 00:31:38,305
未来两天的背景情景

703
00:31:38,305 --> 00:31:41,230
当我们讨论如何改进流程时，

704
00:31:41,230 --> 00:31:46,600
如何改善整体软件

705
00:31:46,600 --> 00:31:50,840
和开发工作量。

706
00:31:53,080 --> 00:31:56,660
第一件事是转发守护进程，

707
00:31:56,660 --> 00:31:59,780
我们称之为FD的NDN转发守护进程。

708
00:31:59,780 --> 00:32:01,700
这可能是

709
00:32:01,700 --> 00:32:04,610
这可能是我们开发的最古老的软件。

710
00:32:04,610 --> 00:32:07,955
意图是要成为

711
00:32:07,955 --> 00:32:10,010
参考实现

712
00:32:10,010 --> 00:32:12,725
基本的NDN功能。

713
00:32:12,725 --> 00:32:16,250
它是C++实现的。

714
00:32:16,250 --> 00:32:17,900
它具备所有基本的

715
00:32:17,900 --> 00:32:20,105
NDN数据包转发机制，

716
00:32:20,105 --> 00:32:22,025
具有用于缓存的内容存储，

717
00:32:22,025 --> 00:32:23,450
待处理利息表，

718
00:32:23,450 --> 00:32:25,280
和转发表。

719
00:32:25,280 --> 00:32:27,725
目前我们支持

720
00:32:27,725 --> 00:32:30,020
我们支持多种转发策略。

721
00:32:30,020 --> 00:32:31,400
例如，有

722
00:32:31,400 --> 00:32:34,025
多播转发策略是指

723
00:32:34,025 --> 00:32:36,500
一个收入可以增长

724
00:32:36,500 --> 00:32:40,625
多个下一跳同时进行。

725
00:32:40,625 --> 00:32:44,614
我们有所谓的最佳路由器策略，

726
00:32:44,614 --> 00:32:46,880
它将会将兴趣转发至

727
00:32:46,880 --> 00:32:50,705
它将会选择在当前时刻最佳的下一跳。

728
00:32:50,705 --> 00:32:53,390
但如果那个下一跳不起作用或者

729
00:32:53,390 --> 00:32:55,970
不起作用，是的，

730
00:32:55,970 --> 00:32:58,235
如果下一个跳点没有带回数据，

731
00:32:58,235 --> 00:32:59,990
那么策略将会

732
00:32:59,990 --> 00:33:01,280
转发下一个兴趣。

733
00:33:01,280 --> 00:33:05,120
转发到第二优先的下一个跳点。

734
00:33:05,120 --> 00:33:09,980
我们还有所谓的ASF策略。

735
00:33:09,980 --> 00:33:14,165
这个策略将主动证明

736
00:33:14,165 --> 00:33:18,245
一些其他的下一跳路由

737
00:33:18,245 --> 00:33:20,960
选择提供数据的那个选项。

738
00:33:20,960 --> 00:33:24,005
选择最早的那个，我们会使用那个。

739
00:33:24,005 --> 00:33:30,365
还有一个添加新策略的接口。

740
00:33:30,365 --> 00:33:33,110
设计的一个意图是

741
00:33:33,110 --> 00:33:35,915
使其模块化，以便

742
00:33:35,915 --> 00:33:40,100
研究人员可以插入他们自己的策略

743
00:33:40,100 --> 00:33:45,410
以及其他代码的改进。

744
00:33:45,410 --> 00:33:47,780
同样的，本着相同的精神，

746
00:33:50,495 --> 00:33:53,525
我们将NFD的内部细节暴露给应用程序通过NFD管理协议。

747
00:33:53,525 --> 00:33:55,955
通过NFD管理协议，

748
00:33:55,955 --> 00:34:00,635
通过应用程序之间的通信，

749
00:34:00,635 --> 00:34:02,210
和NFD本身，

750
00:34:02,210 --> 00:34:04,355
产生利息和数据。

751
00:34:04,355 --> 00:34:06,770
这样你就可以配置和

752
00:34:06,770 --> 00:34:09,570
控制转发守护进程。

753
00:34:11,110 --> 00:34:15,260
NFD在多个平台上运行。

754
00:34:15,260 --> 00:34:19,385
我们积极维护其安卓版本。

755
00:34:19,385 --> 00:34:24,635
努力跟上NFD的主要发布版本。

756
00:34:24,635 --> 00:34:27,815
我们也成功地在其他平台上运行了它

757
00:34:27,815 --> 00:34:29,975
我们也成功地在其他一些平台上运行了它，比如用于家用路由器的WRT，

758
00:34:29,975 --> 00:34:33,440
作为家用路由器的WRT，

759
00:34:33,440 --> 00:34:35,600
树莓派和其他一些设备。

760
00:34:35,600 --> 00:34:38,780
但这些中的一些

761
00:34:38,780 --> 00:34:41,179
被个人积极维护着，

762
00:34:41,179 --> 00:34:44,060
但其中一些并没有得到积极维护。

763
00:34:44,060 --> 00:34:45,860
但总的来说，我相信

764
00:34:45,860 --> 00:34:47,285
这不费多少力气

765
00:34:47,285 --> 00:34:51,360
将这个迁移到一个类似的平台上。

766
00:34:52,000 --> 00:34:54,980
将NFD目前运行在~!@#$%^&*()

767
00:34:54,980 --> 00:34:58,715
NFD当前运行在由Zhenkai Zhu维护的NDN测试环境中。

768
00:34:58,715 --> 00:35:00,695
这个测试环境我是

769
00:35:00,695 --> 00:35:03,980
大约有30多人在全球范围内知道这件事。

770
00:35:03,980 --> 00:35:06,530
大约有30多人在全球范围内知道这件事，并且默认策略是ASF。并且活动执行这个NFD。

771
00:35:06,530 --> 00:35:09,875
并且默认策略是ASF。

772
00:35:09,875 --> 00:35:14,750
如果你在NDN测试床上进行实验，

773
00:35:14,750 --> 00:35:16,640
这将是转发的数据流。

774
00:35:16,640 --> 00:35:19,410
你将会使用基础设施。

775
00:35:19,560 --> 00:35:22,570
一套基本的NDN应用程序包。

776
00:35:22,570 --> 00:35:27,360
一套基本的NDN应用程序包。

777
00:35:27,360 --> 00:35:32,180
如果你是新用户并且尝试使用NFD，

778
00:35:32,180 --> 00:35:35,945
你可能还会得到这些NDN工具，

779
00:35:35,945 --> 00:35:37,880
以便你能够运行

780
00:35:37,880 --> 00:35:40,400
应用程序并对其进行测试。

781
00:35:40,400 --> 00:35:43,070
NDN工具，包括此类工具，

782
00:35:43,070 --> 00:35:46,760
作为银色文件，

783
00:35:46,760 --> 00:35:50,435
作为检索文件，你可以记录流量。

784
00:35:50,435 --> 00:35:54,290
你可以使用数据包解析器

785
00:35:54,290 --> 00:35:55,340
来读取日志

786
00:35:55,340 --> 00:35:58,610
和一些简单的工具

787
00:35:58,610 --> 00:36:02,490
为了帮助使用和告知软件。

788
00:36:04,380 --> 00:36:09,385
我们持续积极地开发一个身份识别系统，

789
00:36:09,385 --> 00:36:11,365
和一个新版本即将发布

790
00:36:11,365 --> 00:36:14,190
可能很快就会发生。

791
00:36:14,190 --> 00:36:15,530
在这个新版本中，

792
00:36:15,530 --> 00:36:17,209
在这个新版本中，我们已经完成了

793
00:36:17,209 --> 00:36:21,530
在这个新版本中，我们已经完成了过渡到数据包格式版本0.3，

794
00:36:21,530 --> 00:36:23,360
这包含了许多

795
00:36:23,360 --> 00:36:25,790
的数据包格式变更。

796
00:36:25,790 --> 00:36:28,879
我其实会隐藏一些重点。

797
00:36:28,879 --> 00:36:32,835
有新的签署利益格式。

798
00:36:32,835 --> 00:36:35,290
大多数利益是不需要签署的，

799
00:36:35,290 --> 00:36:38,200
但你可以选择性地签署这些利益。

800
00:36:38,200 --> 00:36:39,925
例如，如果实际上

801
00:36:39,925 --> 00:36:41,920
执行命令的是哪个设备，

802
00:36:41,920 --> 00:36:44,485
你会想要签署那份利益相关文件。

803
00:36:44,485 --> 00:36:46,510
那种格式用于

804
00:36:46,510 --> 00:36:49,015
指定的利益得到了更新。

805
00:36:49,015 --> 00:36:54,160
我们还更新了一些命名规则。

806
00:36:54,160 --> 00:36:58,674
例如，如果一个特定的名字成分

807
00:36:58,674 --> 00:37:00,400
具有某种特殊含义，

808
00:37:00,400 --> 00:37:05,300
而不是使用某种代码，

809
00:37:05,300 --> 00:37:07,775
我们在这里所说的是类型，

810
00:37:07,775 --> 00:37:10,310
您可以输入组件的~!@#$%^&*()

811
00:37:10,310 --> 00:37:13,985
一个名称，以便它更加，

812
00:37:13,985 --> 00:37:17,270
一致地使用在

813
00:37:17,270 --> 00:37:20,734
这些特殊的名字组成部分。

814
00:37:20,734 --> 00:37:22,790
同样在这个版本中，

815
00:37:22,790 --> 00:37:24,725
我们提供了支持。

816
00:37:24,725 --> 00:37:27,305
大多数选择器。

817
00:37:27,305 --> 00:37:31,265
如果人们不知道什么是选择器，

818
00:37:31,265 --> 00:37:38,614
那些是导师在我们进行名称和数据匹配时。

819
00:37:38,614 --> 00:37:41,465
当我们进行名称和数据匹配时。

820
00:37:41,465 --> 00:37:45,140
除了包括

821
00:37:45,140 --> 00:37:46,565
姓名和你的兴趣爱好，

822
00:37:46,565 --> 00:37:51,035
您还可以包括一些选择器来限制

823
00:37:51,035 --> 00:37:56,450
哪些数据可能满足那些兴趣。

824
00:37:56,450 --> 00:37:59,660
我们发现大多数

825
00:37:59,660 --> 00:38:02,960
选择器要么很少使用，要么会引起

826
00:38:02,960 --> 00:38:05,360
使用或引起

827
00:38:05,360 --> 00:38:10,235
对性能造成了重大问题。

828
00:38:10,235 --> 00:38:13,205
我们已经找到了替代方案。

829
00:38:13,205 --> 00:38:15,710
为了实现那些功能。

830
00:38:15,710 --> 00:38:17,120
为了实现那些功能，因此我们放弃了对选择器的支持。

831
00:38:17,120 --> 00:38:19,639
我们放弃了对选择器的支持。

832
00:38:19,639 --> 00:38:22,550
我们增加了跳数限制的支持。

833
00:38:22,550 --> 00:38:29,840
所以你可以引导我了解最坏的情况。

834
00:38:29,840 --> 00:38:33,690
数据包在网络中可以存活多长时间。

835
00:38:35,450 --> 00:38:38,940
即将包含在内的一个新功能是

836
00:38:38,940 --> 00:38:42,290
这个版本被称为异步行为。

837
00:38:42,290 --> 00:38:45,440
如果那里有什么发生的话，

838
00:38:45,440 --> 00:38:49,084
新的兴趣是否正在涌入NRD

839
00:38:49,084 --> 00:38:54,210
并且没有缓存数据

840
00:38:54,210 --> 00:38:56,120
并且没有路由条目

841
00:38:56,120 --> 00:38:57,910
转发那个兴趣。

842
00:38:57,910 --> 00:39:00,160
此前，NRD会下降

843
00:39:00,160 --> 00:39:01,375
不知道如何处理这些利益，因为它

844
00:39:01,375 --> 00:39:03,940
不知道如何处理这些利益。

845
00:39:03,940 --> 00:39:08,700
但在某些应用中，

846
00:39:08,700 --> 00:39:10,920
他们之前发送了兴趣。

847
00:39:10,920 --> 00:39:13,139
数据实际上是生成的

848
00:39:13,139 --> 00:39:14,605
或甚至在此之前

849
00:39:14,605 --> 00:39:17,425
路由前缀已宣布。

850
00:39:17,425 --> 00:39:19,425
但我们想要

851
00:39:19,425 --> 00:39:22,195
适应这种使用场景，所以

852
00:39:22,195 --> 00:39:25,020
为了适应这种使用场景，所以数据检索可以异步发生，

853
00:39:25,020 --> 00:39:26,830
可以异步发生，

854
00:39:26,830 --> 00:39:30,520
意味着消费者和

855
00:39:30,520 --> 00:39:33,445
制片人没有

856
00:39:33,445 --> 00:39:35,925
制片人可以同时在线。

857
00:39:35,925 --> 00:39:38,250
制片人可以放置数据在

858
00:39:38,250 --> 00:39:40,770
一次性，消费者可以检索数据

859
00:39:40,770 --> 00:39:43,350
在另一个时间，无论哪种情况发生

860
00:39:43,350 --> 00:39:46,690
可能会提前或延后发生。

861
00:39:46,690 --> 00:39:50,830
为了支持这一点，NRD需要进行缓冲。

862
00:39:50,830 --> 00:39:52,815
为了支持这一新兴的兴趣，以便

863
00:39:52,815 --> 00:39:55,985
尚未有任何转发条目。

864
00:39:55,985 --> 00:39:59,230
没有数据传入，

865
00:39:59,230 --> 00:40:00,775
没有转发条目，而且

866
00:40:00,775 --> 00:40:03,420
没有什么能缓冲那些利益。

867
00:40:03,430 --> 00:40:05,475
在稍后的时间里，

868
00:40:05,475 --> 00:40:08,425
如果出现转发条目，例如，

869
00:40:08,425 --> 00:40:10,665
制作人出现或者

870
00:40:10,665 --> 00:40:14,125
宣布了一个数据前缀后

871
00:40:14,125 --> 00:40:17,485
NRD将会查看那些缓冲的利益。

872
00:40:17,485 --> 00:40:18,915
并将它们发送出去。

873
00:40:18,915 --> 00:40:21,990
根据此转发条目。

874
00:40:23,030 --> 00:40:24,990
>> 北川。

875
00:40:24,990 --> 00:40:25,500
>> 是的。

876
00:40:25,500 --> 00:40:26,965
>> 我很抱歉打扰了。

877
00:40:26,965 --> 00:40:28,045
我只是想告诉你我们即将~!@#$%^&*()

878
00:40:28,045 --> 00:40:29,130
即将需要开始进行

879
00:40:29,130 --> 00:40:30,775
即将需要开始进行问题环节, 大约两分钟后。

880
00:40:30,775 --> 00:40:32,700
如果那不会影响你。

881
00:40:32,700 --> 00:40:34,290
我知道时间在飞逝。[同时发生]

882
00:40:34,290 --> 00:40:37,500
>> 对不起。

883
00:40:38,030 --> 00:40:41,860
我想我已经忘记了时间。

884
00:40:43,720 --> 00:40:48,225
我们有NFD开发者指南的修订版。

885
00:40:48,225 --> 00:40:51,695
还有其他的NRD转发器。

886
00:40:51,695 --> 00:40:54,685
您稍后会听到关于NDN-DPDK的介绍。

887
00:40:54,685 --> 00:40:59,275
侧重于高性能。

888
00:40:59,275 --> 00:41:03,100
YaNFD专注于简化设计

889
00:41:03,100 --> 00:41:06,620
与NFD相比，转发器的性能。

890
00:41:06,620 --> 00:41:09,840
NDN-Lite是一个转发器

891
00:41:09,840 --> 00:41:11,900
专注于嵌入式

892
00:41:11,900 --> 00:41:13,540
和受限环境。

893
00:41:13,540 --> 00:41:15,410
尽管整个包裹

894
00:41:15,410 --> 00:41:16,820
它不仅仅是一个转发器，

895
00:41:16,820 --> 00:41:18,840
它还有其他的库。

896
00:41:18,840 --> 00:41:21,160
以支持应用程序。

897
00:41:21,200 --> 00:41:23,375
除了转发器，

898
00:41:23,375 --> 00:41:25,660
我们还有许多

899
00:41:25,660 --> 00:41:27,000
我们还有许多库来支持不同语言的绑定。

900
00:41:27,000 --> 00:41:29,005
支持不同语言的绑定。

901
00:41:29,005 --> 00:41:31,710
这些库实际上是

902
00:41:31,710 --> 00:41:35,310
用于开发应用程序。

903
00:41:35,740 --> 00:41:39,090
我们有同步协议，

904
00:41:39,090 --> 00:41:40,470
它基本上是

905
00:41:40,470 --> 00:41:43,925
它在NDN中相当于传输协议。

906
00:41:43,925 --> 00:41:46,885
它同步选定的命名空间。

907
00:41:46,885 --> 00:41:49,225
和数据在多个参与者之间进行同步。

908
00:41:49,225 --> 00:41:52,420
他们可能从不同的状态开始

909
00:41:52,420 --> 00:41:53,700
他们有多少数据

910
00:41:53,700 --> 00:41:56,200
在运行同步之后，

911
00:41:56,200 --> 00:41:58,575
它们都彼此同步。

912
00:41:58,575 --> 00:41:59,970
关于命名空间

913
00:41:59,970 --> 00:42:01,735
他们想要同步的数据类型。

914
00:42:01,735 --> 00:42:03,630
有不同的设计

915
00:42:03,630 --> 00:42:05,425
如何做这个。

916
00:42:05,425 --> 00:42:08,880
大多与如何不同

917
00:42:08,880 --> 00:42:12,035
它们代表着各种状态

918
00:42:12,035 --> 00:42:14,475
并进行通信和同步。

919
00:42:14,475 --> 00:42:17,760
PSync使用布隆过滤器。

920
00:42:17,760 --> 00:42:19,455
和可逆布隆过滤器。

921
00:42:19,455 --> 00:42:21,030
StateVectorSync使用

922
00:42:21,030 --> 00:42:23,245
一个状态向量来表示状态。

923
00:42:23,245 --> 00:42:24,950
两者实际上都在积极开发中。

924
00:42:24,950 --> 00:42:27,540
积极开发中。

925
00:42:27,540 --> 00:42:30,985
NDNCERT和Repo。

926
00:42:30,985 --> 00:42:33,535
证书是用来自动化的

927
00:42:33,535 --> 00:42:36,075
管理的检索和管理

928
00:42:36,075 --> 00:42:38,450
NDN证书的便利化处理

929
00:42:38,450 --> 00:42:41,480
所有的安全操作。

930
00:42:41,480 --> 00:42:45,290
管理数据仓库

931
00:42:45,290 --> 00:42:46,730
以便你能解决

932
00:42:46,730 --> 00:42:48,550
数据没有

933
00:42:48,550 --> 00:42:51,584
拥有原始数据生产者

934
00:42:51,584 --> 00:42:53,670
随时在线。

935
00:42:54,430 --> 00:42:58,510
我们有评估平台在~!@#$%^&*()

936
00:42:58,510 --> 00:43:03,975
不同层次，不同工具。

937
00:43:03,975 --> 00:43:06,335
NdnSIM 是一个模拟器。

938
00:43:06,335 --> 00:43:10,375
迷你-NDN虚拟化仿真器

939
00:43:10,375 --> 00:43:12,670
您可以运行真实的NRD

940
00:43:12,670 --> 00:43:14,680
和其他NDN软件。

941
00:43:14,680 --> 00:43:16,885
NDN Testbed，正如我所提到的，

942
00:43:16,885 --> 00:43:18,200
是一个全球性的测试平台，

943
00:43:18,200 --> 00:43:20,185
30多个节点正在运行

944
00:43:20,185 --> 00:43:22,640
NLSR作为路由协议

945
00:43:22,640 --> 00:43:25,460
作为转发策略。

946
00:43:25,460 --> 00:43:27,660
人们一直在使用测试平台

947
00:43:27,660 --> 00:43:31,020
进行各种实验。

948
00:43:34,970 --> 00:43:37,845
我认为我们需要迈出的下一步是

949
00:43:37,845 --> 00:43:42,590
专注于可访问性、易用性，

950
00:43:42,590 --> 00:43:45,820
并支持安全操作，

951
00:43:45,820 --> 00:43:49,715
以及任何其他应用程序或您的使用场景。

952
00:43:49,715 --> 00:43:53,185
但我认为这些大多数是主题

953
00:43:53,185 --> 00:43:55,710
对于这次会议来说，

954
00:43:55,710 --> 00:43:58,930
这些面板是重点。

955
00:43:59,510 --> 00:44:01,890
>> 这太好了，北川。

956
00:44:01,890 --> 00:44:04,120
谢谢。这是一个不可能完成的任务去覆盖

957
00:44:04,120 --> 00:44:06,570
所有的代码库在这么短的时间内。

958
00:44:06,570 --> 00:44:08,515
但感谢你所做的高尚努力。

959
00:44:08,515 --> 00:44:10,195
一个让你思考的非常简短的问题，

960
00:44:10,195 --> 00:44:12,390
为了简短回复你，如果可以的话。

961
00:44:12,390 --> 00:44:16,045
关于命名空间的一个问题进来了，

962
00:44:16,045 --> 00:44:18,300
我想知道是否有任何地方

963
00:44:18,300 --> 00:44:20,320
在NDN代码库中，

964
00:44:20,320 --> 00:44:22,385
在NDN代码库中，使用了标准的命名空间或

965
00:44:22,385 --> 00:44:26,040
标准的命名空间或

966
00:44:26,040 --> 00:44:27,480
已经过NIST或其他机构标准化的命名规范。

967
00:44:27,480 --> 00:44:30,410
经NIST或其他机构标准化。

968
00:44:30,410 --> 00:44:33,265
你对那个问题有什么反应？

969
00:44:33,265 --> 00:44:35,645
>> 命名规范？

970
00:44:35,645 --> 00:44:38,265
是否被正式标准化？

971
00:44:38,265 --> 00:44:40,160
>> 或任何使用

972
00:44:40,160 --> 00:44:42,650
标准化命名约定

973
00:44:42,650 --> 00:44:44,725
在NDN代码库中。

974
00:44:44,725 --> 00:44:49,075
>> 我不知道那些情况。

975
00:44:49,075 --> 00:44:50,215
>> 那就是我会给出的答案，

976
00:44:50,215 --> 00:44:51,925
我也会给出的。

977
00:44:51,925 --> 00:44:54,865
你的那个更具权威性。

978
00:44:54,865 --> 00:44:56,835
北川，非常感谢你……

979
00:44:56,835 --> 00:44:59,770
在如此短的时间内涵盖了这么多内容。

980
00:45:01,220 --> 00:45:03,320
我们现在有一个休息时间，对吧？

981
00:45:03,320 --> 00:45:06,050
在这个环节之后，我当然不会。

982
00:45:06,050 --> 00:45:07,820
想要少付钱

983
00:45:07,820 --> 00:45:11,910
我们这个环节的第三位也是最后一位演讲者。

984
00:45:12,070 --> 00:45:13,945
谢谢你，北川。

985
00:45:13,945 --> 00:45:16,285
请停止分享。

986
00:45:16,285 --> 00:45:20,030
马尔辛·斯波琴斯基，来自英特尔公司。

987
00:45:20,030 --> 00:45:22,190
将与我们分享

988
00:45:22,190 --> 00:45:24,565
他关于开发实用的思考

989
00:45:24,565 --> 00:45:25,830
端到端系统

990
00:45:25,830 --> 00:45:30,295
和使用NDN的应用程序。

991
00:45:30,295 --> 00:45:33,330
马尔辛，请开始。

992
00:45:33,330 --> 00:45:35,935
>> 你能看到我的屏幕吗？

993
00:45:35,935 --> 00:45:38,555
>> 是的，还没有全屏模式，

994
00:45:38,555 --> 00:45:41,040
但我们可以看到你正在分享。

995
00:45:42,610 --> 00:45:45,535
>> 那是全屏模式吗？

996
00:45:45,535 --> 00:45:49,685
不，不是。我再试一次。

997
00:45:49,685 --> 00:45:53,680
现在它显示的是正确的一个。

998
00:45:53,680 --> 00:45:57,180
我相信我应该能够分享。

999
00:45:57,180 --> 00:45:58,520
你能看到右边的屏幕吗？

1000
00:45:58,520 --> 00:46:01,715
>> 那很好。是的，可以。

1001
00:46:01,715 --> 00:46:06,015
>> 谢谢你，帕特里克。正如帕特里克所说，

1002
00:46:06,015 --> 00:46:08,485
欢迎来到第三场演讲。

1003
00:46:08,485 --> 00:46:10,910
我叫Marcin Spoczynski，我是

1004
00:46:10,910 --> 00:46:14,035
我是英特尔实验室的一名高级研究科学家。

1005
00:46:14,035 --> 00:46:15,950
我的背景是在云计算领域，

1006
00:46:15,950 --> 00:46:17,630
边缘编排爱好者，

1007
00:46:17,630 --> 00:46:19,405
内容系统，以及

1008
00:46:19,405 --> 00:46:21,225
应用程序架构。

1009
00:46:21,225 --> 00:46:23,160
我的话题会有一点儿不同

1010
00:46:23,160 --> 00:46:24,740
我的话题会有一点儿不同，我将会讨论

1011
00:46:24,740 --> 00:46:25,770
关于开发

1012
00:46:25,770 --> 00:46:28,505
这些实用的端到端系统

1013
00:46:28,505 --> 00:46:31,015
为了NDN或者与NDN一起。

1014
00:46:31,015 --> 00:46:32,815
在我开始之前，

1015
00:46:32,815 --> 00:46:34,415
我想要非常感谢

1016
00:46:34,415 --> 00:46:36,320
凯西亚妮，来自英特尔，

1017
00:46:36,320 --> 00:46:39,955
帮助我完成这个演示的人。

1018
00:46:39,955 --> 00:46:42,225
这里有一个小预告

1019
00:46:42,225 --> 00:46:44,050
我们将要探索我将要谈论的内容。

1020
00:46:44,050 --> 00:46:46,610
我们将要探索如何

1021
00:46:46,610 --> 00:46:49,515
我们将要探索如何使用并构建NDN系统，

1022
00:46:49,515 --> 00:46:51,195
不仅仅在我们的实验室里，

1023
00:46:51,195 --> 00:46:53,245
和我们面临的挑战。

1024
00:46:53,245 --> 00:46:56,150
我将从我们所说的什么是开始讲起

1025
00:46:56,150 --> 00:46:58,020
实用系统和使用

1026
00:46:58,020 --> 00:47:00,070
我们实验室正在研究的案例，

1027
00:47:00,070 --> 00:47:01,380
涉及到实际系统。

1028
00:47:01,380 --> 00:47:03,660
组件和端到端系统。

1029
00:47:03,660 --> 00:47:06,410
应用和最佳实践

1030
00:47:06,410 --> 00:47:09,325
以及我们在适用性中看到的差距。

1031
00:47:09,325 --> 00:47:10,860
让我从这里开始

1032
00:47:10,860 --> 00:47:13,285
那些实际的系统需求

1033
00:47:13,285 --> 00:47:15,270
将会定义需求

1034
00:47:15,270 --> 00:47:16,950
我们尝试去实现的那些系统

1035
00:47:16,950 --> 00:47:19,045
我们尝试去实现的那些系统，实施和LM是第三个定义套件。

1036
00:47:19,045 --> 00:47:21,025
我们尝试去实现的那些系统，实施和LM是第三个定义套件，连同软件一起。

1037
00:47:21,025 --> 00:47:23,530
连同软件一起。

1038
00:47:23,530 --> 00:47:25,345
在最底部，

1039
00:47:25,345 --> 00:47:26,530
我们真正需要的

1040
00:47:26,530 --> 00:47:28,575
是这个基础设施层，

1041
00:47:28,575 --> 00:47:32,760
它提供了完整的存储网络。

1042
00:47:32,760 --> 00:47:36,055
它还提供了操作系统。

1043
00:47:36,055 --> 00:47:38,535
接下来，我们是

1044
00:47:38,535 --> 00:47:41,215
接下来，我们是看到需求，这种供应是否清晰，

1045
00:47:41,215 --> 00:47:42,655
它应该包括

1046
00:47:42,655 --> 00:47:45,935
那些自动化工具，例如，

1047
00:47:45,935 --> 00:47:47,180
和Chef、Puppet，

1048
00:47:47,180 --> 00:47:48,895
和Ansible一起管理

1049
00:47:48,895 --> 00:47:52,085
与Ansible一起管理配置环境

1050
00:47:52,085 --> 00:47:53,680
应用程序类似于~!@#$%^&*()

1051
00:47:53,680 --> 00:47:55,520
一家帮助过的SPHY制造商

1052
00:47:55,520 --> 00:47:57,770
在基础设施中的配置。

1053
00:47:57,770 --> 00:48:01,070
例如，管理应用程序镜像

1054
00:48:01,070 --> 00:48:03,900
和部署应用程序。

1055
00:48:03,900 --> 00:48:06,400
我很抱歉。

1056
00:48:06,400 --> 00:48:09,040
另一个方面是提供的运行时环境。

1057
00:48:09,040 --> 00:48:10,615
提供的运行时环境。

1058
00:48:10,615 --> 00:48:12,505
您的应用程序运行的环境。

1059
00:48:12,505 --> 00:48:16,705
和它可能是一个容器镜像，在哪里

1060
00:48:16,705 --> 00:48:18,880
编排一同运行在

1061
00:48:18,880 --> 00:48:21,955
关联的存储然后是网络。

1062
00:48:21,955 --> 00:48:23,515
示例可能是

1063
00:48:23,515 --> 00:48:25,660
容器D和我们的根植工具，

1064
00:48:25,660 --> 00:48:27,295
和另一个广泛使用的

1065
00:48:27,295 --> 00:48:30,730
在容器引擎中。

1066
00:48:30,730 --> 00:48:32,755
像Kubernetes这样的工具，在容器引擎中。Docker Swarm，摘要

1067
00:48:32,755 --> 00:48:34,780
Docker Swarm，摘要

1068
00:48:34,780 --> 00:48:36,820
管理应用程序集群，

1069
00:48:36,820 --> 00:48:39,340
跨多个应用程序进行调度和编排

1070
00:48:39,340 --> 00:48:40,885
跨应用程序

1071
00:48:40,885 --> 00:48:43,855
在集群中多次发布。

1072
00:48:43,855 --> 00:48:46,030
当然，我们应该能够

1073
00:48:46,030 --> 00:48:48,010
构建服务和

1074
00:48:48,010 --> 00:48:49,480
构建微服务来

1075
00:48:49,480 --> 00:48:52,300
应用程序跨多种语言。

1076
00:48:52,300 --> 00:48:54,040
例如，Golang，

1077
00:48:54,040 --> 00:48:56,620
Python、C++或Rust，

1078
00:48:56,620 --> 00:48:58,840
控制振动的

1079
00:48:58,840 --> 00:49:02,380
应用程序的图像管理

1080
00:49:02,380 --> 00:49:03,430
跨越所有的

1081
00:49:03,430 --> 00:49:07,900
基础设施作为容器[听不清]。

1082
00:49:07,900 --> 00:49:09,520
基础设施的一个关键特征是

1083
00:49:09,520 --> 00:49:11,830
管理基础设施的能力包括监控和处理通信，

1084
00:49:11,830 --> 00:49:13,630
监控和处理通信，

1085
00:49:13,630 --> 00:49:16,330
和底层基础设施。

1086
00:49:16,330 --> 00:49:19,375
最后一个，我认为是最重要的一个

1087
00:49:19,375 --> 00:49:21,280
是关于采纳在

1088
00:49:21,280 --> 00:49:23,650
采纳新范式需要

1089
00:49:23,650 --> 00:49:27,505
一个重大的文化变革，在这种变革中，团队，

1090
00:49:27,505 --> 00:49:29,800
他们再也不能在这些独立的孤岛中工作

1091
00:49:29,800 --> 00:49:33,520
他们再也不能在这些独立的孤岛中工作，just

1092
00:49:33,520 --> 00:49:37,120
发展这个系统的这一小部分，

1093
00:49:37,120 --> 00:49:39,760
但这种端到端的自动化

1094
00:49:39,760 --> 00:49:42,235
和软件交付管道，

1095
00:49:42,235 --> 00:49:44,469
这仅仅是可能的

1096
00:49:44,469 --> 00:49:46,045
当出现增长时，

1097
00:49:46,045 --> 00:49:49,360
研究人员之间的合作，

1098
00:49:49,360 --> 00:49:53,150
我们把所有商业伙伴和用户都纳入考虑时，

1099
00:49:53,400 --> 00:49:56,200
our business partners and users into consideration, 当我们把所有商业伙伴和用户都纳入考虑时，

1100
00:49:56,200 --> 00:49:58,930
我们得到这些零碎的部分，或者我们得到这个完整的。

1101
00:49:58,930 --> 00:50:01,030
端到端的设置和适配

1102
00:50:01,030 --> 00:50:03,730
为了适应更多人的使用场景。

1103
00:50:03,730 --> 00:50:06,550
但在此之前，让我们稍微谈谈

1104
00:50:06,550 --> 00:50:07,690
我们稍微谈谈

1105
00:50:07,690 --> 00:50:10,570
我们稍微谈谈理想系统应该是什么样的。

1106
00:50:10,570 --> 00:50:12,580
首先，当然是

1107
00:50:12,580 --> 00:50:14,635
系统必须简单。

1108
00:50:14,635 --> 00:50:18,310
没有可见的筒仓，

1109
00:50:18,310 --> 00:50:19,960
允许区分每一个

1110
00:50:19,960 --> 00:50:22,060
将系统命令然后映射

1111
00:50:22,060 --> 00:50:23,740
将其映射到一个要求上，并且

1112
00:50:23,740 --> 00:50:26,200
负责仅仅一个工作的风险。

1113
00:50:26,200 --> 00:50:29,155
下一点是要足够通用，

1114
00:50:29,155 --> 00:50:31,900
应用于多种场景中，

1115
00:50:31,900 --> 00:50:33,609
支持不同的需求

1116
00:50:33,609 --> 00:50:36,530
针对每个主机，例如，

1117
00:50:36,690 --> 00:50:40,270
针对学习策略或缓存。

1118
00:50:40,270 --> 00:50:43,720
下一个适应性跟随是

1119
00:50:43,720 --> 00:50:46,210
要有足够的规模来支持

1120
00:50:46,210 --> 00:50:49,795
异构架构以便进行整合

1121
00:50:49,795 --> 00:50:51,160
进入不同种类的

1122
00:50:51,160 --> 00:50:53,470
[无法听清的内容]。

1123
00:50:53,470 --> 00:50:58,180
Linux、Windows 或 RISC-V 以及 x86。

1124
00:50:58,180 --> 00:51:00,100
此外，关于所有的

1125
00:51:00,100 --> 00:51:01,765
微系统应该支持的所有事物是完全可预测的行为。

1126
00:51:01,765 --> 00:51:05,304
支持是一种完全可预测的行为。

1127
00:51:05,304 --> 00:51:06,940
成为一种完全的衡量。

1128
00:51:06,940 --> 00:51:10,585
即使在那些非常动态的场景中，

1129
00:51:10,585 --> 00:51:12,820
我应该知道什么类型的

1130
00:51:12,820 --> 00:51:14,740
我应该知道什么类型的将采取的行动。

1131
00:51:14,740 --> 00:51:16,030
将基于

1132
00:51:16,030 --> 00:51:18,910
应用逻辑或网络流量，

1133
00:51:18,910 --> 00:51:22,390
这也取决于使用场景。

1134
00:51:22,390 --> 00:51:25,990
当谈到使用场景时，

1135
00:51:25,990 --> 00:51:29,710
我想强调两个使用案例，

1136
00:51:29,710 --> 00:51:31,645
我们支持的

1137
00:51:31,645 --> 00:51:33,970
我们的实验室开发流程。

1138
00:51:33,970 --> 00:51:36,595
首先是工业物联网

1139
00:51:36,595 --> 00:51:39,220
当新应用程序需要

1140
00:51:39,220 --> 00:51:41,050
高度灵活性来自

1141
00:51:41,050 --> 00:51:42,430
网络允许

1142
00:51:42,430 --> 00:51:43,750
提供组装服务

1143
00:51:43,750 --> 00:51:46,015
自主飞行，

1144
00:51:46,015 --> 00:51:48,250
重新配置网络接口，

1145
00:51:48,250 --> 00:51:50,080
允许不仅可以

1146
00:51:50,080 --> 00:51:51,955
支持最佳网络软件，

1147
00:51:51,955 --> 00:51:53,770
但也为了带来支持

1148
00:51:53,770 --> 00:51:57,775
确定性以太网和WiFi以实现

1149
00:51:57,775 --> 00:52:00,175
及时交付

1150
00:52:00,175 --> 00:52:02,320
感测数据和应用

1151
00:52:02,320 --> 00:52:04,720
需要用于软件PLC。

1152
00:52:04,720 --> 00:52:07,240
我们看到了大趋势在

1153
00:52:07,240 --> 00:52:10,840
我们看到了大趋势在全网自主性的方向发展, those industrial application started with ~!@#$%^&*()

1154
00:52:10,840 --> 00:52:14,800
这些工业应用起始于~!@#$%^&*()

1155
00:52:14,800 --> 00:52:18,595
工业4.0和软件化

1156
00:52:18,595 --> 00:52:21,160
工厂车间应用。

1157
00:52:21,160 --> 00:52:24,340
第二个用例是游戏领域，

1158
00:52:24,340 --> 00:52:25,690
我们正在查看

1159
00:52:25,690 --> 00:52:27,475
我们正在查看两种应用模式。

1160
00:52:27,475 --> 00:52:30,790
第一个是WebRTC和

1161
00:52:30,790 --> 00:52:33,910
计算功能的动态泛滥

1162
00:52:33,910 --> 00:52:36,055
和分布式渲染，

1163
00:52:36,055 --> 00:52:38,380
与分布式渲染相关的场景部分

1164
00:52:38,380 --> 00:52:39,955
与分布式渲染相关的场景部分

1165
00:52:39,955 --> 00:52:44,750
可以拆分独立处理。

1166
00:52:44,780 --> 00:52:47,680
我们正在看到很多~!@#$%^&*()

1167
00:52:47,680 --> 00:52:50,305
在最后，两种情况都存在机会。

1168
00:52:50,305 --> 00:52:52,600
让我们来看看这个系统并且

1169
00:52:52,600 --> 00:52:54,970
让我们来看看这个系统并且在我们的测试平台上部署它，

1170
00:52:54,970 --> 00:52:58,030
可以使这个端到端平台实现

1171
00:52:58,030 --> 00:53:00,715
在它们被用于用例之前。

1172
00:53:00,715 --> 00:53:03,595
让我们从应用层开始。

1173
00:53:03,595 --> 00:53:05,305
当我们在支持

1174
00:53:05,305 --> 00:53:07,060
多种不同的应用程序

1175
00:53:07,060 --> 00:53:09,175
从工业控制，

1176
00:53:09,175 --> 00:53:10,960
这些是软件程序，

1177
00:53:10,960 --> 00:53:12,610
可编程逻辑控制器，

1178
00:53:12,610 --> 00:53:15,325
简而言之，这些可编程逻辑控制器

1179
00:53:15,325 --> 00:53:17,980
with NDN (Named Data Networking) support together in

1180
00:53:17,980 --> 00:53:20,470
与能够暴露的传感器并驾齐驱

1181
00:53:20,470 --> 00:53:23,830
收集了我们分布式集群上的数据。

1182
00:53:23,830 --> 00:53:25,855
游戏用例的设置，

1183
00:53:25,855 --> 00:53:28,510
我们使用Pion WebRTC [无法听清]

1184
00:53:28,510 --> 00:53:31,540
启用了NDN支持。

1185
00:53:31,540 --> 00:53:34,315
我们还启用了跟踪功能。

1186
00:53:34,315 --> 00:53:36,340
在遥测支持使用中

1187
00:53:36,340 --> 00:53:38,785
充分利用IP服务来

1188
00:53:38,785 --> 00:53:41,080
理解足迹分布情况

1189
00:53:41,080 --> 00:53:43,540
提到的应用程序，

1190
00:53:43,540 --> 00:53:45,970
能够进行比较

1191
00:53:45,970 --> 00:53:49,705
相同的应用程序及其IP版本。

1192
00:53:49,705 --> 00:53:51,415
我喜欢那些应用程序，

1193
00:53:51,415 --> 00:53:54,340
我部署了Kubernetes接口。

1194
00:53:54,340 --> 00:53:55,630
展望未来

1195
00:53:55,630 --> 00:53:57,430
了解该功能的情况

1196
00:53:57,430 --> 00:54:00,385
DPDK和SPDK的API。

1197
00:54:00,385 --> 00:54:02,290
此外，如果情况是这样的话，

1198
00:54:02,290 --> 00:54:04,300
工业应用领域，

1199
00:54:04,300 --> 00:54:05,800
交通和一些

1200
00:54:05,800 --> 00:54:07,780
管理功能可以使用

1201
00:54:07,780 --> 00:54:09,655
这个OPC UA方案

1202
00:54:09,655 --> 00:54:12,265
下探至网络层，

1203
00:54:12,265 --> 00:54:14,545
通过这些CNI插件，

1204
00:54:14,545 --> 00:54:17,155
以及不同类型的NFDs，

1205
00:54:17,155 --> 00:54:19,990
我们能够将框架集成到

1206
00:54:19,990 --> 00:54:23,560
我们能够将框架集成到那些在边缘类型的Kubernetes上，

1207
00:54:23,560 --> 00:54:24,790
我们能够将框架集成到那些在边缘类型的Kubernetes上，设备和高性能服务器内部。

1208
00:54:24,790 --> 00:54:27,985
服务器内部的高性能。

1209
00:54:27,985 --> 00:54:30,865
~!@#$%^&*()

1210
00:54:30,865 --> 00:54:33,370
是我们将看到如何

1211
00:54:33,370 --> 00:54:36,670
特定软件可以用于

1212
00:54:36,670 --> 00:54:37,810
在典型的工业控制场景中

1213
00:54:37,810 --> 00:54:40,105
在典型的工业控制场景中，

1214
00:54:40,105 --> 00:54:43,180
在典型的工业控制场景中，工厂控制层支持不同的使用案例。

1215
00:54:43,180 --> 00:54:45,490
支持并适用于不同的使用案例。

1216
00:54:45,490 --> 00:54:47,095
和使用模型。

1217
00:54:47,095 --> 00:54:49,690
例如，典型的在使用模型的工业场景中，

1218
00:54:49,690 --> 00:54:51,010
一个工业场景，

1219
00:54:51,010 --> 00:54:53,170
我们将会看到这个工厂的云端，

1220
00:54:53,170 --> 00:54:55,600
我们将会看到这个工厂的云端，大部分的分析工作会发生在这里，并且是由

1221
00:54:55,600 --> 00:54:56,620
和由...提供动力

1222
00:54:56,620 --> 00:54:58,660
高端服务器上传的

1223
00:54:58,660 --> 00:55:00,445
类似于用户界面框架

1224
00:55:00,445 --> 00:55:03,700
DPDK或SPDK等。

1225
00:55:03,700 --> 00:55:06,850
但由于功耗低和

1226
00:55:06,850 --> 00:55:08,530
典型的边缘设备运行

1227
00:55:08,530 --> 00:55:10,435
项目上和典型的，

1228
00:55:10,435 --> 00:55:14,020
也许我们正在使用的是i7、i5处理器

1229
00:55:14,020 --> 00:55:16,150
但又有一个新的NFD一起出现了。

1230
00:55:16,150 --> 00:55:18,669
伴随着病毒和网络支持。

1231
00:55:18,669 --> 00:55:21,970
在现有情况下也值得一提的是，

1232
00:55:21,970 --> 00:55:23,560
我们仍在使用典型的

1233
00:55:23,560 --> 00:55:24,925
这种风格的建筑，

1234
00:55:24,925 --> 00:55:27,145
工厂云正在处理

1235
00:55:27,145 --> 00:55:29,725
大多数的编排功能。

1236
00:55:29,725 --> 00:55:32,560
但在启用OPC UA平面方面，

1237
00:55:32,560 --> 00:55:33,820
我们希望能够启用

1238
00:55:33,820 --> 00:55:35,500
全分布式的方式

1239
00:55:35,500 --> 00:55:37,690
管理资源的方式，

1240
00:55:37,690 --> 00:55:41,965
应用程序和硬件资源。

1241
00:55:41,965 --> 00:55:45,130
让我们放大看一下应用程序的

1242
00:55:45,130 --> 00:55:47,605
我们花一点时间来展示我们如何

1243
00:55:47,605 --> 00:55:49,450
实际上为了开发应用程序，我们花一点时间来展示我们如何使用我们的测试平台来启用

1244
00:55:49,450 --> 00:55:51,850
我们的测试平台来启用

1245
00:55:51,850 --> 00:55:54,580
将这些用例结合起来

1246
00:55:54,580 --> 00:55:57,230
将这些用例结合起来，与这个实际情景一起，在呈现之前，申请。

1247
00:55:59,190 --> 00:56:02,440
在呈现之前，申请。

1248
00:56:02,440 --> 00:56:05,170
应该是NDN的驱动因素，

1249
00:56:05,170 --> 00:56:08,380
那些缓存策略以及我们如何

1250
00:56:08,380 --> 00:56:11,140
将数据高效地转发

1251
00:56:11,140 --> 00:56:12,400
取决于业务需求

1252
00:56:12,400 --> 00:56:14,065
取决于业务需求和应用。

1253
00:56:14,065 --> 00:56:16,255
对于大部分代码来说，

1254
00:56:16,255 --> 00:56:18,670
我们正在使用那些Golang和...

1255
00:56:18,670 --> 00:56:21,955
用于最先进应用的Rust,

1256
00:56:21,955 --> 00:56:23,980
和自动化代码形式

1257
00:56:23,980 --> 00:56:26,350
之前的幻灯片已经用Python处理。

1258
00:56:26,350 --> 00:56:27,610
我们开发了份额的

1259
00:56:27,610 --> 00:56:29,260
我们开发了份额的应用程序以启用它提到的用例

1260
00:56:29,260 --> 00:56:30,775
它提到了用例

1261
00:56:30,775 --> 00:56:33,040
像一个软件PLC

1262
00:56:33,040 --> 00:56:35,770
与NDN支持一起，

1263
00:56:35,770 --> 00:56:39,850
也是感官数据应用程序，它们

1264
00:56:39,850 --> 00:56:44,035
可以收集和积累感官数据。

1265
00:56:44,035 --> 00:56:47,020
对于我们之前提到的游戏，

1266
00:56:47,020 --> 00:56:48,715
Pion WebRTC Golang

1267
00:56:48,715 --> 00:56:50,710
具有部分NDN支持，

1268
00:56:50,710 --> 00:56:53,415
我们计划将其完全整合进NDN中。

1269
00:56:53,415 --> 00:56:55,380
我们计划将其完全整合进

1270
00:56:55,380 --> 00:56:57,810
我们计划将其完全整合进我们的测试环境中，以提供完整的集成。

1271
00:56:57,810 --> 00:56:59,730
我们计划将其完全整合进我们的测试环境中，以提供完整的集成，因此它被部署为一个服务在NFD与Kubernetes中。

1272
00:56:59,730 --> 00:57:01,860
我们因此将其部署为一个服务在

1273
00:57:01,860 --> 00:57:03,000
我们因此将其部署为一个服务在NDN的情况下，或者也可以与另一个NAD一起使用。

1274
00:57:03,000 --> 00:57:07,299
我们因此可以将其与DPDK一起部署，或者甚至可以与另一个NAD一起使用。

1275
00:57:07,299 --> 00:57:11,805
我们的目标之一是要有

1276
00:57:11,805 --> 00:57:13,980
应用部署的适用性

1277
00:57:13,980 --> 00:57:17,775
应用在IP和NDN中，

1278
00:57:17,775 --> 00:57:20,790
让我们稍微看一下实际上我们是如何

1279
00:57:20,790 --> 00:57:22,500
开发应用程序以便

1280
00:57:22,500 --> 00:57:24,544
用于我们的测试平台。

1281
00:57:24,544 --> 00:57:28,180
为此，我们开发了一个小型框架

1282
00:57:28,180 --> 00:57:29,935
当我们划分应用程序时

1283
00:57:29,935 --> 00:57:31,585
通常分为四层。

1284
00:57:31,585 --> 00:57:33,280
通常分为四层。第一层是指

1285
00:57:33,280 --> 00:57:35,635
处理应用程序的逻辑，

1286
00:57:35,635 --> 00:57:37,795
处理应用程序的逻辑，大多是特定于程序的代码，和可编程逻辑控制器以及

1287
00:57:37,795 --> 00:57:40,120
可编程逻辑控制器和

1288
00:57:40,120 --> 00:57:42,505
可编程逻辑控制器、视频和分析。

1289
00:57:42,505 --> 00:57:44,650
第二个是一个协议

1290
00:57:44,650 --> 00:57:46,540
翻译库。

1291
00:57:46,540 --> 00:57:50,035
作为其中一些库，

1292
00:57:50,035 --> 00:57:51,940
我们需要有那些层在

1293
00:57:51,940 --> 00:57:54,235
我们需要有那些层在，特定的协议是，not supported by application.

1294
00:57:54,235 --> 00:57:56,830
不受应用程序支持。

1295
00:57:56,830 --> 00:57:59,980
下一个是数据映射器，

1296
00:57:59,980 --> 00:58:02,785
当我们在映射那些地址空间时

1297
00:58:02,785 --> 00:58:05,830
从NDN到其他格式，例如，

1298
00:58:05,830 --> 00:58:09,010
mDNS等或在consul上。

1299
00:58:09,010 --> 00:58:11,500
这个模型目前处于

1300
00:58:11,500 --> 00:58:12,190
我们正在查看

1301
00:58:12,190 --> 00:58:13,945
理论上是硬编码的，

1302
00:58:13,945 --> 00:58:15,490
但我们很希望看到

1303
00:58:15,490 --> 00:58:17,065
能即时翻译的图书馆

1304
00:58:17,065 --> 00:58:18,985
能即时翻译

1305
00:58:18,985 --> 00:58:23,555
将动态DNS空间映射到NDN命名空间。

1306
00:58:23,555 --> 00:58:27,400
另一个是网络。

1307
00:58:27,400 --> 00:58:30,040
通过NDN发送特定代码，

1308
00:58:30,040 --> 00:58:31,930
TCP或Modbus

1309
00:58:31,930 --> 00:58:34,015
在工业应用场景中，

1310
00:58:34,015 --> 00:58:36,100
我们能够插入并且

1311
00:58:36,100 --> 00:58:38,890
我们能够插入并且与特定的网络库集成。

1312
00:58:38,890 --> 00:58:41,230
这个框架让我们思考

1313
00:58:41,230 --> 00:58:43,660
关于软件本身而非如何

1314
00:58:43,660 --> 00:58:45,190
应用

1315
00:58:45,190 --> 00:58:49,610
特定网络技术应用于用例。

1316
00:58:50,200 --> 00:58:54,110
我们假设一个端到端的系统。

1317
00:58:54,110 --> 00:58:55,200
我们拥有的并不是

1318
00:58:55,200 --> 00:58:56,935
绝对不是我们所想象的。

1319
00:58:56,935 --> 00:59:00,999
大多数的众多组件

1320
00:59:00,999 --> 00:59:03,685
仍然远非完美，

1321
00:59:03,685 --> 00:59:06,355
但我们看到很多我们所存在的差距，

1322
00:59:06,355 --> 00:59:09,760
将允许看到那里的地址。

1323
00:59:10,010 --> 00:59:13,905
这是第一个迁移框架，

1324
00:59:13,905 --> 00:59:15,530
无法给出的哪一个

1325
00:59:15,530 --> 00:59:17,655
特定的业务逻辑，

1326
00:59:17,655 --> 00:59:21,355
翻译简易插件和库，

1327
00:59:21,355 --> 00:59:23,720
为软件添加一个偏好标签。

1328
00:59:23,720 --> 00:59:25,465
语言发展

1329
00:59:25,465 --> 00:59:27,735
更现代的语言，如Rust，

1330
00:59:27,735 --> 00:59:30,175
或者甚至更多地支持Golang，

1331
00:59:30,175 --> 00:59:31,755
我们已经拥有的。

1332
00:59:31,755 --> 00:59:34,560
此外，我们还想看看如何

1333
00:59:34,560 --> 00:59:37,230
特定的那些TCP问题能够

1334
00:59:37,230 --> 00:59:39,705
在年底时得到解决，同时使用像WebRTC和TCP这样的协议。

1335
00:59:39,705 --> 00:59:43,500
使用像WebRTC和TCP这样的协议。

1336
00:59:43,500 --> 00:59:47,490
Using protocols like WebRTC and TCP. Integration and automation of enabling.

1337
00:59:47,490 --> 00:59:51,000
集成和自动化

1338
00:59:51,000 --> 00:59:53,280
部署与集成相连

1339
00:59:53,280 --> 00:59:58,650
通过这个Kubernetes网络登录。

1340
00:59:58,650 --> 01:00:00,480
另一种方式在哪里

1341
01:00:00,480 --> 01:00:03,780
最受欢迎的编排器

1342
01:00:03,780 --> 01:00:05,610
将会非常有益。

1343
01:00:05,610 --> 01:00:10,130
此外，增强

1344
01:00:10,130 --> 01:00:12,630
现有的多元宇宙的支持

1345
01:00:12,630 --> 01:00:15,735
为了使其在分布之前制作好。

1346
01:00:15,735 --> 01:00:18,630
它可以从任何点进行更新，以便在分布之前制作好，以完全分布的方式在网络中。

1347
01:00:18,630 --> 01:00:24,415
它以完全分布的方式在网络中。

1348
01:00:24,415 --> 01:00:27,750
即使其中一个节点离线

1349
01:00:27,750 --> 01:00:29,215
或者你会有一段时间

1350
01:00:29,215 --> 01:00:32,070
下行将会有巨大的缓存。

1351
01:00:32,390 --> 01:00:36,300
为了总结，NDN开发者

1352
01:00:36,300 --> 01:00:38,845
在创建过程中做了非常了不起的工作

1353
01:00:38,845 --> 01:00:41,130
~!@#$%^&*()

1354
01:00:41,130 --> 01:00:43,075
的和其他伟大作品

1355
01:00:43,075 --> 01:00:45,365
的软件和架构。

1356
01:00:45,365 --> 01:00:47,015
~!@#$%^&*()

1357
01:00:47,015 --> 01:00:50,315
机遇在这个NDN中？

1358
01:00:50,315 --> 01:00:53,925
然而，正如我们所理解的那样

1359
01:00:53,925 --> 01:00:57,360
API 仍将被长期使用。

1360
01:00:57,360 --> 01:01:00,680
我们需要这个，向后兼容的可能性。

1361
01:01:00,680 --> 01:01:01,980
的可移植性，

1362
01:01:01,980 --> 01:01:03,975
和PowerShell的兼容性。

1363
01:01:03,975 --> 01:01:06,565
它适用于所有项目以

1364
01:01:06,565 --> 01:01:07,995
可以轻松集成

1365
01:01:07,995 --> 01:01:09,595
集成到软件框架中。

1366
01:01:09,595 --> 01:01:11,845
我们看到了很多需求

1367
01:01:11,845 --> 01:01:14,560
我们对API的标准化

1368
01:01:14,560 --> 01:01:17,155
面向用户的

1369
01:01:17,155 --> 01:01:20,440
软件的碎片化。

1370
01:01:20,440 --> 01:01:22,300
这是件大事。

1371
01:01:22,300 --> 01:01:25,555
我们喜欢看到不同的方法，

1372
01:01:25,555 --> 01:01:27,995
但我们确实相信面向开发者和用户的界面应该是一致的。

1373
01:01:27,995 --> 01:01:31,775
开发者和用户应该是一致的。

1374
01:01:31,775 --> 01:01:33,300
另一个观点是

1375
01:01:33,300 --> 01:01:35,730
我们看到了很多机会在~!@#$%^&*()

1376
01:01:35,730 --> 01:01:38,695
卸载存储网络和计算资源

1377
01:01:38,695 --> 01:01:40,770
要与...竞争

1378
01:01:40,770 --> 01:01:43,120
要与其他网络范式竞争。

1379
01:01:43,120 --> 01:01:48,085
我们已经开始使用DPDK和SPDK。

1380
01:01:48,085 --> 01:01:49,630
然而，我们喜欢

1381
01:01:49,630 --> 01:01:51,990
看到更现代的方法

1382
01:01:51,990 --> 01:01:55,524
SBRT 与 Linux 内核相关

1383
01:01:55,524 --> 01:01:58,070
以及对此的扩展。

1384
01:01:58,070 --> 01:02:00,310
最后但同样重要的是，

1385
01:02:00,310 --> 01:02:03,295
最后但同样重要的是，真正理解开发者们的需求，他们的需求实际上来自不同的地方。

1386
01:02:03,295 --> 01:02:05,180
实际上来自不同的地方

1387
01:02:05,180 --> 01:02:06,960
有着不同的需求。

1388
01:02:06,960 --> 01:02:09,635
在开发软件时，我们需要深入思考它们。

1389
01:02:09,635 --> 01:02:12,975
我们需要深入思考它们。

1390
01:02:12,975 --> 01:02:16,930
我认为那是我的最后一张幻灯片。

1391
01:02:16,930 --> 01:02:20,360
我不知道我们有多少时间，但是。

1392
01:02:20,360 --> 01:02:22,075
谢谢你，Marcin。

1393
01:02:22,075 --> 01:02:24,840
我们有一两分钟时间提问。

1394
01:02:24,840 --> 01:02:27,325
你做得很好，保持了目标不偏离。

1395
01:02:27,325 --> 01:02:30,730
一个通过Slack提出的问题。

1396
01:02:30,730 --> 01:02:32,845
具体来说，在最后这里，

1397
01:02:32,845 --> 01:02:34,170
你提出了一些问题

1398
01:02:34,170 --> 01:02:35,635
需要进一步处理的。

1399
01:02:35,635 --> 01:02:36,865
需要进一步处理的。

1400
01:02:36,865 --> 01:02:39,480
认为特别重要的

1401
01:02:39,480 --> 01:02:41,250
对研究社区来说同样重要的

1402
01:02:41,250 --> 01:02:43,785
反对商业参与者吗？

1403
01:02:43,785 --> 01:02:45,090
你认为有一个或两个你最...

1404
01:02:45,090 --> 01:02:46,245
我认为将会是最~!@#$%^&*()

1405
01:02:46,245 --> 01:02:47,760
对研究具有相关性

1406
01:02:47,760 --> 01:02:49,865
社区采取行动？

1407
01:02:49,865 --> 01:02:52,230
我确信其中一个

1408
01:02:52,230 --> 01:02:56,205
非常重要的事情

1409
01:02:56,205 --> 01:02:58,470
关于这个集成和~!@#$%^&*()

1410
01:02:58,470 --> 01:03:01,975
API的稳定性。

1411
01:03:01,975 --> 01:03:04,430
它将提供巨大的机会

1412
01:03:04,430 --> 01:03:06,660
为开发者尝试的机会。

1413
01:03:06,660 --> 01:03:08,640
尤其是那真是很多

1414
01:03:08,640 --> 01:03:10,950
那些刚刚开始熟悉边缘计算框架的开发者

1415
01:03:10,950 --> 01:03:13,990
正在开始熟悉边缘计算框架。

1416
01:03:13,990 --> 01:03:17,290
如果NDN将成为其中一种

1417
01:03:17,290 --> 01:03:19,555
那么新的可能方式

1418
01:03:19,555 --> 01:03:24,640
的开发应用程序，

1419
01:03:24,640 --> 01:03:27,520
肯定会聚集~!@#$%^&*()

1420
01:03:27,520 --> 01:03:29,980
这些开发者的许多利益。

1421
01:03:29,980 --> 01:03:32,745
我们看到了很多机会，

1422
01:03:32,745 --> 01:03:35,970
尤其是来自我们的业务部门。

1423
01:03:38,840 --> 01:03:41,830
>> 我觉得我明白了。

1424
01:03:41,840 --> 01:03:44,470
关于NDN传输的进一步问题

1425
01:03:44,470 --> 01:03:47,800
关于NDN传输

1426
01:03:47,800 --> 01:03:50,110
您所描述的这些应用程序。

1427
01:03:50,110 --> 01:03:53,630
您通常是在替换

1428
01:03:53,630 --> 01:03:57,000
HTTP或TCP与NDN相比如何？

1429
01:03:57,000 --> 01:03:59,275
我通常是在替换

1430
01:03:59,275 --> 01:04:02,070
在这个时刻的TCP。

1431
01:04:02,070 --> 01:04:08,294
在某些情况下，例如，

1432
01:04:08,294 --> 01:04:09,665
在OPC离开的情况下，

1433
01:04:09,665 --> 01:04:14,425
我们正在替换TCP和HTTP。

1434
01:04:14,425 --> 01:04:16,880
它取决于使用场景。

1435
01:04:16,880 --> 01:04:21,055
我认为在这种情况下，我们需要

1436
01:04:21,055 --> 01:04:23,570
我们需要碎片化处理，因为每一个

1437
01:04:23,570 --> 01:04:24,870
我们需要碎片化处理，因为每一个使用案例和应用场景will require different,

1438
01:04:24,870 --> 01:04:26,730
approaches, strategies, or technologies, and especially that we need to be

1439
01:04:26,730 --> 01:04:29,610
与一些现有的标准保持一致。

1440
01:04:29,610 --> 01:04:33,100
符合一些现有的标准。

1441
01:04:33,100 --> 01:04:36,210
So the search for ~!@#$%^&*()

1442
01:04:36,210 --> 01:04:39,720
护照确实很有用。

1443
01:04:40,700 --> 01:04:46,300
>> 很好。

1444
01:04:46,300 --> 01:04:50,100
好吧，问题开始纷飞了。

1445
01:04:50,100 --> 01:04:52,660
进入Slack聊天室吧。

1446
01:04:52,660 --> 01:04:56,400
现在是我们的休息时间。

1447
01:04:56,400 --> 01:05:00,215
但显然，我们都有更多的时间

1448
01:05:00,215 --> 01:05:02,610
提出问题并回应

1449
01:05:02,610 --> 01:05:05,395
那些在Slack聊天室中的问题。

1450
01:05:05,395 --> 01:05:08,430
这些确实延续了对话

1451
01:05:08,430 --> 01:05:10,375
那里，我希望你已经看到了

1452
01:05:10,375 --> 01:05:12,330
Before the dawn

1453
01:05:12,330 --> 01:05:14,905
这个网络会议聊天窗口

1454
01:05:14,905 --> 01:05:17,590
已经发布了加入Slack聊天室的链接。

1455
01:05:17,590 --> 01:05:20,775
如果你还没有这样做，请去做。

1456
01:05:20,775 --> 01:05:22,740
Marci，非常感谢你

1457
01:05:22,740 --> 01:05:24,180
为一个非常有趣和。

1458
01:05:24,180 --> 01:05:25,110
谢谢你，帕特里克。

1459
01:05:25,110 --> 01:05:27,360
陈述。我有几个问题。

1460
01:05:27,360 --> 01:05:28,700
我本来打算问自己，

1461
01:05:28,700 --> 01:05:30,510
但不幸的是，我一个问题也没能问出来。

1462
01:05:30,510 --> 01:05:31,740
因为有一些有趣的观点。

1463
01:05:31,740 --> 01:05:33,520
将文件也放在这里。

1464
01:05:33,520 --> 01:05:38,500
那么，我们现在开始休息。

1465
01:05:38,500 --> 01:05:40,570
我们将休息10分钟。

1466
01:05:40,570 --> 01:05:42,015
我们将在稍后继续。

1467
01:05:42,015 --> 01:05:43,910
时针过了整点15分钟

1468
01:05:43,910 --> 01:05:45,190
对于第二个环节，

1469
01:05:45,190 --> 01:05:48,265
专注于应用程序开发，

1470
01:05:48,265 --> 01:05:50,670
这是一个非常合适的后续讨论内容。

1471
01:05:50,670 --> 01:05:51,780
这是一个非常合适的后续讨论内容，因为许多这些命名空间的话题，对于这次对话来说是一个很好的延续。

1472
01:05:51,780 --> 01:05:55,615
因为许多这些命名空间的话题，

1473
01:05:55,615 --> 01:05:56,700
命名选择，

1474
01:05:56,700 --> 01:05:57,775
和架构上的权衡，

1475
01:05:57,775 --> 01:05:59,130
和更广泛的采用将会

1476
01:05:59,130 --> 01:06:01,150
也将在那个会议中考虑。

1477
01:06:01,150 --> 01:06:02,400
Lofti，还有什么

1478
01:06:02,400 --> 01:06:03,175
你还有什么想要补充的吗？

1479
01:06:03,175 --> 01:06:04,605
我看到你已经打开了视频。

1480
01:06:04,605 --> 01:06:07,500
不，就这样。我们有10分钟的休息时间。

1481
01:06:07,500 --> 01:06:09,910
我们将在11点15分回来。

1482
01:06:10,930 --> 01:06:13,425
非常感谢你，帕特里克。

1483
01:06:13,425 --> 01:06:13,810
好的。

1484
01:06:13,810 --> 01:06:16,150
>> 你们都要走了。谢谢。

