1
00:00:00,350 --> 00:00:04,380
>> Welcome
everyone to this

2
00:00:04,380 --> 00:00:06,600
year's named

3
00:00:06,600 --> 00:00:08,895
data networking
community meeting.

4
00:00:08,895 --> 00:00:12,135
My name is Lotfi
Benmohamed and I'm with

5
00:00:12,135 --> 00:00:15,795
NIST communication's
technology laboratory

6
00:00:15,795 --> 00:00:17,700
and it's good that

7
00:00:17,700 --> 00:00:19,830
this year we're
finally back

8
00:00:19,830 --> 00:00:21,900
face-to-face after

9
00:00:21,900 --> 00:00:23,340
the last two NDN community

10
00:00:23,340 --> 00:00:24,675
meetings were
fully remote.

11
00:00:24,675 --> 00:00:28,320
So this time it's
a hybrid event,

12
00:00:28,320 --> 00:00:32,160
and the last
registration counts as

13
00:00:32,160 --> 00:00:34,560
roughly one
third in-person

14
00:00:34,560 --> 00:00:37,180
and two thirds remote.

15
00:00:40,940 --> 00:00:43,820
This one is just
a safety slide,

16
00:00:43,820 --> 00:00:45,920
I guess it was sent
to you already.

17
00:00:45,920 --> 00:00:47,420
It shows the layout of

18
00:00:47,420 --> 00:00:49,165
the space that we are in,

19
00:00:49,165 --> 00:00:52,770
and the different
emergency exits.

20
00:00:53,050 --> 00:00:56,750
So we have a full
two day agenda

21
00:00:56,750 --> 00:00:59,945
with three panels and

22
00:00:59,945 --> 00:01:02,710
five presentation
sessions,

23
00:01:02,710 --> 00:01:05,690
and we have compiled

24
00:01:05,690 --> 00:01:07,040
all the abstracts for

25
00:01:07,040 --> 00:01:10,160
the panels and the
presentations,

26
00:01:10,160 --> 00:01:12,875
and we have posted them
on the Event page.

27
00:01:12,875 --> 00:01:15,680
As you can see from
this screen capture,

28
00:01:15,680 --> 00:01:16,940
there's a link to

29
00:01:16,940 --> 00:01:20,470
the full agenda and the
link to the abstract.

30
00:01:20,470 --> 00:01:23,330
In terms of
presentation sessions,

31
00:01:23,330 --> 00:01:27,005
we have 20 presentations.

32
00:01:27,005 --> 00:01:29,210
Twenty minutes
are allocated

33
00:01:29,210 --> 00:01:29,950
for each one of them,

34
00:01:29,950 --> 00:01:31,280
and we ask the speakers to

35
00:01:31,280 --> 00:01:32,975
limit their
presentation to

36
00:01:32,975 --> 00:01:35,330
16 minutes to allow for

37
00:01:35,330 --> 00:01:38,890
Q&A and discussions
roughly four minutes.

38
00:01:38,890 --> 00:01:41,150
This year presenters and

39
00:01:41,150 --> 00:01:42,829
panelists come
from academia,

40
00:01:42,829 --> 00:01:45,200
government research,
and industry.

41
00:01:45,200 --> 00:01:48,290
We have speakers
from Airbus, Cisco,

42
00:01:48,290 --> 00:01:50,315
Dell Technologies,
GT systems,

43
00:01:50,315 --> 00:01:53,310
Intel, and
Operant networks.

44
00:01:53,510 --> 00:01:56,100
Panels this year
we have three,

45
00:01:56,100 --> 00:01:59,010
one on lessons learned

46
00:01:59,010 --> 00:02:02,650
from more than 10
years of NDN research.

47
00:02:02,650 --> 00:02:05,020
The second panel we'll

48
00:02:05,020 --> 00:02:08,300
explore challenges
and opportunities

49
00:02:08,300 --> 00:02:11,570
for designing Metaverse
systems using

50
00:02:11,570 --> 00:02:14,810
NDN and the third one

51
00:02:14,810 --> 00:02:16,745
we'll tackle the
question of,

52
00:02:16,745 --> 00:02:18,830
is it time for doing

53
00:02:18,830 --> 00:02:21,740
some form of
standardization for NDN?

54
00:02:21,740 --> 00:02:26,825
And two of these panels
will be shared by

55
00:02:26,825 --> 00:02:28,610
two of this year's

56
00:02:28,610 --> 00:02:31,775
NDN community meeting
co-organizers

57
00:02:31,775 --> 00:02:33,425
Dirk Kutscher

58
00:02:33,425 --> 00:02:36,039
who is I think
attending remotely

59
00:02:36,039 --> 00:02:38,760
and Christos
Papadopoulos who

60
00:02:38,760 --> 00:02:41,050
was with us here
in the room.

61
00:02:41,480 --> 00:02:45,615
In terms of Q&A
and discussions,

62
00:02:45,615 --> 00:02:48,125
let's primarily use Slack.

63
00:02:48,125 --> 00:02:51,725
And we have one
Slack channel for

64
00:02:51,725 --> 00:02:56,485
each panel and for
each presentation.

65
00:02:56,485 --> 00:02:59,990
So please post questions

66
00:02:59,990 --> 00:03:00,830
and comments to

67
00:03:00,830 --> 00:03:03,330
the appropriate
Slack channel.

68
00:03:03,460 --> 00:03:08,000
Also for people who are
in-person there are

69
00:03:08,000 --> 00:03:10,280
two standing
mics so people

70
00:03:10,280 --> 00:03:11,750
can ask questions or

71
00:03:11,750 --> 00:03:13,520
make comments
using the mics.

72
00:03:13,520 --> 00:03:15,710
If you like you
can also raise

73
00:03:15,710 --> 00:03:17,030
your hand and we can bring

74
00:03:17,030 --> 00:03:19,085
a wireless mic to you.

75
00:03:19,085 --> 00:03:22,895
For people who are
attending remotely,

76
00:03:22,895 --> 00:03:26,180
you can use the raise
hand feature in

77
00:03:26,180 --> 00:03:29,360
BlueJeans and
unmute your mic

78
00:03:29,360 --> 00:03:32,530
to ask a question
or make a comment.

79
00:03:32,530 --> 00:03:34,610
So the session
chairs will be

80
00:03:34,610 --> 00:03:36,470
going through the
Slack channels and

81
00:03:36,470 --> 00:03:39,725
reading questions as
they come up on Slack

82
00:03:39,725 --> 00:03:41,270
and of course you're free

83
00:03:41,270 --> 00:03:44,490
to use the mic as well.

84
00:03:45,080 --> 00:03:49,280
With that, I think we
are ready to start.

85
00:03:49,280 --> 00:03:51,200
The first agenda item

86
00:03:51,200 --> 00:03:53,510
in this year is NDN
community meeting,

87
00:03:53,510 --> 00:03:55,940
which is Panel
1 on lessons

88
00:03:55,940 --> 00:03:59,370
learned and will be
chaired with Ken Calvert.

89
00:03:59,370 --> 00:04:01,670
So I ask the chair
and the panelists

90
00:04:01,670 --> 00:04:04,670
to please come
up to stage.

91
00:04:04,670 --> 00:04:10,050
I will bring up
the slides for

92
00:04:10,050 --> 00:04:12,380
the panel and I

93
00:04:12,380 --> 00:04:15,830
will introduce
the panel chair.

94
00:04:15,830 --> 00:04:17,900
I hope I'm
getting the right

95
00:04:17,900 --> 00:04:20,700
one. [BACKGROUND]
This one.

96
00:04:24,950 --> 00:04:28,540
You may want to put it
in presentation mode.

97
00:04:28,540 --> 00:04:37,160
[BACKGROUND] So

98
00:04:37,160 --> 00:04:39,605
the chair is Ken Calvert.

99
00:04:39,605 --> 00:04:41,060
Most of you know Ken.

100
00:04:41,060 --> 00:04:42,290
Ken is a professor at

101
00:04:42,290 --> 00:04:43,730
the Department of
Computer Science

102
00:04:43,730 --> 00:04:45,200
, University of Kentucky.

103
00:04:45,200 --> 00:04:46,790
Before that, he was with

104
00:04:46,790 --> 00:04:49,290
Georgia Tech and with
Bell Labs in Holmdel

105
00:04:49,290 --> 00:04:50,690
New Jersey and he

106
00:04:50,690 --> 00:04:52,040
also spent a
number of years as

107
00:04:52,040 --> 00:04:53,150
division director with

108
00:04:53,150 --> 00:04:54,790
the National
Science Foundation.

109
00:04:54,790 --> 00:04:56,950
Ken go ahead please.

110
00:04:58,730 --> 00:05:03,030
>> Thank you Lofti
and thanks everyone

111
00:05:03,030 --> 00:05:07,620
for being here.
Let me get this.

112
00:05:22,880 --> 00:05:27,680
I'm trying to monitor
the Slack channel also.

113
00:05:32,360 --> 00:05:35,660
Let's get that going.

114
00:05:35,660 --> 00:05:40,380
So I want to introduce
the panelists.

115
00:05:40,380 --> 00:05:42,680
First of all, [inaudible]

116
00:05:42,680 --> 00:05:48,090
Yuan could not be
with us today.

117
00:05:48,090 --> 00:05:50,620
He had a family medical
situation come up,

118
00:05:50,620 --> 00:05:53,755
so he sends his regrets.

119
00:05:53,755 --> 00:05:58,760
But we have Alex
Afanasyev, Jeff Burke.

120
00:05:58,760 --> 00:06:01,440
Luca, are you on?

121
00:06:01,440 --> 00:06:03,660
Can you say hi?

122
00:06:03,660 --> 00:06:06,670
He hasn't joined yet.

123
00:06:07,820 --> 00:06:09,920
Lan Wang from

124
00:06:09,920 --> 00:06:12,290
the University of
Memphis and Lixia Zhang

125
00:06:12,290 --> 00:06:15,090
who I'm sure
everyone knows.

126
00:06:15,250 --> 00:06:23,890
So at the NDN community
meeting of 2020,

127
00:06:23,890 --> 00:06:26,555
there was a lessons
learned panel

128
00:06:26,555 --> 00:06:28,160
on 10 years of

129
00:06:28,160 --> 00:06:30,290
NDN and it was
quite interesting.

130
00:06:30,290 --> 00:06:32,840
And these were some of

131
00:06:32,840 --> 00:06:36,860
the takeaways
from that panel

132
00:06:36,860 --> 00:06:40,340
that the basic idea of

133
00:06:40,340 --> 00:06:44,285
semantically
named secure data

134
00:06:44,285 --> 00:06:45,980
as a basic
building block was

135
00:06:45,980 --> 00:06:49,070
a good thing
and that it is

136
00:06:49,070 --> 00:06:50,750
not just about a

137
00:06:50,750 --> 00:06:52,640
network communication
protocol,

138
00:06:52,640 --> 00:06:54,230
but it's also a new
way to think about

139
00:06:54,230 --> 00:06:56,870
building
distributed systems

140
00:06:56,870 --> 00:06:58,980
and applications.

141
00:06:58,990 --> 00:07:03,170
The research
focus had changed

142
00:07:03,170 --> 00:07:06,500
over the 10 years
and started out more

143
00:07:06,500 --> 00:07:09,110
focused on the network
infrastructure

144
00:07:09,110 --> 00:07:10,940
and then evolved towards

145
00:07:10,940 --> 00:07:15,010
application driven
architecture development

146
00:07:15,010 --> 00:07:19,085
and there are still
some implications

147
00:07:19,085 --> 00:07:21,215
of the security aspect

148
00:07:21,215 --> 00:07:23,030
that haven't been
fully explored.

149
00:07:23,030 --> 00:07:24,650
I think van Jacobson and

150
00:07:24,650 --> 00:07:28,150
Dave Clark both
made that point.

151
00:07:28,150 --> 00:07:30,320
And we really need a good

152
00:07:30,320 --> 00:07:32,510
introductory
article about NDN,

153
00:07:32,510 --> 00:07:34,450
that was a quote from

154
00:07:34,450 --> 00:07:38,760
one of the
panelist I think.

155
00:07:38,760 --> 00:07:40,700
So for this panel,

156
00:07:40,700 --> 00:07:42,800
we wanted to
follow up on that

157
00:07:42,800 --> 00:07:45,985
and have another
lessons learned panel.

158
00:07:45,985 --> 00:07:49,010
And I asked the panelists

159
00:07:49,010 --> 00:07:51,245
to weigh in on these
three questions.

160
00:07:51,245 --> 00:07:55,880
So first one was
about naming and

161
00:07:55,880 --> 00:07:58,355
the fact that named data

162
00:07:58,355 --> 00:08:00,635
is about a lot
about names,

163
00:08:00,635 --> 00:08:02,390
and what lessons have

164
00:08:02,390 --> 00:08:04,280
people learned
about naming,

165
00:08:04,280 --> 00:08:08,840
how names can
be supported,

166
00:08:08,840 --> 00:08:13,630
or structured,
organized, etc.

167
00:08:13,630 --> 00:08:15,560
And the second
question was

168
00:08:15,560 --> 00:08:17,825
about business cases for

169
00:08:17,825 --> 00:08:21,690
NDN and how
important are they.

170
00:08:21,690 --> 00:08:23,360
Are they necessary as

171
00:08:23,360 --> 00:08:25,945
a time to be
focusing on those,

172
00:08:25,945 --> 00:08:28,100
and where should we

173
00:08:28,100 --> 00:08:30,335
be looking for
those things?

174
00:08:30,335 --> 00:08:32,240
And then the third
question was

175
00:08:32,240 --> 00:08:35,090
about application
programming interfaces.

176
00:08:35,090 --> 00:08:37,430
In other words, supporting
the development of

177
00:08:37,430 --> 00:08:42,410
applications by building
toolkits and APIs.

178
00:08:42,410 --> 00:08:44,450
And the panelists were

179
00:08:44,450 --> 00:08:45,890
kind enough to respond to

180
00:08:45,890 --> 00:08:50,270
these somewhat high
level questions

181
00:08:50,270 --> 00:08:52,550
with some really
interesting ideas,

182
00:08:52,550 --> 00:08:54,680
so we had an exchange
over email for

183
00:08:54,680 --> 00:08:57,290
the last week or so and I

184
00:08:57,290 --> 00:08:58,805
have tried to collect

185
00:08:58,805 --> 00:09:00,800
the main points
that each of

186
00:09:00,800 --> 00:09:05,525
the panelists made
to summarize them.

187
00:09:05,525 --> 00:09:09,170
And I hope they will
all forgive me for

188
00:09:09,170 --> 00:09:12,950
any inaccuracies
in my capturing

189
00:09:12,950 --> 00:09:14,630
what the sentiments that

190
00:09:14,630 --> 00:09:16,495
they were trying
to express.

191
00:09:16,495 --> 00:09:18,740
What we're going
to do is I'm going

192
00:09:18,740 --> 00:09:21,290
to put up a slide
for each panelists.

193
00:09:21,290 --> 00:09:24,005
I'm going to give
each one five-minutes

194
00:09:24,005 --> 00:09:26,500
and I will time it.

195
00:09:26,500 --> 00:09:30,110
I will run out in front
of you and hold up

196
00:09:30,110 --> 00:09:31,820
this yellow sign
when you have

197
00:09:31,820 --> 00:09:33,800
a minute left of
your five-minutes.

198
00:09:33,800 --> 00:09:35,330
I'm going to try
to be strict on

199
00:09:35,330 --> 00:09:37,160
that so that we
can stay more or

200
00:09:37,160 --> 00:09:39,805
less on time and

201
00:09:39,805 --> 00:09:42,080
you can say whatever
you want to.

202
00:09:42,080 --> 00:09:43,490
The bullets that I'm

203
00:09:43,490 --> 00:09:44,810
putting up are
nothing more than

204
00:09:44,810 --> 00:09:46,340
a prompt to remind

205
00:09:46,340 --> 00:09:47,660
you of what you
might have said.

206
00:09:47,660 --> 00:09:48,530
Feel free to say

207
00:09:48,530 --> 00:09:50,940
something completely
different.

208
00:09:51,230 --> 00:09:54,565
We're going to
go in random

209
00:09:54,565 --> 00:09:56,460
order for each question;

210
00:09:56,460 --> 00:09:58,845
different order
for each question.

211
00:09:58,845 --> 00:10:05,580
And I hope Luca will
join us at some point.

212
00:10:06,410 --> 00:10:08,600
If you're here Luca,

213
00:10:08,600 --> 00:10:09,875
go ahead and speak up.

214
00:10:09,875 --> 00:10:11,930
So as far as naming,

215
00:10:11,930 --> 00:10:15,320
I'm going to ask Lixia
to go first on that.

216
00:10:15,320 --> 00:10:16,580
And these are her points.

217
00:10:16,580 --> 00:10:18,110
I'm not going to
read them to you.

218
00:10:18,110 --> 00:10:21,225
I'm just going to go
ahead and let her start.

219
00:10:21,225 --> 00:10:24,250
So take it away.

220
00:10:26,460 --> 00:10:31,405
>> This works?
Great. Thanks Ken

221
00:10:31,405 --> 00:10:34,130
for organizing this final.

222
00:10:34,650 --> 00:10:36,895
I don't know where
to get started.

223
00:10:36,895 --> 00:10:38,440
I'll tell you a story.

224
00:10:38,440 --> 00:10:48,025
When I decided to pull
off this proposal to

225
00:10:48,025 --> 00:10:53,575
NSF Future Internet
Architecture Program

226
00:10:53,575 --> 00:10:56,650
at a time the project
was called the

227
00:10:56,650 --> 00:10:59,840
CCN, Content
Centric Networking.

228
00:10:59,840 --> 00:11:01,875
I remember I told Ren

229
00:11:01,875 --> 00:11:04,385
that if you
change the name,

230
00:11:04,385 --> 00:11:07,945
I'll help you build
the team because

231
00:11:07,945 --> 00:11:09,580
this whole direction is

232
00:11:09,580 --> 00:11:12,205
not about content exactly.

233
00:11:12,205 --> 00:11:14,320
It's all about utilizing

234
00:11:14,320 --> 00:11:18,505
names to build systems
and the networks.

235
00:11:18,505 --> 00:11:23,695
I started with the
Name Based Networking,

236
00:11:23,695 --> 00:11:27,400
NBN and then he said,

237
00:11:27,400 --> 00:11:29,710
if you're changing
the middle one name

238
00:11:29,710 --> 00:11:31,285
the data networking,

239
00:11:31,285 --> 00:11:34,960
then we reached the
conclusion agreement

240
00:11:34,960 --> 00:11:38,240
so that became NDN.

241
00:11:38,280 --> 00:11:43,509
I think back in the days,

242
00:11:43,509 --> 00:11:45,460
I only have five minutes.
I need to go quick.

243
00:11:45,460 --> 00:11:49,165
Back in the days of our
IP started in 1981,

244
00:11:49,165 --> 00:11:50,680
that's when I started

245
00:11:50,680 --> 00:11:52,600
networking at a
time there was

246
00:11:52,600 --> 00:11:55,270
no data all people

247
00:11:55,270 --> 00:11:59,605
wanted was to connect
the computers together.

248
00:11:59,605 --> 00:12:01,900
That's how we started
with the addresses,

249
00:12:01,900 --> 00:12:04,180
because that's
something close

250
00:12:04,180 --> 00:12:06,145
to what people understood,

251
00:12:06,145 --> 00:12:07,735
the telephone numbers

252
00:12:07,735 --> 00:12:09,895
connecting two
nodes together.

253
00:12:09,895 --> 00:12:13,630
But since the connectivity
was established,

254
00:12:13,630 --> 00:12:15,955
people built the
applications.

255
00:12:15,955 --> 00:12:20,680
Therefore, all the
applications use names.

256
00:12:20,680 --> 00:12:24,760
Nobody want to
remember the 4-byte IP

257
00:12:24,760 --> 00:12:29,995
addresses now IPV6,
you cannot remember.

258
00:12:29,995 --> 00:12:32,080
So therefore, there always

259
00:12:32,080 --> 00:12:33,430
is this gap between what

260
00:12:33,430 --> 00:12:36,880
applications are doing
versus the carriers,

261
00:12:36,880 --> 00:12:38,665
the IP, trying to

262
00:12:38,665 --> 00:12:41,425
get the data to
the right place.

263
00:12:41,425 --> 00:12:43,990
And I think in the end,

264
00:12:43,990 --> 00:12:46,090
when I first explained

265
00:12:46,090 --> 00:12:50,395
this idea it's really
to address the gap.

266
00:12:50,395 --> 00:12:53,260
Why don't we just put
down the [inaudible] of

267
00:12:53,260 --> 00:12:55,495
naming to the
network layer,

268
00:12:55,495 --> 00:12:58,220
called data delivery.

269
00:12:58,740 --> 00:13:02,739
And I think more
importantly,

270
00:13:02,739 --> 00:13:04,840
just as important as name,

271
00:13:04,840 --> 00:13:07,720
maybe is once
you name data,

272
00:13:07,720 --> 00:13:10,254
then you can secure
the data directly.

273
00:13:10,254 --> 00:13:15,190
I think so
selecting a name on

274
00:13:15,190 --> 00:13:17,650
the data enables secured

275
00:13:17,650 --> 00:13:18,820
naming of the data and

276
00:13:18,820 --> 00:13:20,935
that's really the
basic building block.

277
00:13:20,935 --> 00:13:23,530
About the names there's

278
00:13:23,530 --> 00:13:26,905
misconceptions as
put down there.

279
00:13:26,905 --> 00:13:29,800
Many people I
have heard do not

280
00:13:29,800 --> 00:13:32,335
like names that
started with the DNS.

281
00:13:32,335 --> 00:13:35,484
They thought DNS is a
centrally controlled.

282
00:13:35,484 --> 00:13:38,290
Now there is this moment

283
00:13:38,290 --> 00:13:41,470
against the internet
centralization,

284
00:13:41,470 --> 00:13:44,395
DNS was one of the target.

285
00:13:44,395 --> 00:13:47,740
I wanted to clarify
that to say DNS

286
00:13:47,740 --> 00:13:49,660
is not the centrally
controlled.

287
00:13:49,660 --> 00:13:51,535
There's icon.

288
00:13:51,535 --> 00:13:53,320
What icon does,

289
00:13:53,320 --> 00:13:56,170
is just to assure that

290
00:13:56,170 --> 00:13:59,290
DNS names are
unique so that

291
00:13:59,290 --> 00:14:00,864
the data top division

292
00:14:00,864 --> 00:14:03,100
having top-level
domains and after

293
00:14:03,100 --> 00:14:04,870
that I want people to do

294
00:14:04,870 --> 00:14:07,570
their own business
for the allocations.

295
00:14:07,570 --> 00:14:09,190
I think there's
a misconception

296
00:14:09,190 --> 00:14:10,420
perhaps has
something to do

297
00:14:10,420 --> 00:14:13,750
with another
misconception that is,

298
00:14:13,750 --> 00:14:15,700
the trust
relations somehow

299
00:14:15,700 --> 00:14:17,170
follow the DNS hierarchy,

300
00:14:17,170 --> 00:14:21,055
that's entirely not
necessarily the case.

301
00:14:21,055 --> 00:14:22,780
Here among the panelists

302
00:14:22,780 --> 00:14:23,710
that we trust each other,

303
00:14:23,710 --> 00:14:25,030
we have no relations in

304
00:14:25,030 --> 00:14:26,500
terms of our DNS names.

305
00:14:26,500 --> 00:14:28,390
If we got one, I guess
you'll have one.

306
00:14:28,390 --> 00:14:29,530
I haven't gotten
one yet, although

307
00:14:29,530 --> 00:14:31,090
my kids will get one.

308
00:14:31,090 --> 00:14:34,660
Well, I already

309
00:14:34,660 --> 00:14:36,010
mentioned about
the relations

310
00:14:36,010 --> 00:14:38,935
between names
and security.

311
00:14:38,935 --> 00:14:42,490
There's a lots
of discussions

312
00:14:42,490 --> 00:14:43,930
or proposals and

313
00:14:43,930 --> 00:14:45,655
even projects
that's going around

314
00:14:45,655 --> 00:14:49,270
saying that the keys
are the unique names.

315
00:14:49,270 --> 00:14:53,440
Yes, keys are unique
identifiers but how

316
00:14:53,440 --> 00:14:54,850
you reason about
the relations

317
00:14:54,850 --> 00:14:57,355
between two keys.

318
00:14:57,355 --> 00:15:00,760
You never get that
Crystals key.

319
00:15:00,760 --> 00:15:02,170
I have no clue
that's Crystals key

320
00:15:02,170 --> 00:15:03,835
because I don't have
the super memory to

321
00:15:03,835 --> 00:15:06,235
associate the 64 bytes

322
00:15:06,235 --> 00:15:08,650
with pretty good
at [inaudible].

323
00:15:08,650 --> 00:15:10,300
So therefore our semantic
naming really is

324
00:15:10,300 --> 00:15:12,250
the key to reason
about the security,

325
00:15:12,250 --> 00:15:13,540
that's how NDN build

326
00:15:13,540 --> 00:15:18,350
the whole set of the
security solutions.

327
00:15:18,980 --> 00:15:21,150
>> Thank you very much.

328
00:15:21,150 --> 00:15:24,870
Perfect. Lan, I've
got you up next,

329
00:15:24,870 --> 00:15:29,370
and then Jeff, and then
Luka and then Alex.

330
00:15:29,370 --> 00:15:36,550
>> So I think everybody
is familiar with

331
00:15:36,550 --> 00:15:44,425
DNS names as Lisa
mentioned, and web URLs.

332
00:15:44,425 --> 00:15:48,655
Well, we know how
to name data.

333
00:15:48,655 --> 00:15:51,610
We can do something

334
00:15:51,610 --> 00:15:52,900
similar to what we

335
00:15:52,900 --> 00:15:54,985
have designed web
applications,

336
00:15:54,985 --> 00:15:59,050
but sometimes we forget
there's differences.

337
00:15:59,050 --> 00:16:03,145
Today, if I send
a URL request,

338
00:16:03,145 --> 00:16:05,755
I get back the webpage

339
00:16:05,755 --> 00:16:07,675
and I can send
another one.

340
00:16:07,675 --> 00:16:09,760
The webpage may change

341
00:16:09,760 --> 00:16:12,010
and I get back a
different webpage,

342
00:16:12,010 --> 00:16:14,155
even though they
have the same name.

343
00:16:14,155 --> 00:16:16,435
But in the end,

344
00:16:16,435 --> 00:16:19,930
you have to uniquely
name the data.

345
00:16:19,930 --> 00:16:22,810
You cannot do
something like

346
00:16:22,810 --> 00:16:26,020
what we're doing in
web applications.

347
00:16:26,020 --> 00:16:28,330
So sometimes we
forget about this

348
00:16:28,330 --> 00:16:31,675
and we slip back
into our old habits.

349
00:16:31,675 --> 00:16:33,550
So that's something we've

350
00:16:33,550 --> 00:16:36,580
learned again and again.

351
00:16:36,580 --> 00:16:40,855
In our application or
protocol development,

352
00:16:40,855 --> 00:16:47,275
we forget that if we
restart a process,

353
00:16:47,275 --> 00:16:49,360
we have to name the
data differently.

354
00:16:49,360 --> 00:16:53,380
Otherwise, the other
nodes will fetch

355
00:16:53,380 --> 00:16:54,910
the same data in

356
00:16:54,910 --> 00:16:58,315
the previous instance
again and again.

357
00:16:58,315 --> 00:17:00,580
That's one of
the lessons we

358
00:17:00,580 --> 00:17:04,360
learned from deploying
the routing protocol

359
00:17:04,360 --> 00:17:06,370
and recently deploying

360
00:17:06,370 --> 00:17:11,710
our mobile health
application.

361
00:17:11,710 --> 00:17:14,020
We found that even

362
00:17:14,020 --> 00:17:16,900
though we are doing
researching NDN,

363
00:17:16,900 --> 00:17:19,375
but we still make
those mistakes.

364
00:17:19,375 --> 00:17:22,870
So we don't know
what will happen

365
00:17:22,870 --> 00:17:26,215
if other people develop
these product costs.

366
00:17:26,215 --> 00:17:28,750
They may not realize

367
00:17:28,750 --> 00:17:30,895
they're making
these mistakes.

368
00:17:30,895 --> 00:17:36,355
I think it's very
critical that we document

369
00:17:36,355 --> 00:17:41,095
the good design patterns
so we can avoid

370
00:17:41,095 --> 00:17:47,500
repeating the same
problems in naming data.

371
00:17:47,500 --> 00:17:51,355
That's the first
point I want to make.

372
00:17:51,355 --> 00:17:54,775
The second point I
think is also related.

373
00:17:54,775 --> 00:17:58,150
That is, we don't
realize when we

374
00:17:58,150 --> 00:18:01,390
design the naming
of an application,

375
00:18:01,390 --> 00:18:04,944
we don't sometimes
realized this naming

376
00:18:04,944 --> 00:18:10,570
may affect other
part of the stack.

377
00:18:10,570 --> 00:18:12,880
For example, depending on

378
00:18:12,880 --> 00:18:15,235
how you name the
application data,

379
00:18:15,235 --> 00:18:19,510
there may be different
amount of state

380
00:18:19,510 --> 00:18:22,180
the routing protocol
needs to maintain,

381
00:18:22,180 --> 00:18:26,695
or even the sink protocol
needs to maintain.

382
00:18:26,695 --> 00:18:29,755
But the application
designers

383
00:18:29,755 --> 00:18:34,345
may not be aware
of these impacts.

384
00:18:34,345 --> 00:18:37,930
So that's something I

385
00:18:37,930 --> 00:18:41,530
think that needs to be
further researched.

386
00:18:41,530 --> 00:18:45,100
Even today, we don't know

387
00:18:45,100 --> 00:18:50,380
all the potential
interdependencies

388
00:18:50,380 --> 00:18:55,195
among these different
components in NDN.

389
00:18:55,195 --> 00:18:58,030
And the third part is

390
00:18:58,030 --> 00:19:02,080
that I think Lisa
has mentioned that

391
00:19:02,080 --> 00:19:05,170
one of the most
important thing

392
00:19:05,170 --> 00:19:09,685
NDN introduces is
you can secure data.

393
00:19:09,685 --> 00:19:12,550
And the name in the data

394
00:19:12,550 --> 00:19:15,699
actually allows
us to express

395
00:19:15,699 --> 00:19:18,340
the relationship
between keys and

396
00:19:18,340 --> 00:19:21,535
data names and
different keys,

397
00:19:21,535 --> 00:19:26,620
that's very important
to secure the data.

398
00:19:26,620 --> 00:19:30,280
I think what we are not

399
00:19:30,280 --> 00:19:33,445
doing enough
today is to use

400
00:19:33,445 --> 00:19:36,025
these names to express

401
00:19:36,025 --> 00:19:41,270
other relationships
between names.

402
00:19:43,290 --> 00:19:46,570
Schemas can also be used

403
00:19:46,570 --> 00:19:49,510
to express access
control policies.

404
00:19:49,510 --> 00:19:51,160
And that's something
we're doing

405
00:19:51,160 --> 00:19:54,775
in our mHealth project.

406
00:19:54,775 --> 00:19:58,450
How do you
express policies

407
00:19:58,450 --> 00:20:02,920
about who can access
what kind of data?

408
00:20:02,920 --> 00:20:05,830
I think we really need

409
00:20:05,830 --> 00:20:09,070
to make use or leverage

410
00:20:09,070 --> 00:20:11,335
these semantic names to

411
00:20:11,335 --> 00:20:15,775
simplify the management
of data and keys.

412
00:20:15,775 --> 00:20:18,775
>> Hey, thanks, Lan.

413
00:20:18,775 --> 00:20:21,070
I should've said we're

414
00:20:21,070 --> 00:20:23,020
going to have each
panelist speak for

415
00:20:23,020 --> 00:20:26,260
a few minutes and then
I hope we'll have

416
00:20:26,260 --> 00:20:28,900
a few minutes to
take questions from

417
00:20:28,900 --> 00:20:30,310
the audience or
for the panelists

418
00:20:30,310 --> 00:20:31,780
to respond to each other.

419
00:20:31,780 --> 00:20:33,160
And I want to remind you,

420
00:20:33,160 --> 00:20:37,150
if you have a question
for the panel,

421
00:20:37,150 --> 00:20:40,300
please put it in the
Slack and not the blue

422
00:20:40,300 --> 00:20:42,310
jeans because
I'm monitoring

423
00:20:42,310 --> 00:20:44,770
the Slack up here and
I will relay those.

424
00:20:44,770 --> 00:20:48,020
Next, we have Jeff.

425
00:20:49,110 --> 00:20:52,135
>> So this came from

426
00:20:52,135 --> 00:20:54,370
stuff that I put very
quickly in an e-mail,

427
00:20:54,370 --> 00:20:56,500
but I'll see if I can

428
00:20:56,500 --> 00:20:58,690
try to make it make sense.

429
00:20:58,690 --> 00:21:01,180
So most of what
I've been doing

430
00:21:01,180 --> 00:21:03,550
over the last
couple of years is

431
00:21:03,550 --> 00:21:05,680
I often work with
developers who don't have

432
00:21:05,680 --> 00:21:08,559
a CS or stem background,

433
00:21:08,559 --> 00:21:10,765
even and have
been watching.

434
00:21:10,765 --> 00:21:12,730
They're not an NDN

435
00:21:12,730 --> 00:21:14,890
but had been thinking
a lot about what are

436
00:21:14,890 --> 00:21:16,615
the way that names are

437
00:21:16,615 --> 00:21:19,825
used in systems for
real-time graphics,

438
00:21:19,825 --> 00:21:21,970
in other types of
distributed systems,

439
00:21:21,970 --> 00:21:22,690
and things like that,

440
00:21:22,690 --> 00:21:26,560
and where the
connections are to NDN.

441
00:21:26,560 --> 00:21:29,980
And then thinking
back to maybe some of

442
00:21:29,980 --> 00:21:32,260
the lessons learned and

443
00:21:32,260 --> 00:21:34,315
how to proceed
differently on,

444
00:21:34,315 --> 00:21:35,905
at least for my
interests in

445
00:21:35,905 --> 00:21:37,825
application development
going forward.

446
00:21:37,825 --> 00:21:42,070
And maybe to start
just at the top.

447
00:21:42,070 --> 00:21:42,730
I guess something that I

448
00:21:42,730 --> 00:21:43,570
was thinking about in

449
00:21:43,570 --> 00:21:46,450
this email conversation
is that we've

450
00:21:46,450 --> 00:21:48,850
had obviously an emphasis
from the beginning

451
00:21:48,850 --> 00:21:51,820
of the project that Lisa

452
00:21:51,820 --> 00:21:55,705
and Van started an
emphasis on App-centric or

453
00:21:55,705 --> 00:21:59,095
application-level
semantic meaning of data.

454
00:21:59,095 --> 00:22:02,470
But that doesn't
always translate into

455
00:22:02,470 --> 00:22:04,360
something that is
developer-centric

456
00:22:04,360 --> 00:22:05,545
or developer friendly,

457
00:22:05,545 --> 00:22:07,120
I think and I was
trying to think

458
00:22:07,120 --> 00:22:08,890
through what that meant

459
00:22:08,890 --> 00:22:10,630
or if that was

460
00:22:10,630 --> 00:22:12,370
a completely true
statement or not.

461
00:22:12,370 --> 00:22:14,270
And there seemed to be

462
00:22:14,270 --> 00:22:17,310
generally in our
applications,

463
00:22:17,310 --> 00:22:19,815
I think it certainly
in my group and

464
00:22:19,815 --> 00:22:22,870
in the applications that

465
00:22:22,870 --> 00:22:25,495
I've seen mostly
from the NDN team

466
00:22:25,495 --> 00:22:26,680
in the examples in

467
00:22:26,680 --> 00:22:28,090
the literature tend to

468
00:22:28,090 --> 00:22:29,620
mostly if they're

469
00:22:29,620 --> 00:22:31,195
looking at
hierarchical names,

470
00:22:31,195 --> 00:22:32,890
to look at names that have

471
00:22:32,890 --> 00:22:34,690
hierarchy in
three sections.

472
00:22:34,690 --> 00:22:37,330
One that's about maybe
not global forwarding,

473
00:22:37,330 --> 00:22:39,280
but how you get packets,

474
00:22:39,280 --> 00:22:41,080
how you get interest
to the right place.

475
00:22:41,080 --> 00:22:43,810
So some global
forwarding component

476
00:22:43,810 --> 00:22:46,510
that you can't change
as a developer.

477
00:22:46,510 --> 00:22:47,860
That at least not if you

478
00:22:47,860 --> 00:22:49,270
want to get your packets

479
00:22:49,270 --> 00:22:53,455
into somebody
else's application.

480
00:22:53,455 --> 00:22:55,540
In the middle, maybe
you have something that

481
00:22:55,540 --> 00:22:56,860
represents the
application data

482
00:22:56,860 --> 00:22:58,090
model in some way.

483
00:22:58,090 --> 00:22:59,980
And this is where there
seems to be a lot

484
00:22:59,980 --> 00:23:02,050
of excitement and
opportunities.

485
00:23:02,050 --> 00:23:03,970
How do you go from a
data model that makes

486
00:23:03,970 --> 00:23:06,280
sense to the
application to,

487
00:23:06,280 --> 00:23:07,690
and maybe as a developer,

488
00:23:07,690 --> 00:23:10,360
you get to make choices
about and map it

489
00:23:10,360 --> 00:23:12,835
into packets in an NDN

490
00:23:12,835 --> 00:23:14,275
or names in an
NDN network?

491
00:23:14,275 --> 00:23:15,910
And then maybe at the end,

492
00:23:15,910 --> 00:23:18,190
you have things
like versioning or

493
00:23:18,190 --> 00:23:19,390
segmenting that are more

494
00:23:19,390 --> 00:23:21,835
or maybe even object.

495
00:23:21,835 --> 00:23:23,890
Things related to object

496
00:23:23,890 --> 00:23:25,780
definition that
you should maybe

497
00:23:25,780 --> 00:23:28,000
think about how
they're consistent

498
00:23:28,000 --> 00:23:29,320
within your application or

499
00:23:29,320 --> 00:23:30,745
across applications.

500
00:23:30,745 --> 00:23:33,400
And the level
to go back to

501
00:23:33,400 --> 00:23:34,780
the original point and

502
00:23:34,780 --> 00:23:36,040
maybe a lesson
I'm trying to

503
00:23:36,040 --> 00:23:38,410
think through a
little bit is

504
00:23:38,410 --> 00:23:40,615
developers get
to intervene

505
00:23:40,615 --> 00:23:42,580
and companies intervene.

506
00:23:42,580 --> 00:23:45,609
Or people making
NDN applications

507
00:23:45,609 --> 00:23:46,750
in different ways that

508
00:23:46,750 --> 00:23:49,615
those three levels and

509
00:23:49,615 --> 00:23:51,670
the tools and
thinking about

510
00:23:51,670 --> 00:23:52,630
different name components

511
00:23:52,630 --> 00:23:54,115
might be quite different.

512
00:23:54,115 --> 00:23:56,530
And I think that's
maybe something

513
00:23:56,530 --> 00:23:59,950
that I guess I'd love

514
00:23:59,950 --> 00:24:01,570
to take that lesson
forward and think a

515
00:24:01,570 --> 00:24:04,240
bit more about
namespace tools

516
00:24:04,240 --> 00:24:05,920
that are more explicit
about the types of

517
00:24:05,920 --> 00:24:07,690
control that exist in

518
00:24:07,690 --> 00:24:11,620
the names and who
makes choices and who,

519
00:24:11,620 --> 00:24:14,185
I think I've
focused a lot on

520
00:24:14,185 --> 00:24:16,660
the second part and said,

521
00:24:16,660 --> 00:24:17,380
Well, somebody who figured

522
00:24:17,380 --> 00:24:18,370
out global forwarding.

523
00:24:18,370 --> 00:24:20,980
And then in the
library development,

524
00:24:20,980 --> 00:24:23,350
we were thinking a lot
about the third part.

525
00:24:23,350 --> 00:24:25,330
But I don't know
that really

526
00:24:25,330 --> 00:24:26,500
thought holistically about

527
00:24:26,500 --> 00:24:27,880
what are the tools and

528
00:24:27,880 --> 00:24:30,115
approaches to
dealing with this.

529
00:24:30,115 --> 00:24:31,810
Then there's some
observations,

530
00:24:31,810 --> 00:24:33,415
I think on the
slide that were

531
00:24:33,415 --> 00:24:36,025
from the email discussion.

532
00:24:36,025 --> 00:24:37,840
Then the last point was

533
00:24:37,840 --> 00:24:39,340
a little bit of
a throwaway one,

534
00:24:39,340 --> 00:24:43,060
but one of the things

535
00:24:43,060 --> 00:24:46,660
that I think the NDN
project has struggled

536
00:24:46,660 --> 00:24:48,130
a little bit with
is to try to

537
00:24:48,130 --> 00:24:50,860
explain the value of

538
00:24:50,860 --> 00:24:52,330
this fundamental shift in

539
00:24:52,330 --> 00:24:56,095
the networking layer
to other people,

540
00:24:56,095 --> 00:24:58,150
to people that are
building applications and

541
00:24:58,150 --> 00:25:01,165
can do similar things
higher up in the stack.

542
00:25:01,165 --> 00:25:05,800
And also have to figure

543
00:25:05,800 --> 00:25:08,140
out what it would

544
00:25:08,140 --> 00:25:10,120
mean to deploy a new
network protocol.

545
00:25:10,120 --> 00:25:11,260
And so for me,

546
00:25:11,260 --> 00:25:15,639
the NFT the pop
culture phenomenon,

547
00:25:15,639 --> 00:25:18,760
the NFT as broken and odd

548
00:25:18,760 --> 00:25:21,940
is that whole thing
was fascinating

549
00:25:21,940 --> 00:25:24,205
because people
got the idea of

550
00:25:24,205 --> 00:25:27,220
a chunk of data that was

551
00:25:27,220 --> 00:25:28,750
cryptographically
verifiable

552
00:25:28,750 --> 00:25:30,550
and could be owned

553
00:25:30,550 --> 00:25:32,440
or at least verified

554
00:25:32,440 --> 00:25:34,000
as being owned
by somebody.

555
00:25:34,000 --> 00:25:36,385
And I think there is

556
00:25:36,385 --> 00:25:39,775
some way in
popular attention

557
00:25:39,775 --> 00:25:43,330
to networking
to explain or

558
00:25:43,330 --> 00:25:44,950
create a
connection between

559
00:25:44,950 --> 00:25:47,005
the type of work
that's happening,

560
00:25:47,005 --> 00:25:48,220
that has happened
historically

561
00:25:48,220 --> 00:25:49,435
for 10 years in NDN

562
00:25:49,435 --> 00:25:52,150
and the pop culture
phenomenon,

563
00:25:52,150 --> 00:25:54,610
NFTs and interesting
crypto and so on.

564
00:25:54,610 --> 00:25:56,440
And that's something
I'd like to

565
00:25:56,440 --> 00:25:59,780
see. Let's put a
little bit more.

566
00:26:02,310 --> 00:26:04,480
>> That was
perfect timing.

567
00:26:04,480 --> 00:26:10,749
Yeah. Thank you.
Luca, are you there?

568
00:26:10,749 --> 00:26:13,750
I'll just note
that one person in

569
00:26:13,750 --> 00:26:18,580
the Slack is disagreeing

570
00:26:18,580 --> 00:26:20,110
with the statement
about NFTs.

571
00:26:20,110 --> 00:26:22,090
But it wasn't
really that you

572
00:26:22,090 --> 00:26:24,100
were stating an
axiom there.

573
00:26:24,100 --> 00:26:26,470
I think it was more
about leveraging

574
00:26:26,470 --> 00:26:29,020
this pop culture thing.
As you just said.

575
00:26:29,020 --> 00:26:30,910
>> It's absolutely not
a technical point.

576
00:26:30,910 --> 00:26:38,200
>> Yeah. Luca, are
you on? Not yet.

577
00:26:38,200 --> 00:26:41,170
Well, Luca,

578
00:26:41,170 --> 00:26:43,270
I don't know how much
people know about

579
00:26:43,270 --> 00:26:45,190
HICN and I won't
try to channel him,

580
00:26:45,190 --> 00:26:47,830
but he had just a couple

581
00:26:47,830 --> 00:26:49,240
of points about that.

582
00:26:49,240 --> 00:26:51,100
But one of the
ideas of HICN

583
00:26:51,100 --> 00:26:52,690
is that the
application deals with

584
00:26:52,690 --> 00:26:54,070
the application namespace

585
00:26:54,070 --> 00:26:55,450
and then Maps provide

586
00:26:55,450 --> 00:27:01,460
some mapping to this
existing IPV6 namespace.

587
00:27:01,620 --> 00:27:04,150
And then he had

588
00:27:04,150 --> 00:27:06,940
some anecdotes about
things that they had

589
00:27:06,940 --> 00:27:13,720
worked on in media
streaming space. Luca?

590
00:27:13,720 --> 00:27:15,790
>> Yes. Can you hear me?

591
00:27:15,790 --> 00:27:17,020
>> Yes. Now we can hear

592
00:27:17,020 --> 00:27:21,590
you. Please, go ahead.

593
00:27:22,680 --> 00:27:24,820
>> So I guess

594
00:27:24,820 --> 00:27:26,770
this part of the
conversation was related

595
00:27:26,770 --> 00:27:30,920
to when you start

596
00:27:31,110 --> 00:27:33,745
using these things
in production,

597
00:27:33,745 --> 00:27:35,170
then you start
asking yourself,

598
00:27:35,170 --> 00:27:37,180
where should I get these

599
00:27:37,180 --> 00:27:39,190
names than the namespace?

600
00:27:39,190 --> 00:27:42,070
Where should I start?
And especially

601
00:27:42,070 --> 00:27:44,485
when you have users
and they ask yourself,

602
00:27:44,485 --> 00:27:46,990
what is the bootstrap?

603
00:27:46,990 --> 00:27:49,105
How do I bootstrap
all these things?

604
00:27:49,105 --> 00:27:50,560
And this goes back to

605
00:27:50,560 --> 00:27:53,065
the discussion
with Jeff about,

606
00:27:53,065 --> 00:27:54,400
I need a place where I can

607
00:27:54,400 --> 00:27:57,640
go and say purchase

608
00:27:57,640 --> 00:28:01,270
or get my namespace

609
00:28:01,270 --> 00:28:02,680
and start working
from there.

610
00:28:02,680 --> 00:28:04,630
And leaves and
releases these

611
00:28:04,630 --> 00:28:08,410
namespaces while

612
00:28:08,410 --> 00:28:10,105
I'm using these
applications.

613
00:28:10,105 --> 00:28:12,520
But I was mentioning

614
00:28:12,520 --> 00:28:13,975
in the conversation
offline,

615
00:28:13,975 --> 00:28:15,670
HICN because there was

616
00:28:15,670 --> 00:28:18,730
one roadblock that we

617
00:28:18,730 --> 00:28:21,400
wanted to remove
by just saying,

618
00:28:21,400 --> 00:28:26,410
let's use a
simple namespace.

619
00:28:26,410 --> 00:28:27,490
There is also a routable

620
00:28:27,490 --> 00:28:29,500
and which is the
IP namespace.

621
00:28:29,500 --> 00:28:32,440
And which wouldn't
be the case,

622
00:28:32,440 --> 00:28:37,130
for instance,
for dominance.

623
00:28:37,130 --> 00:28:40,735
But there was just
an observation.

624
00:28:40,735 --> 00:28:42,670
But you need to
have a place where

625
00:28:42,670 --> 00:28:44,530
when you start using
and having adoption,

626
00:28:44,530 --> 00:28:46,330
you need to
elsewhere a plan

627
00:28:46,330 --> 00:28:50,320
for bootstrapping your
applications like you

628
00:28:50,320 --> 00:28:52,990
need that step to

629
00:28:52,990 --> 00:28:57,530
be sold before you
even start deploying.

630
00:29:01,890 --> 00:29:04,240
>> Yeah. The second point,

631
00:29:04,240 --> 00:29:05,110
I don't know if
you have time

632
00:29:05,110 --> 00:29:05,980
for the second point,

633
00:29:05,980 --> 00:29:09,310
which was related to

634
00:29:09,310 --> 00:29:13,345
a second observation
made by Jeff which was,

635
00:29:13,345 --> 00:29:15,880
Now I have this namespace.

636
00:29:15,880 --> 00:29:17,830
I want to use my
existing application

637
00:29:17,830 --> 00:29:19,075
which already
has a semantic

638
00:29:19,075 --> 00:29:21,280
and I'm not thinking

639
00:29:21,280 --> 00:29:22,270
about the AN application

640
00:29:22,270 --> 00:29:23,560
that is written
from scratch.

641
00:29:23,560 --> 00:29:25,225
That's something
that exists already

642
00:29:25,225 --> 00:29:27,130
with the logic that
exists already.

643
00:29:27,130 --> 00:29:28,390
And I want to
map this logic

644
00:29:28,390 --> 00:29:30,610
into routable
lanes because that

645
00:29:30,610 --> 00:29:32,560
logic is an abstraction

646
00:29:32,560 --> 00:29:34,930
that leaves only inside
the application.

647
00:29:34,930 --> 00:29:39,280
And then when you go
into the ICN space,

648
00:29:39,280 --> 00:29:40,330
these things become

649
00:29:40,330 --> 00:29:41,755
routable name since
it's different.

650
00:29:41,755 --> 00:29:44,620
And so one of

651
00:29:44,620 --> 00:29:45,160
the things that was

652
00:29:45,160 --> 00:29:46,300
mentioned in the
conversation

653
00:29:46,300 --> 00:29:51,490
here offline was that
it's immediately

654
00:29:51,490 --> 00:29:53,185
very specific to
the application.

655
00:29:53,185 --> 00:29:54,745
And every time you
change application,

656
00:29:54,745 --> 00:29:56,890
you need to build
another middleware.

657
00:29:56,890 --> 00:29:58,510
And also the way you

658
00:29:58,510 --> 00:30:00,340
map the application
logic into

659
00:30:00,340 --> 00:30:04,780
readable names it has
to be optimaly made.

660
00:30:04,780 --> 00:30:06,010
I was mentioning
in the case for

661
00:30:06,010 --> 00:30:07,270
online meetings where you

662
00:30:07,270 --> 00:30:08,440
usually want to make

663
00:30:08,440 --> 00:30:14,290
sure that what has
to be shared across

664
00:30:14,290 --> 00:30:17,290
a number of users in
the application has to

665
00:30:17,290 --> 00:30:18,760
be mapped into a
namespace that

666
00:30:18,760 --> 00:30:20,305
is shared across
all the users.

667
00:30:20,305 --> 00:30:23,560
Otherwise, you risk
to map broadcast into

668
00:30:23,560 --> 00:30:26,325
unicast and so you

669
00:30:26,325 --> 00:30:29,170
miss all the advantages
of using ICN.

670
00:30:30,840 --> 00:30:33,670
>> Great, thanks.

671
00:30:33,670 --> 00:30:38,890
And Alex will have the
last word on naming.

672
00:30:38,890 --> 00:30:40,840
>> So I want to make

673
00:30:40,840 --> 00:30:42,340
it two points for this one

674
00:30:42,340 --> 00:30:44,185
and one which is

675
00:30:44,185 --> 00:30:45,640
captured in these
two bullets,

676
00:30:45,640 --> 00:30:47,800
is actually a
reflection of

677
00:30:47,800 --> 00:30:50,230
what Jeff said and what
just Luka mentioned.

678
00:30:50,230 --> 00:30:52,090
Is the fact that

679
00:30:52,090 --> 00:30:53,470
I don't know whether
it's a lesson

680
00:30:53,470 --> 00:30:55,270
learned or not but every

681
00:30:55,270 --> 00:30:56,260
time you're talking to

682
00:30:56,260 --> 00:30:57,895
different people
about naming,

683
00:30:57,895 --> 00:31:00,040
they will have
different opinion.

684
00:31:00,040 --> 00:31:02,080
From the application
perspective,

685
00:31:02,080 --> 00:31:03,760
they want
application names.

686
00:31:03,760 --> 00:31:05,080
They want to deal with

687
00:31:05,080 --> 00:31:06,460
the networking aspect

688
00:31:06,460 --> 00:31:08,080
or aggregation
of anything.

689
00:31:08,080 --> 00:31:10,765
When you talk to
forwarding people,

690
00:31:10,765 --> 00:31:13,015
they don't care about
the application stuff

691
00:31:13,015 --> 00:31:14,320
all those
sequence numbers,

692
00:31:14,320 --> 00:31:15,625
not sequence numbers.

693
00:31:15,625 --> 00:31:17,740
They only care about
the prefixes the one

694
00:31:17,740 --> 00:31:20,080
that they need
to route faster,

695
00:31:20,080 --> 00:31:21,775
like look-up
something faster.

696
00:31:21,775 --> 00:31:24,055
When talking about
the security,

697
00:31:24,055 --> 00:31:25,570
then there's the
security context

698
00:31:25,570 --> 00:31:26,680
that needs to be there in

699
00:31:26,680 --> 00:31:28,180
a name in order
to associate

700
00:31:28,180 --> 00:31:29,350
keys to the data,

701
00:31:29,350 --> 00:31:30,940
data to the keys or
keys to the keys,

702
00:31:30,940 --> 00:31:32,725
as Alicia
mentioned before.

703
00:31:32,725 --> 00:31:34,750
And yet, if you fill up to

704
00:31:34,750 --> 00:31:36,640
different security
people, they will say,

705
00:31:36,640 --> 00:31:38,395
oh don't expose
those things,

706
00:31:38,395 --> 00:31:39,865
those looking private,

707
00:31:39,865 --> 00:31:42,115
those should not be there.

708
00:31:42,115 --> 00:31:45,340
So is it a lesson?

709
00:31:45,340 --> 00:31:47,230
How do we reconcile?

710
00:31:47,230 --> 00:31:49,675
And in the end, we
have a data path or

711
00:31:49,675 --> 00:31:51,175
name that

712
00:31:51,175 --> 00:31:53,980
used everywhere at
different levels.

713
00:31:53,980 --> 00:31:55,855
So it has to be

714
00:31:55,855 --> 00:31:57,835
defined by the
application but

715
00:31:57,835 --> 00:32:00,070
your application
potentially have

716
00:32:00,070 --> 00:32:02,260
no idea about what network
is supposed to do,

717
00:32:02,260 --> 00:32:04,705
or what kind of prefix
it should be there.

718
00:32:04,705 --> 00:32:07,840
It's a challenge. I put

719
00:32:07,840 --> 00:32:10,570
some aspects here
like levels,

720
00:32:10,570 --> 00:32:11,920
libraries, re-directions,

721
00:32:11,920 --> 00:32:14,005
linking or board
linking, or something.

722
00:32:14,005 --> 00:32:18,730
So I think we tried to
explore it some way,

723
00:32:18,730 --> 00:32:22,870
I forget what
application we did with

724
00:32:22,870 --> 00:32:24,880
the Geo co-ordinates
so you can

725
00:32:24,880 --> 00:32:27,025
look over different paths,

726
00:32:27,025 --> 00:32:29,110
not necessarily
hierarchical naming.

727
00:32:29,110 --> 00:32:31,720
Again, not necessarily
less and not

728
00:32:31,720 --> 00:32:32,860
necessarily any

729
00:32:32,860 --> 00:32:34,570
actionable item
from this lesson,

730
00:32:34,570 --> 00:32:36,535
but that's what I stated.

731
00:32:36,535 --> 00:32:38,785
And the second bullet
that I didn't put here.

732
00:32:38,785 --> 00:32:40,330
But I think this is

733
00:32:40,330 --> 00:32:42,940
a re-curring issue
that we have.

734
00:32:42,940 --> 00:32:44,815
We overthinking

735
00:32:44,815 --> 00:32:48,110
the concept of
global routing.

736
00:32:49,730 --> 00:32:51,900
This may be touching

737
00:32:51,900 --> 00:32:53,790
upon the second question,

738
00:32:53,790 --> 00:32:55,800
I doubt we're
going to have

739
00:32:55,800 --> 00:32:57,570
the global replacement
of the internet

740
00:32:57,570 --> 00:32:59,640
with NDM anytime soon.

741
00:32:59,640 --> 00:33:01,979
So we need to apply

742
00:33:01,979 --> 00:33:04,800
Indian concepts in
smaller environments.

743
00:33:04,800 --> 00:33:06,335
And in those environments,

744
00:33:06,335 --> 00:33:09,160
those are not
the problems,

745
00:33:09,160 --> 00:33:11,965
global routing, who cares?

746
00:33:11,965 --> 00:33:14,020
You just run in the
home environment.

747
00:33:14,020 --> 00:33:16,210
You do whatever you
need to do at home.

748
00:33:16,210 --> 00:33:18,640
You assign name and
assigning names as Luka

749
00:33:18,640 --> 00:33:20,500
mentioned the
boots trapping

750
00:33:20,500 --> 00:33:22,690
process. Yes, it's needed.

751
00:33:22,690 --> 00:33:25,090
You have to have
some guidelines at

752
00:33:25,090 --> 00:33:26,380
home to how to assign

753
00:33:26,380 --> 00:33:28,120
a name to the
specific devices.

754
00:33:28,120 --> 00:33:30,805
But what prefix I'm
using, it's my problem.

755
00:33:30,805 --> 00:33:32,995
But I'm not exposing this,

756
00:33:32,995 --> 00:33:35,515
the further
constellation project.

757
00:33:35,515 --> 00:33:36,865
You're also use your name,

758
00:33:36,865 --> 00:33:39,235
you're not
bothered with like

759
00:33:39,235 --> 00:33:41,350
Microsoft looks
at defining

760
00:33:41,350 --> 00:33:44,215
what DNS namespace
but doesn't matter.

761
00:33:44,215 --> 00:33:45,745
And I think
there's a lot of

762
00:33:45,745 --> 00:33:47,560
research in this area.

763
00:33:47,560 --> 00:33:49,345
There's a lot of focus

764
00:33:49,345 --> 00:33:51,730
and it just
doesn't matter.

765
00:33:51,730 --> 00:33:54,580
So that's two points
I want to make.

766
00:33:54,580 --> 00:33:58,960
>> Thank you. We have
maybe a minute or two,

767
00:33:58,960 --> 00:34:00,790
does somebody who
have a question

768
00:34:00,790 --> 00:34:02,365
from the audience?

769
00:34:02,365 --> 00:34:05,690
There are several
comments in Slack.

770
00:34:06,180 --> 00:34:11,110
Does anybody want
to ask or rejoin?

771
00:34:11,110 --> 00:34:12,160
Anybody on the
panel want to

772
00:34:12,160 --> 00:34:15,650
respond quickly, Alicia?

773
00:34:15,870 --> 00:34:17,905
>> I don't know
what kind of

774
00:34:17,905 --> 00:34:19,930
questions are raised
in the Slack.

775
00:34:19,930 --> 00:34:21,250
I cannot see,
but I want to

776
00:34:21,250 --> 00:34:23,440
respond to Alex comment.

777
00:34:23,440 --> 00:34:25,915
We don't have many
layers of conflict,

778
00:34:25,915 --> 00:34:27,475
we only have three things.

779
00:34:27,475 --> 00:34:29,425
We know that from Day one,

780
00:34:29,425 --> 00:34:32,320
that name Titus is
three things together.

781
00:34:32,320 --> 00:34:35,875
Identifying
application data used

782
00:34:35,875 --> 00:34:37,000
for forwarding and then

783
00:34:37,000 --> 00:34:39,025
used by security policies.

784
00:34:39,025 --> 00:34:40,870
So, therefore,

785
00:34:40,870 --> 00:34:42,880
it just that three
things come out.

786
00:34:42,880 --> 00:34:44,215
There's definitely
trade-off,

787
00:34:44,215 --> 00:34:46,690
those great
advantages doing so.

788
00:34:46,690 --> 00:34:48,880
The same identifier used

789
00:34:48,880 --> 00:34:51,445
across application
to the network.

790
00:34:51,445 --> 00:34:53,740
And the problem with

791
00:34:53,740 --> 00:34:54,760
the conflicts that natural

792
00:34:54,760 --> 00:34:58,075
but doesn't want to
see [inaudible] names.

793
00:34:58,075 --> 00:35:01,405
And was fundamentally
address that problem by

794
00:35:01,405 --> 00:35:05,680
folding on to say that
event a network layer.

795
00:35:05,680 --> 00:35:08,860
Let's use the semantic
names to call ADT.

796
00:35:08,860 --> 00:35:11,350
ADT instead of to

797
00:35:11,350 --> 00:35:13,570
these 3.78 or
something like that.

798
00:35:13,570 --> 00:35:16,660
Because once you
use semantic names,

799
00:35:16,660 --> 00:35:18,955
you can easily configure
your policies,

800
00:35:18,955 --> 00:35:21,175
and how you've treated
ATT announcement

801
00:35:21,175 --> 00:35:22,510
versus how you treat

802
00:35:22,510 --> 00:35:24,400
somebody else in the
doc announcement.

803
00:35:24,400 --> 00:35:26,560
But then nonetheless, to

804
00:35:26,560 --> 00:35:28,270
mark the name
for all things,

805
00:35:28,270 --> 00:35:29,830
for topological
connectivity,

806
00:35:29,830 --> 00:35:31,280
fabrication data.

807
00:35:31,280 --> 00:35:34,080
Then there's a
conflict absolutely.

808
00:35:34,080 --> 00:35:38,970
And then forwarding
that [FOREIGN],

809
00:35:38,970 --> 00:35:41,190
we say reclaim and

810
00:35:41,190 --> 00:35:43,590
then pegging
actually carries the

811
00:35:43,590 --> 00:35:45,955
both can carry both

812
00:35:45,955 --> 00:35:48,445
what that is the
data name and aware,

813
00:35:48,445 --> 00:35:49,720
which is a
forwarding hint.

814
00:35:49,720 --> 00:35:53,110
This resolved is a
fundamental dilemma.

815
00:35:53,110 --> 00:35:56,110
That's a phrase
that Yacco Islah,

816
00:35:56,110 --> 00:35:57,985
essentially Yacco Islah,

817
00:35:57,985 --> 00:36:01,390
created with regarding to

818
00:36:01,390 --> 00:36:04,885
PGP scalability
problem I say,

819
00:36:04,885 --> 00:36:10,315
go with either the
identifier payment

820
00:36:10,315 --> 00:36:11,980
for our end users,

821
00:36:11,980 --> 00:36:12,745
otherwise,

822
00:36:12,745 --> 00:36:15,640
with your connectivity
in a peak one.

823
00:36:15,640 --> 00:36:18,475
And we say, we
can carry both.

824
00:36:18,475 --> 00:36:22,540
So that carrying
the real data name,

825
00:36:22,540 --> 00:36:24,160
you can always
hit the cache

826
00:36:24,160 --> 00:36:25,885
if the data is
in the cache.

827
00:36:25,885 --> 00:36:27,700
Otherwise, you
move forward

828
00:36:27,700 --> 00:36:29,230
to following the
direction pointed

829
00:36:29,230 --> 00:36:32,950
out by the formula hint.

830
00:36:32,950 --> 00:36:36,310
So the other problems
with the security.

831
00:36:36,310 --> 00:36:39,010
I don't quite understand
this for this part,

832
00:36:39,010 --> 00:36:40,150
I need to learn from Alex,

833
00:36:40,150 --> 00:36:41,320
from others because I

834
00:36:41,320 --> 00:36:43,730
admit I don't do coding.

835
00:36:43,980 --> 00:36:47,860
And then has a great
advantage of helping

836
00:36:47,860 --> 00:36:49,360
security solutions
in the sense

837
00:36:49,360 --> 00:36:51,250
that everything has
a piece of data.

838
00:36:51,250 --> 00:36:53,080
The case of the data
your schemer and

839
00:36:53,080 --> 00:36:56,240
the data trust anchors
piece of data.

840
00:36:56,730 --> 00:36:59,890
We can play so
many games putting

841
00:36:59,890 --> 00:37:02,080
individually different
data components to

842
00:37:02,080 --> 00:37:06,385
satisfy your security
schemers definition

843
00:37:06,385 --> 00:37:07,960
automating all the

844
00:37:07,960 --> 00:37:10,460
security checking
and that.

845
00:37:11,040 --> 00:37:14,960
Either debates but
the ventilator.

846
00:37:19,260 --> 00:37:20,950
>> I'm going to suggest we

847
00:37:20,950 --> 00:37:22,120
move on to the next.

848
00:37:22,120 --> 00:37:26,320
The second question
which I asked

849
00:37:26,320 --> 00:37:31,630
about and there is

850
00:37:31,630 --> 00:37:32,830
now a couple of
questions in

851
00:37:32,830 --> 00:37:37,765
the Slack which we
will come back to.

852
00:37:37,765 --> 00:37:40,510
But I'm going to let
Luca lead off on

853
00:37:40,510 --> 00:37:42,880
business, the question is,

854
00:37:42,880 --> 00:37:44,725
what's the importance of

855
00:37:44,725 --> 00:37:48,565
business cases for
deployment and adoption?

856
00:37:48,565 --> 00:37:55,180
And Luca, as our
panelists from industry,

857
00:37:55,180 --> 00:37:57,445
will go ahead and
lead off on this.

858
00:37:57,445 --> 00:37:59,870
So go ahead, Luca. Thanks.

859
00:38:01,080 --> 00:38:03,220
>> I wanted to first

860
00:38:03,220 --> 00:38:05,470
answer one of the points
raised in the truck

861
00:38:05,470 --> 00:38:08,740
by Derek related to

862
00:38:08,740 --> 00:38:11,450
which is also related
to business in way

863
00:38:11,670 --> 00:38:15,350
on the mapping of

864
00:38:17,400 --> 00:38:20,830
applications names
to network names.

865
00:38:20,830 --> 00:38:22,645
And this is independent to

866
00:38:22,645 --> 00:38:24,250
mean that in
the end or HAC.

867
00:38:24,250 --> 00:38:26,470
And the point is if

868
00:38:26,470 --> 00:38:27,970
you have an existing
applications,

869
00:38:27,970 --> 00:38:29,560
the logic of
the application

870
00:38:29,560 --> 00:38:32,920
is the application
developers' business.

871
00:38:32,920 --> 00:38:34,825
You cannot change that.

872
00:38:34,825 --> 00:38:38,200
You just need to
honor that logic

873
00:38:38,200 --> 00:38:40,600
or in the best way

874
00:38:40,600 --> 00:38:43,270
you can on the
network side.

875
00:38:43,270 --> 00:38:46,585
So when I was
talking about that.

876
00:38:46,585 --> 00:38:51,025
The point was the
applications,

877
00:38:51,025 --> 00:38:53,230
we don't really care about

878
00:38:53,230 --> 00:38:55,810
how the logic in
the network work.

879
00:38:55,810 --> 00:38:56,980
They just want
to use them more

880
00:38:56,980 --> 00:39:00,040
efficiently for the
specific usage.

881
00:39:00,040 --> 00:39:02,244
And I was thinking
about online meetings,

882
00:39:02,244 --> 00:39:04,540
which is a use case
than in a well.

883
00:39:04,540 --> 00:39:07,060
And also because in
some cases you need to

884
00:39:07,060 --> 00:39:08,980
support a hybrid
environment where

885
00:39:08,980 --> 00:39:11,530
some clients may be ICN

886
00:39:11,530 --> 00:39:14,290
enabled and some clients
are not ICN enabled.

887
00:39:14,290 --> 00:39:15,940
So you want the
application to continue to

888
00:39:15,940 --> 00:39:17,740
work in all situations.

889
00:39:17,740 --> 00:39:20,080
So I'm not
advocating against

890
00:39:20,080 --> 00:39:22,780
or for a specific mapping,

891
00:39:22,780 --> 00:39:25,210
just that you need
the application to

892
00:39:25,210 --> 00:39:26,980
efficiently explores with

893
00:39:26,980 --> 00:39:30,100
your exposure from
the network side.

894
00:39:30,100 --> 00:39:32,305
Now from the business,

895
00:39:32,305 --> 00:39:35,965
I don't know
where to start.

896
00:39:35,965 --> 00:39:41,140
But one thing that

897
00:39:41,140 --> 00:39:46,340
I think is important
is that you need,

898
00:39:47,520 --> 00:39:50,575
at least from my
bias point of view,

899
00:39:50,575 --> 00:39:53,920
you need a way to increase
adoption by having

900
00:39:53,920 --> 00:39:56,950
businesses that can take

901
00:39:56,950 --> 00:39:58,360
advantage of
that technology.

902
00:39:58,360 --> 00:39:59,860
And so that
technology can evolve

903
00:39:59,860 --> 00:40:01,315
with the businesses
and vice versa.

904
00:40:01,315 --> 00:40:04,150
So you can use

905
00:40:04,150 --> 00:40:06,940
the running businesses
I feedback provided to

906
00:40:06,940 --> 00:40:08,275
the application
designer so

907
00:40:08,275 --> 00:40:09,760
a technology
designer to that,

908
00:40:09,760 --> 00:40:11,665
that is taken
into account.

909
00:40:11,665 --> 00:40:15,160
So I would say
that up to now as

910
00:40:15,160 --> 00:40:16,585
a lesson learned
in the case

911
00:40:16,585 --> 00:40:18,670
of ICN in general,

912
00:40:18,670 --> 00:40:20,695
there's a little
feedback from the field.

913
00:40:20,695 --> 00:40:26,545
So the adoption,
not huge and so

914
00:40:26,545 --> 00:40:29,320
that makes the
feedback coming from

915
00:40:29,320 --> 00:40:30,760
the business and
from the fields

916
00:40:30,760 --> 00:40:33,715
experience lacking
a little bit.

917
00:40:33,715 --> 00:40:35,860
So that was my point.

918
00:40:35,860 --> 00:40:37,330
It's important to
have that kind of

919
00:40:37,330 --> 00:40:39,070
feedback from

920
00:40:39,070 --> 00:40:43,660
real deployments,
real adoption,

921
00:40:43,660 --> 00:40:45,700
and relate it to

922
00:40:45,700 --> 00:40:47,050
their go-to-market
that I was mentioning

923
00:40:47,050 --> 00:40:48,490
that a go-to-market
fully based

924
00:40:48,490 --> 00:40:49,960
on a network product is

925
00:40:49,960 --> 00:40:53,230
hired and he's getting
harder and harder.

926
00:40:53,230 --> 00:40:55,780
There are some
examples that I had in

927
00:40:55,780 --> 00:41:00,400
mind where the adoption

928
00:41:00,400 --> 00:41:04,510
is relatively higher in
terms of go-to-market

929
00:41:04,510 --> 00:41:09,130
because we go more into

930
00:41:09,130 --> 00:41:11,620
something where a
go-to-market is built

931
00:41:11,620 --> 00:41:14,665
around a full,
complete service.

932
00:41:14,665 --> 00:41:16,060
To be an
application, could

933
00:41:16,060 --> 00:41:17,740
be an integration of

934
00:41:17,740 --> 00:41:18,850
different
components and so

935
00:41:18,850 --> 00:41:20,500
that you can get

936
00:41:20,500 --> 00:41:22,795
easy adoption
into the market.

937
00:41:22,795 --> 00:41:27,925
So that's my personal
understanding

938
00:41:27,925 --> 00:41:30,475
of in general, adoptions.

939
00:41:30,475 --> 00:41:33,370
And it'll be just based

940
00:41:33,370 --> 00:41:36,655
on a specific
network technology.

941
00:41:36,655 --> 00:41:41,780
It has to cover a more
integrated service.

942
00:41:43,500 --> 00:41:46,015
Yes the other
thing is more

943
00:41:46,015 --> 00:41:48,340
the last component when I

944
00:41:48,340 --> 00:41:50,635
was saying platforms and

945
00:41:50,635 --> 00:41:53,510
there was my
personal experience.

946
00:41:54,060 --> 00:41:56,874
You need to support

947
00:41:56,874 --> 00:42:00,340
essentially all
platform since Day 1.

948
00:42:00,340 --> 00:42:03,955
Otherwise, from
the market,

949
00:42:03,955 --> 00:42:08,170
you get back immediately

950
00:42:08,170 --> 00:42:09,355
like I cannot deploy

951
00:42:09,355 --> 00:42:10,690
these applications unless

952
00:42:10,690 --> 00:42:12,625
it works everywhere.

953
00:42:12,625 --> 00:42:15,010
Even the platform
today are

954
00:42:15,010 --> 00:42:17,815
consolidating to
a smaller number.

955
00:42:17,815 --> 00:42:20,860
Very much centered
over mobile and

956
00:42:20,860 --> 00:42:23,199
Cloud and so
that's simpler,

957
00:42:23,199 --> 00:42:24,460
but this will be available

958
00:42:24,460 --> 00:42:28,040
immediately to
get adoption.

959
00:42:28,890 --> 00:42:31,690
And I think I'm
more or less

960
00:42:31,690 --> 00:42:34,490
done for this item.

961
00:42:34,860 --> 00:42:38,090
>> Great. Thank you.

962
00:42:38,220 --> 00:42:42,220
Jeff had a couple of
comments and again,

963
00:42:42,220 --> 00:42:44,845
I'm taking these
somewhat out of context.

964
00:42:44,845 --> 00:42:46,405
I apologize from

965
00:42:46,405 --> 00:42:49,820
an email exchange
among the panelists.

966
00:42:50,910 --> 00:42:53,020
Well, there was quite a

967
00:42:53,020 --> 00:42:54,595
bit more in the email,

968
00:42:54,595 --> 00:42:55,630
but I didn't think
we would have

969
00:42:55,630 --> 00:42:56,920
time to go through
all of it.

970
00:42:56,920 --> 00:43:00,620
So Jeff and then
Alex is next.

971
00:43:01,710 --> 00:43:05,050
>> So I thought
the exchange

972
00:43:05,050 --> 00:43:08,860
with Luca in the
email around

973
00:43:08,860 --> 00:43:13,090
the viable go-to-market
strategies

974
00:43:13,090 --> 00:43:15,490
was really interesting to

975
00:43:15,490 --> 00:43:17,215
reflect on and make

976
00:43:17,215 --> 00:43:22,240
sense even from outside
the business world,

977
00:43:22,240 --> 00:43:25,570
and think about the
idea that Andean,

978
00:43:25,570 --> 00:43:27,205
maybe it's most
likely to have

979
00:43:27,205 --> 00:43:28,900
some commercial
viability in

980
00:43:28,900 --> 00:43:30,505
the context of
an application.

981
00:43:30,505 --> 00:43:32,770
And like Alex said, within

982
00:43:32,770 --> 00:43:34,600
these application
deployments,

983
00:43:34,600 --> 00:43:37,495
you have less of the
global worry and

984
00:43:37,495 --> 00:43:40,840
different kinds of
interesting problems.

985
00:43:40,840 --> 00:43:41,860
I think the point that I

986
00:43:41,860 --> 00:43:44,590
was making here
and probably would

987
00:43:44,590 --> 00:43:45,925
elaborate on a little bit

988
00:43:45,925 --> 00:43:49,450
was it seems like
in parallel with

989
00:43:49,450 --> 00:43:50,875
the pursuit of

990
00:43:50,875 --> 00:43:55,210
supporting the needs
of the industry,

991
00:43:55,210 --> 00:43:56,590
there is, I think still

992
00:43:56,590 --> 00:43:58,660
an opportunity to
do more in terms

993
00:43:58,660 --> 00:44:02,350
of usability of the
research code bases

994
00:44:02,350 --> 00:44:03,520
and things that
are available.

995
00:44:03,520 --> 00:44:08,010
So this was lessons
learned panel,

996
00:44:08,010 --> 00:44:10,530
and so my thought was

997
00:44:10,530 --> 00:44:13,875
that the lesson is
still the emphasis on

998
00:44:13,875 --> 00:44:16,890
usability and specifically
usability for

999
00:44:16,890 --> 00:44:18,540
application
developers to develop

1000
00:44:18,540 --> 00:44:21,450
non-toy distributed
applications.

1001
00:44:21,450 --> 00:44:24,270
So I think at the time,

1002
00:44:24,270 --> 00:44:26,220
maybe three or four
years ago we were

1003
00:44:26,220 --> 00:44:27,900
thinking of what
does it mean

1004
00:44:27,900 --> 00:44:29,400
for a set of

1005
00:44:29,400 --> 00:44:30,810
libraries to compete
with something like

1006
00:44:30,810 --> 00:44:32,720
firebase or
something where

1007
00:44:32,720 --> 00:44:35,260
I want to have
synchronized data

1008
00:44:35,260 --> 00:44:37,690
across many
different devices

1009
00:44:37,690 --> 00:44:39,130
that's managed by some

1010
00:44:39,130 --> 00:44:40,929
understandable application

1011
00:44:40,929 --> 00:44:43,930
supported namespace
and what's

1012
00:44:43,930 --> 00:44:46,960
the time that it
takes to develop and

1013
00:44:46,960 --> 00:44:48,040
deploy something

1014
00:44:48,040 --> 00:44:50,770
with the research code
bases that we had or

1015
00:44:50,770 --> 00:44:52,630
this semi research
code bases that were

1016
00:44:52,630 --> 00:44:55,285
around versus some
commercial solution.

1017
00:44:55,285 --> 00:44:57,610
And they're orders of

1018
00:44:57,610 --> 00:45:00,309
magnitude differences
in difficulty.

1019
00:45:00,309 --> 00:45:03,040
Sometimes because I
think maybe we're

1020
00:45:03,040 --> 00:45:05,890
trying to solve many
larger problems

1021
00:45:05,890 --> 00:45:09,880
within and I think this
has changed now with

1022
00:45:09,880 --> 00:45:11,080
the evolution of
different libraries

1023
00:45:11,080 --> 00:45:12,160
and things that are coming

1024
00:45:12,160 --> 00:45:14,500
out that trying to solve
really big problems.

1025
00:45:14,500 --> 00:45:16,810
Instead of looking maybe

1026
00:45:16,810 --> 00:45:17,920
at how can we provide

1027
00:45:17,920 --> 00:45:20,455
some immediate
usability within

1028
00:45:20,455 --> 00:45:22,060
an application developer's

1029
00:45:22,060 --> 00:45:23,650
contemporary context,

1030
00:45:23,650 --> 00:45:26,320
and so the last
comment was

1031
00:45:26,320 --> 00:45:29,170
a slightly more specific
version of that,

1032
00:45:29,170 --> 00:45:31,990
which I think that
the time over

1033
00:45:31,990 --> 00:45:32,830
the last couple of years I

1034
00:45:32,830 --> 00:45:34,000
have been looking like

1035
00:45:34,000 --> 00:45:36,745
I mentioned it at
networking in real-time,

1036
00:45:36,745 --> 00:45:39,340
shared real-time
graphics engines

1037
00:45:39,340 --> 00:45:41,350
and game engines and
things like that.

1038
00:45:41,350 --> 00:45:43,960
The solutions
are not great.

1039
00:45:43,960 --> 00:45:45,865
Especially in terms of

1040
00:45:45,865 --> 00:45:49,195
the semantics for large
shared applications.

1041
00:45:49,195 --> 00:45:51,280
And the direction towards

1042
00:45:51,280 --> 00:45:54,730
granular manipulation
of content in

1043
00:45:54,730 --> 00:45:57,400
these applications is
not really reflected in

1044
00:45:57,400 --> 00:46:00,010
the network layer in

1045
00:46:00,010 --> 00:46:01,330
the way that it
could be an NDN.

1046
00:46:01,330 --> 00:46:03,849
They're not
particularly resilient

1047
00:46:03,849 --> 00:46:06,970
to issues with mobility.

1048
00:46:06,970 --> 00:46:09,310
They don't handle
multi-homing well,

1049
00:46:09,310 --> 00:46:10,825
all the things that
NDN should do.

1050
00:46:10,825 --> 00:46:12,550
Luca had a really
good list of

1051
00:46:12,550 --> 00:46:15,850
three or four
main qualities

1052
00:46:15,850 --> 00:46:19,450
that NDN and I
see in general,

1053
00:46:19,450 --> 00:46:20,665
it might provide,

1054
00:46:20,665 --> 00:46:23,800
for example, easy support
for multi-homing.

1055
00:46:23,800 --> 00:46:28,195
The multicasts
support security

1056
00:46:28,195 --> 00:46:29,650
and then robustness
in mobility.

1057
00:46:29,650 --> 00:46:30,310
And there might have

1058
00:46:30,310 --> 00:46:32,350
been one other
in that list.

1059
00:46:32,350 --> 00:46:36,625
But because the
research code bases

1060
00:46:36,625 --> 00:46:40,060
are trying to do so much,

1061
00:46:40,060 --> 00:46:41,980
sometimes it makes
it difficult to

1062
00:46:41,980 --> 00:46:44,755
demonstrate those specific
points of values.

1063
00:46:44,755 --> 00:46:46,180
So how do I make a

1064
00:46:46,180 --> 00:46:49,810
complex shared
distributed application

1065
00:46:49,810 --> 00:46:52,150
that also demonstrates
those key properties

1066
00:46:52,150 --> 00:46:53,215
that come from NDN,

1067
00:46:53,215 --> 00:46:54,760
and so it'd be
flipping it and

1068
00:46:54,760 --> 00:46:56,470
looking at making sure we

1069
00:46:56,470 --> 00:47:00,415
can really
demonstrate the value

1070
00:47:00,415 --> 00:47:03,355
of NDN to the
business use cases,

1071
00:47:03,355 --> 00:47:07,195
since the topic
with a simpler,

1072
00:47:07,195 --> 00:47:08,665
lower amount of code

1073
00:47:08,665 --> 00:47:10,255
and less
sophisticated code

1074
00:47:10,255 --> 00:47:13,735
and looking at a single
application world,

1075
00:47:13,735 --> 00:47:15,715
the way that
Alex described

1076
00:47:15,715 --> 00:47:17,350
was definitely
a takeaway from

1077
00:47:17,350 --> 00:47:19,900
the last six or
seven years I

1078
00:47:19,900 --> 00:47:21,190
think for me.

1079
00:47:21,190 --> 00:47:23,455
I don't think I
have anything more.

1080
00:47:23,455 --> 00:47:26,530
>> That's time, and
I think we may come

1081
00:47:26,530 --> 00:47:27,640
back to some of that on

1082
00:47:27,640 --> 00:47:29,455
the next question
about APIs,

1083
00:47:29,455 --> 00:47:31,900
we'll revisit some
of those thoughts,

1084
00:47:31,900 --> 00:47:35,210
I think so. Alex.

1085
00:47:36,030 --> 00:47:38,620
I'm just trying to
remember what I said.

1086
00:47:38,620 --> 00:47:41,410
[LAUGHTER] I think there's

1087
00:47:41,410 --> 00:47:43,330
a good several points and

1088
00:47:43,330 --> 00:47:47,120
I'll probably start
with the second one.

1089
00:47:47,670 --> 00:47:50,170
There's a lot of
words in there.

1090
00:47:50,170 --> 00:47:52,990
But essentially,
I'm not good about

1091
00:47:52,990 --> 00:47:55,900
business cases
and in academia,

1092
00:47:55,900 --> 00:47:57,910
so I'm not 100%
sure about that.

1093
00:47:57,910 --> 00:48:00,415
But what I have
been observing is

1094
00:48:00,415 --> 00:48:03,550
a lot of time we get

1095
00:48:03,550 --> 00:48:07,120
into the performance
trap trying to

1096
00:48:07,120 --> 00:48:11,965
compare NDN to the IP
solution of some sorts.

1097
00:48:11,965 --> 00:48:14,650
And that's probably
not feasible,

1098
00:48:14,650 --> 00:48:19,075
neither with our
academic codebase,

1099
00:48:19,075 --> 00:48:22,660
nor even some companies

1100
00:48:22,660 --> 00:48:23,695
started doing an

1101
00:48:23,695 --> 00:48:26,275
implementation
of some sorts.

1102
00:48:26,275 --> 00:48:27,850
It's still not
going to be able to

1103
00:48:27,850 --> 00:48:30,085
compete at the levels

1104
00:48:30,085 --> 00:48:32,530
of current products that

1105
00:48:32,530 --> 00:48:34,300
can do performance
wherever,

1106
00:48:34,300 --> 00:48:35,485
because so many years,

1107
00:48:35,485 --> 00:48:37,570
so much amount
of money was

1108
00:48:37,570 --> 00:48:39,985
invested in development
of those solutions.

1109
00:48:39,985 --> 00:48:43,780
So what we need as
a business product

1110
00:48:43,780 --> 00:48:47,980
as a business cases is
something qualitative,

1111
00:48:47,980 --> 00:48:49,810
something that brings

1112
00:48:49,810 --> 00:48:52,090
completely new
features not

1113
00:48:52,090 --> 00:48:54,355
necessarily performance
because that's

1114
00:48:54,355 --> 00:48:56,275
not going to get
there anytime soon,

1115
00:48:56,275 --> 00:49:01,030
just in case to some
level maybe but again,

1116
00:49:01,030 --> 00:49:03,790
just not feasible to just

1117
00:49:03,790 --> 00:49:04,390
assume we're going to

1118
00:49:04,390 --> 00:49:06,310
do terabytes per second.

1119
00:49:06,310 --> 00:49:07,690
One small computer just

1120
00:49:07,690 --> 00:49:09,625
because we
suddenly use NDN.

1121
00:49:09,625 --> 00:49:12,040
NDN brings
different features.

1122
00:49:12,040 --> 00:49:16,030
It's the security.
What else?

1123
00:49:16,030 --> 00:49:20,665
Security again.
And more security

1124
00:49:20,665 --> 00:49:24,955
and not necessarily
layering,

1125
00:49:24,955 --> 00:49:27,325
but some other stuff.

1126
00:49:27,325 --> 00:49:30,040
So that's what
one dimension

1127
00:49:30,040 --> 00:49:33,220
and another lesson,
we need money.

1128
00:49:33,220 --> 00:49:35,530
Anybody, any
more companies

1129
00:49:35,530 --> 00:49:37,840
that want to give money
to us to develop?

1130
00:49:37,840 --> 00:49:41,560
[LAUGHTER] But the
first point is

1131
00:49:41,560 --> 00:49:43,870
there may be a
little bit of

1132
00:49:43,870 --> 00:49:45,430
a missed opportunity or

1133
00:49:45,430 --> 00:49:47,170
still, there is a
chance for that.

1134
00:49:47,170 --> 00:49:49,510
There's a lot of
current research

1135
00:49:49,510 --> 00:49:52,285
is going over
data-centric security,

1136
00:49:52,285 --> 00:49:53,830
or at least some aspect of

1137
00:49:53,830 --> 00:49:55,150
data-centric security

1138
00:49:55,150 --> 00:49:57,010
in the HTTP world today,

1139
00:49:57,010 --> 00:49:59,050
introducing some
signatures of

1140
00:49:59,050 --> 00:50:01,210
some sort of HTTP objects.

1141
00:50:01,210 --> 00:50:03,460
Jeff mentioned
the NFT object

1142
00:50:03,460 --> 00:50:05,785
is a datacenter,

1143
00:50:05,785 --> 00:50:07,495
completely different
purpose, but

1144
00:50:07,495 --> 00:50:10,060
some kind of a
data-centric element.

1145
00:50:10,060 --> 00:50:13,060
This is not
necessarily NDN world,

1146
00:50:13,060 --> 00:50:14,365
but it could have been,

1147
00:50:14,365 --> 00:50:16,300
or it can be

1148
00:50:16,300 --> 00:50:19,465
something some aspect
of NDN and apply it.

1149
00:50:19,465 --> 00:50:23,095
Maybe not missile
with networking part,

1150
00:50:23,095 --> 00:50:26,770
but data centricity could

1151
00:50:26,770 --> 00:50:29,150
be as a business case.

1152
00:50:30,360 --> 00:50:34,070
>> Thank you. Lan.

1153
00:50:34,130 --> 00:50:36,930
So my first comment

1154
00:50:36,930 --> 00:50:39,180
is related to
what Jeff said,

1155
00:50:39,180 --> 00:50:42,675
usability is key
for adoption.

1156
00:50:42,675 --> 00:50:46,245
So I think most companies,

1157
00:50:46,245 --> 00:50:49,560
they will adopt the
technology only

1158
00:50:49,560 --> 00:50:52,725
when our code base

1159
00:50:52,725 --> 00:50:56,640
is well-documented
and easy to use.

1160
00:50:56,640 --> 00:50:58,110
Of course, there are

1161
00:50:58,110 --> 00:51:00,780
exceptions like
Operand's networks.

1162
00:51:00,780 --> 00:51:02,490
They are willing to work

1163
00:51:02,490 --> 00:51:04,950
with imperfect code base.

1164
00:51:04,950 --> 00:51:09,660
But that's exception
rather than norm I feel.

1165
00:51:09,660 --> 00:51:15,120
But how are we
going to bridge

1166
00:51:15,120 --> 00:51:18,990
the gap from the
current imperfect code

1167
00:51:18,990 --> 00:51:21,615
to something that's
easy to use.

1168
00:51:21,615 --> 00:51:25,530
So my thinking
is we need to

1169
00:51:25,530 --> 00:51:29,490
leverage more funding
from NSF, DOD,

1170
00:51:29,490 --> 00:51:33,330
and other agencies so

1171
00:51:33,330 --> 00:51:35,610
they can help us develop

1172
00:51:35,610 --> 00:51:37,990
the code base itself.

1173
00:51:38,030 --> 00:51:43,020
And there are some
opportunities,

1174
00:51:43,020 --> 00:51:47,405
for example the NSF
opposed program that

1175
00:51:47,405 --> 00:51:53,705
is pathways to enable
open source ecosystems.

1176
00:51:53,705 --> 00:51:59,250
And I think we should
pursue that funding

1177
00:51:59,250 --> 00:52:05,355
to make our open
source code

1178
00:52:05,355 --> 00:52:09,810
more reliable, more
user-friendly.

1179
00:52:09,810 --> 00:52:13,245
And we need to leverage

1180
00:52:13,245 --> 00:52:18,015
community's support
to develop the code.

1181
00:52:18,015 --> 00:52:21,885
So that's the first point.

1182
00:52:21,885 --> 00:52:30,465
My second point is related
to what Alex said.

1183
00:52:30,465 --> 00:52:33,060
So security is
really one of

1184
00:52:33,060 --> 00:52:39,270
the major advantage and

1185
00:52:39,270 --> 00:52:41,160
Bienga has compared to IP.

1186
00:52:41,160 --> 00:52:46,065
So applications
that prioritize

1187
00:52:46,065 --> 00:52:49,905
security as well
as robustness in

1188
00:52:49,905 --> 00:52:51,600
a disconnected environment

1189
00:52:51,600 --> 00:52:53,940
and decentralization

1190
00:52:53,940 --> 00:52:56,565
will be best initial

1191
00:52:56,565 --> 00:53:00,160
business use
cases for NBN.

1192
00:53:06,310 --> 00:53:08,960
I think there are

1193
00:53:08,960 --> 00:53:11,075
many such use cases

1194
00:53:11,075 --> 00:53:13,085
like what Operand
has been doing.

1195
00:53:13,085 --> 00:53:16,400
They're using endian to

1196
00:53:16,400 --> 00:53:21,869
distribute data related
to energy production.

1197
00:53:21,869 --> 00:53:24,880
So that data has

1198
00:53:25,520 --> 00:53:28,575
very high security
requirement.

1199
00:53:28,575 --> 00:53:32,760
So definitely
that direction

1200
00:53:32,760 --> 00:53:35,055
has a lot of potential.

1201
00:53:35,055 --> 00:53:38,475
And for my group,

1202
00:53:38,475 --> 00:53:44,745
we've been working with
other researchers on

1203
00:53:44,745 --> 00:53:47,235
how do we use
NBN to support

1204
00:53:47,235 --> 00:53:52,440
communications between
drones or UAVs.

1205
00:53:52,440 --> 00:53:54,630
That requires a lot of

1206
00:53:54,630 --> 00:53:58,350
robustness in a
disconnected environment.

1207
00:53:58,350 --> 00:53:59,760
And I think
there's a lot of

1208
00:53:59,760 --> 00:54:04,230
business potential in
that direction as well.

1209
00:54:04,230 --> 00:54:08,535
So another case is
decentralization.

1210
00:54:08,535 --> 00:54:11,880
For example currently
a lot of companies

1211
00:54:11,880 --> 00:54:13,050
are trying to make use

1212
00:54:13,050 --> 00:54:15,960
of machine learning or AI.

1213
00:54:15,960 --> 00:54:21,780
And that machine
learning training

1214
00:54:21,780 --> 00:54:25,125
requires a lot of
computation power.

1215
00:54:25,125 --> 00:54:28,860
And also you need
a lot of data.

1216
00:54:28,860 --> 00:54:32,445
But oftentimes the data

1217
00:54:32,445 --> 00:54:36,000
has security concerns
or privacy concerns,

1218
00:54:36,000 --> 00:54:39,510
so you cannot
centralize the data.

1219
00:54:39,510 --> 00:54:42,090
So how do you
make sure that

1220
00:54:42,090 --> 00:54:44,565
the machine learning
model can be trained

1221
00:54:44,565 --> 00:54:47,219
in a decentralized fashion

1222
00:54:47,219 --> 00:54:50,860
on data that are private?

1223
00:54:50,900 --> 00:54:53,220
I think that
will have a lot

1224
00:54:53,220 --> 00:54:55,220
of business use as well.

1225
00:54:55,220 --> 00:54:56,989
I'm just giving
some examples.

1226
00:54:56,989 --> 00:54:58,310
I think there's a lot of

1227
00:54:58,310 --> 00:55:03,830
potential endian in
business use cases.

1228
00:55:03,830 --> 00:55:08,910
>> You got 30 seconds.

1229
00:55:10,520 --> 00:55:13,125
>> Before wide adoption of

1230
00:55:13,125 --> 00:55:15,750
NBN I think we can use

1231
00:55:15,750 --> 00:55:19,590
academic or scientific
use cases to drive

1232
00:55:19,590 --> 00:55:24,840
our application or code
based development.

1233
00:55:24,840 --> 00:55:28,770
They can serve
as use cases

1234
00:55:28,770 --> 00:55:30,780
for initial NBN
deployment,

1235
00:55:30,780 --> 00:55:34,260
just like ARPANET
and NSFNET,

1236
00:55:34,260 --> 00:55:37,290
they connected the
academic sites

1237
00:55:37,290 --> 00:55:38,370
or DOD sites.

1238
00:55:38,370 --> 00:55:41,640
[NOISE] Thank you.

1239
00:55:41,640 --> 00:55:43,965
>> Thanks. We're going
to hear from Lixia

1240
00:55:43,965 --> 00:55:45,120
and then I have
a question from

1241
00:55:45,120 --> 00:55:46,620
the Slack for the panel

1242
00:55:46,620 --> 00:55:47,925
that I'm going to pose,

1243
00:55:47,925 --> 00:55:48,990
I'm going to relay.

1244
00:55:48,990 --> 00:55:51,045
So Lixia go ahead.

1245
00:55:51,045 --> 00:55:52,950
>> I wish I could
help follow

1246
00:55:52,950 --> 00:55:54,375
the locus comments

1247
00:55:54,375 --> 00:55:57,330
because there's some
clarifications.

1248
00:55:57,330 --> 00:56:02,880
There was this keyword,
was it go-to-market?

1249
00:56:02,880 --> 00:56:05,205
We never spelled
out exactly

1250
00:56:05,205 --> 00:56:07,995
what other things
go into market.

1251
00:56:07,995 --> 00:56:11,325
There's a breakfast
cereal go into market,

1252
00:56:11,325 --> 00:56:15,190
and there's Tesla
car go into market.

1253
00:56:15,290 --> 00:56:22,125
I figure that because
the initial community

1254
00:56:22,125 --> 00:56:25,590
learned and got
excited about

1255
00:56:25,590 --> 00:56:30,180
NBN or mostly people
in networking area.

1256
00:56:30,180 --> 00:56:31,785
And therefore,

1257
00:56:31,785 --> 00:56:36,090
taking advantage of
this design to improve

1258
00:56:36,090 --> 00:56:42,810
network seems to be
just first instinct.

1259
00:56:42,810 --> 00:56:44,910
So therefore, although

1260
00:56:44,910 --> 00:56:46,050
it's not spelled out,

1261
00:56:46,050 --> 00:56:48,855
but that's what I
see as the thing.

1262
00:56:48,855 --> 00:56:51,315
How we can take
this new technology

1263
00:56:51,315 --> 00:56:54,165
to improve the
infrastructure.

1264
00:56:54,165 --> 00:56:58,515
I think it's HICN
using ICN to

1265
00:56:58,515 --> 00:57:01,335
disseminate radio
conferences

1266
00:57:01,335 --> 00:57:03,760
is in that direction.

1267
00:57:06,200 --> 00:57:09,165
I said in the
email exchange,

1268
00:57:09,165 --> 00:57:11,160
new revolutions they were

1269
00:57:11,160 --> 00:57:14,595
started by building
infrastructure.

1270
00:57:14,595 --> 00:57:16,650
IT already told us.

1271
00:57:16,650 --> 00:57:18,960
Well now if you
first started up,

1272
00:57:18,960 --> 00:57:21,210
there's no
go-to-market to say,

1273
00:57:21,210 --> 00:57:23,280
hey guys, the telecom,

1274
00:57:23,280 --> 00:57:25,350
ain't you going to switch

1275
00:57:25,350 --> 00:57:26,595
to packet switching.

1276
00:57:26,595 --> 00:57:28,800
That would be very

1277
00:57:28,800 --> 00:57:31,500
bizarre if anyone
ever said that.

1278
00:57:31,500 --> 00:57:35,760
IVs started by just
connecting computers and

1279
00:57:35,760 --> 00:57:40,350
have this magic application
called the email.

1280
00:57:40,350 --> 00:57:43,470
Everyone, at the
time learned about

1281
00:57:43,470 --> 00:57:46,200
the email wanted
to get email.

1282
00:57:46,200 --> 00:57:47,880
And therefore they install

1283
00:57:47,880 --> 00:57:50,100
the TCPIP protocol stack,

1284
00:57:50,100 --> 00:57:51,480
they tail off to

1285
00:57:51,480 --> 00:57:54,495
other machines like
email servers.

1286
00:57:54,495 --> 00:57:56,310
That's how IP started,

1287
00:57:56,310 --> 00:57:58,305
and that produced
the traffic.

1288
00:57:58,305 --> 00:58:01,890
The traffic all carried
by and large on

1289
00:58:01,890 --> 00:58:05,445
the telephony
infrastructure until

1290
00:58:05,445 --> 00:58:08,955
sometime later when
the volume get so big,

1291
00:58:08,955 --> 00:58:10,650
then smart guys like

1292
00:58:10,650 --> 00:58:12,420
Cisco vendors figured out

1293
00:58:12,420 --> 00:58:14,310
they can figure the box,

1294
00:58:14,310 --> 00:58:17,565
called it authors or
gateways at the time

1295
00:58:17,565 --> 00:58:20,865
to offer the product

1296
00:58:20,865 --> 00:58:23,385
in the name of
ISP business.

1297
00:58:23,385 --> 00:58:26,310
So I think the
new architecture

1298
00:58:26,310 --> 00:58:28,680
do not start from
the infrastructure,

1299
00:58:28,680 --> 00:58:33,060
the applying, and
the end to improve

1300
00:58:33,060 --> 00:58:34,635
infrastructure support.

1301
00:58:34,635 --> 00:58:38,055
Definitely a brand's
great advantages.

1302
00:58:38,055 --> 00:58:40,740
But look from the
legacy of your points,

1303
00:58:40,740 --> 00:58:42,465
where the heck without
the solutions?

1304
00:58:42,465 --> 00:58:43,905
There's the CDNs.

1305
00:58:43,905 --> 00:58:47,550
All kind of different
CDNs has worked.

1306
00:58:47,550 --> 00:58:49,230
Worked pretty effectively

1307
00:58:49,230 --> 00:58:50,730
to make the end-users

1308
00:58:50,730 --> 00:58:53,430
high-paid so that
the huge revenue

1309
00:58:53,430 --> 00:58:55,065
to make there.

1310
00:58:55,065 --> 00:58:56,925
And therefore, I
don't think that's

1311
00:58:56,925 --> 00:58:58,770
enough incentives to do

1312
00:58:58,770 --> 00:59:00,870
improvement by
adding cash,

1313
00:59:00,870 --> 00:59:03,690
by adding
multicast to say,

1314
00:59:03,690 --> 00:59:06,090
we do a better
job than CDN.

1315
00:59:06,090 --> 00:59:08,835
This is not the thing.

1316
00:59:08,835 --> 00:59:11,490
So I think I
agree with Alex,

1317
00:59:11,490 --> 00:59:13,230
said it too Jeff too.

1318
00:59:13,230 --> 00:59:15,180
So I think that's really
the critical point

1319
00:59:15,180 --> 00:59:17,695
is go-to-market with what?

1320
00:59:17,695 --> 00:59:19,805
If we have something

1321
00:59:19,805 --> 00:59:21,860
like an email
back 40 years.

1322
00:59:21,860 --> 00:59:24,410
I remember wanted, then
you don't know how

1323
00:59:24,410 --> 00:59:27,320
to put too much
effort on this,

1324
00:59:27,320 --> 00:59:29,494
the go-to-market
direction,

1325
00:59:29,494 --> 00:59:31,465
since will happen.

1326
00:59:31,465 --> 00:59:36,645
I lost many things,
people said.

1327
00:59:36,645 --> 00:59:41,790
So Jeff mentioned about

1328
00:59:41,790 --> 00:59:43,890
usability for
application developers.

1329
00:59:43,890 --> 00:59:45,315
I think that
Jeff basically

1330
00:59:45,315 --> 00:59:47,070
implicitly hinted,

1331
00:59:47,070 --> 00:59:49,320
not that I'm
being very bland,

1332
00:59:49,320 --> 00:59:51,180
hinted that really we need

1333
00:59:51,180 --> 00:59:52,935
to focus on developing

1334
00:59:52,935 --> 00:59:57,960
applications so that we've

1335
00:59:57,960 --> 01:00:00,570
got traffic than the
architecture would.

1336
01:00:00,570 --> 01:00:02,400
I mean, the infrastructure
will change

1337
01:00:02,400 --> 01:00:05,020
afterwards not
before that.

1338
01:00:10,490 --> 01:00:13,350
I agree with Alex.

1339
01:00:13,350 --> 01:00:14,280
I think we said

1340
01:00:14,280 --> 01:00:15,555
the same thing in
different ways.

1341
01:00:15,555 --> 01:00:18,090
He was saying
that, let's not

1342
01:00:18,090 --> 01:00:20,700
put all the effort
on improving

1343
01:00:20,700 --> 01:00:22,545
the performance because

1344
01:00:22,545 --> 01:00:24,315
the research community

1345
01:00:24,315 --> 01:00:27,389
are not the ones to
improve the performance.

1346
01:00:27,389 --> 01:00:30,390
And if I make

1347
01:00:30,390 --> 01:00:33,180
an analogy, that's
the same thing.

1348
01:00:33,180 --> 01:00:34,695
When the IP first started,

1349
01:00:34,695 --> 01:00:37,830
nobody wanted to carry

1350
01:00:37,830 --> 01:00:40,305
on the business
telephone calls.

1351
01:00:40,305 --> 01:00:42,720
That's what the telephone
company is doing.

1352
01:00:42,720 --> 01:00:44,610
Hey, we'll do
telephone calls

1353
01:00:44,610 --> 01:00:46,049
and get with the
same performance.

1354
01:00:46,049 --> 01:00:49,080
That was, again, at
the time, I think of.

1355
01:00:49,080 --> 01:00:52,140
IP was started
by supporting

1356
01:00:52,140 --> 01:00:55,380
[NOISE] the applications
that people wants.

1357
01:00:55,380 --> 01:00:58,200
The telephone feed
more l to IP.

1358
01:00:58,200 --> 01:01:01,920
But that's after the
infrastructure for IP

1359
01:01:01,920 --> 01:01:03,750
developed and we

1360
01:01:03,750 --> 01:01:06,390
automatically support
the performance.

1361
01:01:06,390 --> 01:01:08,940
So I'm done. I have

1362
01:01:08,940 --> 01:01:10,545
more points but
I'll wait later.

1363
01:01:10,545 --> 01:01:13,515
>> Question from
Dirk Kutscher,

1364
01:01:13,515 --> 01:01:14,970
does the panel think

1365
01:01:14,970 --> 01:01:17,069
that from a go-to-market
perspective,

1366
01:01:17,069 --> 01:01:19,940
endians should move
up a layer running

1367
01:01:19,940 --> 01:01:24,390
in quick slash
mask overlays?

1368
01:01:24,550 --> 01:01:27,320
And there's a little bit
of back-and-forth in

1369
01:01:27,320 --> 01:01:34,560
the Slack about the
question about improving

1370
01:01:34,560 --> 01:01:36,990
performance versus
qualitative improvements

1371
01:01:36,990 --> 01:01:40,360
and different
ways to do that.

1372
01:01:42,380 --> 01:01:44,490
So does anybody want to

1373
01:01:44,490 --> 01:01:46,755
respond to
Dirt's question,

1374
01:01:46,755 --> 01:01:50,170
moving up a layer? Alex.

1375
01:01:50,610 --> 01:01:53,200
If I'm not necessarily

1376
01:01:53,200 --> 01:01:54,415
answer the question,

1377
01:01:54,415 --> 01:01:57,250
but maybe in a
different way.

1378
01:01:57,250 --> 01:02:00,040
It's again about
the question about

1379
01:02:00,040 --> 01:02:02,590
the qualitative
properties of

1380
01:02:02,590 --> 01:02:04,120
the, whatever
new solutions.

1381
01:02:04,120 --> 01:02:07,210
It's something that can
be today implemented,

1382
01:02:07,210 --> 01:02:09,220
maybe with some
overlay implementation

1383
01:02:09,220 --> 01:02:12,635
or wherever layering
on top of something,

1384
01:02:12,635 --> 01:02:15,380
then we don't need NDN.

1385
01:02:15,380 --> 01:02:18,040
But we really want

1386
01:02:18,040 --> 01:02:19,510
to look for the
solutions that are

1387
01:02:19,510 --> 01:02:21,490
not feasible to be

1388
01:02:21,490 --> 01:02:23,620
implemented
today using IP.

1389
01:02:23,620 --> 01:02:26,305
And then I only have
maybe right now,

1390
01:02:26,305 --> 01:02:28,030
very simple example today

1391
01:02:28,030 --> 01:02:30,925
, inter vehicle
networking.

1392
01:02:30,925 --> 01:02:33,040
But with IP, you

1393
01:02:33,040 --> 01:02:35,215
may need to think
about IP addresses,

1394
01:02:35,215 --> 01:02:37,990
but talk between the cars,

1395
01:02:37,990 --> 01:02:39,850
what is the IP
address of the car?

1396
01:02:39,850 --> 01:02:41,680
What's the point of it?

1397
01:02:41,680 --> 01:02:44,005
What is the communication?

1398
01:02:44,005 --> 01:02:45,910
I don't think that
is even possible

1399
01:02:45,910 --> 01:02:47,410
to build the overlay
if you want to

1400
01:02:47,410 --> 01:02:49,855
have this communication
versus if you

1401
01:02:49,855 --> 01:02:52,960
have names then it's
a different story.

1402
01:02:52,960 --> 01:02:54,940
There is no anything
underneath.

1403
01:02:54,940 --> 01:02:56,350
There is an
overlay that is

1404
01:02:56,350 --> 01:02:58,120
possible to do there
in the first place.

1405
01:02:58,120 --> 01:03:02,515
So my point to
those questions,

1406
01:03:02,515 --> 01:03:04,975
we'll really look for
the business case.

1407
01:03:04,975 --> 01:03:07,060
We need something unique,

1408
01:03:07,060 --> 01:03:09,895
something like new areas

1409
01:03:09,895 --> 01:03:11,920
that are not covered
with the IP.

1410
01:03:11,920 --> 01:03:13,720
If something's
covered by IP,

1411
01:03:13,720 --> 01:03:14,920
maybe not working as

1412
01:03:14,920 --> 01:03:16,750
well, it can be improved.

1413
01:03:16,750 --> 01:03:19,460
We don't necessarily
need NDN there.

1414
01:03:21,180 --> 01:03:24,085
>> I'll give a different
answer for that.

1415
01:03:24,085 --> 01:03:26,365
I think that like
a quick use,

1416
01:03:26,365 --> 01:03:27,910
it really take
advantage of

1417
01:03:27,910 --> 01:03:30,250
the semantic
identifier part.

1418
01:03:30,250 --> 01:03:31,810
So you can think that

1419
01:03:31,810 --> 01:03:33,400
NDN is not NDN but
I think it will

1420
01:03:33,400 --> 01:03:34,825
push on the direction of

1421
01:03:34,825 --> 01:03:37,225
how to do future
and networking,

1422
01:03:37,225 --> 01:03:40,180
maybe not check
on the details.

1423
01:03:40,180 --> 01:03:42,190
But I do agree
with Alex that

1424
01:03:42,190 --> 01:03:44,215
is those applications that

1425
01:03:44,215 --> 01:03:46,690
don't have solutions
or IP would be

1426
01:03:46,690 --> 01:03:48,700
the breaking points for

1427
01:03:48,700 --> 01:03:51,070
the new things to
come up first,

1428
01:03:51,070 --> 01:03:53,320
that I fully agree.

1429
01:03:53,320 --> 01:03:57,385
Also, with regarding
to more of the layers,

1430
01:03:57,385 --> 01:03:58,660
I think that's the nature,

1431
01:03:58,660 --> 01:04:01,210
it seems, of the
architecture.

1432
01:04:01,210 --> 01:04:03,520
Look at the
California started by

1433
01:04:03,520 --> 01:04:06,070
building the
physical layer and

1434
01:04:06,070 --> 01:04:08,470
the IP really get rid
of this worrying about

1435
01:04:08,470 --> 01:04:11,260
the physical layers as
Turkey, so whatever.

1436
01:04:11,260 --> 01:04:12,955
They say, just to
deliver the packets

1437
01:04:12,955 --> 01:04:14,170
to the destination,

1438
01:04:14,170 --> 01:04:16,000
take it whichever
way you want.

1439
01:04:16,000 --> 01:04:17,920
So therefore, NDN as

1440
01:04:17,920 --> 01:04:20,545
the next
architectural change,

1441
01:04:20,545 --> 01:04:22,390
we don't really
have to worry

1442
01:04:22,390 --> 01:04:25,180
about the points
or destinations,

1443
01:04:25,180 --> 01:04:28,620
broadcasted nature or
not for the media.

1444
01:04:28,620 --> 01:04:29,970
Let's just talk about

1445
01:04:29,970 --> 01:04:31,590
what application want and

1446
01:04:31,590 --> 01:04:33,360
see how we can get the

1447
01:04:33,360 --> 01:04:34,965
objects that people want.

1448
01:04:34,965 --> 01:04:36,450
I think it's moving app,

1449
01:04:36,450 --> 01:04:38,310
the layer is a necessity

1450
01:04:38,310 --> 01:04:40,180
of the new architecture.

1451
01:04:40,180 --> 01:04:42,280
You can keep addressing

1452
01:04:42,280 --> 01:04:43,810
the same problem
or deliver

1453
01:04:43,810 --> 01:04:45,640
packeges from this
node to that node.

1454
01:04:45,640 --> 01:04:50,800
That's another new
architecture [inaudible]

1455
01:04:50,800 --> 01:04:56,990
>> So several points
in the Slack.

1456
01:04:57,870 --> 01:05:00,280
Dirk asked
another question,

1457
01:05:00,280 --> 01:05:02,440
is there is a
similar problem to

1458
01:05:02,440 --> 01:05:04,660
the 1990s problem
of solving

1459
01:05:04,660 --> 01:05:10,220
global interconnection
that NDN can address.

1460
01:05:11,160 --> 01:05:15,055
Use several people while

1461
01:05:15,055 --> 01:05:17,230
Adam A says usability,

1462
01:05:17,230 --> 01:05:19,390
maintainability is a
key sticking point

1463
01:05:19,390 --> 01:05:21,235
to wider adoption.

1464
01:05:21,235 --> 01:05:24,010
The easier it is to
deploy, stand up,

1465
01:05:24,010 --> 01:05:25,720
and maintain an
NDN network,

1466
01:05:25,720 --> 01:05:26,980
the more adoption
you will get.

1467
01:05:26,980 --> 01:05:30,340
Which brings us to the
next point about APIs.

1468
01:05:30,340 --> 01:05:33,400
And Dave wants to disagree
a little bit with

1469
01:05:33,400 --> 01:05:37,135
some of your points,
Felicia, about business.

1470
01:05:37,135 --> 01:05:39,790
He said that new
infrastructure

1471
01:05:39,790 --> 01:05:42,310
like quick plus
TLS plus load

1472
01:05:42,310 --> 01:05:45,940
balancers had a strong
business case without

1473
01:05:45,940 --> 01:05:47,980
any new applications
and that did

1474
01:05:47,980 --> 01:05:51,680
just upgrade the
infrastructure.

1475
01:05:52,350 --> 01:05:58,255
So rather than go into
that long debate,

1476
01:05:58,255 --> 01:06:00,880
let's move on to
APIs because so far,

1477
01:06:00,880 --> 01:06:02,410
we're just right
on time and I

1478
01:06:02,410 --> 01:06:04,120
would like to
stay on time.

1479
01:06:04,120 --> 01:06:05,860
So we're going to move
to the next question

1480
01:06:05,860 --> 01:06:07,270
and Jeff is going
to lead off

1481
01:06:07,270 --> 01:06:11,650
on APIs and then
Luca will be next.

1482
01:06:11,650 --> 01:06:14,890
>> This is, I guess,
a good follow-up to

1483
01:06:14,890 --> 01:06:17,170
the question and
conversation that

1484
01:06:17,170 --> 01:06:18,670
was here in which
I was thinking

1485
01:06:18,670 --> 01:06:23,335
about during the
last conversation.

1486
01:06:23,335 --> 01:06:25,255
Is that I wonder if

1487
01:06:25,255 --> 01:06:27,730
it might be worthwhile
in some projects

1488
01:06:27,730 --> 01:06:30,130
to drop the emphasis

1489
01:06:30,130 --> 01:06:31,570
on networking
and really think

1490
01:06:31,570 --> 01:06:34,825
about name data itself

1491
01:06:34,825 --> 01:06:39,505
and how does the
cured name data

1492
01:06:39,505 --> 01:06:42,339
and building on
that concept,

1493
01:06:42,339 --> 01:06:45,070
change application
design and whether

1494
01:06:45,070 --> 01:06:48,805
it's for existing or
new applications.

1495
01:06:48,805 --> 01:06:51,460
So that we can get
a little further up

1496
01:06:51,460 --> 01:06:53,170
in the stack in terms
of the support that

1497
01:06:53,170 --> 01:06:54,729
we're providing
to developers

1498
01:06:54,729 --> 01:06:56,620
with now the
understanding that there

1499
01:06:56,620 --> 01:06:59,380
is research that is

1500
01:06:59,380 --> 01:07:02,140
happening on once
you have that data,

1501
01:07:02,140 --> 01:07:04,060
how to get it forwarded,

1502
01:07:04,060 --> 01:07:06,160
how to get it
moving around

1503
01:07:06,160 --> 01:07:08,335
in-between
individual nodes?

1504
01:07:08,335 --> 01:07:10,780
So it's interesting.

1505
01:07:10,780 --> 01:07:14,350
Just tiny example was
that as a developer

1506
01:07:14,350 --> 01:07:15,910
thinking about
name data at

1507
01:07:15,910 --> 01:07:18,400
the very beginning
of the NDN project,

1508
01:07:18,400 --> 01:07:20,320
one of the facilities

1509
01:07:20,320 --> 01:07:22,360
I think many people
were looking

1510
01:07:22,360 --> 01:07:24,070
for or wanted
was how do we do

1511
01:07:24,070 --> 01:07:26,320
wildcard matching
on names?

1512
01:07:26,320 --> 01:07:28,750
How do we get all
the data that's out

1513
01:07:28,750 --> 01:07:31,300
there with a wildcard
in the hierarchy?

1514
01:07:31,300 --> 01:07:32,500
And it took a
while, I think

1515
01:07:32,500 --> 01:07:33,850
Felicia, and
Van, and others,

1516
01:07:33,850 --> 01:07:35,680
and maybe all the
networking folks

1517
01:07:35,680 --> 01:07:40,480
to explaining that that

1518
01:07:40,480 --> 01:07:42,550
maybe wasn't the
right way to think

1519
01:07:42,550 --> 01:07:44,530
about what was going on on

1520
01:07:44,530 --> 01:07:46,465
the network and
the efficiencies

1521
01:07:46,465 --> 01:07:50,260
of name-based interest
data communication.

1522
01:07:50,260 --> 01:07:54,190
But later on,
once there were

1523
01:07:54,190 --> 01:07:57,130
some workable
synchronization protocols

1524
01:07:57,130 --> 01:07:58,360
and you could keep

1525
01:07:58,360 --> 01:08:01,135
a chunk of the
namespace information

1526
01:08:01,135 --> 01:08:03,355
in memory on
different nodes,

1527
01:08:03,355 --> 01:08:05,680
we could return to
that idea of giving

1528
01:08:05,680 --> 01:08:07,330
the developer wildcard

1529
01:08:07,330 --> 01:08:09,250
matching against
named data.

1530
01:08:09,250 --> 01:08:13,000
Whether it was at a
high prefix level,

1531
01:08:13,000 --> 01:08:15,100
or really on
individual packets

1532
01:08:15,100 --> 01:08:16,300
that were moving
around the network.

1533
01:08:16,300 --> 01:08:17,590
So seven or eight
years later,

1534
01:08:17,590 --> 01:08:18,730
that concept that sort of

1535
01:08:18,730 --> 01:08:20,800
intuitively
seemed helpful to

1536
01:08:20,800 --> 01:08:22,870
developers could
be implemented

1537
01:08:22,870 --> 01:08:25,930
somewhere up in
an API without

1538
01:08:25,930 --> 01:08:27,730
necessarily trying to
push something that

1539
01:08:27,730 --> 01:08:29,770
was very inefficient in

1540
01:08:29,770 --> 01:08:31,090
terms of the network
communication

1541
01:08:31,090 --> 01:08:32,755
itself and that example is

1542
01:08:32,755 --> 01:08:35,590
stuck with me about
not giving up

1543
01:08:35,590 --> 01:08:38,650
on intuitive uses
for named data at

1544
01:08:38,650 --> 01:08:40,180
the application layer and

1545
01:08:40,180 --> 01:08:42,040
things that we can
do to make it easier

1546
01:08:42,040 --> 01:08:44,290
for developers to
work with the idea

1547
01:08:44,290 --> 01:08:46,990
of managing their
data in that way.

1548
01:08:46,990 --> 01:08:48,400
I think that's maybe in

1549
01:08:48,400 --> 01:08:50,050
the interest of
time all I'll say

1550
01:08:50,050 --> 01:08:52,870
here and let it go on
to the next panelists.

1551
01:08:52,870 --> 01:08:54,880
But we'd love to continue

1552
01:08:54,880 --> 01:08:58,150
the conversation
about what happens if

1553
01:08:58,150 --> 01:08:59,890
we drop the last end for

1554
01:08:59,890 --> 01:09:02,020
a little while
and think about

1555
01:09:02,020 --> 01:09:03,910
providing support
further up in

1556
01:09:03,910 --> 01:09:07,210
the stack for
these concepts.

1557
01:09:07,210 --> 01:09:11,240
>> Great. Thanks. Luca.

1558
01:09:16,230 --> 01:09:19,480
>> I was reading
the Slack channel

1559
01:09:19,480 --> 01:09:23,080
[LAUGHTER] conversation
ongoing there.

1560
01:09:23,080 --> 01:09:26,720
Trying to focus on this
slide for a second.

1561
01:09:30,510 --> 01:09:35,460
What I was trying to
say here is mostly

1562
01:09:35,460 --> 01:09:37,874
based on my
personal experience

1563
01:09:37,874 --> 01:09:39,990
from the last three years,

1564
01:09:39,990 --> 01:09:42,540
essentially integrating
with applications

1565
01:09:42,540 --> 01:09:48,930
and mostly WebEx, WebRTC,

1566
01:09:48,930 --> 01:09:58,485
and game engines and
every time and again,

1567
01:09:58,485 --> 01:10:03,910
our user base for

1568
01:10:03,910 --> 01:10:05,575
us just application
developers.

1569
01:10:05,575 --> 01:10:08,890
And our effort was
convinced them to

1570
01:10:08,890 --> 01:10:14,725
use our technology
in a simplest way.

1571
01:10:14,725 --> 01:10:18,700
So when I come
here to APIs and

1572
01:10:18,700 --> 01:10:22,630
consummability
have a product

1573
01:10:22,630 --> 01:10:23,965
that is easy to consumer,

1574
01:10:23,965 --> 01:10:27,410
there was top of
mind, definitely.

1575
01:10:27,680 --> 01:10:31,635
And a difficulty was

1576
01:10:31,635 --> 01:10:34,080
that everyone has a
different idea of

1577
01:10:34,080 --> 01:10:35,850
how that middleware should

1578
01:10:35,850 --> 01:10:38,460
work and how that

1579
01:10:38,460 --> 01:10:40,095
middleware should
be consumed.

1580
01:10:40,095 --> 01:10:42,885
And this is where
adoption helps

1581
01:10:42,885 --> 01:10:46,260
because there's
nothing worse

1582
01:10:46,260 --> 01:10:49,210
than having two customers,

1583
01:10:49,210 --> 01:10:51,850
especially if these
two customers

1584
01:10:51,850 --> 01:10:54,310
they have completely
different opinion.

1585
01:10:54,310 --> 01:10:58,060
And that's something that

1586
01:10:58,060 --> 01:10:59,710
goes hand by hand
with adoption.

1587
01:10:59,710 --> 01:11:05,560
And when I say adoption,
adoption of users,

1588
01:11:05,560 --> 01:11:10,690
application developers
using your technology

1589
01:11:10,690 --> 01:11:13,750
for solving a
problem they have.

1590
01:11:13,750 --> 01:11:16,930
In our case, the
problem was mostly

1591
01:11:16,930 --> 01:11:23,500
the same scalability which

1592
01:11:23,500 --> 01:11:25,645
was measured as
cloud offloading,

1593
01:11:25,645 --> 01:11:27,085
being able to scale up

1594
01:11:27,085 --> 01:11:28,600
without using the Cloud
because it's very

1595
01:11:28,600 --> 01:11:31,060
expensive and
the second one

1596
01:11:31,060 --> 01:11:32,860
was quality of
the application.

1597
01:11:32,860 --> 01:11:35,335
And then when you talk
to an application,

1598
01:11:35,335 --> 01:11:38,155
they think about quality
very differently.

1599
01:11:38,155 --> 01:11:40,240
And so if you have

1600
01:11:40,240 --> 01:11:41,740
video quality is totally

1601
01:11:41,740 --> 01:11:43,525
different than
a game quality,

1602
01:11:43,525 --> 01:11:46,090
or degradation of an
application is measured

1603
01:11:46,090 --> 01:11:48,450
differently and
so it's very

1604
01:11:48,450 --> 01:11:51,465
hard for a single player,

1605
01:11:51,465 --> 01:11:54,585
like in our case,
our Cisco team,

1606
01:11:54,585 --> 01:11:57,480
to address all these use

1607
01:11:57,480 --> 01:11:59,220
cases because they might

1608
01:11:59,220 --> 01:12:01,565
be completely
out of phase.

1609
01:12:01,565 --> 01:12:04,780
And so the
application developer

1610
01:12:04,780 --> 01:12:06,730
will always go to give

1611
01:12:06,730 --> 01:12:09,220
me high-level APIs that
I can integrate in

1612
01:12:09,220 --> 01:12:12,895
my application writing
very little code,

1613
01:12:12,895 --> 01:12:17,620
maintaining no
code, and using

1614
01:12:17,620 --> 01:12:18,850
something that is easy to

1615
01:12:18,850 --> 01:12:23,000
deploy and to maintain.

1616
01:12:23,610 --> 01:12:26,125
It's more than APIs.

1617
01:12:26,125 --> 01:12:28,870
Of course, API is
a big word today,

1618
01:12:28,870 --> 01:12:31,390
especially for Cloud
native applications but

1619
01:12:31,390 --> 01:12:36,160
in my specific experience,

1620
01:12:36,160 --> 01:12:38,725
it is more than APIs,

1621
01:12:38,725 --> 01:12:41,590
it's more about how can I

1622
01:12:41,590 --> 01:12:42,730
map this technology into

1623
01:12:42,730 --> 01:12:45,680
my applications
without any friction?

1624
01:12:45,690 --> 01:12:48,040
Again, adoption would help

1625
01:12:48,040 --> 01:12:49,630
because once you
have adoption,

1626
01:12:49,630 --> 01:12:53,410
you may have the

1627
01:12:53,410 --> 01:12:55,150
different use
cases addressed

1628
01:12:55,150 --> 01:12:58,060
by different people and

1629
01:12:58,060 --> 01:12:59,830
so also that's something

1630
01:12:59,830 --> 01:13:00,880
that we need to consider.

1631
01:13:00,880 --> 01:13:02,290
There's not one
single application.

1632
01:13:02,290 --> 01:13:04,090
There are several
applications.

1633
01:13:04,090 --> 01:13:05,980
We decided to start

1634
01:13:05,980 --> 01:13:07,540
with some which
are close to us,

1635
01:13:07,540 --> 01:13:11,350
but that's an
important component.

1636
01:13:11,350 --> 01:13:16,105
There's not a single
API for sure.

1637
01:13:16,105 --> 01:13:18,910
Just as an example,
in my personal case,

1638
01:13:18,910 --> 01:13:21,100
we started with
the very low-level

1639
01:13:21,100 --> 01:13:22,885
API so interesting
data pockets.

1640
01:13:22,885 --> 01:13:24,490
Then you go up
consumer producer

1641
01:13:24,490 --> 01:13:26,695
API then still pull

1642
01:13:26,695 --> 01:13:28,390
low-level for
application developer,

1643
01:13:28,390 --> 01:13:30,520
and then we went
up again with

1644
01:13:30,520 --> 01:13:32,950
different middlewares
where these APIs

1645
01:13:32,950 --> 01:13:34,870
are very high
level and usable.

1646
01:13:34,870 --> 01:13:36,280
It's a lot of work and

1647
01:13:36,280 --> 01:13:37,600
so we need to
understand that

1648
01:13:37,600 --> 01:13:40,510
that's something that is

1649
01:13:40,510 --> 01:13:41,800
important for
application developer,

1650
01:13:41,800 --> 01:13:45,395
but very hard to
maintain at scale.

1651
01:13:45,395 --> 01:13:47,610
But again, it's
more than API.

1652
01:13:47,610 --> 01:13:50,070
It's more complex and

1653
01:13:50,070 --> 01:13:52,290
this is why in the
discussion offline,

1654
01:13:52,290 --> 01:13:52,845
we mentioned that

1655
01:13:52,845 --> 01:13:55,120
our research team
cannot do that.

1656
01:13:55,220 --> 01:13:58,085
If the industry,

1657
01:13:58,085 --> 01:14:01,210
when I say industry I mean

1658
01:14:01,210 --> 01:14:04,480
a specific
application community

1659
01:14:04,480 --> 01:14:05,770
like a game engines,

1660
01:14:05,770 --> 01:14:07,990
completely
different to online

1661
01:14:07,990 --> 01:14:11,980
meetings communities

1662
01:14:11,980 --> 01:14:15,580
like WebRTC or even
the internal community

1663
01:14:15,580 --> 01:14:17,455
inside Cisco for WebEx.

1664
01:14:17,455 --> 01:14:19,450
Completely different
kind of skill set and

1665
01:14:19,450 --> 01:14:22,075
mindset when developing
an application.

1666
01:14:22,075 --> 01:14:26,900
Definitely not a
research community.

1667
01:14:30,030 --> 01:14:36,830
>> Thank you. Lan will
be next and then Luca.

1668
01:14:38,750 --> 01:14:44,230
>> My first comment
is about why

1669
01:14:44,230 --> 01:14:47,350
the current API
or libraries are

1670
01:14:47,350 --> 01:14:50,890
not as good as we wanted.

1671
01:14:50,890 --> 01:14:53,410
I think one of
the reasons is

1672
01:14:53,410 --> 01:14:57,250
that when those APIs

1673
01:14:57,250 --> 01:14:59,245
or libraries
were developed,

1674
01:14:59,245 --> 01:15:02,680
we just had some
toy examples

1675
01:15:02,680 --> 01:15:05,920
or imaginary
applications in mind.

1676
01:15:05,920 --> 01:15:10,540
We didn't have real
concrete applications

1677
01:15:10,540 --> 01:15:14,439
providing
requirements to us so

1678
01:15:14,439 --> 01:15:19,240
we didn't experience
or we didn't

1679
01:15:19,240 --> 01:15:22,510
understand the real needs

1680
01:15:22,510 --> 01:15:26,035
of these application
developers.

1681
01:15:26,035 --> 01:15:32,020
So only when later
these libraries

1682
01:15:32,020 --> 01:15:33,880
or APIs were used by

1683
01:15:33,880 --> 01:15:35,515
real applications then we

1684
01:15:35,515 --> 01:15:37,330
discovered problems,

1685
01:15:37,330 --> 01:15:41,410
but the original
developers of the API or

1686
01:15:41,410 --> 01:15:43,855
library has already
left the team

1687
01:15:43,855 --> 01:15:46,930
and it's hard to
make major changes.

1688
01:15:46,930 --> 01:15:50,170
I think that maybe one
of the reasons why we

1689
01:15:50,170 --> 01:15:52,750
have usability problems of

1690
01:15:52,750 --> 01:15:55,540
these APIs or libraries.

1691
01:15:55,540 --> 01:15:59,320
And my second point is

1692
01:15:59,320 --> 01:16:02,365
related to what Luca said,

1693
01:16:02,365 --> 01:16:05,095
maybe application
developers want

1694
01:16:05,095 --> 01:16:09,250
less code or no code and

1695
01:16:09,250 --> 01:16:12,685
NDN really is
very different

1696
01:16:12,685 --> 01:16:16,600
from IPs design patterns.

1697
01:16:16,600 --> 01:16:21,745
So it takes effort for
people to understand,

1698
01:16:21,745 --> 01:16:25,750
to change their
mindset to use

1699
01:16:25,750 --> 01:16:29,395
the NDN way of design.

1700
01:16:29,395 --> 01:16:33,265
So one thing maybe
we can do is

1701
01:16:33,265 --> 01:16:38,290
to try to understand

1702
01:16:38,290 --> 01:16:41,560
their application
needs and we take

1703
01:16:41,560 --> 01:16:45,130
the step to provide them

1704
01:16:45,130 --> 01:16:49,360
a prototype solution
and then they only

1705
01:16:49,360 --> 01:16:54,115
need to add their own
application logic,

1706
01:16:54,115 --> 01:16:56,545
which they understand
very well.

1707
01:16:56,545 --> 01:16:59,905
So this also is

1708
01:16:59,905 --> 01:17:02,650
based on what I'm
doing right now.

1709
01:17:02,650 --> 01:17:05,350
Basically we are helping

1710
01:17:05,350 --> 01:17:07,615
mobile health or Mhealth

1711
01:17:07,615 --> 01:17:10,735
researchers
develop a system

1712
01:17:10,735 --> 01:17:12,490
to distribute their data.

1713
01:17:12,490 --> 01:17:16,150
They don't know about

1714
01:17:16,150 --> 01:17:20,770
NDN but they know
their data very well.

1715
01:17:20,770 --> 01:17:23,260
So what do we do is
we talk to them,

1716
01:17:23,260 --> 01:17:26,185
we understand what
their needs are,

1717
01:17:26,185 --> 01:17:27,849
and then we provide

1718
01:17:27,849 --> 01:17:31,600
a framework so they

1719
01:17:31,600 --> 01:17:34,869
can plug in their
application logic.

1720
01:17:34,869 --> 01:17:40,495
I think this may help
faster adoption of NDN.

1721
01:17:40,495 --> 01:17:44,830
The last question
is also related

1722
01:17:44,830 --> 01:17:49,840
to one of Luca's
comments earlier.

1723
01:17:49,840 --> 01:17:53,035
He mentioned that
we need to support

1724
01:17:53,035 --> 01:17:57,220
a lot of different
platforms,

1725
01:17:57,220 --> 01:18:00,250
various operating
systems, browsers,

1726
01:18:00,250 --> 01:18:02,005
so and so forth.

1727
01:18:02,005 --> 01:18:04,345
But the question we have,

1728
01:18:04,345 --> 01:18:05,830
the problem we have is,

1729
01:18:05,830 --> 01:18:08,140
well the research team has

1730
01:18:08,140 --> 01:18:11,920
very limited resources
and it's impossible

1731
01:18:11,920 --> 01:18:16,330
to maintain all these APIs

1732
01:18:16,330 --> 01:18:19,990
or libraries for
various platforms.

1733
01:18:19,990 --> 01:18:22,915
So given these
limitations,

1734
01:18:22,915 --> 01:18:24,940
how should we prioritize

1735
01:18:24,940 --> 01:18:27,850
which APIs to
develop or maintain,

1736
01:18:27,850 --> 01:18:30,560
which libraries
to maintain?

1737
01:18:30,720 --> 01:18:37,130
That has been one of
our major challenges.

1738
01:18:38,620 --> 01:18:42,905
>> Thank you. Licia and

1739
01:18:42,905 --> 01:18:46,130
then Alex will have
the last word.

1740
01:18:46,130 --> 01:18:49,250
>> My memory card
had limited size.

1741
01:18:49,250 --> 01:18:54,320
I saw last question
and I remembered.

1742
01:18:54,320 --> 01:18:55,790
Jeff, the first question,

1743
01:18:55,790 --> 01:18:57,080
so I'll just address these

1744
01:18:57,080 --> 01:18:58,835
to forget what I
put down there.

1745
01:18:58,835 --> 01:19:01,550
Regarding the
different OS types,

1746
01:19:01,550 --> 01:19:02,990
I don't think that's a

1747
01:19:02,990 --> 01:19:04,730
challenge we worry about.

1748
01:19:04,730 --> 01:19:06,485
I remember the
early days of

1749
01:19:06,485 --> 01:19:08,405
an API implementation,

1750
01:19:08,405 --> 01:19:11,300
Berkeley just put
out Berkeley BSD and

1751
01:19:11,300 --> 01:19:12,559
everyone adapted

1752
01:19:12,559 --> 01:19:15,280
their protocol stack
according to that.

1753
01:19:15,280 --> 01:19:17,800
Fundamentally I think
that whether there's

1754
01:19:17,800 --> 01:19:20,305
a desperate need
out of a market,

1755
01:19:20,305 --> 01:19:22,165
they want this thing and

1756
01:19:22,165 --> 01:19:24,550
whether to rely on
the community to

1757
01:19:24,550 --> 01:19:25,860
actually port

1758
01:19:25,860 --> 01:19:28,070
the new protocol stack

1759
01:19:28,070 --> 01:19:29,945
onto different platforms.

1760
01:19:29,945 --> 01:19:32,360
If you have to pack people

1761
01:19:32,360 --> 01:19:35,120
to implement this
on that platform,

1762
01:19:35,120 --> 01:19:38,150
that means those
people are not really

1763
01:19:38,150 --> 01:19:39,530
desperate to the
one that got

1764
01:19:39,530 --> 01:19:41,345
it yet and you have
to pay for that.

1765
01:19:41,345 --> 01:19:43,040
But this is a side,

1766
01:19:43,040 --> 01:19:46,430
I want to clarify Jeff.

1767
01:19:46,430 --> 01:19:48,760
So first of all, he

1768
01:19:48,760 --> 01:19:51,460
said it's more
about the name,

1769
01:19:51,460 --> 01:19:54,215
the data than networking.

1770
01:19:54,215 --> 01:19:55,910
I just want to
clarify what you

1771
01:19:55,910 --> 01:19:58,504
meant by dropping
the word networking.

1772
01:19:58,504 --> 01:20:00,170
Because this could be

1773
01:20:00,170 --> 01:20:03,215
exactly the same
thing we are talking,

1774
01:20:03,215 --> 01:20:05,090
just using
different words.

1775
01:20:05,090 --> 01:20:07,925
I don't know if I
remembered back in

1776
01:20:07,925 --> 01:20:10,685
2020 in the
community meeting.

1777
01:20:10,685 --> 01:20:12,860
Thanks [inaudible]
for recordings.

1778
01:20:12,860 --> 01:20:19,160
There's a student from
UCLA, John Levison.

1779
01:20:19,160 --> 01:20:21,140
I don't know how to
pronounce his name.

1780
01:20:21,140 --> 01:20:23,285
He actually
went up to say,

1781
01:20:23,285 --> 01:20:26,795
here is actually our new
model of networking.

1782
01:20:26,795 --> 01:20:28,490
Forget the other
softwares,

1783
01:20:28,490 --> 01:20:29,885
addresses, and everything.

1784
01:20:29,885 --> 01:20:32,570
You think about the
so-called networking

1785
01:20:32,570 --> 01:20:34,370
merely just the laws of

1786
01:20:34,370 --> 01:20:38,164
semantically named
entities with whereas

1787
01:20:38,164 --> 01:20:40,775
trust relations
among themselves

1788
01:20:40,775 --> 01:20:43,040
and this is what
we're networking.

1789
01:20:43,040 --> 01:20:46,115
That is the focus
is really on

1790
01:20:46,115 --> 01:20:48,605
who you are dealing with

1791
01:20:48,605 --> 01:20:51,860
and then what are
relations in between.

1792
01:20:51,860 --> 01:20:54,050
I don't know if you

1793
01:20:54,050 --> 01:20:56,510
say just the name of
the data and it support

1794
01:20:56,510 --> 01:20:58,820
the networking whether
you mean get rid

1795
01:20:58,820 --> 01:21:02,550
of the worries
about connectivity.

1796
01:21:03,310 --> 01:21:05,870
That connectivity
whether it's

1797
01:21:05,870 --> 01:21:07,760
a firewall to
block things.

1798
01:21:07,760 --> 01:21:09,320
If in that case I would

1799
01:21:09,320 --> 01:21:10,580
have fully agree with you.

1800
01:21:10,580 --> 01:21:11,870
Just to think
about this is

1801
01:21:11,870 --> 01:21:13,470
semantic world

1802
01:21:13,470 --> 01:21:15,670
with trash relations
among each other,

1803
01:21:15,670 --> 01:21:17,770
all the different
players artificial,

1804
01:21:17,770 --> 01:21:20,200
otherwise human, how

1805
01:21:20,200 --> 01:21:21,895
they interact
with each other.

1806
01:21:21,895 --> 01:21:23,335
If that was your
main point,

1807
01:21:23,335 --> 01:21:24,670
focusing on them the data

1808
01:21:24,670 --> 01:21:25,720
, then I fully agree.

1809
01:21:25,720 --> 01:21:27,375
That's what we said.

1810
01:21:27,375 --> 01:21:29,300
>> It's not what I
meant but I'm in

1811
01:21:29,300 --> 01:21:31,820
favor of what
you said too.

1812
01:21:31,820 --> 01:21:33,950
I meant more in terms of

1813
01:21:33,950 --> 01:21:35,990
the community emphasis on

1814
01:21:35,990 --> 01:21:38,210
the networking part
research wise,

1815
01:21:38,210 --> 01:21:40,475
the emphasis on
the networking

1816
01:21:40,475 --> 01:21:42,890
versus the emphasis
on the name,

1817
01:21:42,890 --> 01:21:45,350
data, and the type to

1818
01:21:45,350 --> 01:21:48,575
land second point I think.

1819
01:21:48,575 --> 01:21:50,960
Helping developers
really to

1820
01:21:50,960 --> 01:21:53,405
write named data
applications.

1821
01:21:53,405 --> 01:21:55,940
And Luca had a point
about that includes

1822
01:21:55,940 --> 01:21:59,240
not just the named
data part but

1823
01:21:59,240 --> 01:22:01,325
the control and management

1824
01:22:01,325 --> 01:22:02,690
of those applications
as well.

1825
01:22:02,690 --> 01:22:04,295
So I agree with
what you said.

1826
01:22:04,295 --> 01:22:06,590
Here I meant something
a little different.

1827
01:22:06,590 --> 01:22:10,385
>> Got it. So I
think from now on,

1828
01:22:10,385 --> 01:22:11,210
whenever people talk

1829
01:22:11,210 --> 01:22:12,020
about networking it's not

1830
01:22:12,020 --> 01:22:13,895
about the connectivity,
the guys.

1831
01:22:13,895 --> 01:22:15,800
We have done connectivity
40 plus years

1832
01:22:15,800 --> 01:22:17,255
so we know how to do that.

1833
01:22:17,255 --> 01:22:19,520
Currently the
connectivity challenges

1834
01:22:19,520 --> 01:22:21,440
are not so much which
we cannot connect.

1835
01:22:21,440 --> 01:22:24,290
But rather when there's

1836
01:22:24,290 --> 01:22:26,480
this obstacles
because the IP

1837
01:22:26,480 --> 01:22:27,800
is a point-to-point
connection,

1838
01:22:27,800 --> 01:22:30,050
so therefore
broadcast media don't

1839
01:22:30,050 --> 01:22:32,405
really get used in
many situations.

1840
01:22:32,405 --> 01:22:35,780
And second thing under
the title security,

1841
01:22:35,780 --> 01:22:38,990
we got so many
blockage between

1842
01:22:38,990 --> 01:22:40,340
point a and point b so

1843
01:22:40,340 --> 01:22:42,860
that things just
don't get through.

1844
01:22:42,860 --> 01:22:45,995
But nevertheless,

1845
01:22:45,995 --> 01:22:48,500
getting things through is

1846
01:22:48,500 --> 01:22:50,615
understood and
solve the problem.

1847
01:22:50,615 --> 01:22:54,470
So now it's how we build

1848
01:22:54,470 --> 01:22:57,230
applications in a
way that we want

1849
01:22:57,230 --> 01:23:01,560
it with the security
directly into it.

1850
01:23:01,960 --> 01:23:04,370
There's one thing, I had

1851
01:23:04,370 --> 01:23:07,035
one more point to make.

1852
01:23:07,035 --> 01:23:10,780
It's about whether to

1853
01:23:10,780 --> 01:23:13,555
have in the end to
build applications.

1854
01:23:13,555 --> 01:23:15,310
I think one
thing is really

1855
01:23:15,310 --> 01:23:19,210
about how desperate
one would.

1856
01:23:19,210 --> 01:23:22,675
Can we build secure
applications?

1857
01:23:22,675 --> 01:23:24,250
You cannot say we cannot,

1858
01:23:24,250 --> 01:23:25,510
because there's almost the

1859
01:23:25,510 --> 01:23:28,410
infinite supply
of patches.

1860
01:23:28,410 --> 01:23:30,020
You've got the
middle boxes,

1861
01:23:30,020 --> 01:23:32,795
the firewalls, DOIs

1862
01:23:32,795 --> 01:23:34,670
and a bunch of
other things.

1863
01:23:34,670 --> 01:23:37,905
So you can somehow
patch up a stuff.

1864
01:23:37,905 --> 01:23:41,410
But in critical
environments,

1865
01:23:41,410 --> 01:23:43,420
I think at the
dinner conversation

1866
01:23:43,420 --> 01:23:46,480
last night with
Randy I talked about

1867
01:23:46,480 --> 01:23:48,759
the power plant scenarios

1868
01:23:48,759 --> 01:23:50,575
where the security
requirement are

1869
01:23:50,575 --> 01:23:52,999
extremely high
and the tolerance

1870
01:23:52,999 --> 01:23:55,790
for any misstep
is extremely low.

1871
01:23:55,790 --> 01:23:59,120
When you put 10 different
patches together,

1872
01:23:59,120 --> 01:24:00,920
you have this
challenge how you

1873
01:24:00,920 --> 01:24:04,430
approve there's actually
no gap, no leak.

1874
01:24:04,430 --> 01:24:08,150
You have the [NOISE]
security assured whether

1875
01:24:08,150 --> 01:24:12,650
with those
end-to-end security.

1876
01:24:12,650 --> 01:24:14,930
Data is sealed, when
they produce then

1877
01:24:14,930 --> 01:24:18,020
data they seal it
when it's used.

1878
01:24:18,020 --> 01:24:20,300
It's much easier to prove.

1879
01:24:20,300 --> 01:24:23,420
I think those scenarios
would really have

1880
01:24:23,420 --> 01:24:27,200
more motivation to look

1881
01:24:27,200 --> 01:24:29,610
into this new
direction. I'm done.

1882
01:24:29,770 --> 01:24:32,930
>> All right. Alex,

1883
01:24:32,930 --> 01:24:34,880
and then we should
have some time for

1884
01:24:34,880 --> 01:24:38,910
questions from the
audience or rebuttals.

1885
01:24:39,190 --> 01:24:41,840
>> So again, I
forgot to put there,

1886
01:24:41,840 --> 01:24:43,010
but I think I want to make

1887
01:24:43,010 --> 01:24:44,300
a two and a half points

1888
01:24:44,300 --> 01:24:45,800
and maybe three
and a half points.

1889
01:24:45,800 --> 01:24:47,375
So first,

1890
01:24:47,375 --> 01:24:49,190
I don't know whether
it's a lesson or not,

1891
01:24:49,190 --> 01:24:51,365
is we do need

1892
01:24:51,365 --> 01:24:53,780
a low-level APIs but
that's going to give him

1893
01:24:53,780 --> 01:24:56,300
because without having
low-level APIs for

1894
01:24:56,300 --> 01:24:58,535
Indian in different
languages

1895
01:24:58,535 --> 01:25:00,170
for different
operating systems,

1896
01:25:00,170 --> 01:25:02,104
you just cannot do much.

1897
01:25:02,104 --> 01:25:03,920
You just cannot
do anything.

1898
01:25:03,920 --> 01:25:06,080
So that's going
to small point.

1899
01:25:06,080 --> 01:25:08,390
But the actual
lesson from this is

1900
01:25:08,390 --> 01:25:12,935
maintainance of libraries
is a nightmare.

1901
01:25:12,935 --> 01:25:18,529
It requires constant
dragging developers

1902
01:25:18,529 --> 01:25:20,645
to do the mundane tasks

1903
01:25:20,645 --> 01:25:23,660
like the boost library.

1904
01:25:23,660 --> 01:25:25,985
Update it again.

1905
01:25:25,985 --> 01:25:29,990
If it is not supported
we change API.

1906
01:25:29,990 --> 01:25:31,505
And out of blue,

1907
01:25:31,505 --> 01:25:32,960
something that
was working,

1908
01:25:32,960 --> 01:25:34,130
you have to update.

1909
01:25:34,130 --> 01:25:35,780
It doesn't bring
any benefit to

1910
01:25:35,780 --> 01:25:37,490
anybody because
it's already

1911
01:25:37,490 --> 01:25:39,965
low-level API that
needs to work

1912
01:25:39,965 --> 01:25:41,540
but it needs to
be maintained

1913
01:25:41,540 --> 01:25:43,025
and it's constantly
constant.

1914
01:25:43,025 --> 01:25:45,830
So that's the
lessons about that.

1915
01:25:45,830 --> 01:25:47,120
It's just hard to do.

1916
01:25:47,120 --> 01:25:49,910
In an academic environment
I don't even know

1917
01:25:49,910 --> 01:25:51,170
how we're still keeping

1918
01:25:51,170 --> 01:25:53,180
up with some of
the libraries.

1919
01:25:53,180 --> 01:25:54,950
I'm not saying we keep up

1920
01:25:54,950 --> 01:25:56,450
with all of them
but some of them we

1921
01:25:56,450 --> 01:25:58,385
just have
forgotten because

1922
01:25:58,385 --> 01:26:00,440
we don't have
manpower or interest.

1923
01:26:00,440 --> 01:26:02,630
But again, this is that

1924
01:26:02,630 --> 01:26:04,445
low level of interest.

1925
01:26:04,445 --> 01:26:07,250
And the second one is I

1926
01:26:07,250 --> 01:26:09,920
think related to the
bullet that I put there,

1927
01:26:09,920 --> 01:26:10,970
related to bullet that

1928
01:26:10,970 --> 01:26:12,845
Jeff was talking about.

1929
01:26:12,845 --> 01:26:15,335
Probably and most likely

1930
01:26:15,335 --> 01:26:17,750
need high-level APIs and

1931
01:26:17,750 --> 01:26:18,980
the higher level APIs

1932
01:26:18,980 --> 01:26:22,595
that some of us
talking about.

1933
01:26:22,595 --> 01:26:24,710
Not even considering
what pops

1934
01:26:24,710 --> 01:26:26,705
up or sync APIs
as high level.

1935
01:26:26,705 --> 01:26:28,655
I will put them
as a meteor,

1936
01:26:28,655 --> 01:26:31,280
APIs and something like

1937
01:26:31,280 --> 01:26:34,940
CNL but maybe even
different from CNL.

1938
01:26:34,940 --> 01:26:37,400
For example, if
we're considering

1939
01:26:37,400 --> 01:26:39,350
new areas of the
applications

1940
01:26:39,350 --> 01:26:40,925
where IP is not working.

1941
01:26:40,925 --> 01:26:42,425
We need to think about

1942
01:26:42,425 --> 01:26:43,850
what APIs would be there,

1943
01:26:43,850 --> 01:26:46,640
like for example,
the sterics

1944
01:26:46,640 --> 01:26:48,950
work on, what's the name?

1945
01:26:48,950 --> 01:26:50,250
>> Informats.

1946
01:26:50,380 --> 01:26:52,325
>> Yeah, informats.

1947
01:26:52,325 --> 01:26:54,965
It's like namespace
harvesting.

1948
01:26:54,965 --> 01:26:58,925
So somehow it's
not pops up.

1949
01:26:58,925 --> 01:27:02,450
Not necessarily,
it's not a sync.

1950
01:27:02,450 --> 01:27:05,030
It's not D&L necessarily

1951
01:27:05,030 --> 01:27:06,425
, it's something
different.

1952
01:27:06,425 --> 01:27:09,425
It's some model,

1953
01:27:09,425 --> 01:27:13,630
if we want API for the
gaming industry or

1954
01:27:13,630 --> 01:27:14,890
something then
it has to be

1955
01:27:14,890 --> 01:27:18,140
some object oriented
where attached.

1956
01:27:25,000 --> 01:27:27,110
We need to look at

1957
01:27:27,110 --> 01:27:28,730
the lower levels because

1958
01:27:28,730 --> 01:27:30,260
we need that basic support

1959
01:27:30,260 --> 01:27:32,540
somewhere but
the actual thing

1960
01:27:32,540 --> 01:27:34,100
for developers will be

1961
01:27:34,100 --> 01:27:35,525
at a high level and

1962
01:27:35,525 --> 01:27:36,800
this high level most

1963
01:27:36,800 --> 01:27:38,225
likely will be
something new,

1964
01:27:38,225 --> 01:27:42,800
not replacement of
some existing APIs

1965
01:27:42,800 --> 01:27:45,530
that at some point we
also were looking at.

1966
01:27:45,530 --> 01:27:47,120
So not replacement with.

1967
01:27:47,120 --> 01:27:49,505
Again, I will bring
worth quality for

1968
01:27:49,505 --> 01:27:51,440
new stuff even though

1969
01:27:51,440 --> 01:27:54,570
I don't exactly know
what I'm talking about.

1970
01:27:55,570 --> 01:27:57,965
And the important part

1971
01:27:57,965 --> 01:28:00,229
that I really
wanted to mention,

1972
01:28:00,229 --> 01:28:03,300
this is related
to security part.

1973
01:28:03,430 --> 01:28:06,560
So in order to
support security

1974
01:28:06,560 --> 01:28:07,700
in our implementations,

1975
01:28:07,700 --> 01:28:08,720
other implementations,

1976
01:28:08,720 --> 01:28:10,640
we need support of

1977
01:28:10,640 --> 01:28:14,060
security primitives
in wherever

1978
01:28:14,060 --> 01:28:15,500
available because
we're not

1979
01:28:15,500 --> 01:28:17,855
really developing
this ourselves.

1980
01:28:17,855 --> 01:28:21,335
And the huge
problem with this

1981
01:28:21,335 --> 01:28:22,490
is that a lot of

1982
01:28:22,490 --> 01:28:23,810
today's security
is focused

1983
01:28:23,810 --> 01:28:25,095
on point to point.

1984
01:28:25,095 --> 01:28:27,610
So even though
there are a lot of

1985
01:28:27,610 --> 01:28:31,240
research focusing on
data oriented security,

1986
01:28:31,240 --> 01:28:32,770
attribute-based
encryption,

1987
01:28:32,770 --> 01:28:34,045
attribute based
signatures,

1988
01:28:34,045 --> 01:28:35,470
those things exist in

1989
01:28:35,470 --> 01:28:38,280
concept but not supported.

1990
01:28:38,280 --> 01:28:40,160
We found a library that

1991
01:28:40,160 --> 01:28:42,020
was working. That's it.

1992
01:28:42,020 --> 01:28:43,670
Two years ago
it stoped being

1993
01:28:43,670 --> 01:28:46,250
supported. We
cannot use it.

1994
01:28:46,250 --> 01:28:48,320
>> Because the
current market

1995
01:28:48,320 --> 01:28:49,910
doesn't need
that solution,

1996
01:28:49,910 --> 01:28:51,990
so nobody work on that.

1997
01:28:54,340 --> 01:28:57,320
>> I've made that
same observation that

1998
01:28:57,320 --> 01:28:59,360
our existing
security tools,

1999
01:28:59,360 --> 01:29:01,415
TLS, are entirely
point-to-point.

2000
01:29:01,415 --> 01:29:03,920
And then that also
is an issue in

2001
01:29:03,920 --> 01:29:05,060
the context of
other things

2002
01:29:05,060 --> 01:29:06,695
like Edge computing,

2003
01:29:06,695 --> 01:29:10,250
Edge Cloud
federated things.

2004
01:29:10,250 --> 01:29:14,640
So that is a challenge.

2005
01:29:15,120 --> 01:29:19,860
We have six minutes

2006
01:29:19,860 --> 01:29:23,045
and Dave Orran says

2007
01:29:23,045 --> 01:29:24,590
that we haven't
talked about

2008
01:29:24,590 --> 01:29:26,210
name privacy enough.

2009
01:29:26,210 --> 01:29:29,990
So that's something
that relates

2010
01:29:29,990 --> 01:29:34,460
to perhaps naming and
possibly also APIs.

2011
01:29:34,460 --> 01:29:35,900
So would anyone on

2012
01:29:35,900 --> 01:29:39,270
the panel care to
comment on that?

2013
01:29:43,630 --> 01:29:45,755
>> I threw out

2014
01:29:45,755 --> 01:29:48,860
the first system,
namely privacy.

2015
01:29:48,860 --> 01:29:51,185
There are multiple factors

2016
01:29:51,185 --> 01:29:53,810
that cause the people
to have this concern.

2017
01:29:53,810 --> 01:29:55,220
One, they think that

2018
01:29:55,220 --> 01:29:57,230
the IP is somehow
obscured.

2019
01:29:57,230 --> 01:29:58,760
So therefore nobody knows

2020
01:29:58,760 --> 01:30:00,225
whom you're talking to.

2021
01:30:00,225 --> 01:30:02,935
And that's a completely
misconception.

2022
01:30:02,935 --> 01:30:05,740
Today's networking
doesn't have

2023
01:30:05,740 --> 01:30:07,720
the privacy people
thought they would have.

2024
01:30:07,720 --> 01:30:09,610
For one, it's trivial

2025
01:30:09,610 --> 01:30:11,850
to map address to a name.

2026
01:30:11,850 --> 01:30:14,660
Second. You just see that

2027
01:30:14,660 --> 01:30:17,210
the backbone or sitting

2028
01:30:17,210 --> 01:30:18,605
in front of the Google,

2029
01:30:18,605 --> 01:30:21,380
then you can see exactly
all the packets,

2030
01:30:21,380 --> 01:30:22,610
so where they
come from because

2031
01:30:22,610 --> 01:30:24,260
they carry source
addresses.

2032
01:30:24,260 --> 01:30:26,300
So in that regard,

2033
01:30:26,300 --> 01:30:27,410
I think at the end,

2034
01:30:27,410 --> 01:30:29,360
I already had the
privacy advantage.

2035
01:30:29,360 --> 01:30:31,010
That is, the
interests doesn't

2036
01:30:31,010 --> 01:30:34,160
carry where
they come from.

2037
01:30:34,160 --> 01:30:35,540
And somehow this is

2038
01:30:35,540 --> 01:30:37,805
advantage together
overlooked.

2039
01:30:37,805 --> 01:30:41,570
On the other hand,
IPs obscurity,

2040
01:30:41,570 --> 01:30:45,755
so-called get over
exempt, you exaggerated.

2041
01:30:45,755 --> 01:30:48,815
Second thing is
that misconception,

2042
01:30:48,815 --> 01:30:51,020
that Indian, because
we'd read papers,

2043
01:30:51,020 --> 01:30:54,320
will say cn.com and
therefore you'll keep

2044
01:30:54,320 --> 01:30:55,805
an impression that

2045
01:30:55,805 --> 01:30:58,295
all Indian names
are ascii coded.

2046
01:30:58,295 --> 01:31:00,290
I recently talked to

2047
01:31:00,290 --> 01:31:02,345
are leading
researcher in Europe.

2048
01:31:02,345 --> 01:31:04,160
And they said, look,

2049
01:31:04,160 --> 01:31:05,825
let's just, for your eyes,

2050
01:31:05,825 --> 01:31:08,240
it's not necessarily
your encode data

2051
01:31:08,240 --> 01:31:10,220
into the Indian packets.

2052
01:31:10,220 --> 01:31:11,885
Is that really?

2053
01:31:11,885 --> 01:31:15,020
I thought the Indian names

2054
01:31:15,020 --> 01:31:16,850
is for human readability,

2055
01:31:16,850 --> 01:31:18,260
so that it has
to be husky.

2056
01:31:18,260 --> 01:31:20,960
I was speechless.

2057
01:31:20,960 --> 01:31:24,140
Directly related
to the third point

2058
01:31:24,140 --> 01:31:26,945
is that how you
encode the names.

2059
01:31:26,945 --> 01:31:29,480
Basically you can
easily achieve

2060
01:31:29,480 --> 01:31:34,865
the equivalent way
of IP addresses,

2061
01:31:34,865 --> 01:31:38,165
do some simple
encoding of the names.

2062
01:31:38,165 --> 01:31:41,015
Then there's an art ASCII
so you can read it,

2063
01:31:41,015 --> 01:31:42,605
not human
readable anymore.

2064
01:31:42,605 --> 01:31:44,030
And the first one, they're

2065
01:31:44,030 --> 01:31:45,170
the all different things

2066
01:31:45,170 --> 01:31:47,585
you can encode in
different ways.

2067
01:31:47,585 --> 01:31:49,880
The paper I do
advertisement for

2068
01:31:49,880 --> 01:31:53,555
the ICC is coming in May,

2069
01:31:53,555 --> 01:31:55,850
our collaborator paradigm

2070
01:31:55,850 --> 01:31:57,125
and poverty with paper,

2071
01:31:57,125 --> 01:32:00,365
talk about Indian
packet for encryption,

2072
01:32:00,365 --> 01:32:03,570
where they encrypt
the names entirely.

2073
01:32:04,090 --> 01:32:06,890
That's a one extreme
way I think,

2074
01:32:06,890 --> 01:32:08,480
to hide the names.

2075
01:32:08,480 --> 01:32:09,950
But the fundamental
point is

2076
01:32:09,950 --> 01:32:13,820
that naturally it doesn't
understand names.

2077
01:32:13,820 --> 01:32:16,370
They just forwarding
according

2078
01:32:16,370 --> 01:32:18,375
to the binary
bit presence.

2079
01:32:18,375 --> 01:32:20,080
All you will
need to agree is

2080
01:32:20,080 --> 01:32:22,315
apprehended producers
and consumers,

2081
01:32:22,315 --> 01:32:24,190
how their names
are encoded.

2082
01:32:24,190 --> 01:32:26,170
And if you're not in

2083
01:32:26,170 --> 01:32:29,060
ASCII is not
human readable.

2084
01:32:31,810 --> 01:32:33,950
>> One comment.

2085
01:32:33,950 --> 01:32:36,275
>> Go ahead, Luca.
Please. Go ahead.

2086
01:32:36,275 --> 01:32:39,125
>> One quick comment about

2087
01:32:39,125 --> 01:32:45,390
this problem about
name anonymization.

2088
01:32:46,420 --> 01:32:50,690
Considered that at
least in my experience,

2089
01:32:50,690 --> 01:32:55,159
when you start
operating ICN,

2090
01:32:55,159 --> 01:32:57,860
you have also the
component of lease and

2091
01:32:57,860 --> 01:32:59,120
release of names because

2092
01:32:59,120 --> 01:33:01,205
they don't stick forever.

2093
01:33:01,205 --> 01:33:04,355
You can also rotate
names and the mapping

2094
01:33:04,355 --> 01:33:08,135
from the application
logic to the name,

2095
01:33:08,135 --> 01:33:10,760
the network namespace very

2096
01:33:10,760 --> 01:33:12,050
frequently so
that the mapping

2097
01:33:12,050 --> 01:33:13,940
is a femoral somehow.

2098
01:33:13,940 --> 01:33:15,470
So it's less of

2099
01:33:15,470 --> 01:33:17,330
an issue if you
do things right,

2100
01:33:17,330 --> 01:33:19,130
and we know how
to do that.

2101
01:33:19,130 --> 01:33:20,720
But it's not necessarily

2102
01:33:20,720 --> 01:33:22,700
a huge attack
surface that you

2103
01:33:22,700 --> 01:33:28,190
have right now.
But it's an issue.

2104
01:33:28,190 --> 01:33:29,615
I don't think it's
not an issue.

2105
01:33:29,615 --> 01:33:32,370
It's an issue, but
you can fix it.

2106
01:33:32,590 --> 01:33:35,495
You can have a
huge attack vector

2107
01:33:35,495 --> 01:33:38,300
if you have stickiness,

2108
01:33:38,300 --> 01:33:40,565
you don't have
lease or release in

2109
01:33:40,565 --> 01:33:43,595
our specific
implementation in HHCN

2110
01:33:43,595 --> 01:33:44,840
because we use the IP

2111
01:33:44,840 --> 01:33:46,130
namespace lease
and releases

2112
01:33:46,130 --> 01:33:49,025
the part of the deal.

2113
01:33:49,025 --> 01:33:51,920
You have to do it. And
so you can rotate.

2114
01:33:51,920 --> 01:33:53,000
And so it's not
necessarily

2115
01:33:53,000 --> 01:33:57,530
a huge problem.
It is a problem.

2116
01:33:57,530 --> 01:34:00,360
>> Interesting. Thank you.

2117
01:34:03,580 --> 01:34:06,175
Wendy, were going
to say something?

2118
01:34:06,175 --> 01:34:07,870
>> Oh yeah. I just
want to follow

2119
01:34:07,870 --> 01:34:10,480
up on Lucas comment.

2120
01:34:10,480 --> 01:34:13,090
You can anonymize
the name.

2121
01:34:13,090 --> 01:34:15,700
But this data name
at the same time,

2122
01:34:15,700 --> 01:34:18,210
you also need to
anonymize the key name.

2123
01:34:18,210 --> 01:34:20,570
Because the key is
used to sign the data,

2124
01:34:20,570 --> 01:34:23,885
so they need to
go hand in hand.

2125
01:34:23,885 --> 01:34:26,870
And there are mechanisms

2126
01:34:26,870 --> 01:34:28,700
to anonymize the keys,

2127
01:34:28,700 --> 01:34:31,740
but you have to
reissue the keys.

2128
01:34:33,280 --> 01:34:37,090
There are ways for
you to issue a lot of

2129
01:34:37,090 --> 01:34:40,960
anonymized keys and try

2130
01:34:40,960 --> 01:34:43,730
not to reuse those keys.

2131
01:34:45,370 --> 01:34:48,335
>> Alex, you want to
make a last comment?

2132
01:34:48,335 --> 01:34:50,915
You got 30 seconds.

2133
01:34:50,915 --> 01:34:53,285
>> I don't know if I
can do that quickly,

2134
01:34:53,285 --> 01:34:55,100
but I just wanted to
bring again the point

2135
01:34:55,100 --> 01:34:57,605
of if we're looking
at the new domains,

2136
01:34:57,605 --> 01:34:59,795
this may not be a
problem at all.

2137
01:34:59,795 --> 01:35:01,700
Like for the
Vehicle Networking,

2138
01:35:01,700 --> 01:35:04,115
if you're talking about
the security issue,

2139
01:35:04,115 --> 01:35:06,620
safety application
of some sort,

2140
01:35:06,620 --> 01:35:08,045
there's no privacy there.

2141
01:35:08,045 --> 01:35:09,110
There is a name that you

2142
01:35:09,110 --> 01:35:11,030
want to have been exposed.

2143
01:35:11,030 --> 01:35:13,640
Talking about the name
privacy in general.

2144
01:35:13,640 --> 01:35:16,205
And then it's nice
long conversation.

2145
01:35:16,205 --> 01:35:19,370
But without talking
for what exactly we're

2146
01:35:19,370 --> 01:35:23,190
talking about,
it's pointless.

2147
01:35:24,040 --> 01:35:27,800
Overstating this
by a huge margin.

2148
01:35:27,800 --> 01:35:29,240
But again, I would like

2149
01:35:29,240 --> 01:35:30,350
to have conversation in

2150
01:35:30,350 --> 01:35:34,580
more specific contexts
of new domains.

2151
01:35:34,580 --> 01:35:35,600
[OVERLAPPING]

2152
01:35:35,600 --> 01:35:37,070
>> So let me encourage

2153
01:35:37,070 --> 01:35:38,720
people to look
at the chat,

2154
01:35:38,720 --> 01:35:40,610
the Slack channel,
because there

2155
01:35:40,610 --> 01:35:42,815
is quite a few
comments in there.

2156
01:35:42,815 --> 01:35:44,210
We could have
a much longer

2157
01:35:44,210 --> 01:35:46,295
conversation about this,

2158
01:35:46,295 --> 01:35:48,440
but we are actually at

2159
01:35:48,440 --> 01:35:51,335
our time for this panel.

2160
01:35:51,335 --> 01:35:54,950
So I would like to
say thanks again

2161
01:35:54,950 --> 01:35:56,780
to all the panelists

2162
01:35:56,780 --> 01:35:58,790
and to everyone
who commented.

2163
01:35:58,790 --> 01:36:00,680
But let's thank
the panelists

2164
01:36:00,680 --> 01:36:06,665
[APPLAUSE] for sharing
their insights.

2165
01:36:06,665 --> 01:36:12,395
>> Thank you very
much the panelists.

2166
01:36:12,395 --> 01:36:15,649
Very interesting panel,
lot of discussions

2167
01:36:15,649 --> 01:36:19,475
on Slack, keep them going.

2168
01:36:19,475 --> 01:36:21,530
And now we move to

2169
01:36:21,530 --> 01:36:24,530
the first
presentation session

2170
01:36:24,530 --> 01:36:26,990
on vehicle and
public safety,

2171
01:36:26,990 --> 01:36:30,035
which will be chaired
by Davide Isevardo.

2172
01:36:30,035 --> 01:36:33,320
Davide is a
researcher at NIST,

2173
01:36:33,320 --> 01:36:35,690
he has been a
core developer

2174
01:36:35,690 --> 01:36:38,885
of Indian code
base since 2014.

2175
01:36:38,885 --> 01:36:40,820
And he has been
involved in a number of

2176
01:36:40,820 --> 01:36:44,375
Indian projects at
least since 2016.

2177
01:36:44,375 --> 01:36:47,790
I'm going to load
the presentations.

2178
01:36:49,390 --> 01:36:54,155
>> Thank you,
Godfrey. Hi everyone.

2179
01:36:54,155 --> 01:36:56,885
Am I close enough
to the mic.

2180
01:36:56,885 --> 01:37:05,360
So the first
presentation session

2181
01:37:05,360 --> 01:37:07,490
of this Indian community

2182
01:37:07,490 --> 01:37:09,110
meeting is about vehicle,

2183
01:37:09,110 --> 01:37:12,620
networking and India
for public safety.

2184
01:37:12,620 --> 01:37:14,810
So these are two topics

2185
01:37:14,810 --> 01:37:16,790
that I care deeply about.

2186
01:37:16,790 --> 01:37:18,395
I think they're
very interesting.

2187
01:37:18,395 --> 01:37:21,050
And there are
two topics where

2188
01:37:21,050 --> 01:37:24,500
I believe India can
make a difference.

2189
01:37:24,500 --> 01:37:26,510
In fact, I also did

2190
01:37:26,510 --> 01:37:29,120
some work on both
of these areas,

2191
01:37:29,120 --> 01:37:31,190
both before joining NIST

2192
01:37:31,190 --> 01:37:33,545
and more recently at NIST.

2193
01:37:33,545 --> 01:37:35,540
But yeah, I'm very

2194
01:37:35,540 --> 01:37:37,655
excited about
this session.

2195
01:37:37,655 --> 01:37:40,100
I'll stop talking now.

2196
01:37:40,100 --> 01:37:42,140
You're here to hear
from the speakers

2197
01:37:42,140 --> 01:37:43,955
, not for me.

2198
01:37:43,955 --> 01:37:47,850
So let me introduce
our first speaker.

2199
01:37:51,070 --> 01:37:54,530
So up there is an
Assistant Professor at

2200
01:37:54,530 --> 01:37:56,405
the Department of
Computer Science

2201
01:37:56,405 --> 01:37:58,985
at the University of
Missouri, St. Louis.

2202
01:37:58,985 --> 01:38:01,250
He is also occupying
the position of

2203
01:38:01,250 --> 01:38:02,869
Director of the
cybersecurity

2204
01:38:02,869 --> 01:38:05,340
program at UMSL.

2205
01:38:10,630 --> 01:38:12,770
>> Thank you Davide.

2206
01:38:12,770 --> 01:38:16,220
>> Hey everyone. So I'm

2207
01:38:16,220 --> 01:38:19,430
happy to be here
again in person.

2208
01:38:19,430 --> 01:38:21,920
So this is good to
be in person again.

2209
01:38:21,920 --> 01:38:24,500
So today I'm going to
be presenting REsCue.

2210
01:38:24,500 --> 01:38:26,630
So this is a project,

2211
01:38:26,630 --> 01:38:29,390
an NSF project that
recently awarded.

2212
01:38:29,390 --> 01:38:32,765
So they're going to
give you an overview.

2213
01:38:32,765 --> 01:38:34,970
I'll be focusing
a little bit more

2214
01:38:34,970 --> 01:38:36,800
on the NDN part of it.

2215
01:38:36,800 --> 01:38:39,710
So the project is titled

2216
01:38:39,710 --> 01:38:41,960
Resilient Edge
ecosystem for

2217
01:38:41,960 --> 01:38:42,770
Collaborative and

2218
01:38:42,770 --> 01:38:44,330
Trustworthy
Disaster Response.

2219
01:38:44,330 --> 01:38:45,650
So it's on public safety

2220
01:38:45,650 --> 01:38:47,075
and disaster recovery.

2221
01:38:47,075 --> 01:38:49,070
And there are
some components

2222
01:38:49,070 --> 01:38:50,090
that they use NDN,

2223
01:38:50,090 --> 01:38:51,440
there are others
that do not.

2224
01:38:51,440 --> 01:38:53,270
So again, I'm
pretty much give

2225
01:38:53,270 --> 01:38:55,310
you a general overview.

2226
01:38:55,310 --> 01:38:56,750
I'm going to go
over some of

2227
01:38:56,750 --> 01:39:00,110
the tasks and some of
the papers quickly,

2228
01:39:00,110 --> 01:39:01,610
but I'll focus a
little bit more

2229
01:39:01,610 --> 01:39:03,470
on the ones that
are related to NDN

2230
01:39:03,470 --> 01:39:08,915
this is an NDN venue.

2231
01:39:08,915 --> 01:39:10,940
Let's start with the

2232
01:39:10,940 --> 01:39:12,470
collaborators for
the projects.

2233
01:39:12,470 --> 01:39:14,135
So the main PI is

2234
01:39:14,135 --> 01:39:17,495
Jay Misra from New
Mexico State University,

2235
01:39:17,495 --> 01:39:19,160
there is also Reza Tourani

2236
01:39:19,160 --> 01:39:21,350
from St. Louis
University and myself.

2237
01:39:21,350 --> 01:39:22,190
So the three of us

2238
01:39:22,190 --> 01:39:24,230
actually have
been working on

2239
01:39:24,230 --> 01:39:26,780
the NDN cybersecurity and

2240
01:39:26,780 --> 01:39:28,460
we're still
working on NDN.

2241
01:39:28,460 --> 01:39:30,680
So we have two other
collaborators.

2242
01:39:30,680 --> 01:39:35,260
Roopa, she is mainly
a crypto expert,

2243
01:39:35,260 --> 01:39:36,580
so and I going to talk

2244
01:39:36,580 --> 01:39:37,660
a little bit more details

2245
01:39:37,660 --> 01:39:40,375
about what are we
using in crypto.

2246
01:39:40,375 --> 01:39:43,479
And David has
more expertise

2247
01:39:43,479 --> 01:39:46,755
on information
and code theory.

2248
01:39:46,755 --> 01:39:47,900
So these are

2249
01:39:47,900 --> 01:39:51,270
the collaborators
for the project.

2250
01:39:51,610 --> 01:39:56,990
This is a special and
NSF RINGS projects.

2251
01:39:56,990 --> 01:39:58,460
So I want just
to have a slide

2252
01:39:58,460 --> 01:40:00,200
here to introduce
about RINGS.

2253
01:40:00,200 --> 01:40:01,820
So RINGS is Resilient and

2254
01:40:01,820 --> 01:40:04,430
Intelligent the Next
Generation Systems.

2255
01:40:04,430 --> 01:40:06,935
So it's a unique part.

2256
01:40:06,935 --> 01:40:10,010
The uniqueness about
it is collaboration,

2257
01:40:10,010 --> 01:40:11,090
cross academia

2258
01:40:11,090 --> 01:40:14,090
and government and
many industries.

2259
01:40:14,090 --> 01:40:16,640
So these are the industry,

2260
01:40:16,640 --> 01:40:19,880
so NIST is part of
it and we have DoD

2261
01:40:19,880 --> 01:40:23,620
and we have many
companies involved in it.

2262
01:40:23,620 --> 01:40:26,770
So they encourage
collaboration

2263
01:40:26,770 --> 01:40:29,290
between academia and
industry and government.

2264
01:40:29,290 --> 01:40:32,290
So they're of,
virtual organization

2265
01:40:32,290 --> 01:40:34,870
that settle those
kind of meetings

2266
01:40:34,870 --> 01:40:37,975
and they'll put
a team from

2267
01:40:37,975 --> 01:40:39,640
industry or government and

2268
01:40:39,640 --> 01:40:40,780
a team from academia

2269
01:40:40,780 --> 01:40:41,830
and we collaborate
together.

2270
01:40:41,830 --> 01:40:46,160
So this is the goal
for the project.

2271
01:40:46,990 --> 01:40:49,085
So even though, again,

2272
01:40:49,085 --> 01:40:50,540
it's a public safety and

2273
01:40:50,540 --> 01:40:53,120
it's disaster recovery
scenario that we use.

2274
01:40:53,120 --> 01:40:54,380
But we believe this can be

2275
01:40:54,380 --> 01:40:55,970
extended to anything that

2276
01:40:55,970 --> 01:40:57,950
has what we call a

2277
01:40:57,950 --> 01:41:00,410
federated network
of networks.

2278
01:41:00,410 --> 01:41:02,690
Today, we have many
networks that they

2279
01:41:02,690 --> 01:41:05,435
are autonomous
network pretty much

2280
01:41:05,435 --> 01:41:08,420
and they are administered

2281
01:41:08,420 --> 01:41:11,240
by their own network
administrators.

2282
01:41:11,240 --> 01:41:14,735
So the goal is,
how can we use

2283
01:41:14,735 --> 01:41:18,815
these federated network
of networks to do,

2284
01:41:18,815 --> 01:41:20,390
we're going to
present the different

2285
01:41:20,390 --> 01:41:21,440
challenges and how we

2286
01:41:21,440 --> 01:41:22,580
can really deal with

2287
01:41:22,580 --> 01:41:23,660
some of these challenges.

2288
01:41:23,660 --> 01:41:25,370
And this is where we just

2289
01:41:25,370 --> 01:41:28,070
proposing NDN as one
of the solutions.

2290
01:41:28,070 --> 01:41:29,120
So we believe, again,

2291
01:41:29,120 --> 01:41:30,350
I don't have to argue much

2292
01:41:30,350 --> 01:41:31,520
about why we need NDN

2293
01:41:31,520 --> 01:41:34,100
versus IP in this venue.

2294
01:41:34,100 --> 01:41:36,500
But again, one
of the arguments

2295
01:41:36,500 --> 01:41:39,125
that we just put there is

2296
01:41:39,125 --> 01:41:40,865
pretty much the fact that

2297
01:41:40,865 --> 01:41:42,260
in disaster recovery

2298
01:41:42,260 --> 01:41:43,805
where you're not relying

2299
01:41:43,805 --> 01:41:46,370
anymore at
centralized entity,

2300
01:41:46,370 --> 01:41:48,890
as for instance, Alex was

2301
01:41:48,890 --> 01:41:50,555
mentioning
everything that it's

2302
01:41:50,555 --> 01:41:52,564
pretty much
centralizing security.

2303
01:41:52,564 --> 01:41:54,890
So you see how
NDN actually can

2304
01:41:54,890 --> 01:41:57,320
work in a completely
seamless,

2305
01:41:57,320 --> 01:41:59,585
de-centralized way
in a better fashion.

2306
01:41:59,585 --> 01:42:01,670
I'm not saying that
it's going to be easy.

2307
01:42:01,670 --> 01:42:04,070
But this is part
of the project,

2308
01:42:04,070 --> 01:42:05,570
whether we are
seeing how we can do

2309
01:42:05,570 --> 01:42:08,090
things in easier way.

2310
01:42:08,090 --> 01:42:10,340
So that's what pretty

2311
01:42:10,340 --> 01:42:12,050
much we propose
and this is how we

2312
01:42:12,050 --> 01:42:17,720
are setting NDN at the
core of the solution.

2313
01:42:17,720 --> 01:42:18,830
So this is how we put it.

2314
01:42:18,830 --> 01:42:20,360
So NDN is in the
middle here.

2315
01:42:20,360 --> 01:42:21,740
These are the set of

2316
01:42:21,740 --> 01:42:23,660
tasks that we
are proposing.

2317
01:42:23,660 --> 01:42:25,310
So the one in the
bottom is the

2318
01:42:25,310 --> 01:42:27,380
one mainly using NDN.

2319
01:42:27,380 --> 01:42:28,910
So we're talking mainly

2320
01:42:28,910 --> 01:42:30,260
about network resiliency,

2321
01:42:30,260 --> 01:42:32,960
how we can use NDN
for resiliency.

2322
01:42:32,960 --> 01:42:35,090
We're talking also about

2323
01:42:35,090 --> 01:42:38,195
computation, orchestration
edge computing.

2324
01:42:38,195 --> 01:42:38,960
We are talking also

2325
01:42:38,960 --> 01:42:40,490
about a verifiable
computing,

2326
01:42:40,490 --> 01:42:41,735
which I going to
cover a little bit

2327
01:42:41,735 --> 01:42:43,865
more in few slides there.

2328
01:42:43,865 --> 01:42:45,710
So we have other tasks or

2329
01:42:45,710 --> 01:42:47,465
we call them
research thercast.

2330
01:42:47,465 --> 01:42:50,180
One is on mainly access
control and security.

2331
01:42:50,180 --> 01:42:51,710
And again, Alex
was talking about

2332
01:42:51,710 --> 01:42:53,000
attribute based
encryption and

2333
01:42:53,000 --> 01:42:54,440
signature and how
they are difficult,

2334
01:42:54,440 --> 01:42:56,940
so we're working
on some of those.

2335
01:42:58,870 --> 01:43:01,010
We are working on

2336
01:43:01,010 --> 01:43:02,810
trust and reputation
management.

2337
01:43:02,810 --> 01:43:03,800
So if you think about

2338
01:43:03,800 --> 01:43:05,240
the disaster
recovery scenario

2339
01:43:05,240 --> 01:43:06,769
where you don't have
an infrastructure,

2340
01:43:06,769 --> 01:43:07,820
you need to make sure that

2341
01:43:07,820 --> 01:43:10,910
you're relying on a set of

2342
01:43:10,910 --> 01:43:13,400
reputation and trust
to make sure that

2343
01:43:13,400 --> 01:43:16,715
everything is
trustworthy there.

2344
01:43:16,715 --> 01:43:18,290
So the architecture again,

2345
01:43:18,290 --> 01:43:20,840
when I talked about
multiple ANs or networks.

2346
01:43:20,840 --> 01:43:22,460
So these are the
autonomous networks.

2347
01:43:22,460 --> 01:43:25,690
What we are taking this
is the architecture.

2348
01:43:25,690 --> 01:43:27,115
So we assume that we have

2349
01:43:27,115 --> 01:43:29,020
some nodes that they
are running NDN,

2350
01:43:29,020 --> 01:43:30,280
that they form
what's called

2351
01:43:30,280 --> 01:43:31,815
the backbone network,

2352
01:43:31,815 --> 01:43:33,430
and this we're going to

2353
01:43:33,430 --> 01:43:35,770
create the resiliency

2354
01:43:35,770 --> 01:43:37,330
between all
these networks.

2355
01:43:37,330 --> 01:43:42,509
So what we claim is
each of these networks,

2356
01:43:42,509 --> 01:43:45,080
these autonomous
network will pretty

2357
01:43:45,080 --> 01:43:46,235
much comment or put

2358
01:43:46,235 --> 01:43:47,780
what we call a
periphery node,

2359
01:43:47,780 --> 01:43:50,540
that is an NDN node
and it's going to be

2360
01:43:50,540 --> 01:43:54,080
integrated to the whole
NDN network there.

2361
01:43:54,080 --> 01:43:57,845
And these have edge
computing capabilities,

2362
01:43:57,845 --> 01:43:59,660
and to allow some of

2363
01:43:59,660 --> 01:44:01,070
the challenges and
some of the work

2364
01:44:01,070 --> 01:44:03,150
we're going to be
talking about.

2365
01:44:03,850 --> 01:44:06,830
You can interrupt me
at anytime I like

2366
01:44:06,830 --> 01:44:07,970
questions and they come

2367
01:44:07,970 --> 01:44:09,530
here so I can answer
them right away.

2368
01:44:09,530 --> 01:44:10,370
I don't know if this is

2369
01:44:10,370 --> 01:44:11,390
how it should be or no,

2370
01:44:11,390 --> 01:44:13,490
but just FYI.

2371
01:44:13,490 --> 01:44:17,330
So this is the first task

2372
01:44:17,330 --> 01:44:18,845
that they're going
to be talking about.

2373
01:44:18,845 --> 01:44:21,110
So the scenario here

2374
01:44:21,110 --> 01:44:22,865
I want you to
think about it.

2375
01:44:22,865 --> 01:44:25,070
I talked about
disaster recovery,

2376
01:44:25,070 --> 01:44:27,080
but we are
considering what we

2377
01:44:27,080 --> 01:44:29,195
call a pervasive
edge computing here.

2378
01:44:29,195 --> 01:44:31,355
Pervasive edge
computing is,

2379
01:44:31,355 --> 01:44:35,375
think about a network
where you have

2380
01:44:35,375 --> 01:44:37,505
even user devices
can be used as

2381
01:44:37,505 --> 01:44:38,975
edge computing devices

2382
01:44:38,975 --> 01:44:40,340
and in disaster recovery,

2383
01:44:40,340 --> 01:44:41,480
that's going
to make sense.

2384
01:44:41,480 --> 01:44:43,730
Again, we have many of

2385
01:44:43,730 --> 01:44:46,010
these compute
phase capability

2386
01:44:46,010 --> 01:44:47,060
that they are
not available.

2387
01:44:47,060 --> 01:44:49,385
So we need to make
sure that we are using

2388
01:44:49,385 --> 01:44:51,635
all the resources
that we have

2389
01:44:51,635 --> 01:44:54,020
around us with
first responders,

2390
01:44:54,020 --> 01:44:56,015
with everybody
just moving ahead.

2391
01:44:56,015 --> 01:44:58,820
So this is the network

2392
01:44:58,820 --> 01:45:00,710
that we call it a
pervasive edge computing.

2393
01:45:00,710 --> 01:45:02,329
So it has a combination

2394
01:45:02,329 --> 01:45:04,190
between what we
call iServer.

2395
01:45:04,190 --> 01:45:05,930
These are
infrastructure servers.

2396
01:45:05,930 --> 01:45:09,335
These are what we know
today as Cloud or

2397
01:45:09,335 --> 01:45:11,480
edge computing server and

2398
01:45:11,480 --> 01:45:13,865
what we call them
user servers.

2399
01:45:13,865 --> 01:45:15,590
And user servers can be

2400
01:45:15,590 --> 01:45:17,930
even a laptop or
even a mobile phone.

2401
01:45:17,930 --> 01:45:21,245
That's going to get
some services there.

2402
01:45:21,245 --> 01:45:23,120
And we're using here NDN.

2403
01:45:23,120 --> 01:45:25,370
So this is an
orchestration algorithm.

2404
01:45:25,370 --> 01:45:26,360
It's called, you discover

2405
01:45:26,360 --> 01:45:27,710
the paper is accepted

2406
01:45:27,710 --> 01:45:30,170
in IEEE edge last year

2407
01:45:30,170 --> 01:45:31,955
and we have a journal
version of it.

2408
01:45:31,955 --> 01:45:33,950
So there are many ways you

2409
01:45:33,950 --> 01:45:35,720
can do service
discovery and

2410
01:45:35,720 --> 01:45:39,650
orchestration of
tasks in literature.

2411
01:45:39,650 --> 01:45:41,990
So this is one of
the idea of this

2412
01:45:41,990 --> 01:45:43,070
that we're going
to do it from

2413
01:45:43,070 --> 01:45:44,480
a user centric
perspective.

2414
01:45:44,480 --> 01:45:46,920
So usually we
have a network

2415
01:45:47,350 --> 01:45:50,330
actually making
decision on forwarding

2416
01:45:50,330 --> 01:45:53,015
the task to the least
utilized servers.

2417
01:45:53,015 --> 01:45:57,770
So this is a way we can
do it from the user.

2418
01:45:57,770 --> 01:46:01,070
We argue that the user
have a better idea

2419
01:46:01,070 --> 01:46:04,070
about the tasks and the
profiles of the task.

2420
01:46:04,070 --> 01:46:06,620
So some task are more
compute intensive,

2421
01:46:06,620 --> 01:46:10,490
some task are more
communication intensive.

2422
01:46:10,490 --> 01:46:13,460
And based on the
collection from

2423
01:46:13,460 --> 01:46:15,410
the availability of
all these resources,

2424
01:46:15,410 --> 01:46:16,295
we're going to favor,

2425
01:46:16,295 --> 01:46:18,995
either going to these
infrastructure servers

2426
01:46:18,995 --> 01:46:20,450
or we are going to the,

2427
01:46:20,450 --> 01:46:22,700
what we call the
user servers.

2428
01:46:22,700 --> 01:46:24,260
So that's one of the work.

2429
01:46:24,260 --> 01:46:27,125
So if you look at the
plot here on the right,

2430
01:46:27,125 --> 01:46:29,300
we're plotting
here a delay,

2431
01:46:29,300 --> 01:46:31,535
for instance, and

2432
01:46:31,535 --> 01:46:33,755
what we have here
and iServers,

2433
01:46:33,755 --> 01:46:35,000
this is what
we have today.

2434
01:46:35,000 --> 01:46:37,100
So if you rely only on
infrastructure server,

2435
01:46:37,100 --> 01:46:38,840
this is how much time
it's going to take

2436
01:46:38,840 --> 01:46:40,790
you to execute
all these tasks.

2437
01:46:40,790 --> 01:46:42,560
And why is that?

2438
01:46:42,560 --> 01:46:43,850
Is simply because these

2439
01:46:43,850 --> 01:46:45,500
iServer become overruled.

2440
01:46:45,500 --> 01:46:47,765
So now if you are relying

2441
01:46:47,765 --> 01:46:50,735
on other devices that
they are around us,

2442
01:46:50,735 --> 01:46:52,955
this is how much
you can cut

2443
01:46:52,955 --> 01:46:57,365
the delay by, now.

2444
01:46:57,365 --> 01:46:59,060
Yeah, I forgot how much.

2445
01:46:59,060 --> 01:47:01,520
But these are two
different solution.

2446
01:47:01,520 --> 01:47:03,200
We have proactive, and
reactive approach,

2447
01:47:03,200 --> 01:47:07,440
but again, these are
you'll discover idea.

2448
01:47:07,990 --> 01:47:13,040
So this is the
the first task

2449
01:47:13,040 --> 01:47:14,810
that we are working on,
the second one again,

2450
01:47:14,810 --> 01:47:15,860
as I said for

2451
01:47:15,860 --> 01:47:18,200
NDN in disaster recovery

2452
01:47:18,200 --> 01:47:19,370
we're talking
about resiliency,

2453
01:47:19,370 --> 01:47:21,710
the placement of
this backbone node

2454
01:47:21,710 --> 01:47:23,150
that I presented before,

2455
01:47:23,150 --> 01:47:25,145
and the periphery node.

2456
01:47:25,145 --> 01:47:26,930
And we are talking
about placements,

2457
01:47:26,930 --> 01:47:31,160
so this is also where
the information,

2458
01:47:31,160 --> 01:47:33,110
and code theory expert is

2459
01:47:33,110 --> 01:47:35,690
helping with
the resiliency.

2460
01:47:35,690 --> 01:47:39,815
So we have a paper in 2019

2461
01:47:39,815 --> 01:47:45,890
where we propose control.

2462
01:47:45,890 --> 01:47:47,405
The transport protocol,

2463
01:47:47,405 --> 01:47:49,520
this is TCP, not NDN,

2464
01:47:49,520 --> 01:47:50,975
but instead of using

2465
01:47:50,975 --> 01:47:54,515
TCP we are using

2466
01:47:54,515 --> 01:47:56,480
rateless code, or
fountain codes.

2467
01:47:56,480 --> 01:47:57,710
So fountain code
pretty much

2468
01:47:57,710 --> 01:47:58,940
saying you don't
have to deal

2469
01:47:58,940 --> 01:48:01,640
with error correction,
and anything,

2470
01:48:01,640 --> 01:48:04,175
just you send
everything via UDP,

2471
01:48:04,175 --> 01:48:06,410
and let the end host deal

2472
01:48:06,410 --> 01:48:08,735
with it with encryption,
and decryption.

2473
01:48:08,735 --> 01:48:10,610
That's what's called
a fountain code.

2474
01:48:10,610 --> 01:48:13,130
So it was an ICC
paper the time,

2475
01:48:13,130 --> 01:48:15,290
and we're working
on it where we're

2476
01:48:15,290 --> 01:48:17,795
proposing on how we
work on it also in NDN,

2477
01:48:17,795 --> 01:48:19,670
and if we can use
that also in NDN.

2478
01:48:19,670 --> 01:48:22,940
So it comes with

2479
01:48:22,940 --> 01:48:24,695
a caveat or an overhead

2480
01:48:24,695 --> 01:48:26,315
that you need to
do an encryption,

2481
01:48:26,315 --> 01:48:27,590
and decryption at
the beginning.

2482
01:48:27,590 --> 01:48:28,670
So it's not really good

2483
01:48:28,670 --> 01:48:30,605
for all applications,

2484
01:48:30,605 --> 01:48:32,660
but it's actually
good for application,

2485
01:48:32,660 --> 01:48:34,070
let's say large datasets

2486
01:48:34,070 --> 01:48:34,850
or something like this,

2487
01:48:34,850 --> 01:48:35,990
because there is
an overhead at

2488
01:48:35,990 --> 01:48:36,920
the beginning
that you need

2489
01:48:36,920 --> 01:48:38,825
to do an encryption.

2490
01:48:38,825 --> 01:48:40,820
You need to set how

2491
01:48:40,820 --> 01:48:42,470
many chunks you're
going to be putting,

2492
01:48:42,470 --> 01:48:44,690
and how much overhead
you need to put.

2493
01:48:44,690 --> 01:48:47,360
And then you send all
these rateless codes,

2494
01:48:47,360 --> 01:48:50,780
and then you need
to decipher,

2495
01:48:50,780 --> 01:48:53,370
and decrypt at the end.

2496
01:48:53,860 --> 01:48:57,500
So the other task
also that we are

2497
01:48:57,500 --> 01:48:59,165
working on currently

2498
01:48:59,165 --> 01:49:01,040
is verifiable computation.

2499
01:49:01,040 --> 01:49:02,990
So verifiable
computation in

2500
01:49:02,990 --> 01:49:04,250
an edge computing
scenario,

2501
01:49:04,250 --> 01:49:06,210
as we mentioned, impact.

2502
01:49:06,210 --> 01:49:09,369
So we rely on
remote devices

2503
01:49:09,369 --> 01:49:10,570
or remote servers to

2504
01:49:10,570 --> 01:49:12,040
do the computation for us.

2505
01:49:12,040 --> 01:49:13,360
And if you, for instance,

2506
01:49:13,360 --> 01:49:15,505
using an application
like autonomous driving

2507
01:49:15,505 --> 01:49:18,455
or something else
that you rely only,

2508
01:49:18,455 --> 01:49:19,595
you just get the results.

2509
01:49:19,595 --> 01:49:20,690
You're not able to do

2510
01:49:20,690 --> 01:49:21,980
the computation yourself.

2511
01:49:21,980 --> 01:49:23,150
You're going to get
the results, and

2512
01:49:23,150 --> 01:49:24,590
usually the car

2513
01:49:24,590 --> 01:49:26,045
will make decision based

2514
01:49:26,045 --> 01:49:27,845
on the results
that is receiving.

2515
01:49:27,845 --> 01:49:30,020
And the caveat here

2516
01:49:30,020 --> 01:49:32,360
is there is no way for you

2517
01:49:32,360 --> 01:49:34,370
to verify because we
assume that you don't

2518
01:49:34,370 --> 01:49:35,480
have the
capability even to

2519
01:49:35,480 --> 01:49:36,560
run the test yourself.

2520
01:49:36,560 --> 01:49:38,870
So we need to
have a mechanism

2521
01:49:38,870 --> 01:49:40,880
to do verifiable
computation.

2522
01:49:40,880 --> 01:49:42,020
And there are
many ways you

2523
01:49:42,020 --> 01:49:43,490
can do very verifiable
computation.

2524
01:49:43,490 --> 01:49:45,425
So in here we're doing

2525
01:49:45,425 --> 01:49:48,260
things that are based
on crypto solutions,

2526
01:49:48,260 --> 01:49:49,310
and this is why we

2527
01:49:49,310 --> 01:49:52,505
have a crypto
expert in the team,

2528
01:49:52,505 --> 01:49:53,840
and we're working on

2529
01:49:53,840 --> 01:49:55,565
some crypto
solutions there.

2530
01:49:55,565 --> 01:49:57,455
I'm mainly involved in

2531
01:49:57,455 --> 01:49:58,940
the non crypto solutions.

2532
01:49:58,940 --> 01:50:00,470
So the crypto
solution I can

2533
01:50:00,470 --> 01:50:02,300
put you more in contact
at frankly speaking,

2534
01:50:02,300 --> 01:50:03,410
I don't know much detail

2535
01:50:03,410 --> 01:50:04,730
about what's
going on there.

2536
01:50:04,730 --> 01:50:06,560
I'm not really
a crypto guy,

2537
01:50:06,560 --> 01:50:11,285
and I should know more
about it, but I don't.

2538
01:50:11,285 --> 01:50:13,370
To the non crypto solution

2539
01:50:13,370 --> 01:50:14,840
that are
replication based,

2540
01:50:14,840 --> 01:50:17,450
and secure hardware base.

2541
01:50:17,450 --> 01:50:19,190
So we're working on
both by the way.

2542
01:50:19,190 --> 01:50:21,500
The replication base
is very simple.

2543
01:50:21,500 --> 01:50:23,990
Replication base
to think about it

2544
01:50:23,990 --> 01:50:26,150
like now in order for me

2545
01:50:26,150 --> 01:50:28,370
to verify the computation
I need to send,

2546
01:50:28,370 --> 01:50:29,645
instead of just one task,

2547
01:50:29,645 --> 01:50:30,845
I send multiple tasks,

2548
01:50:30,845 --> 01:50:34,250
and gather multiple
results, and I compare.

2549
01:50:34,250 --> 01:50:35,870
But there is a huge
overhead for that.

2550
01:50:35,870 --> 01:50:39,095
So the solution itself,
it's not novel.

2551
01:50:39,095 --> 01:50:41,510
What sexually, what
we're working on on

2552
01:50:41,510 --> 01:50:44,060
that part is the
collusion there.

2553
01:50:44,060 --> 01:50:45,575
If there is a
collusion between

2554
01:50:45,575 --> 01:50:46,685
all these servers,

2555
01:50:46,685 --> 01:50:47,510
you need to be able

2556
01:50:47,510 --> 01:50:48,410
to detect it
because you are

2557
01:50:48,410 --> 01:50:50,360
relying on
majority voting.

2558
01:50:50,360 --> 01:50:51,680
You are sending three.

2559
01:50:51,680 --> 01:50:52,910
If you get two that,

2560
01:50:52,910 --> 01:50:55,265
they are saying this
is a stop sign,

2561
01:50:55,265 --> 01:50:57,125
you assume it's
a stop sign.

2562
01:50:57,125 --> 01:50:59,404
Now, if these two
are colluding,

2563
01:50:59,404 --> 01:51:00,530
then you can assume it's

2564
01:51:00,530 --> 01:51:02,270
a stop sign while
it's not a stop sign.

2565
01:51:02,270 --> 01:51:03,680
So collusion mitigation is

2566
01:51:03,680 --> 01:51:05,630
actually a big
problem there.

2567
01:51:05,630 --> 01:51:07,640
Using secure
hardware we have

2568
01:51:07,640 --> 01:51:10,980
a paper actually
there, and CCS.

2569
01:51:12,070 --> 01:51:14,510
Actually, it's
under submission,

2570
01:51:14,510 --> 01:51:15,380
and CCS, sorry.

2571
01:51:15,380 --> 01:51:17,270
Yeah, this year.
It's still need

2572
01:51:17,270 --> 01:51:19,340
to go through
some iteration.

2573
01:51:19,340 --> 01:51:25,100
So the idea here is we
are using Intel SGX,

2574
01:51:25,100 --> 01:51:28,310
which is the
secure hardware

2575
01:51:28,310 --> 01:51:29,690
to do the computation.

2576
01:51:29,690 --> 01:51:31,055
By the way it's
very expensive,

2577
01:51:31,055 --> 01:51:32,660
so you cannot
really rely on

2578
01:51:32,660 --> 01:51:34,895
that to do pretty
much all the tasks.

2579
01:51:34,895 --> 01:51:36,980
So what we do is you send

2580
01:51:36,980 --> 01:51:39,635
a task for execution
to the server,

2581
01:51:39,635 --> 01:51:41,030
and locally what you do,

2582
01:51:41,030 --> 01:51:42,395
we have a distal model.

2583
01:51:42,395 --> 01:51:44,615
Again, this is used
for machine learning.

2584
01:51:44,615 --> 01:51:46,205
We have a distal model,

2585
01:51:46,205 --> 01:51:48,260
and we compare
the result of

2586
01:51:48,260 --> 01:51:49,610
the original model with

2587
01:51:49,610 --> 01:51:51,645
the result of a
distal model,

2588
01:51:51,645 --> 01:51:53,350
and then we can detect

2589
01:51:53,350 --> 01:51:55,240
whether there is
malicious or not.

2590
01:51:55,240 --> 01:52:01,700
So we have some detection
of malicious attack

2591
01:52:01,700 --> 01:52:05,975
or no based on

2592
01:52:05,975 --> 01:52:08,480
the distal model that
we have at the server.

2593
01:52:08,480 --> 01:52:12,350
So distal model is
the one using SGX.

2594
01:52:12,350 --> 01:52:18,840
Let me see how
much time we have.

2595
01:52:19,390 --> 01:52:21,950
So here we are

2596
01:52:21,950 --> 01:52:23,720
working also on trust,
and reputation.

2597
01:52:23,720 --> 01:52:25,460
So the goal here is
we're trying to do

2598
01:52:25,460 --> 01:52:27,575
trust as a fuzzy truth.

2599
01:52:27,575 --> 01:52:28,880
And the goal, we have a

2600
01:52:28,880 --> 01:52:30,695
blockchain where
we're setting

2601
01:52:30,695 --> 01:52:32,180
first responder

2602
01:52:32,180 --> 01:52:34,280
doing a certain
transactions,

2603
01:52:34,280 --> 01:52:37,175
and we put that
into a blockchain.

2604
01:52:37,175 --> 01:52:38,270
And this is how we going

2605
01:52:38,270 --> 01:52:39,230
to build reputation,

2606
01:52:39,230 --> 01:52:40,760
and this is how we're
going to build trust.

2607
01:52:40,760 --> 01:52:44,525
So the problem in a
disaster recovery.

2608
01:52:44,525 --> 01:52:45,890
So blockchain,

2609
01:52:45,890 --> 01:52:47,945
unfortunately,
they assume that

2610
01:52:47,945 --> 01:52:49,220
this is one chain

2611
01:52:49,220 --> 01:52:52,940
like when you
are working in

2612
01:52:52,940 --> 01:52:58,025
completely
disrupted network

2613
01:52:58,025 --> 01:52:59,300
you're going to
end up having

2614
01:52:59,300 --> 01:53:00,890
multiple chains
that you need

2615
01:53:00,890 --> 01:53:02,570
to merge them
together later on to

2616
01:53:02,570 --> 01:53:04,415
verify which ones are

2617
01:53:04,415 --> 01:53:06,485
more reputable
than others,

2618
01:53:06,485 --> 01:53:07,970
and they're going
to be conflicting.

2619
01:53:07,970 --> 01:53:09,424
So there is merging

2620
01:53:09,424 --> 01:53:10,760
of these blockchain
that needs

2621
01:53:10,760 --> 01:53:11,990
to happen in order

2622
01:53:11,990 --> 01:53:13,550
for you to understand
what's going to happen.

2623
01:53:13,550 --> 01:53:15,695
So whenever the
networks now come back,

2624
01:53:15,695 --> 01:53:17,900
then you're going to
have multiple chains of

2625
01:53:17,900 --> 01:53:19,400
these smart contracts
that they need

2626
01:53:19,400 --> 01:53:22,055
to be merged together.

2627
01:53:22,055 --> 01:53:25,070
So I'm going to I think
end with this slide.

2628
01:53:25,070 --> 01:53:27,050
So part of the
evaluation as well,

2629
01:53:27,050 --> 01:53:28,490
so this is where
we're using NDN.

2630
01:53:28,490 --> 01:53:30,020
I told you that I'm
focusing mainly

2631
01:53:30,020 --> 01:53:31,610
on NDN stuff here.

2632
01:53:31,610 --> 01:53:33,200
So what you're
trying to do

2633
01:53:33,200 --> 01:53:35,000
is we're trying to
build this small test,

2634
01:53:35,000 --> 01:53:36,170
but the testbed
is not fancy.

2635
01:53:36,170 --> 01:53:38,690
So what we have there
is just a very simple,

2636
01:53:38,690 --> 01:53:43,100
I think, five
month ago testing.

2637
01:53:43,100 --> 01:53:44,960
But the goal is
we are saying

2638
01:53:44,960 --> 01:53:47,120
testbed today
people do not

2639
01:53:47,120 --> 01:53:49,940
use them because they

2640
01:53:49,940 --> 01:53:51,605
are not easy to deploy,

2641
01:53:51,605 --> 01:53:55,745
and they are
hard to set up,

2642
01:53:55,745 --> 01:53:57,200
and hard to configure.

2643
01:53:57,200 --> 01:53:59,285
So that's a problem
that we have today.

2644
01:53:59,285 --> 01:54:01,730
So that's why we end up
really using ndnSIM,

2645
01:54:01,730 --> 01:54:03,020
and it's easy to NGS.

2646
01:54:03,020 --> 01:54:05,075
And so the goal is,
can we do something

2647
01:54:05,075 --> 01:54:08,315
as simple as ndnSIM,

2648
01:54:08,315 --> 01:54:09,950
but still we are
using testbed.

2649
01:54:09,950 --> 01:54:11,060
Know it's not an emulator,

2650
01:54:11,060 --> 01:54:12,215
but it's just a testbed.

2651
01:54:12,215 --> 01:54:14,150
And we have just the
Raspberry Pi is there,

2652
01:54:14,150 --> 01:54:15,890
but it can be
anything else.

2653
01:54:15,890 --> 01:54:17,360
And the goal is we

2654
01:54:17,360 --> 01:54:19,100
want the
configurability to

2655
01:54:19,100 --> 01:54:22,715
be like you set
any topology.

2656
01:54:22,715 --> 01:54:24,770
So you can set,
for instance,

2657
01:54:24,770 --> 01:54:27,800
you give it a
topology as file,

2658
01:54:27,800 --> 01:54:30,755
and it will set a
topology by itself.

2659
01:54:30,755 --> 01:54:34,190
You can create whether
it's NDN or IP.

2660
01:54:34,190 --> 01:54:36,485
You can just work
wireless versus whatever.

2661
01:54:36,485 --> 01:54:39,710
So the topology
for instance,

2662
01:54:39,710 --> 01:54:40,910
let me tell you
how we do it.

2663
01:54:40,910 --> 01:54:42,680
So we have wireless
or not wireless.

2664
01:54:42,680 --> 01:54:44,705
So we have all the nodes

2665
01:54:44,705 --> 01:54:47,255
are configured
into a switch.

2666
01:54:47,255 --> 01:54:50,180
So they all can see
each other in one hop.

2667
01:54:50,180 --> 01:54:54,035
But when you set
the topology,

2668
01:54:54,035 --> 01:54:55,715
you create the fibs,

2669
01:54:55,715 --> 01:54:57,305
and you push them in

2670
01:54:57,305 --> 01:54:58,490
all these devices so you

2671
01:54:58,490 --> 01:55:00,215
can force a topology,

2672
01:55:00,215 --> 01:55:03,860
even though they all
are in a MAC layer,

2673
01:55:03,860 --> 01:55:05,180
they all can
see each other,

2674
01:55:05,180 --> 01:55:07,130
but we are forcing
a topology

2675
01:55:07,130 --> 01:55:08,480
to go through
certain nodes.

2676
01:55:08,480 --> 01:55:10,190
So you can have five hops,

2677
01:55:10,190 --> 01:55:12,725
six hops, eight
hops like this.

2678
01:55:12,725 --> 01:55:14,420
And again, we do
it in wireless,

2679
01:55:14,420 --> 01:55:16,610
while these are an
ad-hoc network,

2680
01:55:16,610 --> 01:55:18,080
of course you have
interference that's

2681
01:55:18,080 --> 01:55:19,760
going to be something

2682
01:55:19,760 --> 01:55:21,140
that we need to
deal with or

2683
01:55:21,140 --> 01:55:22,070
wired while you put

2684
01:55:22,070 --> 01:55:23,795
a switch, for
instance there.

2685
01:55:23,795 --> 01:55:26,850
So that's what we
do. Thank you.

2686
01:55:38,340 --> 01:55:43,359
[APPLAUSE] [NOISE]

2687
01:55:43,359 --> 01:55:46,840
>> So there are mics in
the room if you have

2688
01:55:46,840 --> 01:55:48,325
questions and

2689
01:55:48,325 --> 01:55:51,685
if remote attendees
have any questions,

2690
01:55:51,685 --> 01:55:53,440
there's a Slack
channel for

2691
01:55:53,440 --> 01:55:55,255
each presentation
as you know,

2692
01:55:55,255 --> 01:55:59,335
so please ask any
questions there.

2693
01:55:59,335 --> 01:56:01,390
Slack will stay there

2694
01:56:01,390 --> 01:56:04,420
so even after the
presentation,

2695
01:56:04,420 --> 01:56:07,120
even after today,
I hope they

2696
01:56:07,120 --> 01:56:11,455
can answer questions
that are over there.

2697
01:56:11,455 --> 01:56:16,150
I wanted to ask you
a question on well,

2698
01:56:16,150 --> 01:56:18,070
actually also
are questions on

2699
01:56:18,070 --> 01:56:22,105
the crypto related topics.

2700
01:56:22,105 --> 01:56:25,000
But maybe we can talk
about that offline.

2701
01:56:25,000 --> 01:56:28,105
As I've been
trying to convince

2702
01:56:28,105 --> 01:56:30,820
the NDN community to
work more on those.

2703
01:56:30,820 --> 01:56:33,415
I think there's a lot of

2704
01:56:33,415 --> 01:56:35,680
new techniques that NDN

2705
01:56:35,680 --> 01:56:37,510
could take advantage of.

2706
01:56:37,510 --> 01:56:40,300
>> In the coding
part or the crypto?

2707
01:56:40,300 --> 01:56:41,455
>> All of them.

2708
01:56:41,455 --> 01:56:42,880
>> Okay

2709
01:56:42,880 --> 01:56:45,010
>> But the question
is actually on

2710
01:56:45,010 --> 01:56:48,920
the last slide on the
testbed and we just

2711
01:56:49,050 --> 01:56:52,030
heard the front and
from the panelists

2712
01:56:52,030 --> 01:56:54,385
how hard it could be to

2713
01:56:54,385 --> 01:56:59,260
have a high level ways
to build applications,

2714
01:56:59,260 --> 01:57:02,005
high level ways to
test applications,

2715
01:57:02,005 --> 01:57:04,135
simple ways to deploy and

2716
01:57:04,135 --> 01:57:06,310
Andean on a network.

2717
01:57:06,310 --> 01:57:11,050
So I hope that what
you're building can be,

2718
01:57:11,050 --> 01:57:12,250
I'm not asking you to

2719
01:57:12,250 --> 01:57:13,690
generalize to
every use case,

2720
01:57:13,690 --> 01:57:15,115
but I hope it's something

2721
01:57:15,115 --> 01:57:17,810
you can share with
the community,

2722
01:57:18,000 --> 01:57:20,425
so they can be re-used.

2723
01:57:20,425 --> 01:57:22,975
>> Yeah, so that's a
very good question.

2724
01:57:22,975 --> 01:57:24,790
Again, part of Tennessee,

2725
01:57:24,790 --> 01:57:25,930
we're going to
be sharing this,

2726
01:57:25,930 --> 01:57:28,150
so we're working on it
and we're sharing it.

2727
01:57:28,150 --> 01:57:29,440
And again, I agree

2728
01:57:29,440 --> 01:57:30,970
with you on the
application side.

2729
01:57:30,970 --> 01:57:32,320
So this is pretty
much we are

2730
01:57:32,320 --> 01:57:34,210
thinking more on
the networking,

2731
01:57:34,210 --> 01:57:36,040
so thinking
about something

2732
01:57:36,040 --> 01:57:38,365
as close as
possible to NDSM,

2733
01:57:38,365 --> 01:57:40,990
but in just the
real hardware,

2734
01:57:40,990 --> 01:57:42,070
just think about
it that way.

2735
01:57:42,070 --> 01:57:43,150
So again, in NDSM,

2736
01:57:43,150 --> 01:57:44,635
you can build
any application.

2737
01:57:44,635 --> 01:57:47,050
You can bring all your
application and just

2738
01:57:47,050 --> 01:57:49,660
use those as so
we're not building,

2739
01:57:49,660 --> 01:57:52,930
for instance, the
compute capability yet,

2740
01:57:52,930 --> 01:57:54,010
or we didn't propose that,

2741
01:57:54,010 --> 01:57:55,570
but we wish we can do it.

2742
01:57:55,570 --> 01:57:57,520
And so right now the

2743
01:57:57,520 --> 01:58:02,140
way we propose it
in the project,

2744
01:58:02,140 --> 01:58:03,880
we have like
different campuses.

2745
01:58:03,880 --> 01:58:04,870
So each one of them can

2746
01:58:04,870 --> 01:58:05,950
have an island running

2747
01:58:05,950 --> 01:58:07,510
NDN and they're
going to be

2748
01:58:07,510 --> 01:58:09,280
connected through a
tunnel so that tunnel,

2749
01:58:09,280 --> 01:58:11,020
of course, you cannot
change the topology,

2750
01:58:11,020 --> 01:58:12,610
but in each of
these islands you

2751
01:58:12,610 --> 01:58:14,575
can play with
whatever you want.

2752
01:58:14,575 --> 01:58:16,420
So you have just
a control device.

2753
01:58:16,420 --> 01:58:17,845
That control
device will get

2754
01:58:17,845 --> 01:58:19,450
all these information
and it will push

2755
01:58:19,450 --> 01:58:22,810
all the config file

2756
01:58:22,810 --> 01:58:25,780
to all the devices that
they are connected.

2757
01:58:25,780 --> 01:58:29,470
And then they will
set what topology,

2758
01:58:29,470 --> 01:58:31,525
what interfaces are using.

2759
01:58:31,525 --> 01:58:35,050
And then the task
that if you have like

2760
01:58:35,050 --> 01:58:36,910
just sending some data

2761
01:58:36,910 --> 01:58:38,800
or you have an
application,

2762
01:58:38,800 --> 01:58:40,420
just run the application
for how long?

2763
01:58:40,420 --> 01:58:42,295
And it's a
genetic disorder,

2764
01:58:42,295 --> 01:58:44,185
like you're using NDSM.

2765
01:58:44,185 --> 01:58:45,970
>> Yeah, sounds
great. I'm looking

2766
01:58:45,970 --> 01:58:47,905
forward to it. Thank
you very much.

2767
01:58:47,905 --> 01:58:48,625
>> Thank you.

2768
01:58:48,625 --> 01:58:58,610
>> Thank our speaker
again [APPLAUSE] So

2769
01:59:07,530 --> 01:59:09,730
our second speaker is

2770
01:59:09,730 --> 01:59:12,040
Zack from Tennessee Tech.

2771
01:59:12,040 --> 01:59:14,620
Zack will talk about in

2772
01:59:14,620 --> 01:59:19,195
Vehicle Networking
with NDN course.

2773
01:59:19,195 --> 01:59:22,045
Zack is a recovering
comedian,

2774
01:59:22,045 --> 01:59:25,240
but it's also pursuing
a master's in

2775
01:59:25,240 --> 01:59:29,124
cybersecurity and
is a DOD scholar,

2776
01:59:29,124 --> 01:59:31,090
any hope to continue as

2777
01:59:31,090 --> 01:59:34,803
a carrier like a
DOD. I'm I right?

2778
01:59:34,803 --> 01:59:35,305
>> Yes

2779
01:59:35,305 --> 01:59:37,360
>> And he also tells me

2780
01:59:37,360 --> 01:59:40,690
that he can ride
a unicycle.

2781
01:59:40,690 --> 01:59:42,280
Though maybe
you can give us

2782
01:59:42,280 --> 01:59:43,690
a demonstration at
the break [LAUGHTER]

2783
01:59:43,690 --> 01:59:52,360
>> I wasn't aware of
everyday conversation,

2784
01:59:52,360 --> 01:59:54,310
so I do appreciate it.

2785
01:59:54,310 --> 01:59:57,010
So we're going to be
talking about NDN

2786
01:59:57,010 --> 01:59:59,290
for the inside of
vehicle networks.

2787
01:59:59,290 --> 02:00:00,490
Obviously this
is in contrast

2788
02:00:00,490 --> 02:00:02,425
to networks of vehicles.

2789
02:00:02,425 --> 02:00:05,050
This is how the
electrical control units,

2790
02:00:05,050 --> 02:00:06,700
the insides
vehicles actually

2791
02:00:06,700 --> 02:00:09,010
communicate with
one another.

2792
02:00:09,010 --> 02:00:09,820
So we're going to talk

2793
02:00:09,820 --> 02:00:11,170
about the current
situation

2794
02:00:11,170 --> 02:00:11,979
that's motivating

2795
02:00:11,979 --> 02:00:13,315
a conversion and
the research,

2796
02:00:13,315 --> 02:00:15,130
as well as the directions

2797
02:00:15,130 --> 02:00:18,220
that the majority of the
automotive community

2798
02:00:18,220 --> 02:00:19,960
is heading in
and where we see

2799
02:00:19,960 --> 02:00:24,295
NDN could possibly
find a home there.

2800
02:00:24,295 --> 02:00:28,240
And the benefits of
using it in this work.

2801
02:00:28,240 --> 02:00:30,400
I'll talk a little
bit about an effect.

2802
02:00:30,400 --> 02:00:31,930
I will talk a
lot a bit about

2803
02:00:31,930 --> 02:00:33,400
a benchtop testbed

2804
02:00:33,400 --> 02:00:34,420
that we've been
developing,

2805
02:00:34,420 --> 02:00:36,625
as well as the
software test harness

2806
02:00:36,625 --> 02:00:38,080
that will actually help

2807
02:00:38,080 --> 02:00:39,535
us execute these things.

2808
02:00:39,535 --> 02:00:41,560
We're going to discuss
the results and then

2809
02:00:41,560 --> 02:00:42,850
where we're heading
in the future

2810
02:00:42,850 --> 02:00:44,260
and what we hope
to do with this.

2811
02:00:44,260 --> 02:00:51,415
So currently, vehicles
are more digital than

2812
02:00:51,415 --> 02:00:54,550
mechanical and there
are distributed set of

2813
02:00:54,550 --> 02:00:56,455
electrical control
units referred to as

2814
02:00:56,455 --> 02:00:59,845
ECUs that taken
physical input.

2815
02:00:59,845 --> 02:01:02,110
So touching your pedal

2816
02:01:02,110 --> 02:01:02,890
and convert that into

2817
02:01:02,890 --> 02:01:03,910
digital signals that are

2818
02:01:03,910 --> 02:01:05,035
then received by

2819
02:01:05,035 --> 02:01:06,460
other electrical
control units

2820
02:01:06,460 --> 02:01:08,920
to convert that into
mechanical output.

2821
02:01:08,920 --> 02:01:10,600
Now, I'll tell a lot of

2822
02:01:10,600 --> 02:01:12,100
times these electrical
control units

2823
02:01:12,100 --> 02:01:13,630
exist on bus architectures

2824
02:01:13,630 --> 02:01:15,010
like the one
demonstrated here.

2825
02:01:15,010 --> 02:01:16,240
And the predominant
form of

2826
02:01:16,240 --> 02:01:18,310
communication protocol
used for these

2827
02:01:18,310 --> 02:01:20,290
is the control
area network or

2828
02:01:20,290 --> 02:01:22,540
CAN as it's mostly
referred to.

2829
02:01:22,540 --> 02:01:25,120
Now the way CAN
works here is nice.

2830
02:01:25,120 --> 02:01:26,725
Is it this little
button right here?

2831
02:01:26,725 --> 02:01:29,095
If it has a data field

2832
02:01:29,095 --> 02:01:30,370
which describes a set

2833
02:01:30,370 --> 02:01:31,735
of signals inside of it,

2834
02:01:31,735 --> 02:01:33,880
they all normally related.

2835
02:01:33,880 --> 02:01:35,980
In this case, we're
talking about

2836
02:01:35,980 --> 02:01:38,290
maybe the accelerator
pedal position

2837
02:01:38,290 --> 02:01:40,105
and an identifier

2838
02:01:40,105 --> 02:01:44,350
which names those signals

2839
02:01:44,350 --> 02:01:46,210
for our
conversations here,

2840
02:01:46,210 --> 02:01:48,280
as well as building

2841
02:01:48,280 --> 02:01:50,500
in an arbitration
mechanism so

2842
02:01:50,500 --> 02:01:52,570
that the lowest
identified message has

2843
02:01:52,570 --> 02:01:54,895
the highest priority
on the bus.

2844
02:01:54,895 --> 02:01:57,265
And so obviously if
you press your brake,

2845
02:01:57,265 --> 02:01:58,570
you would want
it to override

2846
02:01:58,570 --> 02:02:00,415
any messages about
acceleration,

2847
02:02:00,415 --> 02:02:02,770
so it's identified
with a lower priority.

2848
02:02:02,770 --> 02:02:04,030
But in addition
to these signals,

2849
02:02:04,030 --> 02:02:05,635
we would also
see a number of

2850
02:02:05,635 --> 02:02:09,010
other signals
also on the bus.

2851
02:02:09,010 --> 02:02:11,350
And so the reason
why it's gained

2852
02:02:11,350 --> 02:02:12,220
such popularity is

2853
02:02:12,220 --> 02:02:13,360
because it's
incredibly fast.

2854
02:02:13,360 --> 02:02:15,790
Arbitration,
error detection,

2855
02:02:15,790 --> 02:02:17,530
and other things are

2856
02:02:17,530 --> 02:02:18,940
already built into
the protocol.

2857
02:02:18,940 --> 02:02:20,110
And so it's able to

2858
02:02:20,110 --> 02:02:23,155
operate in real-time
microseconds.

2859
02:02:23,155 --> 02:02:25,540
And so it's been
very successful

2860
02:02:25,540 --> 02:02:27,190
and implements in

2861
02:02:27,190 --> 02:02:29,140
a number of diverse
applications,

2862
02:02:29,140 --> 02:02:31,180
some of which are
mentioned here.

2863
02:02:31,180 --> 02:02:33,250
The issue is
that it has no

2864
02:02:33,250 --> 02:02:35,845
built-in or
overlaid security,

2865
02:02:35,845 --> 02:02:37,600
and this has resulted in

2866
02:02:37,600 --> 02:02:40,180
DOS attacks proven
across the industry.

2867
02:02:40,180 --> 02:02:42,220
The Jeep attack is
the most cited,

2868
02:02:42,220 --> 02:02:43,690
we can talk about
that later on.

2869
02:02:43,690 --> 02:02:45,880
You can also program in

2870
02:02:45,880 --> 02:02:47,560
custom frames

2871
02:02:47,560 --> 02:02:49,240
to manipulate the
functionality of the bus.

2872
02:02:49,240 --> 02:02:50,770
We're just replay
messages that you've

2873
02:02:50,770 --> 02:02:52,615
already seen in the past.

2874
02:02:52,615 --> 02:02:53,200
All of these have

2875
02:02:53,200 --> 02:02:54,850
pretty devastating
consequences.

2876
02:02:54,850 --> 02:02:55,930
And maybe

2877
02:02:55,930 --> 02:02:57,190
the reason we don't
hear so much about

2878
02:02:57,190 --> 02:02:59,755
this because for most
of vehicle history,

2879
02:02:59,755 --> 02:03:01,000
vehicles has been
closed system,

2880
02:03:01,000 --> 02:03:02,290
you need direct access to

2881
02:03:02,290 --> 02:03:04,030
actually execute
these attacks.

2882
02:03:04,030 --> 02:03:05,425
However, in the future
we're going to start

2883
02:03:05,425 --> 02:03:07,270
seeing more advanced
technologies,

2884
02:03:07,270 --> 02:03:08,140
vehicle to vehicle,

2885
02:03:08,140 --> 02:03:09,760
vehicle to infrastructure.

2886
02:03:09,760 --> 02:03:12,835
And what this is
going to mean is that

2887
02:03:12,835 --> 02:03:14,290
you're going to be
able to execute

2888
02:03:14,290 --> 02:03:16,359
these attacks remotely.

2889
02:03:16,359 --> 02:03:20,170
These same in
new technologies

2890
02:03:20,170 --> 02:03:25,495
additionally require
new hardware.

2891
02:03:25,495 --> 02:03:27,490
And the reason for
that is because CAN is

2892
02:03:27,490 --> 02:03:29,020
incredibly low
bandwidth and

2893
02:03:29,020 --> 02:03:31,435
the range of
17-70 kilobytes.

2894
02:03:31,435 --> 02:03:33,250
Compare that to the
requirements for

2895
02:03:33,250 --> 02:03:34,930
new technologies
like lidar

2896
02:03:34,930 --> 02:03:36,340
and lane detection,

2897
02:03:36,340 --> 02:03:37,690
which needs 70 megabytes.

2898
02:03:37,690 --> 02:03:38,710
And so we need
to do something

2899
02:03:38,710 --> 02:03:39,760
about this to secure

2900
02:03:39,760 --> 02:03:42,175
it and to build a
path for the future.

2901
02:03:42,175 --> 02:03:43,900
And so the community has

2902
02:03:43,900 --> 02:03:44,650
presented something

2903
02:03:44,650 --> 02:03:45,835
called automotive
Ethernet.

2904
02:03:45,835 --> 02:03:47,710
This is just like
traditional Ethernet.

2905
02:03:47,710 --> 02:03:50,350
It offers high bandwidth
and contrast it

2906
02:03:50,350 --> 02:03:52,330
can and it's very
fault tolerant

2907
02:03:52,330 --> 02:03:54,625
to stuff like electromagnetic
interference.

2908
02:03:54,625 --> 02:03:56,860
And so what are they
going to do with this?

2909
02:03:56,860 --> 02:03:59,740
You could potentially
replace things like CAN

2910
02:03:59,740 --> 02:04:03,325
or its companions
with something.

2911
02:04:03,325 --> 02:04:04,450
One of these things that's

2912
02:04:04,450 --> 02:04:06,370
presented as something
called some IP.

2913
02:04:06,370 --> 02:04:07,720
But this probably
won't happen

2914
02:04:07,720 --> 02:04:09,040
because CAN is pretty much

2915
02:04:09,040 --> 02:04:11,830
a ubiquitous part of
vehicles right now.

2916
02:04:11,830 --> 02:04:13,630
And so we doubt that

2917
02:04:13,630 --> 02:04:15,445
there'll be a complete
overhaul of it.

2918
02:04:15,445 --> 02:04:16,930
And so what we'll
probably see is

2919
02:04:16,930 --> 02:04:20,260
an integration of old
and new technologies.

2920
02:04:20,260 --> 02:04:22,255
And in the form of

2921
02:04:22,255 --> 02:04:25,645
maybe a hierarchical
network where

2922
02:04:25,645 --> 02:04:28,690
lower layer protocols
act as leaves

2923
02:04:28,690 --> 02:04:30,670
connected to
gateways which

2924
02:04:30,670 --> 02:04:32,935
then distribute
information between them.

2925
02:04:32,935 --> 02:04:35,590
And so the assumption

2926
02:04:35,590 --> 02:04:39,325
is that TCP IP will stand,

2927
02:04:39,325 --> 02:04:42,040
be implemented to

2928
02:04:42,040 --> 02:04:44,020
connect these
gateways together.

2929
02:04:44,020 --> 02:04:46,180
And this is where we
really think that

2930
02:04:46,180 --> 02:04:48,789
CAN could be used
as an alternative.

2931
02:04:48,789 --> 02:04:50,950
And there are a number
of reasons for this.

2932
02:04:50,950 --> 02:04:53,020
And so the architecture

2933
02:04:53,020 --> 02:04:55,015
that we foresee
maybe coming

2934
02:04:55,015 --> 02:04:57,010
across here is
a place where

2935
02:04:57,010 --> 02:04:59,320
we segment the network

2936
02:04:59,320 --> 02:05:03,310
into segments defined by

2937
02:05:03,310 --> 02:05:04,660
their functionality
as well

2938
02:05:04,660 --> 02:05:05,950
as the protocol that
they're running.

2939
02:05:05,950 --> 02:05:07,180
And so we have
one maybe running

2940
02:05:07,180 --> 02:05:08,830
CAN over here and

2941
02:05:08,830 --> 02:05:10,330
another protocol called

2942
02:05:10,330 --> 02:05:12,160
FlexRay running
over there,

2943
02:05:12,160 --> 02:05:13,540
and then something
else called

2944
02:05:13,540 --> 02:05:14,785
Lynn running over there,

2945
02:05:14,785 --> 02:05:16,180
each of which
are connected to

2946
02:05:16,180 --> 02:05:18,280
a dedicated gateway
that are themselves

2947
02:05:18,280 --> 02:05:19,870
running automotive
ethernet between

2948
02:05:19,870 --> 02:05:22,425
them running NDN.

2949
02:05:22,425 --> 02:05:24,060
And NDN does a number

2950
02:05:24,060 --> 02:05:25,410
of things for the
automotive space.

2951
02:05:25,410 --> 02:05:28,480
It maintains this
content-based networking

2952
02:05:28,480 --> 02:05:29,740
that we're
already seeing in

2953
02:05:29,740 --> 02:05:30,790
things like CAN where

2954
02:05:30,790 --> 02:05:32,785
messages are
identified and leaving

2955
02:05:32,785 --> 02:05:34,330
ECUs the ability to

2956
02:05:34,330 --> 02:05:35,110
actually see
whether or not

2957
02:05:35,110 --> 02:05:36,205
it's important to them.

2958
02:05:36,205 --> 02:05:39,130
It has a really
great opportunity

2959
02:05:39,130 --> 02:05:40,360
for modular developments,

2960
02:05:40,360 --> 02:05:41,080
which again, is something

2961
02:05:41,080 --> 02:05:42,175
that we're going
to need to see,

2962
02:05:42,175 --> 02:05:45,790
as well as maintaining
the multicast,

2963
02:05:45,790 --> 02:05:51,280
which security for
TCP and IP cannot do,

2964
02:05:51,280 --> 02:05:52,870
which might be a
very important

2965
02:05:52,870 --> 02:05:54,355
thing as we move forward.

2966
02:05:54,355 --> 02:05:56,545
And it applies all
of its security

2967
02:05:56,545 --> 02:05:58,345
by its own design,

2968
02:05:58,345 --> 02:05:59,110
which will help in

2969
02:05:59,110 --> 02:06:01,250
that real-time
environment.

2970
02:06:02,020 --> 02:06:05,360
We've actually built
a benchtop testbed

2971
02:06:05,360 --> 02:06:07,010
to demonstrate some
of these things.

2972
02:06:07,010 --> 02:06:10,280
It's consists of
Raspberry ***,

2973
02:06:10,280 --> 02:06:12,005
each of which are
equipped with

2974
02:06:12,005 --> 02:06:14,390
CAN hats to allow
it to communicate.

2975
02:06:14,390 --> 02:06:15,770
And CAN, we've

2976
02:06:15,770 --> 02:06:17,075
built three
segments of these,

2977
02:06:17,075 --> 02:06:18,620
each of which have

2978
02:06:18,620 --> 02:06:22,295
three simulated ECUs and
a dedicated gateway.

2979
02:06:22,295 --> 02:06:24,260
And so these ECUs are

2980
02:06:24,260 --> 02:06:26,660
connected together
over CAN and

2981
02:06:26,660 --> 02:06:28,790
the gateways are
connected together over

2982
02:06:28,790 --> 02:06:30,110
Ethernet to simulate

2983
02:06:30,110 --> 02:06:32,090
that automotive Ethernet
that we foresee.

2984
02:06:32,090 --> 02:06:33,410
You can see the
gateways are

2985
02:06:33,410 --> 02:06:34,640
listed here at the bottom.

2986
02:06:34,640 --> 02:06:38,060
And they have connections
to their Canvas so

2987
02:06:38,060 --> 02:06:39,620
that they can monitor
the transactions that

2988
02:06:39,620 --> 02:06:41,615
are actually
occurring over there.

2989
02:06:41,615 --> 02:06:43,520
In addition to this,

2990
02:06:43,520 --> 02:06:46,325
we have built this
software harness

2991
02:06:46,325 --> 02:06:47,960
that will actually

2992
02:06:47,960 --> 02:06:50,390
allow us to connect

2993
02:06:50,390 --> 02:06:52,505
these two technologies
together.

2994
02:06:52,505 --> 02:06:54,515
And so I've put a
brief demonstration

2995
02:06:54,515 --> 02:06:57,020
of how this works at
a very high level.

2996
02:06:57,020 --> 02:06:59,915
So we have an engine
and a dashboard.

2997
02:06:59,915 --> 02:07:01,595
Your dashboard
needs to have

2998
02:07:01,595 --> 02:07:03,590
consistent and
accurate speed and

2999
02:07:03,590 --> 02:07:06,275
RPMs for the driver
to make decisions.

3000
02:07:06,275 --> 02:07:08,840
But maybe the ECUs that

3001
02:07:08,840 --> 02:07:09,980
control these
things shouldn't

3002
02:07:09,980 --> 02:07:11,810
be on the same network.

3003
02:07:11,810 --> 02:07:13,640
We segment them and put

3004
02:07:13,640 --> 02:07:15,425
gateways in-between
each of them.

3005
02:07:15,425 --> 02:07:18,440
And so the engine
is listening,

3006
02:07:18,440 --> 02:07:20,990
where specific
subset of messages,

3007
02:07:20,990 --> 02:07:22,280
one of which is the one

3008
02:07:22,280 --> 02:07:24,200
relating to
RPMs and speed.

3009
02:07:24,200 --> 02:07:25,955
Once it's received,

3010
02:07:25,955 --> 02:07:28,310
it goes ahead and makes
an Indian packet and

3011
02:07:28,310 --> 02:07:29,480
buffers that so that

3012
02:07:29,480 --> 02:07:30,890
the moment that
an interest

3013
02:07:30,890 --> 02:07:32,270
comes in from the gateway

3014
02:07:32,270 --> 02:07:33,680
controlling the dashboard,

3015
02:07:33,680 --> 02:07:36,635
RPMs and speed can be
sent back immediately.

3016
02:07:36,635 --> 02:07:40,700
Now, the interests for
gateway are standing.

3017
02:07:40,700 --> 02:07:43,190
So they're sent
repeatedly,

3018
02:07:43,190 --> 02:07:45,020
whenever they're fulfilled
or they timeout,

3019
02:07:45,020 --> 02:07:46,670
so that they can always
be in a position to

3020
02:07:46,670 --> 02:07:47,690
receive the most

3021
02:07:47,690 --> 02:07:49,310
up-to-date and
accurate information.

3022
02:07:49,310 --> 02:07:51,020
And so at the
same moment that

3023
02:07:51,020 --> 02:07:53,120
the Gateway receives
this interest,

3024
02:07:53,120 --> 02:07:54,230
if it doesn't have
something buffered,

3025
02:07:54,230 --> 02:07:55,370
it goes ahead and sets

3026
02:07:55,370 --> 02:07:56,915
appending interests
for that.

3027
02:07:56,915 --> 02:07:58,760
The next time this
message comes in,

3028
02:07:58,760 --> 02:08:00,605
it can instead
of buffering it,

3029
02:08:00,605 --> 02:08:02,225
go ahead and send
it right over.

3030
02:08:02,225 --> 02:08:04,655
And setting this
pending interests does

3031
02:08:04,655 --> 02:08:07,520
a great deal to
limit the effects of

3032
02:08:07,520 --> 02:08:08,930
interests denial
of service

3033
02:08:08,930 --> 02:08:10,415
attacks that could be

3034
02:08:10,415 --> 02:08:12,260
committed from one gateway

3035
02:08:12,260 --> 02:08:14,300
to another in the
event of a compromise.

3036
02:08:14,300 --> 02:08:15,560
Once the gateway and the

3037
02:08:15,560 --> 02:08:17,000
dashboard receives
this message,

3038
02:08:17,000 --> 02:08:18,890
it converts it back
into CAN and sends

3039
02:08:18,890 --> 02:08:21,440
it over to the
dashboard controller.

3040
02:08:21,440 --> 02:08:23,060
Now, and here we've shown

3041
02:08:23,060 --> 02:08:25,760
two segments of CAN but
there's no reason why

3042
02:08:25,760 --> 02:08:27,635
this couldn't also be

3043
02:08:27,635 --> 02:08:30,050
the other
technologies that

3044
02:08:30,050 --> 02:08:32,630
are already implemented
in vehicles.

3045
02:08:32,630 --> 02:08:35,075
Lynn and flexor, as
I've already mentioned,

3046
02:08:35,075 --> 02:08:38,900
but also more
advanced things

3047
02:08:38,900 --> 02:08:40,490
like the vehicle to
vehicle and vehicle to

3048
02:08:40,490 --> 02:08:43,100
infrastructure
segments as well.

3049
02:08:43,100 --> 02:08:44,000
And so this is

3050
02:08:44,000 --> 02:08:45,725
a little bit more
detailed breakdown

3051
02:08:45,725 --> 02:08:47,660
of how the software
actually works.

3052
02:08:47,660 --> 02:08:50,180
You can see CAN
message coming in.

3053
02:08:50,180 --> 02:08:52,640
It's not set in the
listeners filter.

3054
02:08:52,640 --> 02:08:54,780
How are we doing on time?

3055
02:08:55,180 --> 02:08:58,130
I have two. That's fine.

3056
02:08:58,130 --> 02:09:01,040
So I can actually

3057
02:09:01,040 --> 02:09:02,540
show you guys
this a little bit

3058
02:09:02,540 --> 02:09:04,235
later on if you
are interested.

3059
02:09:04,235 --> 02:09:05,450
I'm pretty excited

3060
02:09:05,450 --> 02:09:06,905
about where we've
gone with it.

3061
02:09:06,905 --> 02:09:08,870
But I think the big
takeaway is that if

3062
02:09:08,870 --> 02:09:10,850
you remove the CAN
listener part and they

3063
02:09:10,850 --> 02:09:13,655
can send a part and
replace those with

3064
02:09:13,655 --> 02:09:15,185
something else as well as

3065
02:09:15,185 --> 02:09:16,970
replace the conversion
technologies,

3066
02:09:16,970 --> 02:09:18,800
you can use this
same design to

3067
02:09:18,800 --> 02:09:22,190
interconnect
Indian branches to

3068
02:09:22,190 --> 02:09:24,950
any other protocols
that you might want.

3069
02:09:24,950 --> 02:09:27,125
And so results.

3070
02:09:27,125 --> 02:09:29,600
So far we've been
using J1939.

3071
02:09:29,600 --> 02:09:31,310
It's a CAN standard
data to run on

3072
02:09:31,310 --> 02:09:33,455
this testbed to
demonstrate its ability.

3073
02:09:33,455 --> 02:09:36,215
These were
obtained from CSU,

3074
02:09:36,215 --> 02:09:37,745
which I'm very
happy about,

3075
02:09:37,745 --> 02:09:39,290
you find them
at that link.

3076
02:09:39,290 --> 02:09:41,585
And so we did some
performance tests on

3077
02:09:41,585 --> 02:09:45,890
a previous iteration of

3078
02:09:45,890 --> 02:09:47,270
this testbed and found

3079
02:09:47,270 --> 02:09:48,950
that pregenerating
the data packets

3080
02:09:48,950 --> 02:09:51,230
greatly helps with serving

3081
02:09:51,230 --> 02:09:52,430
that data in real time.

3082
02:09:52,430 --> 02:09:55,850
However, we do anticipate
needing greater

3083
02:09:55,850 --> 02:09:58,520
performance increases
to actually

3084
02:09:58,520 --> 02:10:01,700
present this to the
vehicle community.

3085
02:10:01,700 --> 02:10:03,965
Additionally,
we found that

3086
02:10:03,965 --> 02:10:06,560
vehicle networks
really might

3087
02:10:06,560 --> 02:10:08,405
benefit from
Indian caching.

3088
02:10:08,405 --> 02:10:10,130
CAN messages in
particular are

3089
02:10:10,130 --> 02:10:12,110
majoritily repeated.

3090
02:10:12,110 --> 02:10:13,010
So we can make

3091
02:10:13,010 --> 02:10:14,240
those Indian packets
ahead of time.

3092
02:10:14,240 --> 02:10:16,100
We can serve
them much faster

3093
02:10:16,100 --> 02:10:18,275
than otherwise
we'd be able to.

3094
02:10:18,275 --> 02:10:20,135
We've done a little bit of

3095
02:10:20,135 --> 02:10:21,860
security evaluation,

3096
02:10:21,860 --> 02:10:23,420
but this is really
where we want to spend

3097
02:10:23,420 --> 02:10:25,730
most of our time
into the future,

3098
02:10:25,730 --> 02:10:28,040
is really testing
to see how

3099
02:10:28,040 --> 02:10:29,060
this is going to help the

3100
02:10:29,060 --> 02:10:30,380
security of these
environments.

3101
02:10:30,380 --> 02:10:32,360
We already understand
that it can help

3102
02:10:32,360 --> 02:10:33,620
them in their performance

3103
02:10:33,620 --> 02:10:35,060
and their bandwidth
capabilities.

3104
02:10:35,060 --> 02:10:36,200
But what is this going to

3105
02:10:36,200 --> 02:10:37,280
do for the security?

3106
02:10:37,280 --> 02:10:38,090
And that's where
we'll spend

3107
02:10:38,090 --> 02:10:39,155
a lot of the time

3108
02:10:39,155 --> 02:10:41,600
in the future
working on these as

3109
02:10:41,600 --> 02:10:43,550
well as comparing
accurately to

3110
02:10:43,550 --> 02:10:45,335
the presented alternatives

3111
02:10:45,335 --> 02:10:46,460
for these
architectures again,

3112
02:10:46,460 --> 02:10:48,905
namely TCP and IP.

3113
02:10:48,905 --> 02:10:51,530
So, just in conclusion,

3114
02:10:51,530 --> 02:10:53,480
we presented the
problem here.

3115
02:10:53,480 --> 02:10:54,965
Security and bandwidth are

3116
02:10:54,965 --> 02:10:56,300
current
implementations just

3117
02:10:56,300 --> 02:10:58,100
can't stand for
next-generation.

3118
02:10:58,100 --> 02:11:00,080
And so what we need
is something new.

3119
02:11:00,080 --> 02:11:01,985
It's likely going to
be a hybrid approach,

3120
02:11:01,985 --> 02:11:04,475
and we present Indian
instead of TCP.

3121
02:11:04,475 --> 02:11:05,900
What I've shown
you guys here is

3122
02:11:05,900 --> 02:11:08,180
a testbed and test
harness that we use to

3123
02:11:08,180 --> 02:11:12,260
execute and demonstrate
the capabilities

3124
02:11:12,260 --> 02:11:14,360
of Indian in these
environments.

3125
02:11:14,360 --> 02:11:15,800
We're going to
continue to do

3126
02:11:15,800 --> 02:11:17,315
that here into the future.

3127
02:11:17,315 --> 02:11:19,010
So thank you so
much at this point.

3128
02:11:19,010 --> 02:11:20,900
I'll take any questions
that you have.

3129
02:11:20,900 --> 02:11:21,965
>> Thank you.

3130
02:11:21,965 --> 02:11:31,130
>> Absolutely. [APPLAUSE].

3131
02:11:31,130 --> 02:11:32,540
>> I will start with one.

3132
02:11:32,540 --> 02:11:33,740
You have the slide and

3133
02:11:33,740 --> 02:11:37,595
the pre-generated
signet packets.

3134
02:11:37,595 --> 02:11:43,340
I was wondering,
"How frequently can

3135
02:11:43,340 --> 02:11:48,815
you pregenerate the
packets overall?

3136
02:11:48,815 --> 02:11:51,800
Is that a common use case?

3137
02:11:51,800 --> 02:11:53,465
Is it a common occurrence

3138
02:11:53,465 --> 02:11:55,745
when you can
pregenerate the packet?

3139
02:11:55,745 --> 02:11:58,280
The message here
was that there is

3140
02:11:58,280 --> 02:12:01,640
some inherent delay
caused by- [OVERLAPPING]

3141
02:12:01,640 --> 02:12:05,300
>> Yeah, absolutely.
In this environment

3142
02:12:05,300 --> 02:12:06,170
and please stop me if I'm

3143
02:12:06,170 --> 02:12:07,745
not answering
your question,

3144
02:12:07,745 --> 02:12:14,570
but the requests between

3145
02:12:14,570 --> 02:12:15,740
gateways are
maybe disjointed

3146
02:12:15,740 --> 02:12:17,795
between when the time
the message comes in.

3147
02:12:17,795 --> 02:12:19,880
And so you can
receive a message

3148
02:12:19,880 --> 02:12:21,755
without having an
interest for it,

3149
02:12:21,755 --> 02:12:22,220
allowing you

3150
02:12:22,220 --> 02:12:24,515
the opportunity to
pregenerate it.

3151
02:12:24,515 --> 02:12:26,990
And so that's where we're

3152
02:12:26,990 --> 02:12:28,790
actually seeing any
benefits at all

3153
02:12:28,790 --> 02:12:31,190
would be at this stage
right here before and

3154
02:12:31,190 --> 02:12:34,400
interest has come in
sending that over.

3155
02:12:34,400 --> 02:12:38,660
But further, just because

3156
02:12:38,660 --> 02:12:40,115
the Gateway we know

3157
02:12:40,115 --> 02:12:41,855
needs that message
to operate,

3158
02:12:41,855 --> 02:12:42,980
it doesn't mean
that it needs it

3159
02:12:42,980 --> 02:12:44,210
at that exact moment.

3160
02:12:44,210 --> 02:12:46,010
And so what we're
trying to do is

3161
02:12:46,010 --> 02:12:49,250
provide it as
much information,

3162
02:12:49,250 --> 02:12:52,895
logically connect
all controllers

3163
02:12:52,895 --> 02:12:56,420
that it needs to
operate over NDN.

3164
02:12:56,420 --> 02:12:58,010
And so what are

3165
02:12:58,010 --> 02:12:59,705
the advantages of
pregenerating?

3166
02:12:59,705 --> 02:13:01,895
We're still seeing
those play out,

3167
02:13:01,895 --> 02:13:03,740
but they would
be at this point

3168
02:13:03,740 --> 02:13:05,780
right here before
interests have come in.

3169
02:13:05,780 --> 02:13:07,985
Currently we have
standing interests.

3170
02:13:07,985 --> 02:13:10,010
However, as new
iterations of

3171
02:13:10,010 --> 02:13:11,090
our testbed come out and

3172
02:13:11,090 --> 02:13:12,455
new iterations of
our tests come out,

3173
02:13:12,455 --> 02:13:13,910
we better understand
the environments

3174
02:13:13,910 --> 02:13:15,170
that we're
implementing these in.

3175
02:13:15,170 --> 02:13:16,730
We might have
interests that

3176
02:13:16,730 --> 02:13:18,530
occur in a certain
time-frame,

3177
02:13:18,530 --> 02:13:19,790
30 seconds, 10 seconds,

3178
02:13:19,790 --> 02:13:21,110
depending on the
functionality and

3179
02:13:21,110 --> 02:13:21,980
the connections
that actually

3180
02:13:21,980 --> 02:13:22,640
need to be implemented.

3181
02:13:22,640 --> 02:13:23,795
And that's where
we would see

3182
02:13:23,795 --> 02:13:25,610
the advantages of
pregenerating those.

3183
02:13:25,610 --> 02:13:27,530
However, we would
also see it in

3184
02:13:27,530 --> 02:13:31,820
the caching of those
messages as well.

3185
02:13:31,820 --> 02:13:33,215
So you see it once.

3186
02:13:33,215 --> 02:13:34,370
You can generate an NDN

3187
02:13:34,370 --> 02:13:35,540
packet for it and then

3188
02:13:35,540 --> 02:13:39,215
serve that however many
times it needs to.

3189
02:13:39,215 --> 02:13:41,000
When I say majority here,

3190
02:13:41,000 --> 02:13:42,650
the initial results
indicate that it's up to

3191
02:13:42,650 --> 02:13:45,290
98% of the messages

3192
02:13:45,290 --> 02:13:47,105
sent on the bus are
actually duplicates.

3193
02:13:47,105 --> 02:13:50,165
So we would see a lot
of advantages there.

3194
02:13:50,165 --> 02:13:51,560
>> Thanks.

3195
02:13:51,560 --> 02:13:52,040
>> Absolutely.

3196
02:13:52,040 --> 02:13:53,645
>> That answers
my question.

3197
02:13:53,645 --> 02:13:55,085
>> Yes sir.

3198
02:13:55,085 --> 02:13:57,260
>> Previous slide, what

3199
02:13:57,260 --> 02:14:00,440
are the percentages
[inaudible]?

3200
02:14:00,440 --> 02:14:01,040
>> This one?

3201
02:14:01,040 --> 02:14:05,180
>> No, the one before
it. [inaudible]

3202
02:14:05,180 --> 02:14:07,580
>> So we were doing
signings NDN,

3203
02:14:07,580 --> 02:14:09,830
we were calculating
how much time it

3204
02:14:09,830 --> 02:14:10,880
actually takes to do

3205
02:14:10,880 --> 02:14:12,110
the signing and
validation.

3206
02:14:12,110 --> 02:14:14,900
Now this is more of
an analytics on how

3207
02:14:14,900 --> 02:14:16,640
the Python
library actually

3208
02:14:16,640 --> 02:14:19,100
works on these
Raspberry ***.

3209
02:14:19,100 --> 02:14:21,320
But they represent
the percentage of

3210
02:14:21,320 --> 02:14:24,590
the total time
that it takes

3211
02:14:24,590 --> 02:14:27,230
to send a package
that is represented

3212
02:14:27,230 --> 02:14:31,160
by signing and
validation respectively.

3213
02:14:31,160 --> 02:14:33,410
>> Let's see, those

3214
02:14:33,410 --> 02:14:34,790
are relative to the
number of account?

3215
02:14:34,790 --> 02:14:36,140
>> That is correct.

3216
02:14:36,140 --> 02:14:43,080
[BACKGROUND] One question.

3217
02:14:43,080 --> 02:14:46,105
>> SOME/IP, was that
part of the evaluation?

3218
02:14:46,105 --> 02:14:48,550
>> SOME/IP is
an alternative.

3219
02:14:48,550 --> 02:14:51,715
We haven't done any
work on it ourselves.

3220
02:14:51,715 --> 02:14:55,370
And so they presented
as a middleware.

3221
02:14:55,680 --> 02:14:57,820
My understanding and it's

3222
02:14:57,820 --> 02:15:00,190
basic is that it
could replace things

3223
02:15:00,190 --> 02:15:03,505
like CAN and be
used in-between

3224
02:15:03,505 --> 02:15:05,440
electrical controllers
that are running

3225
02:15:05,440 --> 02:15:06,220
automotive Ethernet

3226
02:15:06,220 --> 02:15:07,585
instead of
something like CAN.

3227
02:15:07,585 --> 02:15:09,070
And so it's a middleware

3228
02:15:09,070 --> 02:15:14,485
over IP technologies.
Awesome.

3229
02:15:14,485 --> 02:15:16,255
>> Okay. Thank you, Zack.

3230
02:15:16,255 --> 02:15:29,460
>> Thank you, guys.
Appreciate. [APPLAUSE]

3231
02:15:29,460 --> 02:15:31,200
>> So we have
our last speaker

3232
02:15:31,200 --> 02:15:32,520
of the session,

3233
02:15:32,520 --> 02:15:37,630
but certainly not
least, Ahmed.

3234
02:15:37,630 --> 02:15:40,060
He will talk about secure

3235
02:15:40,060 --> 02:15:42,715
truck-tractor-to-trailer
communications

3236
02:15:42,715 --> 02:15:46,190
based on, you can guess.

3237
02:15:50,040 --> 02:15:53,950
Ahmed is in the
enviable position of

3238
02:15:53,950 --> 02:15:56,065
separating you
from your lunch.

3239
02:15:56,065 --> 02:15:58,100
No, I'm just kidding.

3240
02:15:58,890 --> 02:16:01,860
He is currently working as

3241
02:16:01,860 --> 02:16:03,360
a senior systems engineer

3242
02:16:03,360 --> 02:16:05,325
in the autonomous
vehicles industry

3243
02:16:05,325 --> 02:16:06,885
and also pursuing a

3244
02:16:06,885 --> 02:16:08,520
systems engineering PhD at

3245
02:16:08,520 --> 02:16:12,550
Colorado State
University. Thank you.

3246
02:16:14,270 --> 02:16:18,190
>> Hello everyone. I'm
excited to be here.

3247
02:16:18,190 --> 02:16:20,890
It's my first time. So
we're looking forward

3248
02:16:20,890 --> 02:16:24,385
to collaborating
with the team here.

3249
02:16:24,385 --> 02:16:26,980
And today I will be
talking about one

3250
02:16:26,980 --> 02:16:29,200
of the use cases for NDN.

3251
02:16:29,200 --> 02:16:31,135
The title sounds
really boring,

3252
02:16:31,135 --> 02:16:34,270
but if we talk about
the technologies

3253
02:16:34,270 --> 02:16:36,640
and the recent changes,

3254
02:16:36,640 --> 02:16:38,845
it gets more exciting.

3255
02:16:38,845 --> 02:16:41,544
A quick question,
has anybody

3256
02:16:41,544 --> 02:16:45,850
reverse drived a
semi-truck before?

3257
02:16:45,850 --> 02:16:48,940
Anybody? As you imagine,

3258
02:16:48,940 --> 02:16:50,080
even for a skilled driver,

3259
02:16:50,080 --> 02:16:51,430
it's a complicated task.

3260
02:16:51,430 --> 02:16:54,310
So starting with
the background,

3261
02:16:54,310 --> 02:16:57,310
reverse driving is
a complicated task

3262
02:16:57,310 --> 02:16:59,065
for a human driver
and even AI.

3263
02:16:59,065 --> 02:17:00,820
So autonomous vehicles
look at this point,

3264
02:17:00,820 --> 02:17:02,590
for example, it's

3265
02:17:02,590 --> 02:17:04,135
a complicated to
drive forward.

3266
02:17:04,135 --> 02:17:06,435
Think about a trailer

3267
02:17:06,435 --> 02:17:07,440
backing up with a trailer,

3268
02:17:07,440 --> 02:17:08,940
it becomes more
complicated.

3269
02:17:08,940 --> 02:17:10,680
And there's no sensors

3270
02:17:10,680 --> 02:17:11,910
in the trailer
itself to guide.

3271
02:17:11,910 --> 02:17:14,040
So it creates a blind
spot for a human driver

3272
02:17:14,040 --> 02:17:16,820
and for self-driving
software as well.

3273
02:17:16,820 --> 02:17:19,315
Therefore, the
direction is to add

3274
02:17:19,315 --> 02:17:21,490
sensors on the
trailer for example,

3275
02:17:21,490 --> 02:17:24,205
whether it's
ADAS-related or

3276
02:17:24,205 --> 02:17:27,175
autonomy like
level 4 or 5.

3277
02:17:27,175 --> 02:17:30,040
The problem is the
existing tractor

3278
02:17:30,040 --> 02:17:31,450
and trailer
communication is

3279
02:17:31,450 --> 02:17:32,500
very limited bitrate,

3280
02:17:32,500 --> 02:17:34,135
it's like 10
kilobits per second,

3281
02:17:34,135 --> 02:17:37,150
it's extremely low.

3282
02:17:37,150 --> 02:17:39,025
And this is the
boring parts

3283
02:17:39,025 --> 02:17:40,630
about this type of thing.

3284
02:17:40,630 --> 02:17:41,470
So it's time to do

3285
02:17:41,470 --> 02:17:43,345
an upgrade and
the direction

3286
02:17:43,345 --> 02:17:44,680
is to go towards something

3287
02:17:44,680 --> 02:17:46,105
like Ethernet for example,

3288
02:17:46,105 --> 02:17:48,070
as a communication
method between

3289
02:17:48,070 --> 02:17:50,980
the tractor and
the trailer.

3290
02:17:50,980 --> 02:17:52,540
And we also propose

3291
02:17:52,540 --> 02:17:54,010
using a wireless
harness because

3292
02:17:54,010 --> 02:17:55,720
the wireless harness
concept supports

3293
02:17:55,720 --> 02:17:58,810
a multi-gig type of
communication as well,

3294
02:17:58,810 --> 02:18:01,690
so it's capable of
meeting bandwidth,

3295
02:18:01,690 --> 02:18:03,565
latency, and so on.

3296
02:18:03,565 --> 02:18:05,665
But comes a question,
what type of

3297
02:18:05,665 --> 02:18:07,825
networking approach
we're using?

3298
02:18:07,825 --> 02:18:08,560
There's a bunch of them

3299
02:18:08,560 --> 02:18:10,210
in the automotive
industry.

3300
02:18:10,210 --> 02:18:11,380
So which one do we use?

3301
02:18:11,380 --> 02:18:13,825
And we're going to
touch on some of that.

3302
02:18:13,825 --> 02:18:16,690
I want to show

3303
02:18:16,690 --> 02:18:18,370
an overview of
the architecture.

3304
02:18:18,370 --> 02:18:20,560
So the concepts here

3305
02:18:20,560 --> 02:18:23,560
on the communication
basically

3306
02:18:23,560 --> 02:18:25,600
utilizing the
wireless harness to

3307
02:18:25,600 --> 02:18:29,260
[LAUGHTER] no
CAN interface.

3308
02:18:29,260 --> 02:18:30,205
Everything's going to be,

3309
02:18:30,205 --> 02:18:31,420
let's say if we're
going to do this today,

3310
02:18:31,420 --> 02:18:33,445
It's gonna be over IP.

3311
02:18:33,445 --> 02:18:38,110
And the trailers have
the telematics unit,

3312
02:18:38,110 --> 02:18:39,880
so it's some TCU.

3313
02:18:39,880 --> 02:18:41,170
So the concept here

3314
02:18:41,170 --> 02:18:43,510
integrates everything
into one gateway,

3315
02:18:43,510 --> 02:18:44,590
which is going to be the

3316
02:18:44,590 --> 02:18:46,690
trailer ABS for example.

3317
02:18:46,690 --> 02:18:49,660
And on the autonomous
tractor's side as well,

3318
02:18:49,660 --> 02:18:51,790
there is another gateway

3319
02:18:51,790 --> 02:18:54,190
that has an
Ethernet switch,

3320
02:18:54,190 --> 02:18:55,675
another telematics unit,

3321
02:18:55,675 --> 02:18:57,430
and a microcontroller.

3322
02:18:57,430 --> 02:19:00,280
And sometimes the
trailer could be

3323
02:19:00,280 --> 02:19:02,650
a completely
different OEM in

3324
02:19:02,650 --> 02:19:03,970
an attractor from
a completely

3325
02:19:03,970 --> 02:19:06,680
different OEM as well.

3326
02:19:07,920 --> 02:19:11,950
Now, this is a
data flow diagram

3327
02:19:11,950 --> 02:19:13,720
showing different
interactions between

3328
02:19:13,720 --> 02:19:14,950
the different components,

3329
02:19:14,950 --> 02:19:18,280
and I just want to
highlight the interaction.

3330
02:19:18,280 --> 02:19:19,675
So on the left side

3331
02:19:19,675 --> 02:19:21,580
is the self-driving truck,

3332
02:19:21,580 --> 02:19:22,930
and on the right side is

3333
02:19:22,930 --> 02:19:24,670
the trailer for example.

3334
02:19:24,670 --> 02:19:27,400
And we're assuming they're
communicating over

3335
02:19:27,400 --> 02:19:29,980
a wireless harness using

3336
02:19:29,980 --> 02:19:31,975
Ethernet through
Wi-Fi bridge,

3337
02:19:31,975 --> 02:19:34,225
and the trailer has a TCU

3338
02:19:34,225 --> 02:19:37,120
and a gateway
which is the ABS.

3339
02:19:37,120 --> 02:19:41,140
Similar situation here
on the truck side,

3340
02:19:41,140 --> 02:19:42,730
it has a gateway that

3341
02:19:42,730 --> 02:19:44,680
connects two different
databases for example.

3342
02:19:44,680 --> 02:19:48,790
J1939 CAN FD and

3343
02:19:48,790 --> 02:19:51,100
most importantly
for self-driving is

3344
02:19:51,100 --> 02:19:53,470
a sensor fusion ECU

3345
02:19:53,470 --> 02:19:55,315
because the
sensor fusion ECU

3346
02:19:55,315 --> 02:19:56,170
will take the data

3347
02:19:56,170 --> 02:19:58,585
from the sensors
and feed that into

3348
02:19:58,585 --> 02:19:59,530
the vehicle planning

3349
02:19:59,530 --> 02:20:01,464
decision-making
vehicle controls.

3350
02:20:01,464 --> 02:20:03,790
So if for example, the
sensors are faulty,

3351
02:20:03,790 --> 02:20:05,815
if somebody was
able to inject

3352
02:20:05,815 --> 02:20:08,305
a false positive
or something,

3353
02:20:08,305 --> 02:20:11,140
it might cause
safety hazards

3354
02:20:11,140 --> 02:20:13,490
for the autonomous
vehicles.

3355
02:20:13,620 --> 02:20:18,010
So for some of the
new threats in

3356
02:20:18,010 --> 02:20:20,410
this particular flow

3357
02:20:20,410 --> 02:20:22,030
or this particular
architecture,

3358
02:20:22,030 --> 02:20:24,250
we're adding sensors
on the trailer side.

3359
02:20:24,250 --> 02:20:25,450
So that is subject to

3360
02:20:25,450 --> 02:20:28,120
be tempered with because

3361
02:20:28,120 --> 02:20:30,070
these sensors are
going all the way from

3362
02:20:30,070 --> 02:20:32,020
the right side to
the left side,

3363
02:20:32,020 --> 02:20:33,610
to the sensor fusion ECU,

3364
02:20:33,610 --> 02:20:35,290
let's say if the
atomic structure

3365
02:20:35,290 --> 02:20:39,460
is self-driving in
reverse for example.

3366
02:20:39,460 --> 02:20:42,550
Also, there is a
wireless link.

3367
02:20:42,550 --> 02:20:46,405
The data integrity
might be questioned,

3368
02:20:46,405 --> 02:20:48,745
access, authentication,
and so on.

3369
02:20:48,745 --> 02:20:50,770
And each TCU might be

3370
02:20:50,770 --> 02:20:52,314
communicating with
a cloud-based

3371
02:20:52,314 --> 02:20:53,695
fleet management system.

3372
02:20:53,695 --> 02:20:55,510
For example, that

3373
02:20:55,510 --> 02:20:57,670
might be used for
authentication,

3374
02:20:57,670 --> 02:20:59,440
might be used for
pairing the two.

3375
02:20:59,440 --> 02:21:00,490
So if both are

3376
02:21:00,490 --> 02:21:02,470
communicating over
a wireless harness,

3377
02:21:02,470 --> 02:21:04,045
how do we authenticate
that this's

3378
02:21:04,045 --> 02:21:06,355
a legitimate
self-driving truck,

3379
02:21:06,355 --> 02:21:08,155
and this is a
legitimate trailer,

3380
02:21:08,155 --> 02:21:09,190
not a hacker trying to

3381
02:21:09,190 --> 02:21:11,710
pair over Wi-Fi
for example,

3382
02:21:11,710 --> 02:21:13,015
or the wireless harness?

3383
02:21:13,015 --> 02:21:16,540
So fleet management
could be used for that.

3384
02:21:16,540 --> 02:21:18,370
For example,
the truck gets

3385
02:21:18,370 --> 02:21:20,800
the Wi-Fi credentials
and access to

3386
02:21:20,800 --> 02:21:23,350
communicate or connect or

3387
02:21:23,350 --> 02:21:25,375
pair with a trailer.

3388
02:21:25,375 --> 02:21:27,760
Now, let's use the
automotive approach

3389
02:21:27,760 --> 02:21:31,285
to figure out how
we communicate.

3390
02:21:31,285 --> 02:21:33,160
The question was, what

3391
02:21:33,160 --> 02:21:35,395
networking approach
do we use?

3392
02:21:35,395 --> 02:21:37,390
Now at a high level,

3393
02:21:37,390 --> 02:21:38,950
this is how would
it look like.

3394
02:21:38,950 --> 02:21:40,480
For cloud communication,

3395
02:21:40,480 --> 02:21:42,910
let's use the
MQTT for example

3396
02:21:42,910 --> 02:21:46,510
, certification
management,

3397
02:21:46,510 --> 02:21:48,820
let's use the
traditional ones,

3398
02:21:48,820 --> 02:21:51,309
for sensors data,
let's use DDS,

3399
02:21:51,309 --> 02:21:53,365
data distribution
services,

3400
02:21:53,365 --> 02:21:55,990
and for CAN
communication over IP,

3401
02:21:55,990 --> 02:21:58,015
let's use SOME/IP
for example.

3402
02:21:58,015 --> 02:22:00,970
And each of these
networking approach

3403
02:22:00,970 --> 02:22:02,455
is not secured by itself.

3404
02:22:02,455 --> 02:22:05,380
Therefore requires
another solution,

3405
02:22:05,380 --> 02:22:07,555
another plug-in
basically that

3406
02:22:07,555 --> 02:22:11,540
goes on top to
make it secure,

3407
02:22:11,550 --> 02:22:15,430
something like SecOC to

3408
02:22:15,430 --> 02:22:17,410
make sure that
the CAN messages

3409
02:22:17,410 --> 02:22:19,180
are authenticated
or signed properly,

3410
02:22:19,180 --> 02:22:21,595
for example, secure DDS,

3411
02:22:21,595 --> 02:22:24,340
a plugin, TLS, and so on.

3412
02:22:24,340 --> 02:22:26,650
So the integration and

3413
02:22:26,650 --> 02:22:27,970
implementation become so

3414
02:22:27,970 --> 02:22:29,725
complex in one vehicle.

3415
02:22:29,725 --> 02:22:30,895
And this is talking about

3416
02:22:30,895 --> 02:22:33,475
only three
communication links.

3417
02:22:33,475 --> 02:22:37,510
This is between the
wireless harness

3418
02:22:37,510 --> 02:22:39,835
between the truck
and the trailer,

3419
02:22:39,835 --> 02:22:43,390
and the other one is
TLS for the cloud.

3420
02:22:43,390 --> 02:22:47,140
The car has 50 plus ECUs,

3421
02:22:47,140 --> 02:22:48,595
like modern cars, so

3422
02:22:48,595 --> 02:22:50,965
imagine how many
components would be there.

3423
02:22:50,965 --> 02:22:53,150
The complexity is high.

3424
02:22:53,250 --> 02:22:56,650
And this table, a
quick overview of

3425
02:22:56,650 --> 02:22:58,480
the existing
protocols that are

3426
02:22:58,480 --> 02:23:01,450
commonly used in the
automotive industry.

3427
02:23:01,450 --> 02:23:04,060
Multicast is a desired

3428
02:23:04,060 --> 02:23:06,760
or a needed type
of communication.

3429
02:23:06,760 --> 02:23:08,530
So TLS for example

3430
02:23:08,530 --> 02:23:10,420
does not support
multicasts.

3431
02:23:10,420 --> 02:23:13,240
MACsec supports it, but it

3432
02:23:13,240 --> 02:23:16,480
requires keys at
every receiving ECUs,

3433
02:23:16,480 --> 02:23:19,585
whether it's forwarding
or consuming.

3434
02:23:19,585 --> 02:23:22,660
SecOC for example,
it's an AUTOSAR,

3435
02:23:22,660 --> 02:23:24,310
it's not like
an open source,

3436
02:23:24,310 --> 02:23:26,035
it's
implementation-specific

3437
02:23:26,035 --> 02:23:27,910
and supports only
authentication.

3438
02:23:27,910 --> 02:23:29,785
It's usually used for

3439
02:23:29,785 --> 02:23:31,525
two devices that
are leveraging

3440
02:23:31,525 --> 02:23:36,145
AUTOSAR type of OS,
we can call it.

3441
02:23:36,145 --> 02:23:40,510
IPSec is a VPN essentially

3442
02:23:40,510 --> 02:23:42,535
and does not
support multicast

3443
02:23:42,535 --> 02:23:45,080
based on implementation
from AUTOSAR,

3444
02:23:45,080 --> 02:23:47,280
the automotive
implementation, I would say.

3445
02:23:47,280 --> 02:23:48,450
And there's the issue of

3446
02:23:48,450 --> 02:23:49,905
the security association

3447
02:23:49,905 --> 02:23:51,240
where there are
so many devices,

3448
02:23:51,240 --> 02:23:53,880
let's say we have 50 ECU
in the car we cannot

3449
02:23:53,880 --> 02:23:57,120
really do IPSec
for 50 ECUs,

3450
02:23:57,120 --> 02:24:00,790
it's going to complicate
the communication.

3451
02:24:00,790 --> 02:24:04,000
Now, how can NDN help?

3452
02:24:04,000 --> 02:24:05,890
Or how would their
communication look

3453
02:24:05,890 --> 02:24:09,535
like for NDN using?

3454
02:24:09,535 --> 02:24:11,890
For example,
different use cases

3455
02:24:11,890 --> 02:24:14,830
like the certification
process or

3456
02:24:14,830 --> 02:24:17,755
the NDN cert could be used

3457
02:24:17,755 --> 02:24:19,915
for provisioning
because provisioning

3458
02:24:19,915 --> 02:24:22,000
happens at the
vehicle end of line,

3459
02:24:22,000 --> 02:24:24,670
and also certificates
are needed during

3460
02:24:24,670 --> 02:24:26,500
the authentication
process if we're

3461
02:24:26,500 --> 02:24:29,425
pairing a truck with a
trailer for example.

3462
02:24:29,425 --> 02:24:32,245
Also between the
TCU and the cloud,

3463
02:24:32,245 --> 02:24:33,715
like the fleet
management system,

3464
02:24:33,715 --> 02:24:35,975
NDN could be leveraged
in that as well,

3465
02:24:35,975 --> 02:24:38,850
and between the truck

3466
02:24:38,850 --> 02:24:40,305
and the trailer
more importantly,

3467
02:24:40,305 --> 02:24:43,110
because we can split the
types of data coming

3468
02:24:43,110 --> 02:24:45,880
from the trailer for
example to the truck.

3469
02:24:45,880 --> 02:24:48,730
So the flexibility of

3470
02:24:48,730 --> 02:24:51,250
choosing the security
or signature or

3471
02:24:51,250 --> 02:24:54,520
encryption really
helps reducing

3472
02:24:54,520 --> 02:24:57,205
the complexity of
the implementation.

3473
02:24:57,205 --> 02:24:59,320
So for example, here
we can say, okay,

3474
02:24:59,320 --> 02:25:01,690
we'll want that
Lidar sensors data

3475
02:25:01,690 --> 02:25:03,040
to be signed but

3476
02:25:03,040 --> 02:25:04,705
we want the CAN
data to be signed

3477
02:25:04,705 --> 02:25:07,820
and encrypted for example.

3478
02:25:09,430 --> 02:25:13,085
High level. So the
Cloud communications,

3479
02:25:13,085 --> 02:25:15,455
autonomous vehicles
could be used also for

3480
02:25:15,455 --> 02:25:18,575
telemetry data if the
vehicles offloading,

3481
02:25:18,575 --> 02:25:19,850
but sometimes
it's needed for

3482
02:25:19,850 --> 02:25:21,380
real-time communication.

3483
02:25:21,380 --> 02:25:23,420
Like a totally operation
for example if there

3484
02:25:23,420 --> 02:25:26,315
is a remote operator,

3485
02:25:26,315 --> 02:25:28,820
basically remote actively
driving the car,

3486
02:25:28,820 --> 02:25:32,600
the latency becomes
critical in this context.

3487
02:25:32,600 --> 02:25:35,540
So speaking of
performance,

3488
02:25:35,540 --> 02:25:39,890
that this bed here
that we have used to

3489
02:25:39,890 --> 02:25:45,335
compare the SOME IP
over UDP against NDN.

3490
02:25:45,335 --> 02:25:47,630
So here three receivers

3491
02:25:47,630 --> 02:25:50,570
and one producer which

3492
02:25:50,570 --> 02:25:52,355
acting as the trailer ECU.

3493
02:25:52,355 --> 02:25:54,109
And they are
connected over

3494
02:25:54,109 --> 02:25:55,880
an Ethernet switch.

3495
02:25:55,880 --> 02:25:57,920
So this was also done,

3496
02:25:57,920 --> 02:26:01,205
a similar setup was done
over the 5 ghz WiFi.

3497
02:26:01,205 --> 02:26:03,710
But I did this one

3498
02:26:03,710 --> 02:26:05,629
because if he's
a multicast,

3499
02:26:05,629 --> 02:26:07,340
so basically
each receiver is

3500
02:26:07,340 --> 02:26:08,615
sending and
interests packet

3501
02:26:08,615 --> 02:26:11,690
to get a fresh
data basically.

3502
02:26:11,690 --> 02:26:14,570
So basically first
one and second-order

3503
02:26:14,570 --> 02:26:16,640
ascending at 20
milliseconds rate.

3504
02:26:16,640 --> 02:26:18,260
And the third
one is sending

3505
02:26:18,260 --> 02:26:20,390
at 10 milliseconds rate

3506
02:26:20,390 --> 02:26:24,800
and getting a
kilobytes in return.

3507
02:26:24,800 --> 02:26:26,915
So SOME IP is scalable,

3508
02:26:26,915 --> 02:26:29,000
service oriented
middleware over IP.

3509
02:26:29,000 --> 02:26:30,920
It's very common,

3510
02:26:30,920 --> 02:26:33,695
popular because
it's implemented in

3511
02:26:33,695 --> 02:26:35,870
AUTOSAR are very
complex in terms

3512
02:26:35,870 --> 02:26:39,230
of configuration
service oriented,

3513
02:26:39,230 --> 02:26:41,300
so supports RPC, event

3514
02:26:41,300 --> 02:26:43,580
notification and
service discovery.

3515
02:26:43,580 --> 02:26:46,325
So that's why it was
compared against NDN.

3516
02:26:46,325 --> 02:26:48,470
And if we wanted to play
in the end for cars,

3517
02:26:48,470 --> 02:26:49,790
then we need to

3518
02:26:49,790 --> 02:26:50,870
have a reference when
you can see what's

3519
02:26:50,870 --> 02:26:52,010
performing well
in the automotive

3520
02:26:52,010 --> 02:26:53,540
industry and say,

3521
02:26:53,540 --> 02:26:55,820
okay, here's an
alternative.

3522
02:26:55,820 --> 02:26:58,850
So in terms of results,

3523
02:26:58,850 --> 02:27:02,480
so the bottom here
we have SOME IP 1,

3524
02:27:02,480 --> 02:27:04,460
2, 3 inch, basically
the first device,

3525
02:27:04,460 --> 02:27:06,125
second device and
third device.

3526
02:27:06,125 --> 02:27:10,610
And then same thing for
NDN over TCP and UDP.

3527
02:27:10,610 --> 02:27:13,670
So overall it's a
very close race,

3528
02:27:13,670 --> 02:27:15,095
is very similar
performance.

3529
02:27:15,095 --> 02:27:18,290
NDN was late by about
four milliseconds.

3530
02:27:18,290 --> 02:27:22,520
And one interesting
observation here

3531
02:27:22,520 --> 02:27:27,230
is the SOME IP
both devices

3532
02:27:27,230 --> 02:27:28,940
requesting the data
at 20 milliseconds,

3533
02:27:28,940 --> 02:27:30,665
you're not getting
it at the same time.

3534
02:27:30,665 --> 02:27:33,290
While NDN is going to

3535
02:27:33,290 --> 02:27:36,845
consistent in terms
of data delivery.

3536
02:27:36,845 --> 02:27:38,600
The bottom here is the

3537
02:27:38,600 --> 02:27:40,220
power consumption because
one of the things,

3538
02:27:40,220 --> 02:27:41,420
if you want to

3539
02:27:41,420 --> 02:27:44,750
replace automotive
protocol, how heavy is it?

3540
02:27:44,750 --> 02:27:45,980
Is it a lightweight?
Does it

3541
02:27:45,980 --> 02:27:47,210
have a lot of overhead?

3542
02:27:47,210 --> 02:27:49,580
And the bottom
is a comparison

3543
02:27:49,580 --> 02:27:51,770
between the power draw

3544
02:27:51,770 --> 02:27:54,349
and the core
CPU percentage,

3545
02:27:54,349 --> 02:27:56,495
which seems reasonable.

3546
02:27:56,495 --> 02:28:05,960
Nothing abnormal there
in terms of NDN.

3547
02:28:05,960 --> 02:28:08,120
Now, the extra time
taken potentially

3548
02:28:08,120 --> 02:28:10,310
due to the amount of work

3549
02:28:10,310 --> 02:28:13,040
that NFT has to do
and the amount of

3550
02:28:13,040 --> 02:28:16,295
steps that each node
has to go through.

3551
02:28:16,295 --> 02:28:20,825
So in this diagram
for example we have,

3552
02:28:20,825 --> 02:28:22,684
let's say 50 ECUs.

3553
02:28:22,684 --> 02:28:24,485
So it puts a lot of

3554
02:28:24,485 --> 02:28:26,450
work on the gateway
side or the NFT.

3555
02:28:26,450 --> 02:28:28,100
If if all this is trying

3556
02:28:28,100 --> 02:28:30,020
to get the information
from the right side,

3557
02:28:30,020 --> 02:28:31,970
the NFT in that
ECU is you will

3558
02:28:31,970 --> 02:28:36,575
be doing a lot of heavy
lifting basically.

3559
02:28:36,575 --> 02:28:41,240
So this NDN basically has

3560
02:28:41,240 --> 02:28:43,025
a strong potential to be

3561
02:28:43,025 --> 02:28:45,890
it's tenderize for
automotive, I would say.

3562
02:28:45,890 --> 02:28:48,320
But some topics for

3563
02:28:48,320 --> 02:28:50,420
discussion like one
interests packet,

3564
02:28:50,420 --> 02:28:51,515
too many data packets,

3565
02:28:51,515 --> 02:28:54,620
for example
supporting like

3566
02:28:54,620 --> 02:28:56,390
symmetric keys like what

3567
02:28:56,390 --> 02:28:58,025
the way to SecOC he does

3568
02:28:58,025 --> 02:29:01,370
for example reducing
the number of lookups

3569
02:29:01,370 --> 02:29:05,810
or steps supporting a
data content struct.

3570
02:29:05,810 --> 02:29:09,995
Similar to what some
IP does as well.

3571
02:29:09,995 --> 02:29:12,380
So as I mentioned,
if we have,

3572
02:29:12,380 --> 02:29:14,540
let's say 50 ECUs
transmitting

3573
02:29:14,540 --> 02:29:16,640
interests packets

3574
02:29:16,640 --> 02:29:18,905
and data packets
at the same time,

3575
02:29:18,905 --> 02:29:20,330
at a millisecond range,

3576
02:29:20,330 --> 02:29:21,845
the network is

3577
02:29:21,845 --> 02:29:23,180
probably going to
be overwhelmed.

3578
02:29:23,180 --> 02:29:26,915
It's going to be
flooded. So at the end,

3579
02:29:26,915 --> 02:29:29,570
I see a strong potential
for NDN to be center

3580
02:29:29,570 --> 02:29:32,720
raise for automotive and

3581
02:29:32,720 --> 02:29:34,835
brings a lot of benefits.

3582
02:29:34,835 --> 02:29:37,880
It's basically a
one stop shop for

3583
02:29:37,880 --> 02:29:41,510
networking since supports
security as well.

3584
02:29:41,510 --> 02:29:43,940
And I'd like to

3585
02:29:43,940 --> 02:29:46,250
open it up for
questions or comments.

3586
02:29:46,250 --> 02:29:48,125
>> Okay you are
right on time.

3587
02:29:48,125 --> 02:29:49,700
>> Yes. I know
people are hungry,

3588
02:29:49,700 --> 02:29:52,985
so [LAUGHTER] I didn't
want take too long.

3589
02:29:52,985 --> 02:29:55,265
>> Thanks a lot.
Great talk.

3590
02:29:55,265 --> 02:29:58,790
I have [LAUGHTER] a

3591
02:29:58,790 --> 02:29:59,990
couple of dozen questions.

3592
02:29:59,990 --> 02:30:01,550
>> Oh no, just
for him from

3593
02:30:01,550 --> 02:30:04,560
me [inaudible] go ahead.

3594
02:30:04,840 --> 02:30:11,600
>> Thanks.

3595
02:30:11,600 --> 02:30:16,520
I have question about
the wireless harness.

3596
02:30:16,520 --> 02:30:22,400
So the tractor is

3597
02:30:22,400 --> 02:30:23,690
going to talk
to the trailer

3598
02:30:23,690 --> 02:30:25,655
over this
wireless harness?

3599
02:30:25,655 --> 02:30:26,260
>> Correct?

3600
02:30:26,260 --> 02:30:27,310
>> You're worried about

3601
02:30:27,310 --> 02:30:29,680
the security of
the communication.

3602
02:30:29,680 --> 02:30:31,000
What if I just set up

3603
02:30:31,000 --> 02:30:35,170
a nice broad band
waveform generator by

3604
02:30:35,170 --> 02:30:36,340
the side of the road and

3605
02:30:36,340 --> 02:30:37,900
wait for this
thing to drive

3606
02:30:37,900 --> 02:30:41,330
by and jam the
wireless harvest.

3607
02:30:41,330 --> 02:30:43,880
>> Well, that's why
we need security.

3608
02:30:43,880 --> 02:30:46,520
Multilayer, I
would say security

3609
02:30:46,520 --> 02:30:49,160
at wireless harness level,

3610
02:30:49,160 --> 02:30:51,065
at the EU level.

3611
02:30:51,065 --> 02:30:52,310
Are you talking about

3612
02:30:52,310 --> 02:30:53,900
jamming or interference?

3613
02:30:53,900 --> 02:30:57,485
>> I'm talking about
physical layer jamming.

3614
02:30:57,485 --> 02:31:00,860
>> That applies to
anything. Any IoT device

3615
02:31:00,860 --> 02:31:02,000
we can make the arguments

3616
02:31:02,000 --> 02:31:03,230
for any IoT device saying.

3617
02:31:03,230 --> 02:31:04,430
>> I guess that's
what I'm asking you.

3618
02:31:04,430 --> 02:31:06,200
Why would you do this over

3619
02:31:06,200 --> 02:31:08,810
a wireless thing as

3620
02:31:08,810 --> 02:31:09,920
opposed to a cola

3621
02:31:09,920 --> 02:31:11,450
acts or something
like that.

3622
02:31:11,450 --> 02:31:12,350
>> Good question.

3623
02:31:12,350 --> 02:31:15,320
So an autonomous
structure is expected

3624
02:31:15,320 --> 02:31:17,210
to physically coupled with

3625
02:31:17,210 --> 02:31:20,360
a trailer with no
human intervention.

3626
02:31:20,360 --> 02:31:22,850
Should have mentioned
that an intro.

3627
02:31:22,850 --> 02:31:24,980
So that makes the trailer,

3628
02:31:24,980 --> 02:31:27,335
when its self-driving
with no human present,

3629
02:31:27,335 --> 02:31:30,360
supposed to plug
into cables as well.

3630
02:31:31,000 --> 02:31:34,490
For moving to
automotive ethernet.

3631
02:31:34,490 --> 02:31:36,935
The connector is
extremely tiny,

3632
02:31:36,935 --> 02:31:39,200
connector failure modes.

3633
02:31:39,200 --> 02:31:40,430
I'm not saying
it's not possible.

3634
02:31:40,430 --> 02:31:41,510
It's possible
there's a bunch of

3635
02:31:41,510 --> 02:31:43,130
solutions, but it's
very expensive.

3636
02:31:43,130 --> 02:31:44,600
We can use a robotic arm,

3637
02:31:44,600 --> 02:31:47,285
we can use a mechanic
couplers that

3638
02:31:47,285 --> 02:31:49,280
why do we need to go if

3639
02:31:49,280 --> 02:31:50,870
there is a way to
go this route?

3640
02:31:50,870 --> 02:31:53,630
If there's a
way to do multi

3641
02:31:53,630 --> 02:31:55,445
gig wireless harness
that is robust.

3642
02:31:55,445 --> 02:31:59,450
And actually in vehicle
communication multi,

3643
02:31:59,450 --> 02:32:03,320
the millimeter
wave 60 ghz WiFi

3644
02:32:03,320 --> 02:32:04,850
is being proposed strongly

3645
02:32:04,850 --> 02:32:07,385
for like in vehicle
communication.

3646
02:32:07,385 --> 02:32:10,820
But obviously it's
all research phase.

3647
02:32:10,820 --> 02:32:14,450
>> I wasn't I
know that's not

3648
02:32:14,450 --> 02:32:15,890
part of your
design as I'm part

3649
02:32:15,890 --> 02:32:17,645
of your research
presumably.

3650
02:32:17,645 --> 02:32:19,700
That's what the industry

3651
02:32:19,700 --> 02:32:21,365
is doing. I was
just curious.

3652
02:32:21,365 --> 02:32:25,130
>> Oh no problem.
Any other questions?

3653
02:32:25,130 --> 02:32:26,870
>> And there is an
additional comment

3654
02:32:26,870 --> 02:32:29,420
on Slack from Dave.

3655
02:32:29,420 --> 02:32:31,520
He says that if

3656
02:32:31,520 --> 02:32:33,350
you're using a highly
directional antenna,

3657
02:32:33,350 --> 02:32:36,020
you maybe able to
avoid jamming attacks.

3658
02:32:36,020 --> 02:32:37,610
>> Exactly. So the idea is

3659
02:32:37,610 --> 02:32:41,750
to use omni direction.

3660
02:32:41,750 --> 02:32:43,745
There's a bunch
of ways limiting

3661
02:32:43,745 --> 02:32:44,930
the physical range of

3662
02:32:44,930 --> 02:32:46,295
their antenna basically.

3663
02:32:46,295 --> 02:32:49,010
So whoever wants
to jam either use

3664
02:32:49,010 --> 02:32:50,960
a very strong broadcasting

3665
02:32:50,960 --> 02:32:52,460
method or be physically

3666
02:32:52,460 --> 02:32:53,915
present near

3667
02:32:53,915 --> 02:32:56,150
between the tractor
trailer, for example.

3668
02:32:56,150 --> 02:32:57,890
There's there's a lot of

3669
02:32:57,890 --> 02:33:01,650
opportunities for
resolution there.

3670
02:33:01,930 --> 02:33:04,520
>> I'm going to
go ahead and ask

3671
02:33:04,520 --> 02:33:06,065
you another question.

3672
02:33:06,065 --> 02:33:08,630
I think in the last
slide you mentioned

3673
02:33:08,630 --> 02:33:11,465
symmetric keys.
I was wondering.

3674
02:33:11,465 --> 02:33:14,420
I don't know what
the OS thing

3675
02:33:14,420 --> 02:33:15,470
you mentioned
is [LAUGHTER]

3676
02:33:15,470 --> 02:33:18,845
A question from I
ignorance and said,

3677
02:33:18,845 --> 02:33:20,570
are you referring
to symmetric keys

3678
02:33:20,570 --> 02:33:22,250
for encryption like

3679
02:33:22,250 --> 02:33:26,915
confidentiality or
integrity authentication?

3680
02:33:26,915 --> 02:33:28,010
>> Good question.
So mainly

3681
02:33:28,010 --> 02:33:30,230
for authentication.

3682
02:33:30,230 --> 02:33:32,105
Because secOC is

3683
02:33:32,105 --> 02:33:34,310
an artist's our
specific implementation

3684
02:33:34,310 --> 02:33:35,825
and it's very popular.

3685
02:33:35,825 --> 02:33:38,180
So it's a lightweight type

3686
02:33:38,180 --> 02:33:40,280
of luck signing and
authentication,

3687
02:33:40,280 --> 02:33:45,440
basically using
end-to-end both devices

3688
02:33:45,440 --> 02:33:46,520
is obviously I have to

3689
02:33:46,520 --> 02:33:47,825
say they have
the same key,

3690
02:33:47,825 --> 02:33:49,325
like something like CMAC

3691
02:33:49,325 --> 02:33:51,290
for example, or HMac.

3692
02:33:51,290 --> 02:33:53,045
So this is
something that is

3693
02:33:53,045 --> 02:33:55,175
used in the
industry as well.

3694
02:33:55,175 --> 02:33:57,830
So it appears
that NDN supports

3695
02:33:57,830 --> 02:34:01,070
the PKI infrastructure

3696
02:34:01,070 --> 02:34:02,795
or popular I would say.

3697
02:34:02,795 --> 02:34:04,040
But this symmetric key,

3698
02:34:04,040 --> 02:34:05,180
for example for automotive

3699
02:34:05,180 --> 02:34:07,655
is an important
one as well.

3700
02:34:07,655 --> 02:34:11,690
>> Thanks. Not a
question but a comment.

3701
02:34:11,690 --> 02:34:12,470
You also mentioned

3702
02:34:12,470 --> 02:34:14,075
the standardization
at the end.

3703
02:34:14,075 --> 02:34:15,380
So we have a panel

3704
02:34:15,380 --> 02:34:18,840
tomorrow about
standardizing NDN.

3705
02:34:19,330 --> 02:34:22,025
Maybe you think about
it in the meantime,

3706
02:34:22,025 --> 02:34:23,870
you can let us know
what you think about.

3707
02:34:23,870 --> 02:34:25,745
You seem you
wanted to say.

3708
02:34:25,745 --> 02:34:26,660
So that is you could be

3709
02:34:26,660 --> 02:34:28,145
important for
the use case?

3710
02:34:28,145 --> 02:34:29,210
>> Definitely.

3711
02:34:29,210 --> 02:34:31,670
>> I hope you can
now interact with

3712
02:34:31,670 --> 02:34:33,935
the panelists
on that panel.

3713
02:34:33,935 --> 02:34:35,045
>> Yeah sounds good.

3714
02:34:35,045 --> 02:34:35,630
>> Thank you.

3715
02:34:35,630 --> 02:34:36,695
>> Thank you.

3716
02:34:36,695 --> 02:34:41,870
>> So now we
have [APPLAUSE]

3717
02:34:41,870 --> 02:34:46,660
right on time for lunch
will be in that room.

3718
02:34:46,660 --> 02:34:48,070
There's a door
there that's

3719
02:34:48,070 --> 02:34:50,125
close now, but
you can open it.

3720
02:34:50,125 --> 02:34:53,230
So you can go
ahead and grab

3721
02:34:53,230 --> 02:34:56,780
your food and come
back here to eat it.

3722
02:34:56,830 --> 02:34:59,150
To sandwiches and stuff.

3723
02:34:59,150 --> 02:35:03,905
[LAUGHTER] Now
the door is open.

3724
02:35:03,905 --> 02:35:05,280
>> Thank you.