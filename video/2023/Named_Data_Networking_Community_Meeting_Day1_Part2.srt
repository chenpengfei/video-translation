1
00:00:00,000 --> 00:00:05,430
>> It's 1:30 and we
should probably start

2
00:00:05,430 --> 00:00:07,935
our first
afternoon session

3
00:00:07,935 --> 00:00:09,570
which is focused on

4
00:00:09,570 --> 00:00:12,240
ndn security and will be

5
00:00:12,240 --> 00:00:15,960
chaired by Christos
Papadopoulos.

6
00:00:15,960 --> 00:00:19,810
I have the first
presentation up.

7
00:00:20,480 --> 00:00:24,470
Christos is a professor

8
00:00:24,470 --> 00:00:25,940
at the University
of Memphis

9
00:00:25,940 --> 00:00:27,850
in the Computer
Science Department.

10
00:00:27,850 --> 00:00:29,510
Before that he was with

11
00:00:29,510 --> 00:00:31,400
Colorado State
University and

12
00:00:31,400 --> 00:00:33,469
the University of
Southern California.

13
00:00:33,469 --> 00:00:35,090
Recently he
spent two years

14
00:00:35,090 --> 00:00:36,275
as Program Manager at

15
00:00:36,275 --> 00:00:37,960
the Department of
Homeland Security

16
00:00:37,960 --> 00:00:41,015
between 2018 and 2020.

17
00:00:41,015 --> 00:00:44,040
Go ahead, Christos.

18
00:00:53,650 --> 00:00:57,110
>> Thank you, Loppy.
Let me give everyone

19
00:00:57,110 --> 00:01:00,430
a chance to sit
down after dinner.

20
00:01:00,430 --> 00:01:02,060
Hope everybody enjoyed it

21
00:01:02,060 --> 00:01:03,770
through where your
staff know that.

22
00:01:03,770 --> 00:01:06,890
So this is the
security session

23
00:01:06,890 --> 00:01:09,290
and gives me
great pleasure

24
00:01:09,290 --> 00:01:11,990
to welcome Eric
who's been a

25
00:01:11,990 --> 00:01:15,375
long time UCLA
and NVA member.

26
00:01:15,375 --> 00:01:18,165
But he's promised that

27
00:01:18,165 --> 00:01:20,930
he's seen for something
completely different.

28
00:01:20,930 --> 00:01:23,940
So Eric, I'm not

29
00:01:23,940 --> 00:01:25,795
going to read
your entire bio.

30
00:01:25,795 --> 00:01:27,815
But he's an
assistant professor

31
00:01:27,815 --> 00:01:30,320
at George Mason
University,

32
00:01:30,320 --> 00:01:32,495
coming up for
tenure pretty soon.

33
00:01:32,495 --> 00:01:37,935
And he focuses on
Internet cybersecurity,

34
00:01:37,935 --> 00:01:39,745
objects security,

35
00:01:39,745 --> 00:01:41,525
and large-scale
Internet measurements.

36
00:01:41,525 --> 00:01:42,920
I can attest to that.

37
00:01:42,920 --> 00:01:44,585
I've seen him work
on these things.

38
00:01:44,585 --> 00:01:46,380
So, Eric.

39
00:01:48,230 --> 00:01:50,895
>> Thanks, Christos.
Hey, everyone.

40
00:01:50,895 --> 00:01:52,520
So like you might

41
00:01:52,520 --> 00:01:54,215
see in the title
of this talk,

42
00:01:54,215 --> 00:01:55,130
this will be a little bit

43
00:01:55,130 --> 00:01:55,790
different than some of

44
00:01:55,790 --> 00:01:57,515
the subjects we've been
talking about today.

45
00:01:57,515 --> 00:01:59,315
But I can tell
you a few things.

46
00:01:59,315 --> 00:02:00,440
One, I think it'll head in

47
00:02:00,440 --> 00:02:01,400
the direction that you

48
00:02:01,400 --> 00:02:02,615
all might find
interesting.

49
00:02:02,615 --> 00:02:03,770
Two is, I usually like to

50
00:02:03,770 --> 00:02:05,300
give talks very
conversationally.

51
00:02:05,300 --> 00:02:06,530
I don't have the luxury

52
00:02:06,530 --> 00:02:08,180
of a long enough
time slot for that.

53
00:02:08,180 --> 00:02:09,560
But I will say that I have

54
00:02:09,560 --> 00:02:10,970
very thick skin and
if you have something

55
00:02:10,970 --> 00:02:12,470
interesting to say
whether you think I

56
00:02:12,470 --> 00:02:14,390
like it or not, I'd
love to hear it.

57
00:02:14,390 --> 00:02:16,250
So please save up
some good questions

58
00:02:16,250 --> 00:02:19,885
and consider this
discussion topic.

59
00:02:19,885 --> 00:02:21,770
So anyway, I'm going to

60
00:02:21,770 --> 00:02:22,670
talk a little bit about

61
00:02:22,670 --> 00:02:23,885
knowing the road ahead.

62
00:02:23,885 --> 00:02:26,450
Lessons that we've
learned and can learn and

63
00:02:26,450 --> 00:02:27,485
should learn from

64
00:02:27,485 --> 00:02:30,010
IP DDoS in
today's Internet.

65
00:02:30,010 --> 00:02:33,225
So DDoS attacks
are perennial,

66
00:02:33,225 --> 00:02:35,680
but are they inevitable?

67
00:02:35,950 --> 00:02:38,990
It's perhaps one of
the oldest sicknesses

68
00:02:38,990 --> 00:02:41,135
that still plagues
the Internet today,

69
00:02:41,135 --> 00:02:42,935
distributed denial
of service.

70
00:02:42,935 --> 00:02:46,850
The first nominal
attack of a botnet and

71
00:02:46,850 --> 00:02:47,930
volumetric fashion

72
00:02:47,930 --> 00:02:48,800
against the
Internet was over

73
00:02:48,800 --> 00:02:50,060
21 years ago and it was

74
00:02:50,060 --> 00:02:52,465
from something called
the Trin botnet.

75
00:02:52,465 --> 00:02:55,265
Then if you flash
forward to 2015,

76
00:02:55,265 --> 00:02:56,510
there were programs
that were started

77
00:02:56,510 --> 00:02:57,760
to be formed
that said, hey,

78
00:02:57,760 --> 00:02:59,060
one day we got
to worry because

79
00:02:59,060 --> 00:03:00,695
these attacks are getting
bigger and bigger.

80
00:03:00,695 --> 00:03:03,100
They might get to
be one terabit.

81
00:03:03,100 --> 00:03:06,470
Then in 2016, less
than a year later,

82
00:03:06,470 --> 00:03:07,700
Krebs On Security online

83
00:03:07,700 --> 00:03:09,560
got blasted off the
Internet by what was

84
00:03:09,560 --> 00:03:11,615
then the nominally biggest

85
00:03:11,615 --> 00:03:13,640
internet DDoS
attack ever seen,

86
00:03:13,640 --> 00:03:18,410
it was somewhere
north of 665 gigabit.

87
00:03:18,410 --> 00:03:20,570
Then later that year,

88
00:03:20,570 --> 00:03:22,850
a service provider
named OVH got

89
00:03:22,850 --> 00:03:24,830
taken to town at by

90
00:03:24,830 --> 00:03:27,380
1.1 terabit attack that

91
00:03:27,380 --> 00:03:29,395
was launched by
CCT cameras.

92
00:03:29,395 --> 00:03:31,275
And then later that year,

93
00:03:31,275 --> 00:03:33,755
Dyn got knocked off the
face of the Internet

94
00:03:33,755 --> 00:03:35,150
by another massive

95
00:03:35,150 --> 00:03:36,410
DDoS attack that's
even bigger,

96
00:03:36,410 --> 00:03:39,570
1.2 terabit by
the Mirai botnet.

97
00:03:39,580 --> 00:03:43,160
And the volumes of
these attacks have just

98
00:03:43,160 --> 00:03:44,840
grown and the
tools that Ms.

99
00:03:44,840 --> 00:03:46,790
Greens had come up with,

100
00:03:46,790 --> 00:03:48,830
clever ways to work
around what people

101
00:03:48,830 --> 00:03:52,350
expected have also
just blurred.

102
00:03:54,990 --> 00:03:57,655
Nevertheless,
the entire time,

103
00:03:57,655 --> 00:03:59,020
researchers and community

104
00:03:59,020 --> 00:04:00,925
members have
been fighting.

105
00:04:00,925 --> 00:04:04,690
So as attacks
have grown so

106
00:04:04,690 --> 00:04:06,775
too have our research

107
00:04:06,775 --> 00:04:08,545
efforts to address them.

108
00:04:08,545 --> 00:04:11,565
More and more
research put in,

109
00:04:11,565 --> 00:04:13,030
the graphic doesn't quite

110
00:04:13,030 --> 00:04:14,290
show all the lines
there at least.

111
00:04:14,290 --> 00:04:15,775
So you can see that
this is a plot,

112
00:04:15,775 --> 00:04:17,395
it's actually
a scatter plot

113
00:04:17,395 --> 00:04:21,280
of research publications
year after year in

114
00:04:21,280 --> 00:04:24,684
DDoS-related fields
like either DDos papers

115
00:04:24,684 --> 00:04:26,380
or something related to

116
00:04:26,380 --> 00:04:28,420
network security
adjacent to DDos.

117
00:04:28,420 --> 00:04:31,420
It's just poured in
year after year and

118
00:04:31,420 --> 00:04:33,310
billions of dollars
have been poured

119
00:04:33,310 --> 00:04:35,755
into the problem
year over year.

120
00:04:35,755 --> 00:04:38,215
But attack volumes
have kept up,

121
00:04:38,215 --> 00:04:40,160
and actually in
many cases have

122
00:04:40,160 --> 00:04:41,510
exceeded what we've been

123
00:04:41,510 --> 00:04:43,460
doing to try and
mitigate this problem.

124
00:04:43,460 --> 00:04:46,115
So the talk that
I'm giving out.

125
00:04:46,115 --> 00:04:47,600
So we conducted
a large-scale

126
00:04:47,600 --> 00:04:48,905
architectural analysis

127
00:04:48,905 --> 00:04:50,975
of the research
literature,

128
00:04:50,975 --> 00:04:52,220
the literature in general

129
00:04:52,220 --> 00:04:53,300
of what people have been

130
00:04:53,300 --> 00:04:54,470
doing and what has

131
00:04:54,470 --> 00:04:57,140
fundamentally enabled
DDos attacks.

132
00:04:57,140 --> 00:04:59,300
In order to try and see

133
00:04:59,300 --> 00:05:01,110
why are we chasing
our tail here?

134
00:05:01,110 --> 00:05:02,735
How can we break
the cycle?

135
00:05:02,735 --> 00:05:04,370
And what I'd like

136
00:05:04,370 --> 00:05:05,780
to say is that I
think what we've

137
00:05:05,780 --> 00:05:06,980
done is we've found a

138
00:05:06,980 --> 00:05:09,650
very compelling
path forward.

139
00:05:09,650 --> 00:05:12,355
So let me give you an
outline at the top.

140
00:05:12,355 --> 00:05:14,960
So our evaluation
was over about

141
00:05:14,960 --> 00:05:17,390
25,000 DDoS-related
papers from

142
00:05:17,390 --> 00:05:19,595
the past 30
some odd years.

143
00:05:19,595 --> 00:05:21,440
I'm going to talk
a little bit about

144
00:05:21,440 --> 00:05:22,760
our observations
of the basic

145
00:05:22,760 --> 00:05:24,080
attack surface that DDoS

146
00:05:24,080 --> 00:05:25,550
exploits which I realize

147
00:05:25,550 --> 00:05:26,780
is not something that's

148
00:05:26,780 --> 00:05:28,610
specifically
relevant to NDN

149
00:05:28,610 --> 00:05:30,230
unless you listen
to the whole talk.

150
00:05:30,230 --> 00:05:32,340
So keep with me.

151
00:05:32,340 --> 00:05:33,620
Then I'll talk a
little bit about

152
00:05:33,620 --> 00:05:35,390
the basic architectural
advantages of

153
00:05:35,390 --> 00:05:38,440
NDN in this
cybersecurity setting.

154
00:05:38,440 --> 00:05:40,540
So real quick,
any questions?

155
00:05:40,540 --> 00:05:41,600
I'm used to stopping
for questions,

156
00:05:41,600 --> 00:05:42,800
I can't help myself.

157
00:05:42,800 --> 00:05:45,440
Cool. So real quick,

158
00:05:45,440 --> 00:05:46,070
I want to make
sure we're all

159
00:05:46,070 --> 00:05:46,710
on the same page.

160
00:05:46,710 --> 00:05:48,230
So probably everyone here

161
00:05:48,230 --> 00:05:49,530
has some sense
of what DDoS is.

162
00:05:49,530 --> 00:05:51,965
So if you do bear with
me and if you don't,

163
00:05:51,965 --> 00:05:52,760
don't worry, I'll just

164
00:05:52,760 --> 00:05:53,540
go through it real quick.

165
00:05:53,540 --> 00:05:55,445
So imagine we've got
a content provider

166
00:05:55,445 --> 00:05:56,810
up in the top
left-hand corner.

167
00:05:56,810 --> 00:05:59,480
I've got a little
goofy transit

168
00:05:59,480 --> 00:06:01,400
core of ISPs that

169
00:06:01,400 --> 00:06:02,910
forward packets in
the middle Internet.

170
00:06:02,910 --> 00:06:05,295
Let's say we have
three edge networks.

171
00:06:05,295 --> 00:06:06,440
We have an access network

172
00:06:06,440 --> 00:06:07,310
with some home users,

173
00:06:07,310 --> 00:06:08,735
a laptop, and some phones.

174
00:06:08,735 --> 00:06:10,400
We have an ICS network

175
00:06:10,400 --> 00:06:11,630
or a bunch of IoT devices

176
00:06:11,630 --> 00:06:12,290
or something and maybe

177
00:06:12,290 --> 00:06:13,040
down at the bottom we've

178
00:06:13,040 --> 00:06:14,570
got a wireless carrier.

179
00:06:14,570 --> 00:06:16,115
So a DDoS attack

180
00:06:16,115 --> 00:06:17,705
is there's a
service provider,

181
00:06:17,705 --> 00:06:19,295
they are offering
a service.

182
00:06:19,295 --> 00:06:21,360
So a miscreant
can compromise

183
00:06:21,360 --> 00:06:22,700
an endpoint and
start sending

184
00:06:22,700 --> 00:06:24,290
a lot of attack traffic.

185
00:06:24,290 --> 00:06:26,030
And then she can
invite all of

186
00:06:26,030 --> 00:06:27,815
our friends or just
commission her to

187
00:06:27,815 --> 00:06:29,600
singular botnet to blast

188
00:06:29,600 --> 00:06:31,535
a whole bunch of traffic
all over the place.

189
00:06:31,535 --> 00:06:33,155
And a DDoS attack really,

190
00:06:33,155 --> 00:06:34,310
there's a lot of
ways in which

191
00:06:34,310 --> 00:06:35,660
people suffer from that.

192
00:06:35,660 --> 00:06:37,430
But one primary way from

193
00:06:37,430 --> 00:06:38,720
a volumetric DDoS attack

194
00:06:38,720 --> 00:06:40,970
is those networks towards

195
00:06:40,970 --> 00:06:43,510
the aggregation
point become

196
00:06:43,510 --> 00:06:46,020
oversubscribed
and traffic just

197
00:06:46,020 --> 00:06:48,075
can't get through
and they're swamped.

198
00:06:48,075 --> 00:06:50,130
So as a side effect of

199
00:06:50,130 --> 00:06:51,545
that if someone
actually wants to

200
00:06:51,545 --> 00:06:53,870
transact with the service
they probably can't

201
00:06:53,870 --> 00:06:57,340
because at that point
the pipes are awful.

202
00:06:57,340 --> 00:07:01,535
So this problem, the
volumetric DDoS problem

203
00:07:01,535 --> 00:07:03,155
is a problem that
happens in the aggregate

204
00:07:03,155 --> 00:07:05,705
and it's an
inter-domain problem.

205
00:07:05,705 --> 00:07:09,500
Lots of packet love
gets sent from lots of

206
00:07:09,500 --> 00:07:11,480
edge networks and
maybe not even in

207
00:07:11,480 --> 00:07:12,860
massive quantities
until they

208
00:07:12,860 --> 00:07:13,925
all start to aggregate.

209
00:07:13,925 --> 00:07:15,415
They act like tributaries.

210
00:07:15,415 --> 00:07:17,060
Those tributaries
start to come

211
00:07:17,060 --> 00:07:19,085
together as they
are converging on

212
00:07:19,085 --> 00:07:20,930
the victim or the endpoint

213
00:07:20,930 --> 00:07:21,995
then they become

214
00:07:21,995 --> 00:07:23,300
torrents or they
become rivers.

215
00:07:23,300 --> 00:07:25,580
They become too much
for someone to handle.

216
00:07:25,580 --> 00:07:28,070
And so one just
side comment is

217
00:07:28,070 --> 00:07:29,990
the actual size of
DDoS attacks are

218
00:07:29,990 --> 00:07:32,240
oftentimes not
known or knowable

219
00:07:32,240 --> 00:07:34,835
because when network
links are swamped,

220
00:07:34,835 --> 00:07:35,990
packets get dropped which

221
00:07:35,990 --> 00:07:36,740
means if you measure

222
00:07:36,740 --> 00:07:37,790
how much attack traffic is

223
00:07:37,790 --> 00:07:39,125
being serviced
at the victim,

224
00:07:39,125 --> 00:07:40,250
that doesn't
include everything

225
00:07:40,250 --> 00:07:40,940
got dropped on the way.

226
00:07:40,940 --> 00:07:42,080
In other words, those are

227
00:07:42,080 --> 00:07:44,350
usually underestimates.

228
00:07:44,350 --> 00:07:48,825
So this is a problem
I'm a big fan of.

229
00:07:48,825 --> 00:07:51,470
Go ahead, Alex.
You might have to

230
00:07:51,470 --> 00:07:52,760
use the microphone

231
00:07:52,760 --> 00:07:54,870
because they're
folks online.

232
00:07:55,710 --> 00:07:57,250
>> This is just going to

233
00:07:57,250 --> 00:07:58,180
cause me to speak even

234
00:07:58,180 --> 00:07:59,110
faster as I run out of

235
00:07:59,110 --> 00:08:01,160
time but it's all good.

236
00:08:01,860 --> 00:08:05,065
>> I just wonder if
the volumetric attacks

237
00:08:05,065 --> 00:08:06,775
of the prominent ones and

238
00:08:06,775 --> 00:08:09,535
the low rate attacks
are no longer

239
00:08:09,535 --> 00:08:13,450
an issue or there is
still a big [inaudible]?

240
00:08:13,450 --> 00:08:14,770
>> That's a fair
question. I don't have

241
00:08:14,770 --> 00:08:15,910
to repeat it because
you use the microphone.

242
00:08:15,910 --> 00:08:16,630
Thank You.

243
00:08:16,630 --> 00:08:18,790
No. The volumetric
attacks garner

244
00:08:18,790 --> 00:08:20,680
the most attention
because insecurity,

245
00:08:20,680 --> 00:08:21,865
if it bleeds, it leads.

246
00:08:21,865 --> 00:08:23,800
So people hear about it on

247
00:08:23,800 --> 00:08:24,820
the cover of New York

248
00:08:24,820 --> 00:08:26,050
Times or something
like that.

249
00:08:26,050 --> 00:08:27,445
Whereas the low and slow,

250
00:08:27,445 --> 00:08:29,500
those can actually be
way more pernicious is

251
00:08:29,500 --> 00:08:31,585
where APT [inaudible]
other stuff.

252
00:08:31,585 --> 00:08:33,775
And it just doesn't
get as much headlines.

253
00:08:33,775 --> 00:08:35,050
Also, if it's
a big bridge,

254
00:08:35,050 --> 00:08:36,610
people try not to

255
00:08:36,610 --> 00:08:39,175
divulge any more
than they have to.

256
00:08:39,175 --> 00:08:41,500
But a big sledgehammer
volumetric attack

257
00:08:41,500 --> 00:08:43,225
usually leads
to headlines.

258
00:08:43,225 --> 00:08:45,280
So this is admittedly
just one of

259
00:08:45,280 --> 00:08:46,450
the security
problems we face,

260
00:08:46,450 --> 00:08:47,695
but it is just one.

261
00:08:47,695 --> 00:08:50,500
So anyway, this is a
proverb I really like.

262
00:08:50,500 --> 00:08:51,805
I overused the
heck out of it,

263
00:08:51,805 --> 00:08:53,680
but to know the
road ahead,

264
00:08:53,680 --> 00:08:55,360
ask those coming back.

265
00:08:55,360 --> 00:08:59,215
So if DDos is a plague
for today's Internet,

266
00:08:59,215 --> 00:09:01,179
then can its symptoms,

267
00:09:01,179 --> 00:09:03,625
can its nature, can
our responses to it?

268
00:09:03,625 --> 00:09:04,960
Can it teach us
something about

269
00:09:04,960 --> 00:09:06,475
the architecture
for tomorrow,

270
00:09:06,475 --> 00:09:07,720
what we do and don't need,

271
00:09:07,720 --> 00:09:09,490
what does and doesn't fit.

272
00:09:09,490 --> 00:09:11,290
And that was one of

273
00:09:11,290 --> 00:09:12,400
the main motivations for

274
00:09:12,400 --> 00:09:14,155
the architectural
study we did.

275
00:09:14,155 --> 00:09:15,280
I say architectural
because

276
00:09:15,280 --> 00:09:17,200
we've looked at the
actual architecture.

277
00:09:17,200 --> 00:09:18,610
A lot of what we read in

278
00:09:18,610 --> 00:09:20,650
the literature was
treating symptoms,

279
00:09:20,650 --> 00:09:22,540
but we wanted to understand
what was going on

280
00:09:22,540 --> 00:09:23,740
underneath from

281
00:09:23,740 --> 00:09:25,180
the architectural
perspective.

282
00:09:25,180 --> 00:09:26,965
So like I said, we

283
00:09:26,965 --> 00:09:29,485
called about
25,000 papers,

284
00:09:29,485 --> 00:09:31,015
RFCs, patents,

285
00:09:31,015 --> 00:09:32,590
anything that
seemed like it was

286
00:09:32,590 --> 00:09:34,195
related to this field.

287
00:09:34,195 --> 00:09:36,850
We went back about 30
plus years and we made

288
00:09:36,850 --> 00:09:38,260
a very close inspection of

289
00:09:38,260 --> 00:09:40,735
about 260 of those.

290
00:09:40,735 --> 00:09:43,330
And so what we looked at

291
00:09:43,330 --> 00:09:44,560
was what was discovered

292
00:09:44,560 --> 00:09:45,400
through all this work.

293
00:09:45,400 --> 00:09:48,760
What was rediscovered
through all this work.

294
00:09:48,760 --> 00:09:51,655
And what meant was
deployment success.

295
00:09:51,655 --> 00:09:53,620
So in a sense, we looked

296
00:09:53,620 --> 00:09:55,375
at this as like
requirements gathering.

297
00:09:55,375 --> 00:09:56,920
If you've ever done
software engineering,

298
00:09:56,920 --> 00:09:58,240
you know one of
the steps is

299
00:09:58,240 --> 00:09:59,605
requirements analysis.

300
00:09:59,605 --> 00:10:01,450
We looked at this
as a clear and

301
00:10:01,450 --> 00:10:03,190
present problem for
a very long time.

302
00:10:03,190 --> 00:10:03,610
And we said, Well,

303
00:10:03,610 --> 00:10:04,510
what are the
requirements of

304
00:10:04,510 --> 00:10:06,190
remediation and what are

305
00:10:06,190 --> 00:10:07,300
the basic requirements
to launch

306
00:10:07,300 --> 00:10:09,885
it? So what we found.

307
00:10:09,885 --> 00:10:13,740
The DDos, does
a huge space of

308
00:10:13,740 --> 00:10:15,810
different types of TTPs

309
00:10:15,810 --> 00:10:18,785
it can vary widely in
form and function.

310
00:10:18,785 --> 00:10:19,975
But there are

311
00:10:19,975 --> 00:10:21,790
just a very few basic
vulnerabilities

312
00:10:21,790 --> 00:10:24,250
in the IP layer that
fundamentally enable it.

313
00:10:24,250 --> 00:10:26,590
And moreover,
what we saw in

314
00:10:26,590 --> 00:10:29,140
looking across this
massive corpus of

315
00:10:29,140 --> 00:10:31,060
community
literature was that

316
00:10:31,060 --> 00:10:32,470
there's certain
design patterns were

317
00:10:32,470 --> 00:10:34,030
repeated over and over

318
00:10:34,030 --> 00:10:35,875
again as people
would do a proposal.

319
00:10:35,875 --> 00:10:37,510
A lot of times they'd
be doing a lot of

320
00:10:37,510 --> 00:10:40,270
the same things over
and over again.

321
00:10:40,270 --> 00:10:42,760
Further, we
actually looked

322
00:10:42,760 --> 00:10:43,885
at what's actually
deployed,

323
00:10:43,885 --> 00:10:45,220
what's actually
being used?

324
00:10:45,220 --> 00:10:47,710
And what we found is
that misaligning.

325
00:10:47,710 --> 00:10:49,060
Who pays for something,

326
00:10:49,060 --> 00:10:50,710
who has to commit
to upgrading

327
00:10:50,710 --> 00:10:51,610
something and who's going

328
00:10:51,610 --> 00:10:52,690
to benefit from that?

329
00:10:52,690 --> 00:10:54,250
Is a good way to
make sure that

330
00:10:54,250 --> 00:10:55,150
what you're doing isn't

331
00:10:55,150 --> 00:10:56,710
going to get deployed.

332
00:10:56,710 --> 00:10:58,990
So I'm going to

333
00:10:58,990 --> 00:11:00,475
go quickly through
this because

334
00:11:00,475 --> 00:11:01,960
I would rather you read

335
00:11:01,960 --> 00:11:02,740
our work than me try

336
00:11:02,740 --> 00:11:03,520
to summarize it too much,

337
00:11:03,520 --> 00:11:04,810
but I'll tell you
a bit about it.

338
00:11:04,810 --> 00:11:07,540
So we took this
big giant corpus

339
00:11:07,540 --> 00:11:08,560
of literature
and we broke it

340
00:11:08,560 --> 00:11:09,955
down into certain
categories.

341
00:11:09,955 --> 00:11:11,395
Though some of the
approaches that

342
00:11:11,395 --> 00:11:13,315
we studied were
preventative.

343
00:11:13,315 --> 00:11:14,620
They tried to prevent

344
00:11:14,620 --> 00:11:15,910
DDos attack traffic

345
00:11:15,910 --> 00:11:17,230
from entering the network.

346
00:11:17,230 --> 00:11:18,970
Some of them
were focused on

347
00:11:18,970 --> 00:11:21,370
detection when traffic
is being sent.

348
00:11:21,370 --> 00:11:23,320
It's not trivial to be
able to determine what

349
00:11:23,320 --> 00:11:23,800
the difference is in

350
00:11:23,800 --> 00:11:25,600
good traffic and
attack traffic is.

351
00:11:25,600 --> 00:11:27,010
Some approaches focused

352
00:11:27,010 --> 00:11:28,630
on actually doing that.

353
00:11:28,630 --> 00:11:31,420
Then the flip side

354
00:11:31,420 --> 00:11:32,290
of that is some approaches

355
00:11:32,290 --> 00:11:33,625
focus just on mitigation.

356
00:11:33,625 --> 00:11:35,080
They focused on
like look someone

357
00:11:35,080 --> 00:11:36,100
else is going to

358
00:11:36,100 --> 00:11:37,720
actually classify
the packets.

359
00:11:37,720 --> 00:11:38,920
Once that happens,
how do we

360
00:11:38,920 --> 00:11:40,735
separate wheat from chaff?

361
00:11:40,735 --> 00:11:42,160
And then finally, some

362
00:11:42,160 --> 00:11:43,075
of the approaches where

363
00:11:43,075 --> 00:11:46,580
holistic they did
mitigation and detection.

364
00:11:46,770 --> 00:11:50,890
So rather than give
you that corpus,

365
00:11:50,890 --> 00:11:52,150
I'll just go over
it real quick and

366
00:11:52,150 --> 00:11:53,995
have a bunch of
footnotes for you.

367
00:11:53,995 --> 00:11:56,860
So some of the preventative
ones were simple.

368
00:11:56,860 --> 00:11:58,090
They use filtering,
things like

369
00:11:58,090 --> 00:11:59,920
BCP 38 and 84,

370
00:11:59,920 --> 00:12:01,690
ingress and
egress filtering.

371
00:12:01,690 --> 00:12:06,610
And some of them
proposed put state into

372
00:12:06,610 --> 00:12:08,530
router's the IP has got

373
00:12:08,530 --> 00:12:09,940
stateless forwarding
but some of them

374
00:12:09,940 --> 00:12:11,410
said like but one
way to fight DDos,

375
00:12:11,410 --> 00:12:12,100
is add state to

376
00:12:12,100 --> 00:12:14,035
IP let's put it
in the routers.

377
00:12:14,035 --> 00:12:16,360
Some others said, that's
a really good idea.

378
00:12:16,360 --> 00:12:17,200
I thought of it,

379
00:12:17,200 --> 00:12:19,220
but I'm going to put
it in the packet.

380
00:12:19,650 --> 00:12:23,440
Some others, there
was a large section

381
00:12:23,440 --> 00:12:25,120
of literature called
capabilities.

382
00:12:25,120 --> 00:12:26,860
And what capabilities
did is they basically

383
00:12:26,860 --> 00:12:28,900
said we should do some
admission control.

384
00:12:28,900 --> 00:12:30,400
You shouldn't be
allowed to send

385
00:12:30,400 --> 00:12:31,270
traffic unless you've

386
00:12:31,270 --> 00:12:32,590
been granted permission.

387
00:12:32,590 --> 00:12:37,360
So they use an RTS
authorization model

388
00:12:37,360 --> 00:12:38,860
and even one of
them started using

389
00:12:38,860 --> 00:12:42,715
an overlay to
implement this.

390
00:12:42,715 --> 00:12:46,690
And there's lots of other
stuff in our paper,

391
00:12:46,690 --> 00:12:48,640
but lots of other
works that we

392
00:12:48,640 --> 00:12:49,690
covered but a lot of them

393
00:12:49,690 --> 00:12:51,145
reuse these
design patterns,

394
00:12:51,145 --> 00:12:55,085
state filtering,
state RTS.

395
00:12:55,085 --> 00:12:57,510
Detection classification
systems broke

396
00:12:57,510 --> 00:12:58,680
down into three
categories.

397
00:12:58,680 --> 00:13:00,090
Basically, they
said you can

398
00:13:00,090 --> 00:13:01,620
do detection at
the victim's side,

399
00:13:01,620 --> 00:13:03,435
you can do detection
somewhere in the middle,

400
00:13:03,435 --> 00:13:05,565
or you could do detection
at all the sources.

401
00:13:05,565 --> 00:13:06,600
And they all have

402
00:13:06,600 --> 00:13:07,800
their various
pros and cons.

403
00:13:07,800 --> 00:13:09,360
If you do it at
the victim's side,

404
00:13:09,360 --> 00:13:10,710
it's a lot easier to

405
00:13:10,710 --> 00:13:11,820
tell what's
attack traffic,

406
00:13:11,820 --> 00:13:13,080
what's not because
you're getting hit

407
00:13:13,080 --> 00:13:14,280
with a sledgehammer,

408
00:13:14,280 --> 00:13:16,160
but at that point it
might be too late.

409
00:13:16,160 --> 00:13:17,620
Although you are highly

410
00:13:17,620 --> 00:13:20,350
incentivized to
put a solution

411
00:13:20,350 --> 00:13:21,310
like that in
your own network

412
00:13:21,310 --> 00:13:22,540
because you're
getting clobbered.

413
00:13:22,540 --> 00:13:24,970
And flip side the
distributed models say,

414
00:13:24,970 --> 00:13:26,560
if we work as a community,

415
00:13:26,560 --> 00:13:27,580
this is really great,

416
00:13:27,580 --> 00:13:28,960
but nobody in the transit

417
00:13:28,960 --> 00:13:30,040
core really benefits from

418
00:13:30,040 --> 00:13:31,480
deploying this and also

419
00:13:31,480 --> 00:13:32,980
you don't get
really good signal.

420
00:13:32,980 --> 00:13:34,360
It's not always clear
what is and isn't

421
00:13:34,360 --> 00:13:36,805
a DDos attack until
it really converges.

422
00:13:36,805 --> 00:13:38,215
And that's even more so

423
00:13:38,215 --> 00:13:39,295
if you do it
near the source.

424
00:13:39,295 --> 00:13:40,330
Although if you do

425
00:13:40,330 --> 00:13:41,395
due detection
at the source,

426
00:13:41,395 --> 00:13:42,430
you can stop the DDos

427
00:13:42,430 --> 00:13:44,275
before they even happen.

428
00:13:44,275 --> 00:13:46,990
And then mitigation only.

429
00:13:46,990 --> 00:13:48,010
For those of you that

430
00:13:48,010 --> 00:13:49,000
are familiar
with networking,

431
00:13:49,000 --> 00:13:50,050
there's black holing,

432
00:13:50,050 --> 00:13:51,805
It's a tried and
true mechanism.

433
00:13:51,805 --> 00:13:53,530
There's also
something called

434
00:13:53,530 --> 00:13:55,360
mitigation as a
service where you can

435
00:13:55,360 --> 00:13:56,770
pay a third party to go

436
00:13:56,770 --> 00:13:58,690
off and take all
of your traffic

437
00:13:58,690 --> 00:14:00,580
and scrub away
what's attack and

438
00:14:00,580 --> 00:14:02,380
then returned to you
the service operator,

439
00:14:02,380 --> 00:14:04,510
what's actually
legitimate traffic.

440
00:14:04,510 --> 00:14:07,915
This one has some
benefits, for example,

441
00:14:07,915 --> 00:14:09,835
you have a clear
relationship with someone,

442
00:14:09,835 --> 00:14:11,080
it's probably for money,

443
00:14:11,080 --> 00:14:12,955
no changes needed
the infrastructure,

444
00:14:12,955 --> 00:14:14,810
etc and so forth.

445
00:14:15,270 --> 00:14:18,130
And then one more
thing I'll just cover

446
00:14:18,130 --> 00:14:20,635
from our literature
survey was that

447
00:14:20,635 --> 00:14:23,290
a lot of approaches
actually proposed that

448
00:14:23,290 --> 00:14:24,550
you could build
filters and

449
00:14:24,550 --> 00:14:26,035
distribute them
through the networks.

450
00:14:26,035 --> 00:14:27,670
Some of them said you
should distribute

451
00:14:27,670 --> 00:14:30,745
those filters directly
in line using BGP.

452
00:14:30,745 --> 00:14:32,410
Others said you should

453
00:14:32,410 --> 00:14:33,490
build an overlay
so you can

454
00:14:33,490 --> 00:14:34,780
distribute
filters so you as

455
00:14:34,780 --> 00:14:36,160
a victim or
being attacked,

456
00:14:36,160 --> 00:14:37,690
you should be able to
tell the Internet this

457
00:14:37,690 --> 00:14:39,445
is the traffic you
should block for me.

458
00:14:39,445 --> 00:14:42,295
That's this slide
in a nutshell.

459
00:14:42,295 --> 00:14:43,915
Okay.

460
00:14:43,915 --> 00:14:45,625
That's all the DDos

461
00:14:45,625 --> 00:14:46,735
school I want
to talk about.

462
00:14:46,735 --> 00:14:48,100
Unless you have
questions I'm

463
00:14:48,100 --> 00:14:49,435
happy to talk
about details.

464
00:14:49,435 --> 00:14:50,410
But what are the lessons

465
00:14:50,410 --> 00:14:51,415
we learned from that?

466
00:14:51,415 --> 00:14:55,420
So these proposals
repeatedly

467
00:14:55,420 --> 00:14:56,635
asked for changes

468
00:14:56,635 --> 00:14:58,000
to the routing
infrastructure.

469
00:14:58,000 --> 00:14:59,260
They asked to have

470
00:14:59,260 --> 00:15:01,225
state added the
stateless IP.

471
00:15:01,225 --> 00:15:03,115
They asked to
have filtering

472
00:15:03,115 --> 00:15:05,110
as a capacity that
you can request.

473
00:15:05,110 --> 00:15:07,165
They asked to have
admission control

474
00:15:07,165 --> 00:15:09,385
and outflow parody.

475
00:15:09,385 --> 00:15:11,350
Looking at what has

476
00:15:11,350 --> 00:15:12,730
and has not been
deployed is

477
00:15:12,730 --> 00:15:14,920
a real sad or
interesting tale

478
00:15:14,920 --> 00:15:16,465
depends which side of
the coin you're on.

479
00:15:16,465 --> 00:15:18,010
Solutions that require

480
00:15:18,010 --> 00:15:19,390
changes to the
infrastructure

481
00:15:19,390 --> 00:15:20,770
of those solutions

482
00:15:20,770 --> 00:15:22,945
, we didn't see
any diploy.

483
00:15:22,945 --> 00:15:25,420
Of the solutions that
require deployment

484
00:15:25,420 --> 00:15:27,415
by non impacted parties
in other words,

485
00:15:27,415 --> 00:15:28,510
you do the work because

486
00:15:28,510 --> 00:15:30,025
I'm going to
benefit from it.

487
00:15:30,025 --> 00:15:33,010
We saw basically none
of those got deployed.

488
00:15:33,010 --> 00:15:35,200
And solutions that align

489
00:15:35,200 --> 00:15:37,450
the deployment costs
with incentives,

490
00:15:37,450 --> 00:15:40,045
the ones that said,
you pay you benefit.

491
00:15:40,045 --> 00:15:41,290
Well, we saw

492
00:15:41,290 --> 00:15:44,780
Maas providers and
Anycast solutions.

493
00:15:45,300 --> 00:15:48,655
So what the take-home
from that is,

494
00:15:48,655 --> 00:15:50,680
Maas providers
are really what

495
00:15:50,680 --> 00:15:54,050
protects us on the
Internet today from DDos.

496
00:15:54,400 --> 00:15:57,500
Now, their whole
proposition is,

497
00:15:57,500 --> 00:16:00,500
we're a network to absorb
the attack traffic,

498
00:16:00,500 --> 00:16:02,270
which means we have to
be at least as big as

499
00:16:02,270 --> 00:16:04,765
that attack traffic.
We have to absorb it.

500
00:16:04,765 --> 00:16:06,790
So these attacks
are growing.

501
00:16:06,790 --> 00:16:11,550
So a Maas providers
road is, I've grow too.

502
00:16:11,550 --> 00:16:13,880
In the words of
one operator

503
00:16:13,880 --> 00:16:15,830
who I agreed not
to ever name.

504
00:16:15,830 --> 00:16:17,510
Their response to how they

505
00:16:17,510 --> 00:16:19,160
keep up with this
is they said,

506
00:16:19,160 --> 00:16:20,870
our job, we look at

507
00:16:20,870 --> 00:16:22,220
our proposition is always

508
00:16:22,220 --> 00:16:23,330
be ten times bigger.

509
00:16:23,330 --> 00:16:23,990
And then he said

510
00:16:23,990 --> 00:16:25,560
some other stuff I'm
not going to read.

511
00:16:25,560 --> 00:16:28,700
So the costs and
incentives are

512
00:16:28,700 --> 00:16:30,140
aligned and there's no

513
00:16:30,140 --> 00:16:31,640
infrastructure
upgrades required.

514
00:16:31,640 --> 00:16:34,335
This is what works
for us today.

515
00:16:34,335 --> 00:16:38,310
Now, a distributed
attack probably would

516
00:16:38,310 --> 00:16:41,095
indicate a distributed
defense but

517
00:16:41,095 --> 00:16:42,650
those proposals have not

518
00:16:42,650 --> 00:16:44,425
really found purchase yet.

519
00:16:44,425 --> 00:16:46,520
So going forward,

520
00:16:46,520 --> 00:16:47,900
today's butcher's bill

521
00:16:47,900 --> 00:16:49,875
makes for
tomorrow's feast.

522
00:16:49,875 --> 00:16:54,560
So I suspect I'm
preaching to the choir

523
00:16:54,560 --> 00:16:56,690
that previous
work has said

524
00:16:56,690 --> 00:16:59,685
NDN is inherently
DDos resistant.

525
00:16:59,685 --> 00:17:01,610
Nevertheless, there are

526
00:17:01,610 --> 00:17:03,155
some angles of attack

527
00:17:03,155 --> 00:17:04,580
against NDM that could be

528
00:17:04,580 --> 00:17:07,140
used to exploit it
for a DDos attack.

529
00:17:07,140 --> 00:17:10,010
Lessons from the IP
DDos literature.

530
00:17:10,010 --> 00:17:12,500
Flow parody,
really important.

531
00:17:12,500 --> 00:17:14,870
In network state,
really important.

532
00:17:14,870 --> 00:17:17,450
Fine-grained in network
control filters,

533
00:17:17,450 --> 00:17:20,220
policy intent,
very important.

534
00:17:20,220 --> 00:17:23,170
Backpressure mechanisms,
very important.

535
00:17:23,170 --> 00:17:25,120
Inherent admission
control,

536
00:17:25,120 --> 00:17:28,280
very important and more.

537
00:17:28,310 --> 00:17:32,430
>> This is clear
motivation

538
00:17:32,430 --> 00:17:34,710
for what needs to
be done if you

539
00:17:34,710 --> 00:17:37,095
want to produce a
solution to address

540
00:17:37,095 --> 00:17:39,840
the outstanding issues
the NDN may face

541
00:17:39,840 --> 00:17:41,310
if it inter-domain
capacity

542
00:17:41,310 --> 00:17:42,720
when someone try
to attack it.

543
00:17:42,720 --> 00:17:43,650
I think what I

544
00:17:43,650 --> 00:17:45,300
probably should have
led off with this,

545
00:17:45,300 --> 00:17:47,130
if you start off
with something like

546
00:17:47,130 --> 00:17:49,200
a DDoS resistant
architecture,

547
00:17:49,200 --> 00:17:50,670
that should be
cold comfort

548
00:17:50,670 --> 00:17:52,215
to you if that's where
you're going to stop.

549
00:17:52,215 --> 00:17:54,420
Because that's what
people started off with,

550
00:17:54,420 --> 00:17:55,350
with any number of

551
00:17:55,350 --> 00:17:56,670
different networking
approaches

552
00:17:56,670 --> 00:17:57,600
until miscreants found

553
00:17:57,600 --> 00:17:59,070
a really clever
way to attack.

554
00:17:59,070 --> 00:18:00,435
The attacks will come.

555
00:18:00,435 --> 00:18:01,545
They absolutely will come,

556
00:18:01,545 --> 00:18:02,880
and they will work
around whatever

557
00:18:02,880 --> 00:18:04,125
you've left from before.

558
00:18:04,125 --> 00:18:05,850
This will always
be an arms race.

559
00:18:05,850 --> 00:18:07,320
The benefit is, if

560
00:18:07,320 --> 00:18:09,015
you look at what's
happened in the past,

561
00:18:09,015 --> 00:18:12,250
it can help you for what
comes in the future.

562
00:18:13,460 --> 00:18:15,780
I'm reasonably
closed on time,

563
00:18:15,780 --> 00:18:17,190
but I got a
question though, so

564
00:18:17,190 --> 00:18:19,050
maybe that gives me grads.

565
00:18:19,050 --> 00:18:21,930
In our work, what I

566
00:18:21,930 --> 00:18:24,720
think we saw is that
the DDoS threat,

567
00:18:24,720 --> 00:18:27,090
the DDoS problem in
today's IP Internet,

568
00:18:27,090 --> 00:18:28,605
is a clarion call

569
00:18:28,605 --> 00:18:31,240
for an architecture
like NDN.

570
00:18:31,370 --> 00:18:34,320
I will not read
ahead of my slides.

571
00:18:34,320 --> 00:18:36,045
So one of our
main findings

572
00:18:36,045 --> 00:18:37,860
was that misaligning

573
00:18:37,860 --> 00:18:39,810
deployment costs
with benefits is

574
00:18:39,810 --> 00:18:40,920
a non-starter for at

575
00:18:40,920 --> 00:18:42,705
least these types
of solutions.

576
00:18:42,705 --> 00:18:44,985
And this is where NDN
really stands out.

577
00:18:44,985 --> 00:18:47,550
I think this is probably
my main take-home.

578
00:18:47,550 --> 00:18:49,350
NDN's general purpose is

579
00:18:49,350 --> 00:18:51,000
what makes it
such a standout.

580
00:18:51,000 --> 00:18:54,510
The true benefit of
NDN is that, yes,

581
00:18:54,510 --> 00:18:56,820
it is inherently
DDoS resistant,

582
00:18:56,820 --> 00:18:57,900
and yes, it can be

583
00:18:57,900 --> 00:18:59,865
enhanced to be
even more robust.

584
00:18:59,865 --> 00:19:01,380
But it's also all
these other things

585
00:19:01,380 --> 00:19:03,660
that we're hearing about
today and tomorrow.

586
00:19:03,660 --> 00:19:06,810
Said simply, when
people propose

587
00:19:06,810 --> 00:19:09,060
a DDoS remediation
approach that

588
00:19:09,060 --> 00:19:10,620
requires a
forklift upgrade

589
00:19:10,620 --> 00:19:11,475
throughout the Internet,

590
00:19:11,475 --> 00:19:12,660
we could argue about
whether that's

591
00:19:12,660 --> 00:19:13,875
a good idea or a bad idea.

592
00:19:13,875 --> 00:19:15,660
But if you do
it and you get

593
00:19:15,660 --> 00:19:17,940
just a DDoS
defense solution,

594
00:19:17,940 --> 00:19:19,080
then that's a
big outlay for

595
00:19:19,080 --> 00:19:20,730
a very singular problem.

596
00:19:20,730 --> 00:19:23,205
And that's why
NDN stands out.

597
00:19:23,205 --> 00:19:25,980
It is this set of
things it's better at.

598
00:19:25,980 --> 00:19:27,830
Among them is this massive

599
00:19:27,830 --> 00:19:30,360
multi-billion-dollar-a-year
problem

600
00:19:30,360 --> 00:19:31,335
that faces the Internet,

601
00:19:31,335 --> 00:19:32,940
in addition to
everything else.

602
00:19:32,940 --> 00:19:35,760
So here where you
too roll into

603
00:19:35,760 --> 00:19:37,320
NDN saying that DDoS

604
00:19:37,320 --> 00:19:38,640
is a big part
of the story.

605
00:19:38,640 --> 00:19:39,750
It would then be
followed with

606
00:19:39,750 --> 00:19:41,685
everything else
it's good at too.

607
00:19:41,685 --> 00:19:44,685
So the dire state
of DDoS is like

608
00:19:44,685 --> 00:19:46,365
a clear motivation for

609
00:19:46,365 --> 00:19:47,370
everything else that we

610
00:19:47,370 --> 00:19:48,795
need with the NDN as well.

611
00:19:48,795 --> 00:19:50,550
And for those that
are wondering,

612
00:19:50,550 --> 00:19:52,350
our paper is currently
under submission.

613
00:19:52,350 --> 00:19:55,140
So with that, I
have it pretty

614
00:19:55,140 --> 00:20:02,550
close on time [APPLAUSE].

615
00:20:02,550 --> 00:20:09,550
>> Any questions for him?

616
00:20:14,000 --> 00:20:16,260
>> What's the overhead for

617
00:20:16,260 --> 00:20:18,990
those mitigation as
a service providers?

618
00:20:18,990 --> 00:20:21,195
>> They're overhead.

619
00:20:21,195 --> 00:20:22,950
I don't know what
you mean exactly.

620
00:20:22,950 --> 00:20:24,240
Maybe I'll just
describe it.

621
00:20:24,240 --> 00:20:25,320
>> Are you forwarding
the traffic

622
00:20:25,320 --> 00:20:26,610
to them and then
they're clearing it,

623
00:20:26,610 --> 00:20:27,810
and then forwarding
it back to you?

624
00:20:27,810 --> 00:20:28,410
Is that the [OVERLAPPING].

625
00:20:28,410 --> 00:20:29,640
>> For different
approaches, but the

626
00:20:29,640 --> 00:20:31,080
most common is
what they'll do is

627
00:20:31,080 --> 00:20:33,795
they will announce
your BGP IP prefix.

628
00:20:33,795 --> 00:20:35,400
They will basically
route hijack you,

629
00:20:35,400 --> 00:20:36,780
all traffic will
go to them,

630
00:20:36,780 --> 00:20:37,590
and then they'll form

631
00:20:37,590 --> 00:20:38,760
a tunnel to the
real service,

632
00:20:38,760 --> 00:20:39,900
a GRE tunnel or something,

633
00:20:39,900 --> 00:20:41,100
and send you the traffic

634
00:20:41,100 --> 00:20:42,870
after they've
scrubbed it clean.

635
00:20:42,870 --> 00:20:45,555
>> Does that
incorporate any delay?

636
00:20:45,555 --> 00:20:46,770
>> It does.

637
00:20:46,770 --> 00:20:49,440
[OVERLAPPING] The
principle motivation

638
00:20:49,440 --> 00:20:50,130
for that though is,

639
00:20:50,130 --> 00:20:52,050
if you are going to
succumb or go under

640
00:20:52,050 --> 00:20:54,910
because of an attack,
they'll keep you out.

641
00:20:54,980 --> 00:20:57,000
>> And I think
that there's

642
00:20:57,000 --> 00:20:58,635
one detail that's
important,

643
00:20:58,635 --> 00:21:00,390
that is, they can watch

644
00:21:00,390 --> 00:21:01,530
your traffic because they

645
00:21:01,530 --> 00:21:03,930
got your decryption key.

646
00:21:03,930 --> 00:21:05,940
>> If you have HTTPS,

647
00:21:05,940 --> 00:21:07,500
it doesn't work unless
you [OVERLAPPING].

648
00:21:07,500 --> 00:21:09,540
>> So think about
your essence of doing

649
00:21:09,540 --> 00:21:12,450
end-to-end security,
think it again.

650
00:21:12,450 --> 00:21:14,265
>> It's true, that's true.

651
00:21:14,265 --> 00:21:15,300
There's a fulsome set

652
00:21:15,300 --> 00:21:16,260
of discussions
that happen in

653
00:21:16,260 --> 00:21:17,370
back-offices
or places like

654
00:21:17,370 --> 00:21:19,200
the IETF that are
very entertaining.

655
00:21:19,200 --> 00:21:21,555
But I will say also that

656
00:21:21,555 --> 00:21:23,010
lots of folks escrow

657
00:21:23,010 --> 00:21:24,660
their keys to
CDNs as well.

658
00:21:24,660 --> 00:21:26,340
And that's not exactly

659
00:21:26,340 --> 00:21:27,150
what we're talking about,

660
00:21:27,150 --> 00:21:30,015
but I will say
it unfortunately

661
00:21:30,015 --> 00:21:33,090
becomes silent common
practice when you say,

662
00:21:33,090 --> 00:21:34,980
this isn't DDoS,
so I have a CDN,

663
00:21:34,980 --> 00:21:37,335
I just want really
low response times,

664
00:21:37,335 --> 00:21:38,310
but you're going
to have to have

665
00:21:38,310 --> 00:21:39,870
a copy of my private key.

666
00:21:39,870 --> 00:21:41,685
So looking at what

667
00:21:41,685 --> 00:21:43,830
works for CDNs might
actually also be,

668
00:21:43,830 --> 00:21:45,540
I'm a big fan of
using what we've

669
00:21:45,540 --> 00:21:47,385
got to get to where
we want to go.

670
00:21:47,385 --> 00:21:48,480
So being aware of what

671
00:21:48,480 --> 00:21:49,710
people are doing
and how it's

672
00:21:49,710 --> 00:21:51,090
a poor substitute for

673
00:21:51,090 --> 00:21:52,365
an architectural
approach is,

674
00:21:52,365 --> 00:22:12,630
I think an important
perspective [APPLAUSE]

675
00:22:12,630 --> 00:22:15,790
>> Alex, you're
coming up next.

676
00:22:22,280 --> 00:22:28,140
You may like [inaudible],

677
00:22:28,140 --> 00:22:29,250
which of course
is not needed.

678
00:22:29,250 --> 00:22:31,410
So all I'm going
to say is Alex is

679
00:22:31,410 --> 00:22:32,460
an Assistant Professor of

680
00:22:32,460 --> 00:22:33,990
Florida International
University,

681
00:22:33,990 --> 00:22:37,860
and he has given
us a lot of blood,

682
00:22:37,860 --> 00:22:39,210
sweat, and tears about

683
00:22:39,210 --> 00:22:41,625
NDN over a very long time.

684
00:22:41,625 --> 00:22:44,785
Thank you, Alex.
So welcome, Alex.

685
00:22:44,785 --> 00:22:47,915
>> Thank you.
This work again,

686
00:22:47,915 --> 00:22:49,760
let's say it's a
preliminary work.

687
00:22:49,760 --> 00:22:51,950
I guess it's a little
bit intersected with

688
00:22:51,950 --> 00:22:54,455
the leaners done
in Memphis.

689
00:22:54,455 --> 00:22:57,100
But again, the objective
for this work is

690
00:22:57,100 --> 00:22:58,770
kind of apply the
schema approach

691
00:22:58,770 --> 00:23:00,390
for the access
control policies.

692
00:23:00,390 --> 00:23:02,280
And before kind of go to

693
00:23:02,280 --> 00:23:04,800
the little bit of details
of that approach,

694
00:23:04,800 --> 00:23:06,930
just a reminder, that
what we're dealing

695
00:23:06,930 --> 00:23:09,285
with NDN is
data-centric security.

696
00:23:09,285 --> 00:23:11,490
And a lot of work
that we did so far

697
00:23:11,490 --> 00:23:13,530
was focused on
authenticity part.

698
00:23:13,530 --> 00:23:15,570
So if each packet
is signed,

699
00:23:15,570 --> 00:23:18,600
keys are signed and
forming a chain.

700
00:23:18,600 --> 00:23:23,700
And from that we can use

701
00:23:23,700 --> 00:23:26,130
the schema to do
the automation

702
00:23:26,130 --> 00:23:29,025
of the sign-in process,
verification process.

703
00:23:29,025 --> 00:23:31,530
But the same thing
technically applies

704
00:23:31,530 --> 00:23:35,700
for the
confidentiality part.

705
00:23:35,700 --> 00:23:37,965
So that each packet
can be encrypted,

706
00:23:37,965 --> 00:23:40,920
meaning that they have

707
00:23:40,920 --> 00:23:46,815
the data-centric
encryption in this sense.

708
00:23:46,815 --> 00:23:48,750
This one, I just wanted to

709
00:23:48,750 --> 00:23:50,550
emphasize this
slide a little bit

710
00:23:50,550 --> 00:23:52,740
more because this
is what creates

711
00:23:52,740 --> 00:23:54,930
a really big difference
from the today

712
00:23:54,930 --> 00:23:57,405
access control
solutions and,

713
00:23:57,405 --> 00:23:59,685
potentially have different
properties of how

714
00:23:59,685 --> 00:24:02,475
the data is being secured
in the first place.

715
00:24:02,475 --> 00:24:04,290
So instead of dealing

716
00:24:04,290 --> 00:24:07,080
with always some kind of

717
00:24:07,080 --> 00:24:09,660
server that
restricts access at

718
00:24:09,660 --> 00:24:11,280
the right moment
that you do

719
00:24:11,280 --> 00:24:13,320
in the request
to the data,

720
00:24:13,320 --> 00:24:15,255
like I put in the picture.

721
00:24:15,255 --> 00:24:17,820
We're potentially
dealing with

722
00:24:17,820 --> 00:24:20,490
the security that is
embedded in the data.

723
00:24:20,490 --> 00:24:22,200
I'm not saying that
the first approach

724
00:24:22,200 --> 00:24:23,880
cannot be
implemented in NDN.

725
00:24:23,880 --> 00:24:25,485
You can always implement

726
00:24:25,485 --> 00:24:27,210
this type of
facility where you

727
00:24:27,210 --> 00:24:28,980
have basically a server

728
00:24:28,980 --> 00:24:30,630
that always
protects the data.

729
00:24:30,630 --> 00:24:33,900
And when somebody's
requesting data,

730
00:24:33,900 --> 00:24:36,060
it provides some
authentication credentials,

731
00:24:36,060 --> 00:24:37,695
then the data being
encrypted for

732
00:24:37,695 --> 00:24:39,030
that specific person or

733
00:24:39,030 --> 00:24:41,055
a data session encrypted
for that person.

734
00:24:41,055 --> 00:24:42,420
Again, this is all that's

735
00:24:42,420 --> 00:24:44,850
possible and maybe
for some approaches,

736
00:24:44,850 --> 00:24:47,805
it's still needed
to be implemented.

737
00:24:47,805 --> 00:24:50,340
But we also
want to explore

738
00:24:50,340 --> 00:24:51,990
the other approach
where the data

739
00:24:51,990 --> 00:24:54,345
itself has the properties.

740
00:24:54,345 --> 00:24:57,000
And security properties.

741
00:24:57,000 --> 00:24:58,290
So it's going to be placed

742
00:24:58,290 --> 00:24:59,985
anywhere and whoever

743
00:24:59,985 --> 00:25:01,740
has access to
this data can

744
00:25:01,740 --> 00:25:03,795
effectively get it
and then decrypt it.

745
00:25:03,795 --> 00:25:06,105
And who doesn't have
access to the data,

746
00:25:06,105 --> 00:25:08,130
okay, that's where
comes the implication.

747
00:25:08,130 --> 00:25:09,765
You still can get the data

748
00:25:09,765 --> 00:25:11,370
like encrypted version,

749
00:25:11,370 --> 00:25:12,600
but you should
not be able to

750
00:25:12,600 --> 00:25:14,655
access, you can
decrypt it,

751
00:25:14,655 --> 00:25:16,020
at least in principle,

752
00:25:16,020 --> 00:25:18,030
without using all those

753
00:25:18,030 --> 00:25:21,210
fancy decryption
hacking mechanism

754
00:25:21,210 --> 00:25:23,475
that takes other years.

755
00:25:23,475 --> 00:25:26,115
I'm not going to there.

756
00:25:26,115 --> 00:25:29,160
So with this
data-centric security,

757
00:25:29,160 --> 00:25:32,370
the question is, how
to define this policy?

758
00:25:32,370 --> 00:25:34,600
Who sets this policy?

759
00:25:34,730 --> 00:25:37,830
Easy question,
whoever owns

760
00:25:37,830 --> 00:25:39,060
the data or logically owns

761
00:25:39,060 --> 00:25:40,440
the data should
define the policy,

762
00:25:40,440 --> 00:25:42,645
but rather how this
policy looks like?

763
00:25:42,645 --> 00:25:44,205
How's it enforces?

764
00:25:44,205 --> 00:25:46,590
And then other question
that I'm not going to

765
00:25:46,590 --> 00:25:47,685
answer in this talk at all

766
00:25:47,685 --> 00:25:50,290
is about long-term
security.

767
00:25:50,630 --> 00:25:54,000
The question about
the data itself.

768
00:25:54,000 --> 00:25:55,830
I want to
emphasize because

769
00:25:55,830 --> 00:25:56,970
there were some
conversation

770
00:25:56,970 --> 00:25:59,505
on Slack about this point.

771
00:25:59,505 --> 00:26:01,890
The fact that a lot of

772
00:26:01,890 --> 00:26:03,930
times in NDN we're
talking about

773
00:26:03,930 --> 00:26:06,240
the data that
been produced

774
00:26:06,240 --> 00:26:07,500
and stays in the network

775
00:26:07,500 --> 00:26:09,405
for a long period of time.

776
00:26:09,405 --> 00:26:11,370
Whether it's true
or not true,

777
00:26:11,370 --> 00:26:13,440
this assumption
that this data

778
00:26:13,440 --> 00:26:14,520
exists forever,

779
00:26:14,520 --> 00:26:17,280
or is the data a
femoral in some sense,

780
00:26:17,280 --> 00:26:18,690
it's a big question.

781
00:26:18,690 --> 00:26:21,290
And the work for

782
00:26:21,290 --> 00:26:22,520
the data-centric
security and

783
00:26:22,520 --> 00:26:23,840
name based access control,

784
00:26:23,840 --> 00:26:26,780
it's more for constantly

785
00:26:26,780 --> 00:26:28,625
produce data and with

786
00:26:28,625 --> 00:26:31,110
usability of this data,

787
00:26:31,210 --> 00:26:34,815
having a limited
time span basically.

788
00:26:34,815 --> 00:26:36,195
Because this simplifies

789
00:26:36,195 --> 00:26:37,680
problems significantly.

790
00:26:37,680 --> 00:26:40,185
You don't deal with
the thing like,

791
00:26:40,185 --> 00:26:43,110
what happened to the
data in one year.

792
00:26:43,110 --> 00:26:44,190
Like how can I change

793
00:26:44,190 --> 00:26:45,900
access to the past data?

794
00:26:45,900 --> 00:26:48,315
So those are really
hard problems and,

795
00:26:48,315 --> 00:26:48,900
I don't know,

796
00:26:48,900 --> 00:26:51,390
maybe the first
solution where you have

797
00:26:51,390 --> 00:26:53,490
a gateway for that

798
00:26:53,490 --> 00:26:54,765
long term data would be

799
00:26:54,765 --> 00:26:57,310
a preferable solution
to that one.

800
00:26:57,500 --> 00:26:58,600
>> [inaudible]

801
00:26:58,600 --> 00:27:00,690
time limit network
magnitude is?

802
00:27:00,690 --> 00:27:02,280
Is it seconds,
is it minutes,

803
00:27:02,280 --> 00:27:08,558
is it hours? [inaudible]

804
00:27:08,558 --> 00:27:10,120
>> I don't even have the

805
00:27:10,120 --> 00:27:12,230
answer to that question.

806
00:27:12,360 --> 00:27:16,210
Again, because if
I give the answer,

807
00:27:16,210 --> 00:27:17,560
somebody can come up with

808
00:27:17,560 --> 00:27:20,740
a very counterexample
of what would happen if

809
00:27:20,740 --> 00:27:22,180
I hack you in five minutes

810
00:27:22,180 --> 00:27:23,380
so I could change access

811
00:27:23,380 --> 00:27:26,875
in two seconds for
some of the data?

812
00:27:26,875 --> 00:27:30,650
It's hard to give
specific timeline.

813
00:27:30,780 --> 00:27:32,500
But in this case,

814
00:27:32,500 --> 00:27:33,910
the focus of
this work is on

815
00:27:33,910 --> 00:27:34,960
schema so I just

816
00:27:34,960 --> 00:27:36,625
keep introducing
this concept.

817
00:27:36,625 --> 00:27:39,670
So as I already mentioned,

818
00:27:39,670 --> 00:27:41,050
for the name-based
access control,

819
00:27:41,050 --> 00:27:43,420
this is the approach we
have explored already

820
00:27:43,420 --> 00:27:46,615
and hopefully many
of you are familiar.

821
00:27:46,615 --> 00:27:48,610
We have the concept of

822
00:27:48,610 --> 00:27:50,620
the access manager
who defines

823
00:27:50,620 --> 00:27:54,265
the policy and how the
policy looks like.

824
00:27:54,265 --> 00:27:56,110
It's actually
effectively using

825
00:27:56,110 --> 00:27:57,190
the key encryption key

826
00:27:57,190 --> 00:27:58,405
and key decryption key.

827
00:27:58,405 --> 00:28:00,280
So with the key
encryption key,

828
00:28:00,280 --> 00:28:02,260
this defines some kind

829
00:28:02,260 --> 00:28:03,865
of a granularity
of the control,

830
00:28:03,865 --> 00:28:06,475
like everything that falls

831
00:28:06,475 --> 00:28:09,085
under a single
encryption key,

832
00:28:09,085 --> 00:28:11,755
you can control it
as a single unit.

833
00:28:11,755 --> 00:28:13,705
And there are
some crypto keys,

834
00:28:13,705 --> 00:28:15,370
the different
ones underneath

835
00:28:15,370 --> 00:28:17,035
but still you can control.

836
00:28:17,035 --> 00:28:19,360
For the decryption
key, basically,

837
00:28:19,360 --> 00:28:22,330
if you give access to
someone by encrypting

838
00:28:22,330 --> 00:28:25,660
this decryption key
using his public key,

839
00:28:25,660 --> 00:28:27,490
for example, then he will

840
00:28:27,490 --> 00:28:29,170
get access to

841
00:28:29,170 --> 00:28:32,120
the whole granularity
of the data.

842
00:28:32,490 --> 00:28:35,140
So the enforcement
actually at

843
00:28:35,140 --> 00:28:37,435
the data production stage,

844
00:28:37,435 --> 00:28:39,640
kind of because
you encrypt

845
00:28:39,640 --> 00:28:41,485
data as soon as
you're producing

846
00:28:41,485 --> 00:28:43,480
and maybe for the
long-term stuff

847
00:28:43,480 --> 00:28:45,385
you have to
re-encrypt the data.

848
00:28:45,385 --> 00:28:48,475
But again, that's much,
much longer story.

849
00:28:48,475 --> 00:28:50,425
And again, I can bring up

850
00:28:50,425 --> 00:28:53,695
the concept of granularity
because this are

851
00:28:53,695 --> 00:28:56,890
things that we introduced

852
00:28:56,890 --> 00:28:58,810
as part of an index
access control,

853
00:28:58,810 --> 00:29:00,820
but didn't really go into

854
00:29:00,820 --> 00:29:03,415
much detail of how it's
supposed to be doing.

855
00:29:03,415 --> 00:29:06,445
So for example,
each data packet,

856
00:29:06,445 --> 00:29:08,170
it's not necessarily that

857
00:29:08,170 --> 00:29:09,370
the data packet will

858
00:29:09,370 --> 00:29:13,000
belong to so-called
single granularity,

859
00:29:13,000 --> 00:29:15,130
on the flip side,
is that there's

860
00:29:15,130 --> 00:29:16,450
only one way to control

861
00:29:16,450 --> 00:29:18,145
access to a single
data packet.

862
00:29:18,145 --> 00:29:20,350
Maybe this data
packet belongs to

863
00:29:20,350 --> 00:29:22,930
the dataset of the
course data that is

864
00:29:22,930 --> 00:29:25,300
access to more open

865
00:29:25,300 --> 00:29:26,710
and the same time this

866
00:29:26,710 --> 00:29:27,940
data packet
also belongs to

867
00:29:27,940 --> 00:29:33,090
the more restricted
access of data.

868
00:29:33,090 --> 00:29:34,875
So you want to have

869
00:29:34,875 --> 00:29:37,530
different abilities
to do the same stuff.

870
00:29:37,530 --> 00:29:39,420
Again, in principle with

871
00:29:39,420 --> 00:29:41,940
the [inaudible] X
control is possible,

872
00:29:41,940 --> 00:29:43,650
but there are
some implications

873
00:29:43,650 --> 00:29:45,570
that I mentioned
in a minute.

874
00:29:45,570 --> 00:29:48,140
For the flip
side, the KDK,

875
00:29:48,140 --> 00:29:51,670
again is for the few
ways of how to deal with

876
00:29:51,670 --> 00:29:53,980
the KDK distribution when

877
00:29:53,980 --> 00:29:56,620
played with the
attribute-based encryption.

878
00:29:56,620 --> 00:29:57,910
Again, in all cases,

879
00:29:57,910 --> 00:30:00,160
there are some
implications of that.

880
00:30:00,160 --> 00:30:02,620
And if I give a little
bit more on, again,

881
00:30:02,620 --> 00:30:03,970
granularity, I'm

882
00:30:03,970 --> 00:30:05,875
just basically
restating myself.

883
00:30:05,875 --> 00:30:07,765
But in this, for this one,

884
00:30:07,765 --> 00:30:09,580
I just want to
get more specific

885
00:30:09,580 --> 00:30:11,289
what I mean with
granularity.

886
00:30:11,289 --> 00:30:12,640
And in this work

887
00:30:12,640 --> 00:30:14,530
we try to leverage
the naming.

888
00:30:14,530 --> 00:30:16,585
So if the data has a name,

889
00:30:16,585 --> 00:30:17,995
it has a hierarchical name

890
00:30:17,995 --> 00:30:20,785
if the data still has
hierarchical names,

891
00:30:20,785 --> 00:30:22,435
so we can actually
leverage this

892
00:30:22,435 --> 00:30:24,700
for the defining
granularity.

893
00:30:24,700 --> 00:30:29,890
And it doesn't mean you

894
00:30:29,890 --> 00:30:31,960
have this granular for

895
00:30:31,960 --> 00:30:34,480
every single level
of hierarchy.

896
00:30:34,480 --> 00:30:37,390
This basically
just defines

897
00:30:37,390 --> 00:30:39,670
what kind of datasets
you want to control.

898
00:30:39,670 --> 00:30:42,820
But if by the
schema operations,

899
00:30:42,820 --> 00:30:45,055
there's only one set
that being controlled,

900
00:30:45,055 --> 00:30:46,855
then there will be
one granularity.

901
00:30:46,855 --> 00:30:48,340
If there could be

902
00:30:48,340 --> 00:30:50,230
multiple ways you want
to control this data,

903
00:30:50,230 --> 00:30:51,280
then it's somehow will

904
00:30:51,280 --> 00:30:53,244
create multiple
granularities.

905
00:30:53,244 --> 00:30:55,660
There are some, a
little bit of details.

906
00:30:55,660 --> 00:30:58,150
I probably not going to
go to the highlights,

907
00:30:58,150 --> 00:30:59,260
but effectively the access

908
00:30:59,260 --> 00:31:01,060
manager producer
that produce data,

909
00:31:01,060 --> 00:31:02,950
consumer that
consumes data.

910
00:31:02,950 --> 00:31:06,265
In this one I
want to highlight

911
00:31:06,265 --> 00:31:09,910
is the actual enforcement

912
00:31:09,910 --> 00:31:12,280
building blocks
on the ground,

913
00:31:12,280 --> 00:31:14,335
how things are
actually working.

914
00:31:14,335 --> 00:31:20,320
So whenever
something follows

915
00:31:20,320 --> 00:31:22,990
the specific granularity
it means that

916
00:31:22,990 --> 00:31:26,770
the encryption key for
the specific data or

917
00:31:26,770 --> 00:31:29,620
specific small subset
is being encrypted by

918
00:31:29,620 --> 00:31:32,920
the key key for
this granularity.

919
00:31:32,920 --> 00:31:34,180
So in this case,
I showed that

920
00:31:34,180 --> 00:31:36,430
this specific key,

921
00:31:36,430 --> 00:31:39,010
at a single data
packet of network,

922
00:31:39,010 --> 00:31:41,170
a few data packs that
were encrypted by

923
00:31:41,170 --> 00:31:43,900
this symmetric key subject

924
00:31:43,900 --> 00:31:46,310
to three granularities
at the same time,

925
00:31:46,310 --> 00:31:47,790
meaning that you

926
00:31:47,790 --> 00:31:49,305
can control them
independently.

927
00:31:49,305 --> 00:31:50,715
So either give access to

928
00:31:50,715 --> 00:31:52,800
everybody using
the one or give

929
00:31:52,800 --> 00:31:55,560
access to very
restricted amount

930
00:31:55,560 --> 00:31:57,765
of people on
the flip side.

931
00:31:57,765 --> 00:32:03,625
For the KDK, the
picture is similar,

932
00:32:03,625 --> 00:32:07,840
but there's a few
complications.

933
00:32:07,840 --> 00:32:10,075
So because there's
multiple granularities,

934
00:32:10,075 --> 00:32:12,820
granularity you have
multiple parties

935
00:32:12,820 --> 00:32:15,490
that you can
grant access to.

936
00:32:15,490 --> 00:32:18,580
And that's the end
of the sentence.

937
00:32:18,580 --> 00:32:20,950
And the reason I'm

938
00:32:20,950 --> 00:32:23,530
bringing this names here
is just to highlight

939
00:32:23,530 --> 00:32:26,800
a complexity of how
many things needs to

940
00:32:26,800 --> 00:32:31,240
happen in order to
grant permissions.

941
00:32:31,240 --> 00:32:33,010
So you have to generate

942
00:32:33,010 --> 00:32:35,155
the key key for
appropriate things.

943
00:32:35,155 --> 00:32:37,600
You have to potentially

944
00:32:37,600 --> 00:32:39,115
create multiple key keys.

945
00:32:39,115 --> 00:32:42,880
You have to inform
the data producer

946
00:32:42,880 --> 00:32:44,920
that which
specific datasets

947
00:32:44,920 --> 00:32:47,830
needs to be signed
by which specific,

948
00:32:47,830 --> 00:32:49,720
I'm simplifying
the picture,

949
00:32:49,720 --> 00:32:51,670
but what kind of

950
00:32:51,670 --> 00:32:53,800
encryption key you're
supposed to use.

951
00:32:53,800 --> 00:32:58,000
And on the flip side,
for the consumer side,

952
00:32:58,000 --> 00:33:00,100
and this is the problem
that we actually face

953
00:33:00,100 --> 00:33:04,165
before is I can
get the data,

954
00:33:04,165 --> 00:33:12,100
data indicates which
symmetric key was used.

955
00:33:12,100 --> 00:33:14,140
But then I don't
necessarily know

956
00:33:14,140 --> 00:33:16,300
which policy it falls

957
00:33:16,300 --> 00:33:17,890
under and whether I

958
00:33:17,890 --> 00:33:20,020
have access to
this policy.

959
00:33:20,020 --> 00:33:22,690
So the way we can
and this is kind of

960
00:33:22,690 --> 00:33:25,870
highlight my
current state of

961
00:33:25,870 --> 00:33:29,470
affairs is the fact
that we did it for

962
00:33:29,470 --> 00:33:31,570
cheating in a
[inaudible] X control

963
00:33:31,570 --> 00:33:33,685
for the consumption part,

964
00:33:33,685 --> 00:33:35,110
we just assume there's

965
00:33:35,110 --> 00:33:37,750
a single granularity for

966
00:33:37,750 --> 00:33:39,355
a single piece of data.

967
00:33:39,355 --> 00:33:42,730
So if we ask for
the prefix of CK,

968
00:33:42,730 --> 00:33:44,770
it will give you
a data packet

969
00:33:44,770 --> 00:33:46,150
that has CK encrypted

970
00:33:46,150 --> 00:33:47,890
by the specific
policy and we

971
00:33:47,890 --> 00:33:50,215
just assume that
only one exists.

972
00:33:50,215 --> 00:33:52,675
And then by somehow magic,

973
00:33:52,675 --> 00:33:56,440
just extract from
this policy,

974
00:33:56,440 --> 00:33:59,800
you can convert this
key key into the KDK

975
00:33:59,800 --> 00:34:02,050
and append my own key

976
00:34:02,050 --> 00:34:03,100
and assume that I will

977
00:34:03,100 --> 00:34:04,675
ever have access
to this policy.

978
00:34:04,675 --> 00:34:07,660
If I get the data packet
back, I have access.

979
00:34:07,660 --> 00:34:08,770
If I don't have
data packet

980
00:34:08,770 --> 00:34:10,555
back, I don't have access.

981
00:34:10,555 --> 00:34:12,520
But it's a little
bit of complicated.

982
00:34:12,520 --> 00:34:14,740
And if you have
multiple policies

983
00:34:14,740 --> 00:34:17,500
and multiple keys
that you own,

984
00:34:17,500 --> 00:34:21,820
is the question what
is the process to

985
00:34:21,820 --> 00:34:23,740
actually determine
whether you have

986
00:34:23,740 --> 00:34:24,820
access and under which

987
00:34:24,820 --> 00:34:26,350
policy you may
have access to.

988
00:34:26,350 --> 00:34:29,800
So what I'm saying is
the motivation work

989
00:34:29,800 --> 00:34:34,270
for the SEANAC,

990
00:34:34,270 --> 00:34:37,150
I forgot what it
even stands for.

991
00:34:37,150 --> 00:34:39,820
Somewhere access
controls somewhere

992
00:34:39,820 --> 00:34:42,925
like a schema encryption.

993
00:34:42,925 --> 00:34:45,955
But essentially we had

994
00:34:45,955 --> 00:34:48,610
a long conversation of
how exactly to realize

995
00:34:48,610 --> 00:34:51,820
this stuff and invented

996
00:34:51,820 --> 00:34:56,860
Versec inspired
schema policy.

997
00:34:56,860 --> 00:35:02,020
>> Schemas which
end up to be

998
00:35:02,020 --> 00:35:04,465
separate schemas one
for the encryption

999
00:35:04,465 --> 00:35:08,095
and one for the actual
access control.

1000
00:35:08,095 --> 00:35:10,195
This work is still
preliminary,

1001
00:35:10,195 --> 00:35:12,745
so we defined, we
did a few examples.

1002
00:35:12,745 --> 00:35:14,920
And this is just
one example

1003
00:35:14,920 --> 00:35:17,030
of this granularity.

1004
00:35:17,250 --> 00:35:19,360
If you look at
this picture,

1005
00:35:19,360 --> 00:35:21,430
you may see that
it resembles

1006
00:35:21,430 --> 00:35:22,840
the same format that

1007
00:35:22,840 --> 00:35:25,345
was defined but their SEC,

1008
00:35:25,345 --> 00:35:28,030
but for specifically
the encryption.

1009
00:35:28,030 --> 00:35:30,940
So there is a
publication that

1010
00:35:30,940 --> 00:35:32,500
defines how it should be

1011
00:35:32,500 --> 00:35:34,705
encrypted, what locations.

1012
00:35:34,705 --> 00:35:36,295
But again, the
objective of

1013
00:35:36,295 --> 00:35:38,860
the whole thing is not
the schema itself,

1014
00:35:38,860 --> 00:35:42,400
but rather use the schema
that is more like a

1015
00:35:42,400 --> 00:35:43,795
human readable, human

1016
00:35:43,795 --> 00:35:46,255
interpretable
specification.

1017
00:35:46,255 --> 00:35:48,580
I'm not saying that it's

1018
00:35:48,580 --> 00:35:50,845
very easily interpretable
specification,

1019
00:35:50,845 --> 00:35:53,710
but it's concise
representation to

1020
00:35:53,710 --> 00:35:56,845
define how I want to
control the data.

1021
00:35:56,845 --> 00:35:59,380
Because you may
define that I want

1022
00:35:59,380 --> 00:36:01,930
this publications
be encrypted

1023
00:36:01,930 --> 00:36:03,715
by this and this.

1024
00:36:03,715 --> 00:36:05,590
The other one be

1025
00:36:05,590 --> 00:36:09,190
encrypted by different
granularities.

1026
00:36:09,190 --> 00:36:10,675
But at the end,

1027
00:36:10,675 --> 00:36:12,745
I need to look for
the encryption part.

1028
00:36:12,745 --> 00:36:14,080
It needs to know how

1029
00:36:14,080 --> 00:36:15,775
many granularity
should exist.

1030
00:36:15,775 --> 00:36:17,170
And given a data packet,

1031
00:36:17,170 --> 00:36:19,610
which granularity
I should use.

1032
00:36:20,880 --> 00:36:23,290
The end result
is some form

1033
00:36:23,290 --> 00:36:25,885
of rules that needs to be

1034
00:36:25,885 --> 00:36:27,805
given to the data producer

1035
00:36:27,805 --> 00:36:30,160
of how to deal with the
key encryption keys.

1036
00:36:30,160 --> 00:36:31,555
Like produce the data,

1037
00:36:31,555 --> 00:36:34,105
I create the
symmetric key,

1038
00:36:34,105 --> 00:36:36,820
how many times I encrypt

1039
00:36:36,820 --> 00:36:39,470
the symmetric key into

1040
00:36:39,600 --> 00:36:42,160
to protect this datasets?

1041
00:36:42,160 --> 00:36:43,390
And this is the schema is

1042
00:36:43,390 --> 00:36:44,440
supposed to give us,

1043
00:36:44,440 --> 00:36:46,300
and this is the
preliminary way

1044
00:36:46,300 --> 00:36:48,190
of doing the process.

1045
00:36:48,190 --> 00:36:49,270
And I had actually

1046
00:36:49,270 --> 00:36:51,175
highlighted this
to any device

1047
00:36:51,175 --> 00:36:53,140
published under
this bedroom

1048
00:36:53,140 --> 00:36:55,460
camera will know.

1049
00:36:57,120 --> 00:36:59,860
And this name is
basically saying

1050
00:36:59,860 --> 00:37:01,360
that it only controlled

1051
00:37:01,360 --> 00:37:02,485
by the single granularity.

1052
00:37:02,485 --> 00:37:04,480
So there is no point
of creating anything

1053
00:37:04,480 --> 00:37:05,140
else and there'll be

1054
00:37:05,140 --> 00:37:07,330
just one key,
encryption key.

1055
00:37:07,330 --> 00:37:09,685
For the other one
for the thermostat,

1056
00:37:09,685 --> 00:37:11,875
there are actually two
paths of the control.

1057
00:37:11,875 --> 00:37:13,525
Basically the same data

1058
00:37:13,525 --> 00:37:16,070
can be controlled
in two places,

1059
00:37:16,070 --> 00:37:22,010
by two parties, by
two ways to control.

1060
00:37:22,010 --> 00:37:24,730
So for

1061
00:37:24,730 --> 00:37:26,380
the key encryption,
that's the objective.

1062
00:37:26,380 --> 00:37:28,240
So we want to know

1063
00:37:28,240 --> 00:37:29,470
how many keys should

1064
00:37:29,470 --> 00:37:30,970
exist in the first place.

1065
00:37:30,970 --> 00:37:32,635
For key decryption,

1066
00:37:32,635 --> 00:37:35,850
it's what we have

1067
00:37:35,850 --> 00:37:38,805
encrypting per
individual user.

1068
00:37:38,805 --> 00:37:40,920
How do you get
this users is also

1069
00:37:40,920 --> 00:37:43,860
the question and how
to get the keys,

1070
00:37:43,860 --> 00:37:44,955
how to verify the keys.

1071
00:37:44,955 --> 00:37:47,340
So it's the
problematic part.

1072
00:37:47,340 --> 00:37:50,310
So we try to hear,
again, preliminary.

1073
00:37:50,310 --> 00:37:52,440
Try to define concept of

1074
00:37:52,440 --> 00:37:54,300
role-based access
control granting.

1075
00:37:54,300 --> 00:37:56,175
So you can just write
a schema that says,

1076
00:37:56,175 --> 00:37:58,505
so in my home, I'm owner.

1077
00:37:58,505 --> 00:38:00,370
Maybe define
some set of keys

1078
00:38:00,370 --> 00:38:01,900
that belong to
the owner and

1079
00:38:01,900 --> 00:38:03,880
say this data

1080
00:38:03,880 --> 00:38:05,110
should be accessed
by the owner,

1081
00:38:05,110 --> 00:38:06,010
this data should not

1082
00:38:06,010 --> 00:38:07,105
be accessed by the owner.

1083
00:38:07,105 --> 00:38:08,770
And that's all that schema

1084
00:38:08,770 --> 00:38:11,829
defines, which
then converted,

1085
00:38:11,829 --> 00:38:13,690
first of all to the set of

1086
00:38:13,690 --> 00:38:15,955
the key decryption
keys that can be

1087
00:38:15,955 --> 00:38:18,460
pre-created or
automatically created

1088
00:38:18,460 --> 00:38:20,245
as the time goes,

1089
00:38:20,245 --> 00:38:22,840
published and so that's

1090
00:38:22,840 --> 00:38:25,015
one part of the key
decryption key.

1091
00:38:25,015 --> 00:38:27,310
Can be used by the
access manager

1092
00:38:27,310 --> 00:38:30,670
to predefine the access
control policies.

1093
00:38:30,670 --> 00:38:33,100
Those keys should
be pre-created.

1094
00:38:33,100 --> 00:38:36,370
On the flip side, it
also can be used by

1095
00:38:36,370 --> 00:38:39,070
the consumers to actually

1096
00:38:39,070 --> 00:38:42,475
know whether they have
access to the data,

1097
00:38:42,475 --> 00:38:45,700
and know how to
actually decrypt,

1098
00:38:45,700 --> 00:38:48,310
what is the path for
the data decryption.

1099
00:38:48,310 --> 00:38:49,750
So I think I highlighted

1100
00:38:49,750 --> 00:38:52,340
this in this example.

1101
00:38:52,500 --> 00:38:55,030
Again, what is
preliminary?

1102
00:38:55,030 --> 00:38:56,560
That's probably
all the results.

1103
00:38:56,560 --> 00:38:58,419
I show you two
more examples

1104
00:38:58,419 --> 00:39:00,820
that are probably not
going to go in detail,

1105
00:39:00,820 --> 00:39:01,960
but just to highlight

1106
00:39:01,960 --> 00:39:03,250
that we are planning
to use this

1107
00:39:03,250 --> 00:39:07,220
for the hydro project
or assesment.

1108
00:39:07,920 --> 00:39:09,940
So this is what we

1109
00:39:09,940 --> 00:39:11,170
wanted to talk
a long time,

1110
00:39:11,170 --> 00:39:13,420
but we keep postponing.

1111
00:39:13,420 --> 00:39:16,960
But we already defined
encryption schema for

1112
00:39:16,960 --> 00:39:22,690
the hydrophilic
sensitive data,

1113
00:39:22,690 --> 00:39:24,265
nonetheless
sensitive data.

1114
00:39:24,265 --> 00:39:26,230
And on the flip side for

1115
00:39:26,230 --> 00:39:29,290
the key decryption keys.

1116
00:39:29,290 --> 00:39:33,250
As I said, this is
totally preliminary work.

1117
00:39:33,250 --> 00:39:35,020
What we really
want to show

1118
00:39:35,020 --> 00:39:37,150
is for

1119
00:39:37,150 --> 00:39:39,160
the evolution part that
we haven't yet done,

1120
00:39:39,160 --> 00:39:41,770
is how easy is to actually

1121
00:39:41,770 --> 00:39:43,240
define those policies and

1122
00:39:43,240 --> 00:39:44,755
what is the result
of the policies.

1123
00:39:44,755 --> 00:39:48,550
So for example
instead of someone

1124
00:39:48,550 --> 00:39:49,900
needed to create
a bunch of

1125
00:39:49,900 --> 00:39:52,735
those key decryption
keys say by manually,

1126
00:39:52,735 --> 00:39:54,760
you just define a policy

1127
00:39:54,760 --> 00:39:56,650
or redefine the policy
and automatically

1128
00:39:56,650 --> 00:39:59,140
things have been created

1129
00:39:59,140 --> 00:40:01,089
and publish it
in repositories.

1130
00:40:01,089 --> 00:40:03,070
So set of the key
encryption keys that

1131
00:40:03,070 --> 00:40:06,895
potential rotates every
hour or every day.

1132
00:40:06,895 --> 00:40:09,205
And same for the
decryption keys.

1133
00:40:09,205 --> 00:40:12,745
As soon as a
person's public key

1134
00:40:12,745 --> 00:40:14,185
is discovered or if

1135
00:40:14,185 --> 00:40:16,510
somebody sends it
new keys being

1136
00:40:16,510 --> 00:40:17,920
published into
repository and

1137
00:40:17,920 --> 00:40:19,705
that entity is
given access.

1138
00:40:19,705 --> 00:40:22,450
So that's the basic
stuff that we working,

1139
00:40:22,450 --> 00:40:24,160
but there are tons
of other questions.

1140
00:40:24,160 --> 00:40:26,875
So for example, is

1141
00:40:26,875 --> 00:40:28,585
this policy is
public or not?

1142
00:40:28,585 --> 00:40:31,075
This depends on
the environment,

1143
00:40:31,075 --> 00:40:33,505
but also

1144
00:40:33,505 --> 00:40:36,205
maybe something needs
to be protected.

1145
00:40:36,205 --> 00:40:38,005
But maybe you don't
want to disclose

1146
00:40:38,005 --> 00:40:39,670
the complete schema
to everybody

1147
00:40:39,670 --> 00:40:41,860
who potentially can be
in this environment,

1148
00:40:41,860 --> 00:40:44,980
but only extract parts
that are relevant to

1149
00:40:44,980 --> 00:40:46,300
a specific entity and only

1150
00:40:46,300 --> 00:40:48,460
give the parser
to the entity.

1151
00:40:48,460 --> 00:40:50,785
We want to explore

1152
00:40:50,785 --> 00:40:53,244
not just granularity
based on the hierarchy,

1153
00:40:53,244 --> 00:40:55,600
but also some
additional things for

1154
00:40:55,600 --> 00:40:58,120
example time, geographical
coordination.

1155
00:40:58,120 --> 00:41:01,780
So this is the different
types of defining

1156
00:41:01,780 --> 00:41:03,580
the granularity that
not necessarily

1157
00:41:03,580 --> 00:41:05,680
directly related to
the name of the data,

1158
00:41:05,680 --> 00:41:08,200
but some metadata
of the data.

1159
00:41:08,200 --> 00:41:10,690
And there's some
many other issues

1160
00:41:10,690 --> 00:41:12,100
including the one
that the timing

1161
00:41:12,100 --> 00:41:13,660
issue that was mentioned.

1162
00:41:13,660 --> 00:41:15,670
I don't know how
long I went,

1163
00:41:15,670 --> 00:41:18,110
but I think it
was 20 minutes.

1164
00:41:19,380 --> 00:41:21,310
>> The first one
question [inaudible]

1165
00:41:21,310 --> 00:41:26,570
>> Are you sure the
microphone is on?

1166
00:41:26,790 --> 00:41:29,560
>> There you go.

1167
00:41:29,560 --> 00:41:31,690
>> Should be green light.

1168
00:41:31,690 --> 00:41:34,795
>> That works. So
Kathy is asking,

1169
00:41:34,795 --> 00:41:36,294
so is the idea

1170
00:41:36,294 --> 00:41:39,620
a single key containing
all the attributes?

1171
00:41:40,110 --> 00:41:42,800
>> Single key.

1172
00:41:43,080 --> 00:41:45,220
I have to process
this question.

1173
00:41:45,220 --> 00:41:48,070
I'm not capturing
it honestly.

1174
00:41:48,070 --> 00:41:50,485
>> Okay. So you
can answer it.

1175
00:41:50,485 --> 00:41:52,420
>> I will try to
process it and

1176
00:41:52,420 --> 00:41:54,700
maybe ask clarification
question,

1177
00:41:54,700 --> 00:41:56,125
what do you mean
by the attributes.

1178
00:41:56,125 --> 00:41:57,620
>> Yes Eric.

1179
00:41:59,430 --> 00:42:03,310
>> So I just had a
real quick question.

1180
00:42:03,310 --> 00:42:05,425
Just maybe more like
future work thing.

1181
00:42:05,425 --> 00:42:07,660
So security postures
are really hard to

1182
00:42:07,660 --> 00:42:08,740
encode just in general and

1183
00:42:08,740 --> 00:42:09,895
go into our back is not.

1184
00:42:09,895 --> 00:42:12,100
Now, have you thought
about like looking at

1185
00:42:12,100 --> 00:42:13,510
a user study or
looking at how

1186
00:42:13,510 --> 00:42:14,560
people have
actually wanted

1187
00:42:14,560 --> 00:42:15,595
to configure their homes?

1188
00:42:15,595 --> 00:42:17,110
NDN aside, just to see

1189
00:42:17,110 --> 00:42:18,490
how you would
model that and see

1190
00:42:18,490 --> 00:42:20,380
how easy it is to
make a schema or

1191
00:42:20,380 --> 00:42:21,670
what assistance
people would

1192
00:42:21,670 --> 00:42:23,335
actually need for
that because,

1193
00:42:23,335 --> 00:42:24,610
home users are not

1194
00:42:24,610 --> 00:42:26,920
always the most
cutting edge?

1195
00:42:26,920 --> 00:42:29,890
>> We haven't
looked. We've tried

1196
00:42:29,890 --> 00:42:32,840
to go with from
the home example.

1197
00:42:32,850 --> 00:42:36,835
Because one
side is simple.

1198
00:42:36,835 --> 00:42:39,535
On the flip side, it
can be fairly complex.

1199
00:42:39,535 --> 00:42:42,130
But yeah, like we did
not yet have looked in

1200
00:42:42,130 --> 00:42:43,780
detail in

1201
00:42:43,780 --> 00:42:46,250
existence stuff,
but then we should.

1202
00:42:47,250 --> 00:42:49,750
>> I think in the
interest of time,

1203
00:42:49,750 --> 00:42:51,010
we'll take other questions

1204
00:42:51,010 --> 00:42:52,120
offline. Thank you, Alex.

1205
00:42:52,120 --> 00:42:58,300
[APPLAUSE] So we're going

1206
00:42:58,300 --> 00:43:00,410
to go to the next talk.

1207
00:43:06,120 --> 00:43:09,410
>> Very good. Come on.

1208
00:43:10,830 --> 00:43:14,920
So Tianyuan Yu is
a PhD student.

1209
00:43:14,920 --> 00:43:15,625
>> Yeah.

1210
00:43:15,625 --> 00:43:19,990
>> You need to plug
in [OVERLAPPING].

1211
00:43:19,990 --> 00:43:23,170
>> Use the slides
[OVERLAPPING]

1212
00:43:23,170 --> 00:43:23,380
>> Something.

1213
00:43:23,380 --> 00:43:23,920
[inaudible] Yeah.
[OVERLAPPING].

1214
00:43:23,920 --> 00:43:26,710
>> Yeah.

1215
00:43:26,710 --> 00:43:29,380
>> So Tianyuan
is a PhD student

1216
00:43:29,380 --> 00:43:31,330
at UCLA, working
with Lixia,

1217
00:43:31,330 --> 00:43:33,385
and his interests are

1218
00:43:33,385 --> 00:43:36,700
in security bootstrapping,

1219
00:43:36,700 --> 00:43:40,705
certificate management,
and access control.

1220
00:43:40,705 --> 00:43:43,270
And he's going to
talk to us about

1221
00:43:43,270 --> 00:43:45,940
security bootstrapping
for Hydra.

1222
00:43:45,940 --> 00:43:50,350
>> Thanks, Alex for
giving that talk about

1223
00:43:50,350 --> 00:43:51,430
access control and this

1224
00:43:51,430 --> 00:43:52,540
talk we're going
to talk about

1225
00:43:52,540 --> 00:43:54,970
something happens before
the access control,

1226
00:43:54,970 --> 00:43:56,620
that is before getting

1227
00:43:56,620 --> 00:43:58,390
the encryption key
and decryption key,

1228
00:43:58,390 --> 00:43:59,545
how you get the name?

1229
00:43:59,545 --> 00:44:00,850
How to get a certificate?

1230
00:44:00,850 --> 00:44:02,590
Things like that and the

1231
00:44:02,590 --> 00:44:04,330
trust policy, the
trust schema.

1232
00:44:04,330 --> 00:44:06,730
And this work is

1233
00:44:06,730 --> 00:44:08,590
done by the Hydra
team and especially I

1234
00:44:08,590 --> 00:44:09,640
want to thank Alex for

1235
00:44:09,640 --> 00:44:11,470
his valuable comments to

1236
00:44:11,470 --> 00:44:13,610
making this package work.

1237
00:44:14,280 --> 00:44:17,050
For people who don't
know Hydra yet.

1238
00:44:17,050 --> 00:44:19,750
This is a federated
file storage project.

1239
00:44:19,750 --> 00:44:24,100
We have organizations
that contribute to file

1240
00:44:24,100 --> 00:44:25,660
servers into

1241
00:44:25,660 --> 00:44:28,555
some authority
file storage

1242
00:44:28,555 --> 00:44:29,725
like the demo shows,

1243
00:44:29,725 --> 00:44:31,750
and they share data
with each other.

1244
00:44:31,750 --> 00:44:33,970
And the users running

1245
00:44:33,970 --> 00:44:35,830
apps side down let's say

1246
00:44:35,830 --> 00:44:36,400
their laptops or

1247
00:44:36,400 --> 00:44:38,050
personal computers
and try to

1248
00:44:38,050 --> 00:44:39,190
upload the
individual files

1249
00:44:39,190 --> 00:44:40,735
or download
individual files.

1250
00:44:40,735 --> 00:44:42,460
And we have a Hydra,

1251
00:44:42,460 --> 00:44:44,995
say Network
Operating Center

1252
00:44:44,995 --> 00:44:46,615
actually manage the Hydra

1253
00:44:46,615 --> 00:44:48,520
apps on the user side.

1254
00:44:48,520 --> 00:44:50,605
On the server side,

1255
00:44:50,605 --> 00:44:52,150
especially where
I'm managing

1256
00:44:52,150 --> 00:44:53,470
the trust
relations and the

1257
00:44:53,470 --> 00:44:55,435
user-written
in red access.

1258
00:44:55,435 --> 00:44:58,570
And this Hydra app and

1259
00:44:58,570 --> 00:45:00,295
the Hydra NOC make

1260
00:45:00,295 --> 00:45:02,635
a trusted domain for
the Hydra application.

1261
00:45:02,635 --> 00:45:04,930
Which means the
Hydra NOC is

1262
00:45:04,930 --> 00:45:06,865
really a domain controller

1263
00:45:06,865 --> 00:45:08,860
of this application.

1264
00:45:08,860 --> 00:45:11,350
Now the question
is, how to make

1265
00:45:11,350 --> 00:45:12,640
the system work and how

1266
00:45:12,640 --> 00:45:14,720
to make the system
work securely.

1267
00:45:14,720 --> 00:45:17,940
And in order to enable

1268
00:45:17,940 --> 00:45:19,110
the Hydra application

1269
00:45:19,110 --> 00:45:21,345
as to clearly communicate,

1270
00:45:21,345 --> 00:45:23,820
we need some pieces
to be configured.

1271
00:45:23,820 --> 00:45:26,610
First, we need a trust
anchor because you

1272
00:45:26,610 --> 00:45:29,615
know who should be the
source of the trust,

1273
00:45:29,615 --> 00:45:31,165
which should be the Hydra

1274
00:45:31,165 --> 00:45:33,280
NOC self-signed
certificate

1275
00:45:33,280 --> 00:45:35,620
because it's really
the domain controller.

1276
00:45:35,620 --> 00:45:37,780
And so you know

1277
00:45:37,780 --> 00:45:40,390
this is the source of
the entire domain.

1278
00:45:40,390 --> 00:45:42,520
Then as a user application

1279
00:45:42,520 --> 00:45:44,020
or your server
application,

1280
00:45:44,020 --> 00:45:46,105
you need to get a
name, a Hydra name

1281
00:45:46,105 --> 00:45:48,910
and that name should
get certified.

1282
00:45:48,910 --> 00:45:52,930
So that name also

1283
00:45:52,930 --> 00:45:54,895
need to follow specific
naming conventions.

1284
00:45:54,895 --> 00:45:56,290
That should be
a Hydra name.

1285
00:45:56,290 --> 00:45:57,730
Say I can have

1286
00:45:57,730 --> 00:46:00,670
a name /hydra/node
to represent,

1287
00:46:00,670 --> 00:46:03,100
this is a server node

1288
00:46:03,100 --> 00:46:05,290
in the Hydra
application and I can

1289
00:46:05,290 --> 00:46:08,680
like derive
folder-named components

1290
00:46:08,680 --> 00:46:10,600
by the last naming
conventions.

1291
00:46:10,600 --> 00:46:13,120
And if we have such
naming conventions,

1292
00:46:13,120 --> 00:46:15,370
the Hydra NOC operator can

1293
00:46:15,370 --> 00:46:17,485
easily manage the
trust relations

1294
00:46:17,485 --> 00:46:19,240
within the domain to
say who can access,

1295
00:46:19,240 --> 00:46:20,845
for this organization can

1296
00:46:20,845 --> 00:46:22,390
access this type of data,

1297
00:46:22,390 --> 00:46:24,250
things like that, and

1298
00:46:24,250 --> 00:46:26,590
also we need a
trust schema.

1299
00:46:26,590 --> 00:46:28,885
So we know

1300
00:46:28,885 --> 00:46:32,215
each applications
they are aware of,

1301
00:46:32,215 --> 00:46:34,165
the security policies
and they know

1302
00:46:34,165 --> 00:46:35,920
how to validate the
application data,

1303
00:46:35,920 --> 00:46:37,510
the current performance
class policies to

1304
00:46:37,510 --> 00:46:38,950
say this key is

1305
00:46:38,950 --> 00:46:40,270
allowed to sign
this type of data,

1306
00:46:40,270 --> 00:46:42,430
and that key is not
allowed to do so.

1307
00:46:42,430 --> 00:46:45,385
And we need 1, 2, 3, 4,

1308
00:46:45,385 --> 00:46:46,990
four pieces need
to configuring to

1309
00:46:46,990 --> 00:46:48,160
the application
before they

1310
00:46:48,160 --> 00:46:49,690
can communicate securely.

1311
00:46:49,690 --> 00:46:52,090
And among the four pieces,

1312
00:46:52,090 --> 00:46:55,270
there are some
relatively simple ones

1313
00:46:55,270 --> 00:46:57,040
like the trust anchor
and trust schema,

1314
00:46:57,040 --> 00:46:58,870
because they
are relatively

1315
00:46:58,870 --> 00:47:00,430
stable because
trust anchor as a

1316
00:47:00,430 --> 00:47:03,370
student certificates
not very

1317
00:47:03,370 --> 00:47:05,455
frequently updated,
also the trust.

1318
00:47:05,455 --> 00:47:07,060
So we started from

1319
00:47:07,060 --> 00:47:10,930
installing trust anchor
and trust schema.

1320
00:47:10,930 --> 00:47:13,810
The Hydra solution is
that we embbed that

1321
00:47:13,810 --> 00:47:14,860
the trust anchor and

1322
00:47:14,860 --> 00:47:15,760
the trust schema into

1323
00:47:15,760 --> 00:47:17,185
the application package.

1324
00:47:17,185 --> 00:47:19,179
And we utilize
the existing

1325
00:47:19,179 --> 00:47:20,425
authentication process

1326
00:47:20,425 --> 00:47:23,889
of this software
distribution.

1327
00:47:23,889 --> 00:47:26,500
Then we have a Hydra
application running on

1328
00:47:26,500 --> 00:47:28,720
the remote host and we
have the Hydra NOC,

1329
00:47:28,720 --> 00:47:31,250
as the trust
domain controller.

1330
00:47:37,770 --> 00:47:39,400
We know that there's

1331
00:47:39,400 --> 00:47:40,210
a certificate authority,

1332
00:47:40,210 --> 00:47:41,485
for example, GitHub,

1333
00:47:41,485 --> 00:47:43,090
and the domain controller,

1334
00:47:43,090 --> 00:47:46,270
which is a Hydra NOC
can publish of course,

1335
00:47:46,270 --> 00:47:48,445
the human operator can

1336
00:47:48,445 --> 00:47:52,060
publish some code on
GitHub and of course,

1337
00:47:52,060 --> 00:47:54,100
that is based on
the assumption that

1338
00:47:54,100 --> 00:47:56,575
domain controller trust

1339
00:47:56,575 --> 00:47:58,675
the certificate authority,

1340
00:47:58,675 --> 00:47:59,830
which certifies a GitHub,

1341
00:47:59,830 --> 00:48:01,330
I think that is
the research.

1342
00:48:01,330 --> 00:48:03,400
Then, on the other hand,

1343
00:48:03,400 --> 00:48:04,645
on the application side,

1344
00:48:04,645 --> 00:48:07,975
if the application
owner also trust that

1345
00:48:07,975 --> 00:48:10,030
particular certificate
authorities,

1346
00:48:10,030 --> 00:48:12,730
then the domain controller
or publish code on

1347
00:48:12,730 --> 00:48:13,870
GitHub and share

1348
00:48:13,870 --> 00:48:16,015
that specific
GitHub repository,

1349
00:48:16,015 --> 00:48:18,720
the GitHub link then

1350
00:48:18,720 --> 00:48:20,010
the applications that you

1351
00:48:20,010 --> 00:48:20,955
can download
with the code.

1352
00:48:20,955 --> 00:48:22,470
And here's the beauty of

1353
00:48:22,470 --> 00:48:24,705
an occlusion during code
downloading process,

1354
00:48:24,705 --> 00:48:25,260
because you need to

1355
00:48:25,260 --> 00:48:26,805
authenticate the
remote party.

1356
00:48:26,805 --> 00:48:28,260
First to say
that it's really

1357
00:48:28,260 --> 00:48:29,865
a GitHub and you also

1358
00:48:29,865 --> 00:48:31,710
will authenticate
that specific link

1359
00:48:31,710 --> 00:48:33,415
and you get the code.

1360
00:48:33,415 --> 00:48:35,260
Once you get the
code, you have

1361
00:48:35,260 --> 00:48:37,225
the trust anchor and
trust schema in slot.

1362
00:48:37,225 --> 00:48:39,925
But notice that this
trust schema is,

1363
00:48:39,925 --> 00:48:41,380
I would say those

1364
00:48:41,380 --> 00:48:42,970
initial trust
schema only used

1365
00:48:42,970 --> 00:48:45,474
for validating
data packages

1366
00:48:45,474 --> 00:48:47,245
during the
pushing process.

1367
00:48:47,245 --> 00:48:48,820
And a more complete word

1368
00:48:48,820 --> 00:48:49,990
in trust schema
needs to be

1369
00:48:49,990 --> 00:48:51,835
fetched through

1370
00:48:51,835 --> 00:48:53,650
normal Interests-Data
exchanges

1371
00:48:53,650 --> 00:48:54,970
offered at bootstrapping,

1372
00:48:54,970 --> 00:48:56,740
expressing
interest, ask for

1373
00:48:56,740 --> 00:48:58,240
the latest data package of

1374
00:48:58,240 --> 00:48:59,125
the trust schema then

1375
00:48:59,125 --> 00:49:00,985
install the latest
trust schema.

1376
00:49:00,985 --> 00:49:02,830
For the trust schema
installed here,

1377
00:49:02,830 --> 00:49:05,840
it's only for
bootstrapping purpose.

1378
00:49:08,430 --> 00:49:10,300
After we have

1379
00:49:10,300 --> 00:49:11,575
the trust anchor
and trust schema,

1380
00:49:11,575 --> 00:49:12,970
we still need to resolve

1381
00:49:12,970 --> 00:49:14,290
the name and certificate.

1382
00:49:14,290 --> 00:49:16,315
But before we
can have a name,

1383
00:49:16,315 --> 00:49:16,540
there are

1384
00:49:16,540 --> 00:49:18,595
some prerequisites
for obtaining it.

1385
00:49:18,595 --> 00:49:21,505
Say, if you're the
domain controller,

1386
00:49:21,505 --> 00:49:23,960
you want to say give

1387
00:49:28,050 --> 00:49:32,275
names to well, everyone.

1388
00:49:32,275 --> 00:49:33,790
So the first thing is

1389
00:49:33,790 --> 00:49:34,360
that you need to

1390
00:49:34,360 --> 00:49:35,620
authenticate the
remote party,

1391
00:49:35,620 --> 00:49:37,390
which is, in our case,

1392
00:49:37,390 --> 00:49:39,339
if you're server
application,

1393
00:49:39,339 --> 00:49:44,005
we need to know what
is our DNS name.

1394
00:49:44,005 --> 00:49:45,685
And if you have a
choice certificate,

1395
00:49:45,685 --> 00:49:46,450
we need to validate

1396
00:49:46,450 --> 00:49:47,935
your TLS
certificate to say,

1397
00:49:47,935 --> 00:49:50,950
you are really the owner

1398
00:49:50,950 --> 00:49:52,615
of that particular
device name.

1399
00:49:52,615 --> 00:49:54,265
For user application,

1400
00:49:54,265 --> 00:49:57,235
we're assuming you
control email address.

1401
00:49:57,235 --> 00:49:59,770
We can verify
your identity or

1402
00:49:59,770 --> 00:50:01,120
authenticate you by

1403
00:50:01,120 --> 00:50:02,980
verifying that
email address.

1404
00:50:02,980 --> 00:50:05,740
And authentication
and itself is

1405
00:50:05,740 --> 00:50:08,560
not enough because we'll

1406
00:50:08,560 --> 00:50:10,030
still want to have
some membership

1407
00:50:10,030 --> 00:50:11,260
control not everyone can

1408
00:50:11,260 --> 00:50:14,680
get Hydra name from
the domain controller.

1409
00:50:14,680 --> 00:50:17,905
So the NOC still needs
to know if you are

1410
00:50:17,905 --> 00:50:19,390
an allowed user or

1411
00:50:19,390 --> 00:50:22,915
an allowed server
in a cyberspace.

1412
00:50:22,915 --> 00:50:25,150
Say for the Hydra
user we have

1413
00:50:25,150 --> 00:50:27,205
a list of names.

1414
00:50:27,205 --> 00:50:29,230
If you are on that list,

1415
00:50:29,230 --> 00:50:31,855
well you're lucky
you can get a name.

1416
00:50:31,855 --> 00:50:33,730
Also for the user side,

1417
00:50:33,730 --> 00:50:35,890
we perform
membership control

1418
00:50:35,890 --> 00:50:38,290
over a list of
email addresses.

1419
00:50:38,290 --> 00:50:40,015
Still, we will check

1420
00:50:40,015 --> 00:50:42,550
if that email address
is in the list.

1421
00:50:42,550 --> 00:50:45,280
And after we do
the authentication

1422
00:50:45,280 --> 00:50:46,585
and authorization,

1423
00:50:46,585 --> 00:50:48,595
we still need to assign

1424
00:50:48,595 --> 00:50:51,640
Hydra names to ease
the schema writing.

1425
00:50:51,640 --> 00:50:54,355
I said, for server
name we say

1426
00:50:54,355 --> 00:50:56,710
/hydra/node representing

1427
00:50:56,710 --> 00:50:58,135
this is really
a server node?

1428
00:50:58,135 --> 00:50:59,230
And for the divided thing

1429
00:50:59,230 --> 00:51:00,160
as naming convention

1430
00:51:00,160 --> 00:51:02,335
and for the user we do

1431
00:51:02,335 --> 00:51:05,740
/hydra/user followed
by the email

1432
00:51:05,740 --> 00:51:06,940
naming convention,
similar thing.

1433
00:51:06,940 --> 00:51:08,575
But with this, we can

1434
00:51:08,575 --> 00:51:12,610
actually ease
the trust schema

1435
00:51:12,610 --> 00:51:15,145
writing to make
the policy maker.

1436
00:51:15,145 --> 00:51:18,050
Yeah, have a simple life?

1437
00:51:19,020 --> 00:51:21,700
>> And now we can talk

1438
00:51:21,700 --> 00:51:24,085
about how we
actually do that.

1439
00:51:24,085 --> 00:51:27,160
So here I will show a
very abstract dataflow.

1440
00:51:27,160 --> 00:51:28,750
Now, not very precise,

1441
00:51:28,750 --> 00:51:30,070
things as they
have changed,

1442
00:51:30,070 --> 00:51:31,810
but it will give
an overall idea

1443
00:51:31,810 --> 00:51:33,475
of how the protocol works.

1444
00:51:33,475 --> 00:51:35,680
So first, suppose I'm

1445
00:51:35,680 --> 00:51:36,970
a server application and

1446
00:51:36,970 --> 00:51:38,230
I want to ask the NOC,

1447
00:51:38,230 --> 00:51:39,790
please authenticate me and

1448
00:51:39,790 --> 00:51:42,475
give me a hypername.

1449
00:51:42,475 --> 00:51:46,510
I first ask the
NOC to say,

1450
00:51:46,510 --> 00:51:49,045
this is my TLS
certificate,

1451
00:51:49,045 --> 00:51:50,740
and I'm walking
by and toss

1452
00:51:50,740 --> 00:51:51,460
the certificate chain to

1453
00:51:51,460 --> 00:51:52,735
your digital certificate.

1454
00:51:52,735 --> 00:51:54,250
The Hydra NOC after

1455
00:51:54,250 --> 00:51:56,780
receiving it,
will verify it.

1456
00:51:57,930 --> 00:52:01,135
But even though the NOC

1457
00:52:01,135 --> 00:52:02,890
verifies that certificate,

1458
00:52:02,890 --> 00:52:04,150
it still need
to know that if

1459
00:52:04,150 --> 00:52:05,800
I'm the owner of
the certificate,

1460
00:52:05,800 --> 00:52:09,700
so it will send me
back a message to say,

1461
00:52:09,700 --> 00:52:12,550
please use this
certificate's private

1462
00:52:12,550 --> 00:52:13,930
key to sign a message to

1463
00:52:13,930 --> 00:52:15,820
prove that you own
the certificate.

1464
00:52:15,820 --> 00:52:18,670
As I signed the
message with

1465
00:52:18,670 --> 00:52:21,010
a signature and the NOC

1466
00:52:21,010 --> 00:52:22,720
can verify the
signature to say,

1467
00:52:22,720 --> 00:52:24,790
you are really the owner
of the certificate,

1468
00:52:24,790 --> 00:52:27,365
then you are
authenticated now.

1469
00:52:27,365 --> 00:52:28,830
Then I will perform

1470
00:52:28,830 --> 00:52:30,390
at least the check
to see if you

1471
00:52:30,390 --> 00:52:33,990
are welcome to
the Hydra system.

1472
00:52:33,990 --> 00:52:36,900
After that, the Hydra
NOC can give me

1473
00:52:36,900 --> 00:52:38,280
a name assignment by

1474
00:52:38,280 --> 00:52:39,540
converting the
previous name

1475
00:52:39,540 --> 00:52:41,290
into a Hydra name.

1476
00:52:41,820 --> 00:52:44,230
On the user side,

1477
00:52:44,230 --> 00:52:45,625
we do the similar thing,

1478
00:52:45,625 --> 00:52:47,200
but the difference is

1479
00:52:47,200 --> 00:52:50,380
that because we send
the email address to

1480
00:52:50,380 --> 00:52:52,480
the Hydra NOC and the
Hydra NOC will also

1481
00:52:52,480 --> 00:52:54,340
send a verification code

1482
00:52:54,340 --> 00:52:56,335
to my email address
out-of-band of course,

1483
00:52:56,335 --> 00:52:57,895
and ask me to

1484
00:52:57,895 --> 00:52:59,755
enter that email
verification code,

1485
00:52:59,755 --> 00:53:02,140
and echo that back
to the Hydra NOC.

1486
00:53:02,140 --> 00:53:04,480
I send the code back and

1487
00:53:04,480 --> 00:53:08,320
the NOC can know that
the remote party,

1488
00:53:08,320 --> 00:53:10,390
at least the
user in front of

1489
00:53:10,390 --> 00:53:11,800
the screen is
indeed that user

1490
00:53:11,800 --> 00:53:13,360
who control the
email address.

1491
00:53:13,360 --> 00:53:16,345
The Hydra NOC say, I
have authenticate to you

1492
00:53:16,345 --> 00:53:18,235
and let me check

1493
00:53:18,235 --> 00:53:20,530
if your email address
is in the list.

1494
00:53:20,530 --> 00:53:23,050
If so, I can give you
a name, assignment by

1495
00:53:23,050 --> 00:53:26,480
converting an email
address into Hydra name.

1496
00:53:27,090 --> 00:53:29,875
Well, after a
name assignment,

1497
00:53:29,875 --> 00:53:31,780
we say we have four
pieces class anchor,

1498
00:53:31,780 --> 00:53:33,415
class schema, name,
and certificate.

1499
00:53:33,415 --> 00:53:34,570
Then finally we come

1500
00:53:34,570 --> 00:53:36,070
to the certificate stuff.

1501
00:53:36,070 --> 00:53:39,250
And here is the certificate
issuance logic.

1502
00:53:39,250 --> 00:53:42,250
In general, there's
a certificate issuer

1503
00:53:42,250 --> 00:53:44,035
and there's a
certificate requester.

1504
00:53:44,035 --> 00:53:45,940
Usually, the
certificate requester

1505
00:53:45,940 --> 00:53:47,890
has a name assignment
and the issurer needs

1506
00:53:47,890 --> 00:53:50,200
to ask a requester

1507
00:53:50,200 --> 00:53:52,630
to prove that it
does own the name,

1508
00:53:52,630 --> 00:53:56,140
and if that the
challenge is to proceed,

1509
00:53:56,140 --> 00:53:58,940
issuer can certify has
requested the name.

1510
00:53:59,240 --> 00:54:01,800
Specific to this
difficult sororities

1511
00:54:01,800 --> 00:54:03,345
are doing this
in a different,

1512
00:54:03,345 --> 00:54:06,420
well, in a variety
of manners

1513
00:54:06,420 --> 00:54:09,705
and say this plus encrypt.

1514
00:54:09,705 --> 00:54:13,585
They only ask a requester
to prove that say,

1515
00:54:13,585 --> 00:54:16,030
if you can prove
that you can control

1516
00:54:16,030 --> 00:54:18,160
the corresponding
records by

1517
00:54:18,160 --> 00:54:19,555
making a text record,

1518
00:54:19,555 --> 00:54:21,700
or you can serve STB,

1519
00:54:21,700 --> 00:54:23,230
our chapter on
radar domain.

1520
00:54:23,230 --> 00:54:24,010
I can certify you

1521
00:54:24,010 --> 00:54:26,935
because last name
favorite foster,

1522
00:54:26,935 --> 00:54:28,150
trust worthiness and trust

1523
00:54:28,150 --> 00:54:29,890
that the operating system,

1524
00:54:29,890 --> 00:54:33,850
if the HTTP requests
can catch you there,

1525
00:54:33,850 --> 00:54:38,080
that means you indeed
control the domain.

1526
00:54:38,080 --> 00:54:44,170
So I can certify you.
And this challenge

1527
00:54:44,170 --> 00:54:46,225
is proof of possession.

1528
00:54:46,225 --> 00:54:49,300
They asked requester to
prove that they have

1529
00:54:49,300 --> 00:54:52,855
the possession of the
name or of the domain.

1530
00:54:52,855 --> 00:54:56,290
And in Hydra, we do
the similar approach.

1531
00:54:56,290 --> 00:54:57,940
That is, we are asked
for possession,

1532
00:54:57,940 --> 00:54:59,815
but we do a very
different way.

1533
00:54:59,815 --> 00:55:04,690
That is, we directly
use knock assignment,

1534
00:55:04,690 --> 00:55:07,915
name assignment as a
proof of possession.

1535
00:55:07,915 --> 00:55:09,160
Instead of asking you

1536
00:55:09,160 --> 00:55:11,810
whether you can fetch
that the HTTP object.

1537
00:55:12,120 --> 00:55:15,460
This proof of possession

1538
00:55:15,460 --> 00:55:18,550
is designed for
Hydra apps,

1539
00:55:18,550 --> 00:55:19,780
proving it is a

1540
00:55:19,780 --> 00:55:22,030
legit owner for
for a Hydra name.

1541
00:55:22,030 --> 00:55:25,855
If it end specifically,

1542
00:55:25,855 --> 00:55:27,910
this proof of
possession is a knock

1543
00:55:27,910 --> 00:55:29,800
and scientists the
packet in certificate,

1544
00:55:29,800 --> 00:55:33,955
the format, the gears
of possession packets.

1545
00:55:33,955 --> 00:55:35,620
We have the name following

1546
00:55:35,620 --> 00:55:37,075
this naming convention,

1547
00:55:37,075 --> 00:55:38,275
and it's certainly faster.

1548
00:55:38,275 --> 00:55:40,495
Hydra public key
with the court

1549
00:55:40,495 --> 00:55:43,360
also will have the
superior than a signature.

1550
00:55:43,360 --> 00:55:45,790
And if let them
prove that they own

1551
00:55:45,790 --> 00:55:47,335
the public key
are certified

1552
00:55:47,335 --> 00:55:48,610
in this proposition,

1553
00:55:48,610 --> 00:55:51,190
that means they own the
corresponding name.

1554
00:55:51,190 --> 00:55:53,425
For the name waste,

1555
00:55:53,425 --> 00:55:55,225
we apply the following
naming convention.

1556
00:55:55,225 --> 00:55:56,710
Will always have the first

1557
00:55:56,710 --> 00:55:58,690
component to be a keyword.

1558
00:55:58,690 --> 00:56:02,430
That means authenticate,
that means this is

1559
00:56:02,430 --> 00:56:04,320
marking this is a proof of

1560
00:56:04,320 --> 00:56:04,785
possession

1561
00:56:04,785 --> 00:56:06,750
data packet that's a
normal certificate.

1562
00:56:06,750 --> 00:56:08,490
Then followed
by the keyword

1563
00:56:08,490 --> 00:56:09,765
we have assigned the name.

1564
00:56:09,765 --> 00:56:10,890
And then in
this case it is

1565
00:56:10,890 --> 00:56:13,720
Hydra load you up.

1566
00:56:17,310 --> 00:56:20,080
So when the knock
were turned,

1567
00:56:20,080 --> 00:56:21,190
the name assignment is

1568
00:56:21,190 --> 00:56:23,530
your actual return this
proof all possession.

1569
00:56:23,530 --> 00:56:26,620
And the application can

1570
00:56:26,620 --> 00:56:28,810
further use this
for all possession.

1571
00:56:28,810 --> 00:56:30,610
Running the incentive
protocol to get to

1572
00:56:30,610 --> 00:56:33,950
a final certificate from
this exhibit issuer.

1573
00:56:34,620 --> 00:56:37,420
If we're putting
the workflow

1574
00:56:37,420 --> 00:56:39,685
together with our
Hydra package,

1575
00:56:39,685 --> 00:56:42,460
when the running the
Hydra package first.

1576
00:56:42,460 --> 00:56:43,630
The first thing we will do

1577
00:56:43,630 --> 00:56:44,560
is that we're going

1578
00:56:44,560 --> 00:56:45,850
to generate 22 and

1579
00:56:45,850 --> 00:56:47,080
then it is after
the Hydra,

1580
00:56:47,080 --> 00:56:48,325
because we want
to separate

1581
00:56:48,325 --> 00:56:51,055
the keys that is used
for different purposes.

1582
00:56:51,055 --> 00:56:53,170
They will have two keys.

1583
00:56:53,170 --> 00:56:54,340
One is only for

1584
00:56:54,340 --> 00:56:56,680
authentication and
authorization purpose.

1585
00:56:56,680 --> 00:56:59,050
That means that key is

1586
00:56:59,050 --> 00:57:00,145
used to assign the proof

1587
00:57:00,145 --> 00:57:01,645
of position a second.

1588
00:57:01,645 --> 00:57:03,370
And then Italy,
which is the slash

1589
00:57:03,370 --> 00:57:05,485
Hydra slash
certain signer,

1590
00:57:05,485 --> 00:57:06,670
that key is only

1591
00:57:06,670 --> 00:57:08,515
used for certificate
issuance.

1592
00:57:08,515 --> 00:57:10,330
Then I have a hustler

1593
00:57:10,330 --> 00:57:11,965
application
running on a host.

1594
00:57:11,965 --> 00:57:13,405
I have a TLS certificate,

1595
00:57:13,405 --> 00:57:14,665
I own the private key.

1596
00:57:14,665 --> 00:57:18,310
And because I installed
the package key top.

1597
00:57:18,310 --> 00:57:19,705
So I have the precedent

1598
00:57:19,705 --> 00:57:22,105
initial trust
schema configured.

1599
00:57:22,105 --> 00:57:25,690
I run a protocol to
prove I own that has

1600
00:57:25,690 --> 00:57:29,245
the private key and
the controller.

1601
00:57:29,245 --> 00:57:30,910
The controller,
which is an OK.

1602
00:57:30,910 --> 00:57:32,560
We'll check if my thing as

1603
00:57:32,560 --> 00:57:34,240
name is in that list and

1604
00:57:34,240 --> 00:57:36,100
return me of possession.

1605
00:57:36,100 --> 00:57:37,900
And there's proof of
possession already

1606
00:57:37,900 --> 00:57:39,910
says name
assignment because

1607
00:57:39,910 --> 00:57:41,785
this is encoded
in your name.

1608
00:57:41,785 --> 00:57:45,910
And then I will run
the protocol to say,

1609
00:57:45,910 --> 00:57:47,695
here is my prove
of possession.

1610
00:57:47,695 --> 00:57:50,530
And I can prove that
indeed on the public,

1611
00:57:50,530 --> 00:57:53,905
corresponding private
key of this possession,

1612
00:57:53,905 --> 00:57:56,905
then in turn
will return me

1613
00:57:56,905 --> 00:57:58,900
certificate with
the same name

1614
00:57:58,900 --> 00:58:01,075
presented in
their possession.

1615
00:58:01,075 --> 00:58:03,385
So we can see by
this approach,

1616
00:58:03,385 --> 00:58:05,110
the name assignment apart,

1617
00:58:05,110 --> 00:58:06,400
actually get
out of that and

1618
00:58:06,400 --> 00:58:07,825
the answer is only done

1619
00:58:07,825 --> 00:58:09,265
by the name authentication

1620
00:58:09,265 --> 00:58:11,450
and the assignment
department.

1621
00:58:12,000 --> 00:58:14,455
We have a Python
implementation,

1622
00:58:14,455 --> 00:58:15,625
although a
pretty enumerate

1623
00:58:15,625 --> 00:58:16,990
for the Hydra project,

1624
00:58:16,990 --> 00:58:21,070
and this is available
as a package as well.

1625
00:58:21,070 --> 00:58:25,240
We still have protocol
specification and

1626
00:58:25,240 --> 00:58:26,830
basic examples include and

1627
00:58:26,830 --> 00:58:29,690
we are still working
on the documentation.

1628
00:58:30,570 --> 00:58:32,980
>> When we actually
use this package,

1629
00:58:32,980 --> 00:58:34,030
the first thing
we will do is

1630
00:58:34,030 --> 00:58:35,470
that we need to
configure the NOC

1631
00:58:35,470 --> 00:58:37,330
because authentication

1632
00:58:37,330 --> 00:58:39,025
cannot start from
the scratch.

1633
00:58:39,025 --> 00:58:40,540
Authentication
always start from

1634
00:58:40,540 --> 00:58:42,055
some shared
trust relations.

1635
00:58:42,055 --> 00:58:45,250
We all say first,
here's the identity,

1636
00:58:45,250 --> 00:58:48,295
here's the name of the
domain that is /hydra.

1637
00:58:48,295 --> 00:58:49,690
Then I need to configure

1638
00:58:49,690 --> 00:58:51,955
the authentication and
the authorization.

1639
00:58:51,955 --> 00:58:53,950
For user, I
have a waitlist

1640
00:58:53,950 --> 00:58:59,305
, alice@cs.ucla.edu
and bob.

1641
00:58:59,305 --> 00:59:02,485
Those two are
allowed users.

1642
00:59:02,485 --> 00:59:04,960
Then for the server

1643
00:59:04,960 --> 00:59:06,280
because we are trying

1644
00:59:06,280 --> 00:59:07,825
to verify TL certificate,

1645
00:59:07,825 --> 00:59:10,735
we need to give
my definition

1646
00:59:10,735 --> 00:59:12,520
of trust anchors,

1647
00:59:12,520 --> 00:59:16,720
just to be configurable

1648
00:59:16,720 --> 00:59:18,460
to say I have a
different set

1649
00:59:18,460 --> 00:59:19,945
of trust anchors.

1650
00:59:19,945 --> 00:59:23,485
Then we can give a
waitlist to say,

1651
00:59:23,485 --> 00:59:25,375
here's the domain
names allowed

1652
00:59:25,375 --> 00:59:28,960
and we also need

1653
00:59:28,960 --> 00:59:31,255
to keep the validility
period of possession,

1654
00:59:31,255 --> 00:59:33,280
because the proof of

1655
00:59:33,280 --> 00:59:34,720
possession is used for

1656
00:59:34,720 --> 00:59:35,755
name assignment purpose,

1657
00:59:35,755 --> 00:59:37,850
it should not be forever.

1658
00:59:39,830 --> 00:59:41,865
In using this package,

1659
00:59:41,865 --> 00:59:43,470
we need to increment

1660
00:59:43,470 --> 00:59:45,405
the name assignment
function.

1661
00:59:45,405 --> 00:59:46,830
But actually implementing

1662
00:59:46,830 --> 00:59:48,350
within conversion rule,

1663
00:59:48,350 --> 00:59:50,500
say giving a
string converting

1664
00:59:50,500 --> 00:59:53,050
into NDN name in
our context that

1665
00:59:53,050 --> 00:59:55,300
is into a hydra
name and loading

1666
00:59:55,300 --> 00:59:55,750
the name of

1667
00:59:55,750 --> 00:59:57,745
assignment function in
controller runtime.

1668
00:59:57,745 --> 00:59:59,110
Then we have controller,

1669
00:59:59,110 --> 01:00:01,390
we call the function or
the assignment, and with

1670
01:00:01,390 --> 01:00:03,010
the specific name
assignment function

1671
01:00:03,010 --> 01:00:05,155
to the authentication
type user

1672
01:00:05,155 --> 01:00:07,705
and will know a server
name assignment

1673
01:00:07,705 --> 01:00:10,490
into a server type
authentication.

1674
01:00:11,040 --> 01:00:15,700
The final point
I want to make

1675
01:00:15,700 --> 01:00:19,405
here is that when
we do this project,

1676
01:00:19,405 --> 01:00:20,635
we actually
found that what

1677
01:00:20,635 --> 01:00:22,015
really makes the
hydra bootstrapping

1678
01:00:22,015 --> 01:00:24,670
different is that usually

1679
01:00:24,670 --> 01:00:27,370
assigning names
for entities

1680
01:00:27,370 --> 01:00:28,690
requires one being aware

1681
01:00:28,690 --> 01:00:31,060
of what domain naming

1682
01:00:31,060 --> 01:00:32,860
conventions you
will need to

1683
01:00:32,860 --> 01:00:36,070
have and actually
in many works,

1684
01:00:36,070 --> 01:00:38,920
we have seen the
domain controller

1685
01:00:38,920 --> 01:00:40,870
or the controller directly

1686
01:00:40,870 --> 01:00:42,940
signs certificate with
the name assignment.

1687
01:00:42,940 --> 01:00:47,740
In hydra we're
actually decouple

1688
01:00:47,740 --> 01:00:50,090
the naming formal
certification

1689
01:00:51,120 --> 01:00:53,350
and this approach actually

1690
01:00:53,350 --> 01:00:55,630
enable certificate
issuers be

1691
01:00:55,630 --> 01:00:58,180
agnostic to the
naming conventions

1692
01:00:58,180 --> 01:00:59,965
and focusing on the
certificate itself.

1693
01:00:59,965 --> 01:01:01,390
Like a certificate
management

1694
01:01:01,390 --> 01:01:02,800
revocation,
things like that.

1695
01:01:02,800 --> 01:01:05,110
That could to be

1696
01:01:05,110 --> 01:01:07,600
a lesson even for
us. Thank you.

1697
01:01:07,600 --> 01:01:13,630
[APPLAUSE].

1698
01:01:13,630 --> 01:01:15,380
>> Any questions?

1699
01:01:16,410 --> 01:01:21,310
>> I'm not sure if
it's a question,

1700
01:01:21,310 --> 01:01:22,750
but I'm just going
to say something and

1701
01:01:22,750 --> 01:01:27,760
then maybe you can
comment on it.

1702
01:01:27,760 --> 01:01:29,305
I wasn't sure I understood

1703
01:01:29,305 --> 01:01:32,210
what you're
proposing here.

1704
01:01:32,910 --> 01:01:35,980
You're talking about
bundling the code

1705
01:01:35,980 --> 01:01:39,710
with the trust anchor.

1706
01:01:39,960 --> 01:01:49,090
It's green here.

1707
01:01:49,090 --> 01:01:52,030
You're talking about
bundling code with

1708
01:01:52,030 --> 01:02:02,260
[LAUGHTER] okay
Sorry about that.

1709
01:02:02,260 --> 01:02:04,645
You're talking
about bundling

1710
01:02:04,645 --> 01:02:06,880
the code with the
trust and code,

1711
01:02:06,880 --> 01:02:10,180
you're talking
about basing

1712
01:02:10,180 --> 01:02:12,460
your trust on some PKI.

1713
01:02:12,460 --> 01:02:15,640
Isn't that a
centralized solution?

1714
01:02:15,640 --> 01:02:17,290
And then you talk about
the email addresses,

1715
01:02:17,290 --> 01:02:19,585
which is also existing
infrastructure,

1716
01:02:19,585 --> 01:02:23,530
maybe not so centralized,
but good luck.

1717
01:02:23,530 --> 01:02:26,930
That's a different topic.

1718
01:02:27,120 --> 01:02:31,360
What exactly are
you proposing here?

1719
01:02:31,360 --> 01:02:33,025
I don't know if I
have a question.

1720
01:02:33,025 --> 01:02:36,530
I'm very confused.
That's it.

1721
01:02:36,780 --> 01:02:39,685
>> I'm not actually
proposing a thing.

1722
01:02:39,685 --> 01:02:41,890
Just explain this is

1723
01:02:41,890 --> 01:02:45,140
what we did for
our application.

1724
01:02:46,830 --> 01:02:52,960
The key point is
that the application

1725
01:02:52,960 --> 01:02:55,120
and the domain controller,

1726
01:02:55,120 --> 01:02:58,210
they need to attribute

1727
01:02:58,210 --> 01:02:59,545
a neutral authentication.

1728
01:02:59,545 --> 01:03:01,675
And only point is that

1729
01:03:01,675 --> 01:03:03,250
for any authentication,

1730
01:03:03,250 --> 01:03:04,360
there's no free launch,

1731
01:03:04,360 --> 01:03:07,015
you need to have a
shared trust relations

1732
01:03:07,015 --> 01:03:10,480
in advance otherwise you
cannot authenticate.

1733
01:03:10,480 --> 01:03:11,560
You have to have

1734
01:03:11,560 --> 01:03:13,270
the shared trust
relations in

1735
01:03:13,270 --> 01:03:17,390
any case and using
GitHub is only one way.

1736
01:03:20,340 --> 01:03:23,170
>> Why did you
pick that one way?

1737
01:03:23,170 --> 01:03:27,160
[LAUGHTER] I'm
not referring

1738
01:03:27,160 --> 01:03:30,200
to GitHub as
literally GitHub,

1739
01:03:30,200 --> 01:03:33,015
I hope we're both
talking about

1740
01:03:33,015 --> 01:03:36,480
a central party that

1741
01:03:36,480 --> 01:03:37,500
is distributing code

1742
01:03:37,500 --> 01:03:38,580
and effectively.
[BACKGROUND]

1743
01:03:38,580 --> 01:04:17,720
>> I have changed
the slides.

1744
01:04:17,720 --> 01:04:23,125
>> I think the
slides are here.

1745
01:04:23,125 --> 01:04:26,125
>> I don't think
so. That's not it.

1746
01:04:26,125 --> 01:04:27,070
>> You didn't
send them out?

1747
01:04:27,070 --> 01:04:27,370
>> I did.

1748
01:04:27,370 --> 01:04:31,280
>> That's not it. He's
going to handle it.

1749
01:04:32,250 --> 01:04:35,360
While we're
switching slides,

1750
01:04:36,330 --> 01:04:40,555
Doran, is that the
proper pronunciation?

1751
01:04:40,555 --> 01:04:41,780
>> Yeah.

1752
01:04:43,680 --> 01:04:46,390
>> He's a first-year
PhD student

1753
01:04:46,390 --> 01:04:48,235
at UCLA working with Lisa.

1754
01:04:48,235 --> 01:04:50,770
He got his bachelor's from

1755
01:04:50,770 --> 01:04:53,770
Texas at Austin and the
master's from Cuba.

1756
01:04:53,770 --> 01:04:57,490
And he spent some time

1757
01:04:57,490 --> 01:05:00,560
in industry working
on Cloud security.

1758
01:05:06,600 --> 01:05:08,410
Because I have time to go

1759
01:05:08,410 --> 01:05:10,525
to the whole introduction.

1760
01:05:10,525 --> 01:05:13,615
When he's not
doing his PhD,

1761
01:05:13,615 --> 01:05:16,060
he supports
security startups

1762
01:05:16,060 --> 01:05:19,480
in the Web3 ecosystem,

1763
01:05:19,480 --> 01:05:24,775
so pretty busy
guy. Almost there?

1764
01:05:24,775 --> 01:05:26,425
>> Maybe, maybe not.

1765
01:05:26,425 --> 01:05:28,010
>> Ready?

1766
01:06:42,920 --> 01:06:49,080
>> I think it's
very [inaudible].

1767
01:06:49,080 --> 01:06:52,000
This is your very
best, it's here.

1768
01:06:53,690 --> 01:06:54,790
>> [inaudible]

1769
01:06:54,790 --> 01:06:56,025
>> Go ahead.

1770
01:06:56,025 --> 01:06:59,910
>> Let's see. Let's put

1771
01:06:59,910 --> 01:07:03,040
everything in
here not needed.

1772
01:07:21,980 --> 01:07:25,650
Cool. Meet a
puppy [LAUGHTER].

1773
01:07:25,650 --> 01:07:35,400
We'll go ahead and

1774
01:07:35,400 --> 01:07:37,500
get this going in a
second and I'll try and

1775
01:07:37,500 --> 01:07:40,630
get us back on time.

1776
01:07:47,270 --> 01:08:02,260
Well, I don't just
have to work.

1777
01:08:09,560 --> 01:08:12,610
There we go. Much better.

1778
01:08:17,330 --> 01:08:18,430
>> [inaudible]

1779
01:08:18,430 --> 01:08:21,930
>> Sure thing, no
problem. I hope

1780
01:08:21,930 --> 01:08:23,655
you all enjoyed
the little break.

1781
01:08:23,655 --> 01:08:27,435
So first easy question,

1782
01:08:27,435 --> 01:08:31,060
how many people here
have heard of NDN?

1783
01:08:31,550 --> 01:08:34,485
Cool. So a quarter
of the room.

1784
01:08:34,485 --> 01:08:35,850
How many people have

1785
01:08:35,850 --> 01:08:38,100
heard of Defined-Trust
Transport?

1786
01:08:38,100 --> 01:08:41,100
The same quarter, nice.

1787
01:08:41,100 --> 01:08:43,410
So essentially today
I'm just going

1788
01:08:43,410 --> 01:08:44,970
to give a quick
overview of what

1789
01:08:44,970 --> 01:08:46,575
Defined-Trust Transport

1790
01:08:46,575 --> 01:08:48,930
is which is
information-centric and

1791
01:08:48,930 --> 01:08:51,360
yet inspired
transport protocol

1792
01:08:51,360 --> 01:08:54,250
based off the work
of Kathie Nichols.

1793
01:08:54,440 --> 01:08:56,250
But different I'm going to

1794
01:08:56,250 --> 01:08:57,210
start with the sources.

1795
01:08:57,210 --> 01:08:58,740
Essentially. I'm
just going to

1796
01:08:58,740 --> 01:09:01,170
be summarizing the points

1797
01:09:01,170 --> 01:09:05,220
made in the IETF draft
submitted in 2022,

1798
01:09:05,220 --> 01:09:07,260
and if anyone wants to
get more hands-on with

1799
01:09:07,260 --> 01:09:10,485
everything there's a
GitHub link at the top.

1800
01:09:10,485 --> 01:09:16,080
There's Define-Trust
Communications toolkit;

1801
01:09:16,080 --> 01:09:17,100
that's interesting to use

1802
01:09:17,100 --> 01:09:19,995
, available on GitHub.

1803
01:09:19,995 --> 01:09:23,520
So Defined-trust
Transport essentially

1804
01:09:23,520 --> 01:09:25,890
it's many
broadcast-friendly,

1805
01:09:25,890 --> 01:09:27,300
brokeless publish suscrbe

1806
01:09:27,300 --> 01:09:28,710
transport protocol for

1807
01:09:28,710 --> 01:09:30,675
limited domains
especially good for

1808
01:09:30,675 --> 01:09:33,750
OT and IoT network
communications.

1809
01:09:33,750 --> 01:09:36,030
It allows for security

1810
01:09:36,030 --> 01:09:37,890
through easy management,

1811
01:09:37,890 --> 01:09:41,025
through scaling
up and very

1812
01:09:41,025 --> 01:09:43,530
expressed native rule sets

1813
01:09:43,530 --> 01:09:45,760
of who can say
what to which.

1814
01:09:46,310 --> 01:09:52,500
First we have a figure

1815
01:09:52,500 --> 01:09:55,200
of how the
Defined-trust Transport

1816
01:09:55,200 --> 01:09:56,370
actually sits
in the system.

1817
01:09:56,370 --> 01:09:57,780
It sits underneath
the application

1818
01:09:57,780 --> 01:09:58,530
either on top of

1819
01:09:58,530 --> 01:09:59,970
whatever system provided

1820
01:09:59,970 --> 01:10:01,470
transport that's provided,

1821
01:10:01,470 --> 01:10:04,005
or it can act as the
transport layer itself.

1822
01:10:04,005 --> 01:10:05,490
The application
communicates

1823
01:10:05,490 --> 01:10:07,335
with Defined-Trust
Transport

1824
01:10:07,335 --> 01:10:09,720
with the information
it wants

1825
01:10:09,720 --> 01:10:12,255
to convey and the
interests that it wants,

1826
01:10:12,255 --> 01:10:14,340
and to that it sends
it to the network

1827
01:10:14,340 --> 01:10:15,960
where different nodes
on the network will

1828
01:10:15,960 --> 01:10:17,730
add the information
on the interests to

1829
01:10:17,730 --> 01:10:20,590
its local sink
collections.

1830
01:10:21,500 --> 01:10:24,750
So first dataflow
and DeftT,

1831
01:10:24,750 --> 01:10:26,790
it uses the
SyncPs protocol

1832
01:10:26,790 --> 01:10:29,010
to synchronize knowledge
amongst nodes.

1833
01:10:29,010 --> 01:10:31,110
Every node has a
sunc collection of

1834
01:10:31,110 --> 01:10:32,310
what it has seen and

1835
01:10:32,310 --> 01:10:33,960
what it knows is
on the network,

1836
01:10:33,960 --> 01:10:36,690
and it keeps all
this information

1837
01:10:36,690 --> 01:10:38,745
and rather come
back to beig

1838
01:10:38,745 --> 01:10:40,470
what invertible
bloom lookup

1839
01:10:40,470 --> 01:10:42,675
table with digest

1840
01:10:42,675 --> 01:10:44,460
of the titles of

1841
01:10:44,460 --> 01:10:45,555
the publications

1842
01:10:45,555 --> 01:10:47,415
that have been
on the network.

1843
01:10:47,415 --> 01:10:49,890
So all communication
occurs via

1844
01:10:49,890 --> 01:10:51,975
two Protocol Data Units,

1845
01:10:51,975 --> 01:10:53,940
the cStates and the cAdd.

1846
01:10:53,940 --> 01:11:00,390
So the cState and

1847
01:11:00,390 --> 01:11:01,950
cAdds you all
might know as

1848
01:11:01,950 --> 01:11:03,540
the NDN interests packets

1849
01:11:03,540 --> 01:11:04,755
or something
similar to that.

1850
01:11:04,755 --> 01:11:07,440
It was inspired
by NDN TLV,

1851
01:11:07,440 --> 01:11:09,285
and then cStates contain

1852
01:11:09,285 --> 01:11:10,830
the IBLT with
the publication

1853
01:11:10,830 --> 01:11:11,850
knowledge of
what every node

1854
01:11:11,850 --> 01:11:15,300
knows on the network
and then cAdds contain

1855
01:11:15,300 --> 01:11:17,625
the application data that

1856
01:11:17,625 --> 01:11:18,510
actually wants to be

1857
01:11:18,510 --> 01:11:20,710
broadcast to other nodes.

1858
01:11:20,930 --> 01:11:23,730
It approaches the
dissemination

1859
01:11:23,730 --> 01:11:25,050
of information on
the network as

1860
01:11:25,050 --> 01:11:28,580
a set conciliation
problem overseeing PS in

1861
01:11:28,580 --> 01:11:30,080
which case cStates
are broadcast

1862
01:11:30,080 --> 01:11:31,190
periodically or

1863
01:11:31,190 --> 01:11:32,780
when the current
state is obsolete.

1864
01:11:32,780 --> 01:11:34,265
So this obsolution either

1865
01:11:34,265 --> 01:11:36,740
happens at timeout
or whenever

1866
01:11:36,740 --> 01:11:38,630
a neighboring node
sends its cState

1867
01:11:38,630 --> 01:11:40,955
out and the
local node sees,

1868
01:11:40,955 --> 01:11:42,020
oh, there's information on

1869
01:11:42,020 --> 01:11:43,745
the network that I don't

1870
01:11:43,745 --> 01:11:47,675
know in which case
my set is obsolete.

1871
01:11:47,675 --> 01:11:50,180
So there's

1872
01:11:50,180 --> 01:11:51,605
three kinds of cases
that can happen.

1873
01:11:51,605 --> 01:11:52,850
Either the transmitter has

1874
01:11:52,850 --> 01:11:54,620
the larger lookup table

1875
01:11:54,620 --> 01:11:55,730
than the receiver in

1876
01:11:55,730 --> 01:11:57,095
which case the
receiver sees,

1877
01:11:57,095 --> 01:11:58,910
oh, there's something
on the network that

1878
01:11:58,910 --> 01:12:01,405
I don't have
in which case,

1879
01:12:01,405 --> 01:12:02,955
the receiver is
out of date.

1880
01:12:02,955 --> 01:12:04,200
It sends its own cState

1881
01:12:04,200 --> 01:12:05,505
back to the transmitter,

1882
01:12:05,505 --> 01:12:07,530
and then the
transmitter replies

1883
01:12:07,530 --> 01:12:10,480
with the cAdd with
the missing data.

1884
01:12:10,970 --> 01:12:13,320
The second case is
the transmitter has

1885
01:12:13,320 --> 01:12:15,270
a smaller IBLT
than the receiver,

1886
01:12:15,270 --> 01:12:17,595
in which case the
transmitter is out of date.

1887
01:12:17,595 --> 01:12:19,050
The receiver sees
this and sends

1888
01:12:19,050 --> 01:12:21,150
the cAdd with the missing
data in response.

1889
01:12:21,150 --> 01:12:23,280
Then finally, transmitter
and receiver has

1890
01:12:23,280 --> 01:12:25,230
the same set of
information in

1891
01:12:25,230 --> 01:12:28,050
which case it acts

1892
01:12:28,050 --> 01:12:29,250
almost as an
acknowledgment of,

1893
01:12:29,250 --> 01:12:30,570
hey, the nodes are synced

1894
01:12:30,570 --> 01:12:33,490
up and everything is good.

1895
01:12:35,120 --> 01:12:37,980
Trust domains in DeftT

1896
01:12:37,980 --> 01:12:41,370
define the domain in

1897
01:12:41,370 --> 01:12:44,230
which the DeftT
can communicate.

1898
01:12:45,410 --> 01:12:47,430
Especially for OT,

1899
01:12:47,430 --> 01:12:49,380
this has a big advantage

1900
01:12:49,380 --> 01:12:50,400
over current protocols.

1901
01:12:50,400 --> 01:12:51,900
So in traditional Internet
of course you have

1902
01:12:51,900 --> 01:12:53,730
end-to-end encryption
with third-party CAs.

1903
01:12:53,730 --> 01:12:55,080
This doesn't
make sense for

1904
01:12:55,080 --> 01:12:57,330
operational environments.

1905
01:12:57,330 --> 01:12:58,980
For example we had things

1906
01:12:58,980 --> 01:13:00,210
about automotive
networking.

1907
01:13:00,210 --> 01:13:01,470
It doesn't make
sense when you have

1908
01:13:01,470 --> 01:13:03,855
a very explicitly
defined network

1909
01:13:03,855 --> 01:13:06,630
with known entities and
known communication.

1910
01:13:06,630 --> 01:13:08,070
So now you can
take it up to

1911
01:13:08,070 --> 01:13:09,885
traditional IoT
protocols which

1912
01:13:09,885 --> 01:13:11,460
does have end-to-end
encryption with

1913
01:13:11,460 --> 01:13:13,650
locally sign certificates
and protected

1914
01:13:13,650 --> 01:13:15,390
hardware trust
enclaves which is

1915
01:13:15,390 --> 01:13:16,500
really good against men

1916
01:13:16,500 --> 01:13:17,310
in the middle of attacks,

1917
01:13:17,310 --> 01:13:20,205
but it's still vulnerable
to insider attacks.

1918
01:13:20,205 --> 01:13:21,690
So one thing that's
really important

1919
01:13:21,690 --> 01:13:23,850
that DeftT and the trust

1920
01:13:23,850 --> 01:13:25,665
domains deep to mitigate

1921
01:13:25,665 --> 01:13:29,620
the threat to application
level attacks.

1922
01:13:29,780 --> 01:13:31,380
So in this case,

1923
01:13:31,380 --> 01:13:32,640
we have the DeftT
trust domain,

1924
01:13:32,640 --> 01:13:34,050
which defines
the domain of

1925
01:13:34,050 --> 01:13:35,520
the Defined-Trust Network.

1926
01:13:35,520 --> 01:13:37,680
It's defined by a
common trust anchor and

1927
01:13:37,680 --> 01:13:39,990
assigning chain
which allows for

1928
01:13:39,990 --> 01:13:41,445
less complication with

1929
01:13:41,445 --> 01:13:44,760
per device configuration.

1930
01:13:44,760 --> 01:13:46,125
Whenever you have
a new device

1931
01:13:46,125 --> 01:13:47,100
enrolled on the network,

1932
01:13:47,100 --> 01:13:48,300
all it needs to do is have

1933
01:13:48,300 --> 01:13:49,710
a certain identity package

1934
01:13:49,710 --> 01:13:52,530
with the trust rules
which means that

1935
01:13:52,530 --> 01:13:53,580
essentially whenever
you need to

1936
01:13:53,580 --> 01:13:54,930
add a new node to

1937
01:13:54,930 --> 01:13:56,460
the network all you

1938
01:13:56,460 --> 01:13:58,050
need to do is configure
the note itself.

1939
01:13:58,050 --> 01:13:59,430
There's no broker
to configure

1940
01:13:59,430 --> 01:14:01,770
or no peer notes to
configure either,

1941
01:14:01,770 --> 01:14:03,870
and then it also has
less misplaced reliance

1942
01:14:03,870 --> 01:14:05,280
on physical network
security to

1943
01:14:05,280 --> 01:14:06,870
actually secure
the data being

1944
01:14:06,870 --> 01:14:09,435
transferred across
the network.

1945
01:14:09,435 --> 01:14:14,460
How are we doing on
time? So DeftT has

1946
01:14:14,460 --> 01:14:16,140
a very explicit
trust schema in

1947
01:14:16,140 --> 01:14:17,280
which case it provides

1948
01:14:17,280 --> 01:14:19,125
rules for who can
say what to which.

1949
01:14:19,125 --> 01:14:21,300
It is made available

1950
01:14:21,300 --> 01:14:23,010
to every identity
in the DeftT or

1951
01:14:23,010 --> 01:14:24,420
rather every entity in

1952
01:14:24,420 --> 01:14:25,980
the DeftT has to have

1953
01:14:25,980 --> 01:14:27,780
this trust schema
to communicate.

1954
01:14:27,780 --> 01:14:30,615
So rather than just
relying on, hey,

1955
01:14:30,615 --> 01:14:32,010
this node should only be

1956
01:14:32,010 --> 01:14:33,750
able to say one
thing which makes it

1957
01:14:33,750 --> 01:14:35,880
vulnerable to
attacks where

1958
01:14:35,880 --> 01:14:37,305
a certain node
is hijacked,

1959
01:14:37,305 --> 01:14:39,420
this trust schemas says,

1960
01:14:39,420 --> 01:14:40,860
these nodes can only say

1961
01:14:40,860 --> 01:14:42,300
these things to these
kinds of people.

1962
01:14:42,300 --> 01:14:43,050
So it doesn't matter if

1963
01:14:43,050 --> 01:14:44,130
a node gets hijacked or

1964
01:14:44,130 --> 01:14:46,740
the network and start
sending out garbage.

1965
01:14:46,740 --> 01:14:49,155
That trust schema
prevents the node

1966
01:14:49,155 --> 01:14:50,670
from even sending
that out in

1967
01:14:50,670 --> 01:14:52,620
the first place even
if it is hijacked.

1968
01:14:52,620 --> 01:14:56,040
It uses a domain
specific language to

1969
01:14:56,040 --> 01:14:57,780
actually
expressively define

1970
01:14:57,780 --> 01:15:00,375
the trust rules
on the network,

1971
01:15:00,375 --> 01:15:02,490
and the toolkit comes with

1972
01:15:02,490 --> 01:15:03,930
the compiler that
actually checks

1973
01:15:03,930 --> 01:15:06,990
the soundness of the
proposed trust schema,

1974
01:15:06,990 --> 01:15:08,625
compiles it into
a signed binary,

1975
01:15:08,625 --> 01:15:09,870
and then packages it in

1976
01:15:09,870 --> 01:15:11,505
with every node
on the network.

1977
01:15:11,505 --> 01:15:13,170
So the binary is

1978
01:15:13,170 --> 01:15:14,760
used at each node
to both validate

1979
01:15:14,760 --> 01:15:17,010
the incoming packages and

1980
01:15:17,010 --> 01:15:20,410
validate and build the
outgoing publications.

1981
01:15:22,330 --> 01:15:25,640
Quite we have the
device enrollment

1982
01:15:25,640 --> 01:15:28,715
which makes it
much easier for

1983
01:15:28,715 --> 01:15:31,640
network administrators
to control

1984
01:15:31,640 --> 01:15:35,235
and administrate
their networks.

1985
01:15:35,235 --> 01:15:36,420
In this case again there's

1986
01:15:36,420 --> 01:15:38,100
no brokerage to be
configured and you

1987
01:15:38,100 --> 01:15:39,270
don't need to
do anything to

1988
01:15:39,270 --> 01:15:42,285
the neighboring peers
or anything like that.

1989
01:15:42,285 --> 01:15:44,340
There's an identity
bundle that is installed

1990
01:15:44,340 --> 01:15:46,875
out-of-band for
participation in

1991
01:15:46,875 --> 01:15:48,075
the Define-Trust Network,

1992
01:15:48,075 --> 01:15:49,620
which means that all
you need to do is build

1993
01:15:49,620 --> 01:15:50,835
the trust bundle and then

1994
01:15:50,835 --> 01:15:52,605
install it in a
secure fashion.

1995
01:15:52,605 --> 01:15:53,970
So this trust bundle has

1996
01:15:53,970 --> 01:15:55,410
the trust anchor
certificate

1997
01:15:55,410 --> 01:15:56,430
in the trusts schema

1998
01:15:56,430 --> 01:15:59,010
which explicitly
defines all the roles

1999
01:15:59,010 --> 01:16:00,690
and who has those
roles on the network.

2000
01:16:00,690 --> 01:16:02,400
And then the
membership identity of

2001
01:16:02,400 --> 01:16:03,690
the specific
node which has

2002
01:16:03,690 --> 01:16:05,355
the secret signing key,

2003
01:16:05,355 --> 01:16:07,290
the public certificate,
and all the

2004
01:16:07,290 --> 01:16:10,380
certificates in
the signing chain.

2005
01:16:10,380 --> 01:16:13,019
And then key
configuration,

2006
01:16:13,019 --> 01:16:14,370
installation and
update is left

2007
01:16:14,370 --> 01:16:17,030
to the administrators of

2008
01:16:17,030 --> 01:16:19,320
the network to do as they

2009
01:16:19,320 --> 01:16:22,710
see fit hopefully in
a secure fashion.

2010
01:16:22,710 --> 01:16:25,350
So define trust
security in

2011
01:16:25,350 --> 01:16:28,650
action. We're
almost through.

2012
01:16:28,650 --> 01:16:31,410
In this case, we have
pre-publication signing

2013
01:16:31,410 --> 01:16:32,730
instead of session-based,

2014
01:16:32,730 --> 01:16:34,800
which is especially
good in OT networks,

2015
01:16:34,800 --> 01:16:36,870
especially where you
have nodes that needs to

2016
01:16:36,870 --> 01:16:37,620
run on low-power or

2017
01:16:37,620 --> 01:16:39,180
low bandwidth
and hibernate.

2018
01:16:39,180 --> 01:16:40,530
So rather than TCPIP where

2019
01:16:40,530 --> 01:16:42,555
you have session-based
security,

2020
01:16:42,555 --> 01:16:44,970
this has almost
packet based

2021
01:16:44,970 --> 01:16:47,490
security where nodes
can hibernate,

2022
01:16:47,490 --> 01:16:48,990
join the network without

2023
01:16:48,990 --> 01:16:51,945
any deviation from
the protocol.

2024
01:16:51,945 --> 01:16:53,130
The certificate changes of

2025
01:16:53,130 --> 01:16:55,140
every publication
is validated.

2026
01:16:55,140 --> 01:16:57,450
System trust policies are

2027
01:16:57,450 --> 01:16:58,815
applied via the
trust schema

2028
01:16:58,815 --> 01:17:04,740
through the different
parts in the figure.

2029
01:17:04,740 --> 01:17:06,210
So essentially the
trust requirements

2030
01:17:06,210 --> 01:17:07,905
are at the top.

2031
01:17:07,905 --> 01:17:10,090
Do we have a pointer?

2032
01:17:11,240 --> 01:17:13,575
I hope they got
it, do they?

2033
01:17:13,575 --> 01:17:15,615
So out-of-band

2034
01:17:15,615 --> 01:17:16,740
the trust requirements
that need to

2035
01:17:16,740 --> 01:17:20,580
be, I appreciate you.

2036
01:17:20,580 --> 01:17:21,900
So essentially

2037
01:17:21,900 --> 01:17:23,280
out-of-band the
site policy and

2038
01:17:23,280 --> 01:17:25,140
the standard
conformance rules

2039
01:17:25,140 --> 01:17:26,580
are all put into

2040
01:17:26,580 --> 01:17:28,860
the trust schema
and compiled

2041
01:17:28,860 --> 01:17:31,245
upon enrollment
and that's put

2042
01:17:31,245 --> 01:17:33,150
into the trust schema
on the device.

2043
01:17:33,150 --> 01:17:34,320
The trust schema
is used by

2044
01:17:34,320 --> 01:17:35,760
the publication
validator and

2045
01:17:35,760 --> 01:17:37,710
the publication
builder to verify

2046
01:17:37,710 --> 01:17:38,760
everything that's going in

2047
01:17:38,760 --> 01:17:40,215
and everything going out.

2048
01:17:40,215 --> 01:17:41,640
And then lastly,
especially

2049
01:17:41,640 --> 01:17:43,440
for the ease of
development,

2050
01:17:43,440 --> 01:17:45,090
there's a shim
that actually

2051
01:17:45,090 --> 01:17:46,830
acts as a liaison

2052
01:17:46,830 --> 01:17:49,470
between all the
DeftT components

2053
01:17:49,470 --> 01:17:50,610
and the device specific or

2054
01:17:50,610 --> 01:17:53,050
the application
specific code.

2055
01:17:55,850 --> 01:17:58,080
>> For the last
two things,

2056
01:17:58,080 --> 01:17:59,280
we're going to
have examples.

2057
01:17:59,280 --> 01:18:01,710
So a commissioning
example would be

2058
01:18:01,710 --> 01:18:04,590
to create the
trust schema,

2059
01:18:04,590 --> 01:18:06,825
compile it into the
compact binary,

2060
01:18:06,825 --> 01:18:11,040
put it into the
identity bundle,

2061
01:18:11,040 --> 01:18:13,350
make the certificates, and

2062
01:18:13,350 --> 01:18:15,840
then install it into
the actual note.

2063
01:18:15,840 --> 01:18:17,160
And all you have to
do is repeat this

2064
01:18:17,160 --> 01:18:19,570
for every node
on the network.

2065
01:18:20,120 --> 01:18:22,050
And so finally, just an

2066
01:18:22,050 --> 01:18:23,340
overview of the security

2067
01:18:23,340 --> 01:18:26,070
that this is
particularly good for.

2068
01:18:26,070 --> 01:18:28,230
It protects against
all the data

2069
01:18:28,230 --> 01:18:29,610
is secured by the
trust schema.

2070
01:18:29,610 --> 01:18:30,720
It's protected by the NDN

2071
01:18:30,720 --> 01:18:32,490
validator and
prevents against

2072
01:18:32,490 --> 01:18:34,170
all application
level threats

2073
01:18:34,170 --> 01:18:35,850
that could be posed
to the network.

2074
01:18:35,850 --> 01:18:37,550
It has a validated

2075
01:18:37,550 --> 01:18:39,500
to protect against
corruption,

2076
01:18:39,500 --> 01:18:42,035
denial of service, and
information leakage

2077
01:18:42,035 --> 01:18:44,420
is reliant on local
network security.

2078
01:18:44,420 --> 01:18:48,495
The SyncTS
protocol provides

2079
01:18:48,495 --> 01:18:51,990
resiliency against
dropped PDUs,

2080
01:18:51,990 --> 01:18:53,700
especially with
the peer-to-peer

2081
01:18:53,700 --> 01:18:56,160
publish-subscribe
architecture.

2082
01:18:56,160 --> 01:18:58,680
The DeftT's trust
management engine

2083
01:18:58,680 --> 01:19:00,300
and the validator
protects against

2084
01:19:00,300 --> 01:19:02,040
spoofing of messages and

2085
01:19:02,040 --> 01:19:04,440
then replay attacks
are built into

2086
01:19:04,440 --> 01:19:07,200
the cAdd and cState
architecture as cAdd

2087
01:19:07,200 --> 01:19:10,110
can only respond to
a specific cState.

2088
01:19:10,110 --> 01:19:11,130
So if you have
someone doing

2089
01:19:11,130 --> 01:19:11,940
replay attacks of

2090
01:19:11,940 --> 01:19:13,395
different nodes
on the network,

2091
01:19:13,395 --> 01:19:16,530
they'll just be
dropped and ignored.

2092
01:19:16,530 --> 01:19:18,810
So in conclusion, this was

2093
01:19:18,810 --> 01:19:21,465
a much quicker than
expected overview

2094
01:19:21,465 --> 01:19:24,030
of secure brokerless
Pub/Sub for

2095
01:19:24,030 --> 01:19:25,290
operational technology

2096
01:19:25,290 --> 01:19:27,360
and IoT networks through

2097
01:19:27,360 --> 01:19:29,310
defined trust
transport with

2098
01:19:29,310 --> 01:19:32,370
a resilient set
reconciliation algorithm,

2099
01:19:32,370 --> 01:19:34,395
and that provides

2100
01:19:34,395 --> 01:19:35,550
a highly risk expressive

2101
01:19:35,550 --> 01:19:37,290
security framework for

2102
01:19:37,290 --> 01:19:39,420
well-defined operational

2103
01:19:39,420 --> 01:19:41,560
technology environments.

2104
01:19:41,810 --> 01:19:43,995
And we're back on track.

2105
01:19:43,995 --> 01:19:45,210
>> Great. Thank you.

2106
01:19:45,210 --> 01:19:46,440
>> Great. Any questions?

2107
01:19:46,440 --> 01:19:54,870
>> Questions.
[APPLAUSE] Put

2108
01:19:54,870 --> 01:19:55,920
this in the Slack,

2109
01:19:55,920 --> 01:20:00,060
but there's some
relationship here with

2110
01:20:00,060 --> 01:20:02,130
the DCT work that
was described

2111
01:20:02,130 --> 01:20:04,470
in the ICN 2019 paper.

2112
01:20:04,470 --> 01:20:06,840
Could you elaborate on

2113
01:20:06,840 --> 01:20:09,825
is this adding to that?

2114
01:20:09,825 --> 01:20:16,185
Is DCT a building
block part of this?

2115
01:20:16,185 --> 01:20:18,870
Kathleen says it's
an evolution.

2116
01:20:18,870 --> 01:20:21,890
[LAUGHTER]

2117
01:20:21,890 --> 01:20:22,745
>> Thanks Kathleen.

2118
01:20:22,745 --> 01:20:24,180
>> Thank you.

2119
01:20:24,340 --> 01:20:27,900
>> So it's describing
the work done there.

2120
01:20:29,830 --> 01:20:32,580
>> Any other questions?

2121
01:20:34,240 --> 01:20:36,050
>> Thank you. [APPLAUSE]

2122
01:20:36,050 --> 01:20:37,230
>> Randy?

2123
01:20:47,930 --> 01:20:50,070
Now we're going to
hear from Randy,

2124
01:20:50,070 --> 01:20:52,665
who is this current
CTO of Oprah networks.

2125
01:20:52,665 --> 01:20:54,075
Do I need to read
the whole thing?

2126
01:20:54,075 --> 01:20:59,610
>> No. [LAUGHTER]

2127
01:20:59,610 --> 01:21:06,840
>> Not what I'm
standing on here.

2128
01:21:06,840 --> 01:21:10,170
Not firm ground usually
when I'm up here.

2129
01:21:10,170 --> 01:21:13,600
Not a trivial problem.

2130
01:21:13,880 --> 01:21:15,660
Yes, so that's a phrase

2131
01:21:15,660 --> 01:21:16,620
I've been using all day

2132
01:21:16,620 --> 01:21:20,205
with operant team is,
this stuff is tricky.

2133
01:21:20,205 --> 01:21:22,635
It's not as easy
as it sounds,

2134
01:21:22,635 --> 01:21:24,165
then you get
interested in you

2135
01:21:24,165 --> 01:21:25,620
can't let go of
these problems.

2136
01:21:25,620 --> 01:21:27,150
But anyway, I'm here in

2137
01:21:27,150 --> 01:21:29,400
a somewhat odd
role in that,

2138
01:21:29,400 --> 01:21:32,070
I'm presenting
a presentation

2139
01:21:32,070 --> 01:21:32,730
around the use of

2140
01:21:32,730 --> 01:21:34,470
Trusted Platform
Modules with

2141
01:21:34,470 --> 01:21:36,210
the defined
trust transport

2142
01:21:36,210 --> 01:21:37,755
that Saran just reviewed.

2143
01:21:37,755 --> 01:21:40,260
And this was prepared

2144
01:21:40,260 --> 01:21:41,370
by operants principal

2145
01:21:41,370 --> 01:21:42,600
scientist Roger
Youngerman,

2146
01:21:42,600 --> 01:21:44,670
but he has personal
commitment this week,

2147
01:21:44,670 --> 01:21:45,690
so I get to present.

2148
01:21:45,690 --> 01:21:48,240
So that gives me one
level of deniability.

2149
01:21:48,240 --> 01:21:50,730
But even better is I'm

2150
01:21:50,730 --> 01:21:54,015
here as a user
of this stuff.

2151
01:21:54,015 --> 01:21:56,070
So I can bring you guys

2152
01:21:56,070 --> 01:21:57,390
problems and you can't

2153
01:21:57,390 --> 01:21:59,220
complain that I don
t know the answer.

2154
01:21:59,220 --> 01:22:00,570
So this is much
better than

2155
01:22:00,570 --> 01:22:02,940
being a peer
of this group.

2156
01:22:02,940 --> 01:22:04,890
I'm going to talk
about what we use it

2157
01:22:04,890 --> 01:22:06,570
for and then I'm going to

2158
01:22:06,570 --> 01:22:07,770
talk about how we solve

2159
01:22:07,770 --> 01:22:10,665
the specific problem
that's related to

2160
01:22:10,665 --> 01:22:12,075
trying to use

2161
01:22:12,075 --> 01:22:13,739
Indian type technology

2162
01:22:13,739 --> 01:22:15,675
in real-world
applications.

2163
01:22:15,675 --> 01:22:17,190
I would be happy
if someone

2164
01:22:17,190 --> 01:22:18,480
came up to me
afterwards and said,

2165
01:22:18,480 --> 01:22:19,890
you did all that
wrong because then

2166
01:22:19,890 --> 01:22:21,390
we could fix it but I

2167
01:22:21,390 --> 01:22:23,040
thought it was good
to expose what we're

2168
01:22:23,040 --> 01:22:24,360
doing in the sense of

2169
01:22:24,360 --> 01:22:25,950
no security by obscurity.

2170
01:22:25,950 --> 01:22:27,420
Here's how we
were implementing

2171
01:22:27,420 --> 01:22:29,010
the secure storage of

2172
01:22:29,010 --> 01:22:32,040
private keys because
that's fundamental.

2173
01:22:32,040 --> 01:22:34,110
To talk a little
about what we

2174
01:22:34,110 --> 01:22:35,685
do for those that
don't know me,

2175
01:22:35,685 --> 01:22:37,470
we're all about
energy right now,

2176
01:22:37,470 --> 01:22:40,215
so energy takes
many forms.

2177
01:22:40,215 --> 01:22:42,225
What I'm going to
talk about today is

2178
01:22:42,225 --> 01:22:44,460
particularly relevant
to utility natural.

2179
01:22:44,460 --> 01:22:46,370
So we have a
representative

2180
01:22:46,370 --> 01:22:47,810
here from
Constellation Energy,

2181
01:22:47,810 --> 01:22:49,700
who's one of our
major investors,

2182
01:22:49,700 --> 01:22:51,680
and we haven't
deployed systems now

2183
01:22:51,680 --> 01:22:54,700
running in Indian
interest data transport,

2184
01:22:54,700 --> 01:22:57,360
controlling 25
large-scale power plants

2185
01:22:57,360 --> 01:22:58,710
over most of
the East Coast.

2186
01:22:58,710 --> 01:23:00,510
And so we're controlling

2187
01:23:00,510 --> 01:23:03,300
a significant chunk of
the energy in the US,

2188
01:23:03,300 --> 01:23:05,385
electrical energy
through Indian,

2189
01:23:05,385 --> 01:23:08,220
which is not probably
widely known,

2190
01:23:08,220 --> 01:23:09,810
not that we're hiding it,

2191
01:23:09,810 --> 01:23:11,790
but I think it's
cool and speaks

2192
01:23:11,790 --> 01:23:14,430
to the progress that's
been made in Indian.

2193
01:23:14,430 --> 01:23:16,560
So what are the attributes

2194
01:23:16,560 --> 01:23:18,300
of an energy application?

2195
01:23:18,300 --> 01:23:21,210
Well, there's a bunch
of different users,

2196
01:23:21,210 --> 01:23:23,565
so there's people that
have utility systems.

2197
01:23:23,565 --> 01:23:25,169
There's all the way
down to homeowners.

2198
01:23:25,169 --> 01:23:26,430
There's people
who aggregate

2199
01:23:26,430 --> 01:23:28,380
energy at the
intermediates.

2200
01:23:28,380 --> 01:23:31,080
These things go over
complicated networks

2201
01:23:31,080 --> 01:23:32,924
with Cloud services,

2202
01:23:32,924 --> 01:23:34,920
all kinds of transports.

2203
01:23:34,920 --> 01:23:36,540
And eventually
they get down to

2204
01:23:36,540 --> 01:23:37,770
the distributed assets

2205
01:23:37,770 --> 01:23:39,345
that are out in the field.

2206
01:23:39,345 --> 01:23:41,430
So thinking back to

2207
01:23:41,430 --> 01:23:43,019
this morning in
the conversation

2208
01:23:43,019 --> 01:23:44,520
over the reasons that

2209
01:23:44,520 --> 01:23:46,455
there's barriers
to adoption.

2210
01:23:46,455 --> 01:23:48,600
I believe we found
a good application

2211
01:23:48,600 --> 01:23:50,579
which needs a couple of
the key requirements,

2212
01:23:50,579 --> 01:23:51,660
which is one, they really

2213
01:23:51,660 --> 01:23:52,860
care about cybersecurity.

2214
01:23:52,860 --> 01:23:55,425
Utilities are
serious about this.

2215
01:23:55,425 --> 01:23:57,990
Secondarily, it's
a limited domain.

2216
01:23:57,990 --> 01:23:59,610
So in the context of

2217
01:23:59,610 --> 01:24:01,260
the stuff that Tran
was talking about,

2218
01:24:01,260 --> 01:24:02,310
Kathy Nichols work,

2219
01:24:02,310 --> 01:24:04,170
undefined trust transport,

2220
01:24:04,170 --> 01:24:07,335
it is a very
restricted domain and

2221
01:24:07,335 --> 01:24:08,760
I think it was
Ivan maybe or

2222
01:24:08,760 --> 01:24:10,680
Kathy that said that the,

2223
01:24:10,680 --> 01:24:12,900
or maybe Lisa,
internet was

2224
01:24:12,900 --> 01:24:14,925
designed to deliver
everything,

2225
01:24:14,925 --> 01:24:15,990
everywhere and that's

2226
01:24:15,990 --> 01:24:17,220
the exact opposite of what

2227
01:24:17,220 --> 01:24:20,145
a utility [LAUGHTER]
network wants to do.

2228
01:24:20,145 --> 01:24:21,450
So there's quite a bit of

2229
01:24:21,450 --> 01:24:23,850
distinguishers
from what we're

2230
01:24:23,850 --> 01:24:25,800
doing to the
general problem

2231
01:24:25,800 --> 01:24:28,230
of Internet forwarding.

2232
01:24:28,230 --> 01:24:30,585
So what does that lead to?

2233
01:24:30,585 --> 01:24:32,490
Well, there's a lot of

2234
01:24:32,490 --> 01:24:34,530
drivers drive in our
business forward,

2235
01:24:34,530 --> 01:24:36,780
which is existing

2236
01:24:36,780 --> 01:24:38,355
utility networks
have relied

2237
01:24:38,355 --> 01:24:40,755
a lot on least private
fiber networks

2238
01:24:40,755 --> 01:24:42,345
to connect sites.

2239
01:24:42,345 --> 01:24:43,665
Works fine if you have a

2240
01:24:43,665 --> 01:24:47,310
500 megawatt utility-scale
generation site.

2241
01:24:47,310 --> 01:24:48,450
But what happens
when you have

2242
01:24:48,450 --> 01:24:52,215
a 10 megawatt solar
site on a Walmart roof?

2243
01:24:52,215 --> 01:24:54,450
It's not practical
to have leased lines

2244
01:24:54,450 --> 01:24:56,880
to every single thing.

2245
01:24:56,880 --> 01:24:59,040
A lot of the utility
protocols are so

2246
01:24:59,040 --> 01:25:01,829
old that they're
completely insecure.

2247
01:25:01,829 --> 01:25:03,180
The MP3 mod bus,

2248
01:25:03,180 --> 01:25:04,260
there just aren't concepts

2249
01:25:04,260 --> 01:25:05,100
of security there,

2250
01:25:05,100 --> 01:25:07,380
so there's an
opportunity to provide

2251
01:25:07,380 --> 01:25:08,850
security for
the first time

2252
01:25:08,850 --> 01:25:10,365
to the existing protocols.

2253
01:25:10,365 --> 01:25:11,879
Similar to the
conversation

2254
01:25:11,879 --> 01:25:13,290
around the
automotive buses.

2255
01:25:13,290 --> 01:25:16,530
A lot of network security

2256
01:25:16,530 --> 01:25:17,670
now is pointing to points

2257
01:25:17,670 --> 01:25:18,900
and they get a
bunch of firewalls.

2258
01:25:18,900 --> 01:25:20,655
You've got a whole
bunch of IT people.

2259
01:25:20,655 --> 01:25:22,680
I think Adam, you said
it takes four weeks

2260
01:25:22,680 --> 01:25:25,380
to change a firewall
rule in constitution?

2261
01:25:25,380 --> 01:25:28,200
Yes. So I think we

2262
01:25:28,200 --> 01:25:30,960
have multiple firewalls in

2263
01:25:30,960 --> 01:25:32,220
our system with NDM,

2264
01:25:32,220 --> 01:25:33,480
we don't have to
reconfigure them

2265
01:25:33,480 --> 01:25:34,965
each time we
add a new site

2266
01:25:34,965 --> 01:25:36,615
because we're
not using the

2267
01:25:36,615 --> 01:25:39,330
point-to-point protocol
security as much.

2268
01:25:39,330 --> 01:25:41,760
So a lot of valuables.

2269
01:25:41,760 --> 01:25:43,830
And then the
final thing is

2270
01:25:43,830 --> 01:25:44,955
renewables are coming

2271
01:25:44,955 --> 01:25:46,620
everywhere and
it's just huge.

2272
01:25:46,620 --> 01:25:47,760
I'm from California. So I

2273
01:25:47,760 --> 01:25:49,140
just see it every day.

2274
01:25:49,140 --> 01:25:51,150
But as I come out

2275
01:25:51,150 --> 01:25:52,110
to the East
Coast now all of

2276
01:25:52,110 --> 01:25:53,070
a sudden when I'm landing,

2277
01:25:53,070 --> 01:25:54,645
I see solar everywhere.

2278
01:25:54,645 --> 01:25:57,420
And so this is just
going to happen.

2279
01:25:57,420 --> 01:25:58,800
And you can't physically

2280
01:25:58,800 --> 01:26:00,915
control things once
they get small enough.

2281
01:26:00,915 --> 01:26:02,310
Most of the solar sites

2282
01:26:02,310 --> 01:26:03,480
in the world are unmanned.

2283
01:26:03,480 --> 01:26:05,670
There's nobody there.
This might be a fence,

2284
01:26:05,670 --> 01:26:07,680
but it's not going
to stop anybody.

2285
01:26:07,680 --> 01:26:09,150
And so security takes

2286
01:26:09,150 --> 01:26:12,220
a whole new look
for utilities.

2287
01:26:12,320 --> 01:26:14,550
I just spent like what,

2288
01:26:14,550 --> 01:26:17,205
10 minutes talking
about this slides.

2289
01:26:17,205 --> 01:26:19,770
But what we're doing,

2290
01:26:19,770 --> 01:26:22,080
the tightest of
previous talk is we're

2291
01:26:22,080 --> 01:26:24,555
using Kathy's defined
trusted shrank,

2292
01:26:24,555 --> 01:26:26,640
publish-subscribe
thing and we're

2293
01:26:26,640 --> 01:26:28,665
just in the process
of replacing

2294
01:26:28,665 --> 01:26:30,255
our first-generation of

2295
01:26:30,255 --> 01:26:31,980
interest data
exchange protocol

2296
01:26:31,980 --> 01:26:33,595
with a Pub/Sub version.

2297
01:26:33,595 --> 01:26:35,420
And what it's going
to do is give

2298
01:26:35,420 --> 01:26:37,190
all the access
control stuff

2299
01:26:37,190 --> 01:26:38,570
that define trust brings,

2300
01:26:38,570 --> 01:26:39,770
which is really
relevant to

2301
01:26:39,770 --> 01:26:40,970
a lot of the
previous talks

2302
01:26:40,970 --> 01:26:42,380
about how do you control

2303
01:26:42,380 --> 01:26:44,215
who can say what to who?

2304
01:26:44,215 --> 01:26:48,330
And so, just to give
a conceptual diagram,

2305
01:26:48,330 --> 01:26:51,495
we're going to be taking
different sources,

2306
01:26:51,495 --> 01:26:53,160
a complex mesh of

2307
01:26:53,160 --> 01:26:56,055
interconnections in a
whole bunch of sites.

2308
01:26:56,055 --> 01:26:57,990
So it's going to get

2309
01:26:57,990 --> 01:26:59,640
big and it's going
to get complicated,

2310
01:26:59,640 --> 01:27:01,980
but with the defined
trust thing,

2311
01:27:01,980 --> 01:27:03,840
the network can
be complicated,

2312
01:27:03,840 --> 01:27:06,240
but trust
relationships can be

2313
01:27:06,240 --> 01:27:07,830
maintained and distinct

2314
01:27:07,830 --> 01:27:10,180
from the network
connections.

2315
01:27:10,770 --> 01:27:12,820
>> So this was something I

2316
01:27:12,820 --> 01:27:13,930
put out here because
we're coming to

2317
01:27:13,930 --> 01:27:15,010
NIST floppy and I thought

2318
01:27:15,010 --> 01:27:16,150
I should do
something with NIST,

2319
01:27:16,150 --> 01:27:17,200
but also so I could

2320
01:27:17,200 --> 01:27:19,855
get someone else's
opinion about this.

2321
01:27:19,855 --> 01:27:21,850
What I'm going
to talk about is

2322
01:27:21,850 --> 01:27:23,770
secure storage
of private keys

2323
01:27:23,770 --> 01:27:25,510
and gateways so that
how we can make

2324
01:27:25,510 --> 01:27:27,790
these field gateways
very secure.

2325
01:27:27,790 --> 01:27:29,560
And as I was reading,

2326
01:27:29,560 --> 01:27:31,150
I was thinking
this is relevant

2327
01:27:31,150 --> 01:27:33,175
to like multi-factor
authentication.

2328
01:27:33,175 --> 01:27:36,370
So in a human
login situation,

2329
01:27:36,370 --> 01:27:38,050
you have the things
we're all used to.

2330
01:27:38,050 --> 01:27:39,700
You log in, so you
have a password,

2331
01:27:39,700 --> 01:27:41,590
something you know, you

2332
01:27:41,590 --> 01:27:43,510
get a text message
on your phone,

2333
01:27:43,510 --> 01:27:45,670
which is something
you have and maybe

2334
01:27:45,670 --> 01:27:47,020
you touched the
fingerprint

2335
01:27:47,020 --> 01:27:48,280
sensor or use your face,

2336
01:27:48,280 --> 01:27:49,645
which is something you are

2337
01:27:49,645 --> 01:27:52,120
and now you have
access to a system.

2338
01:27:52,120 --> 01:27:54,280
And this says the
more the better,

2339
01:27:54,280 --> 01:27:55,720
but for the purposes

2340
01:27:55,720 --> 01:27:57,340
of these particular
guidelines,

2341
01:27:57,340 --> 01:27:58,870
two factors is
adequate for

2342
01:27:58,870 --> 01:28:00,880
the highest security then.

2343
01:28:00,880 --> 01:28:02,350
So in our gateways that we

2344
01:28:02,350 --> 01:28:04,225
deploy at these
field sites,

2345
01:28:04,225 --> 01:28:06,070
we're using two

2346
01:28:06,070 --> 01:28:07,990
distinct authentication
methods.

2347
01:28:07,990 --> 01:28:11,500
One is the
administrator logins to

2348
01:28:11,500 --> 01:28:13,120
these devices
which are strictly

2349
01:28:13,120 --> 01:28:15,085
controlled and then,

2350
01:28:15,085 --> 01:28:16,210
of course, we're
going to use

2351
01:28:16,210 --> 01:28:18,250
a TPM controlling
a private key.

2352
01:28:18,250 --> 01:28:20,200
The trust transport uses

2353
01:28:20,200 --> 01:28:22,675
to identify that node.

2354
01:28:22,675 --> 01:28:23,980
And the combination
of those

2355
01:28:23,980 --> 01:28:27,040
two provides, in my
mind, a multi-factor

2356
01:28:27,040 --> 01:28:28,960
approach, but that
may be wrong.

2357
01:28:28,960 --> 01:28:30,010
So I put it out here

2358
01:28:30,010 --> 01:28:32,240
to think about
it a little bit.

2359
01:28:32,240 --> 01:28:34,725
But this is where
we're headed with it,

2360
01:28:34,725 --> 01:28:36,329
which is for
these unattended

2361
01:28:36,329 --> 01:28:37,940
distributed devices,

2362
01:28:37,940 --> 01:28:39,370
we have password,
something you

2363
01:28:39,370 --> 01:28:40,960
know, we have TPMs,

2364
01:28:40,960 --> 01:28:42,160
which are hardware on

2365
01:28:42,160 --> 01:28:44,800
that device, uniquely
identify it.

2366
01:28:44,800 --> 01:28:46,840
And so what I wanted

2367
01:28:46,840 --> 01:28:49,510
to describe a little
bit was how we have to

2368
01:28:49,510 --> 01:28:54,670
add access to the TPMs
to the Indian codebase

2369
01:28:54,670 --> 01:28:55,900
because that's
not something

2370
01:28:55,900 --> 01:28:57,250
that the academic
community

2371
01:28:57,250 --> 01:28:58,480
provides because these are

2372
01:28:58,480 --> 01:29:01,300
real-world
physical devices.

2373
01:29:01,300 --> 01:29:04,690
So when you look at TPMs,

2374
01:29:04,690 --> 01:29:06,700
there's a whole lot
of different ways

2375
01:29:06,700 --> 01:29:08,770
that they work and, well,

2376
01:29:08,770 --> 01:29:10,930
Roger, in fact, put

2377
01:29:10,930 --> 01:29:12,040
a bunch of things
in here that we

2378
01:29:12,040 --> 01:29:13,660
can use the
resources later

2379
01:29:13,660 --> 01:29:15,385
if you want to look back
and think about it.

2380
01:29:15,385 --> 01:29:18,100
But basically there are
different levels of

2381
01:29:18,100 --> 01:29:19,780
security depending
on where you

2382
01:29:19,780 --> 01:29:22,360
store the private key
once you encrypt them.

2383
01:29:22,360 --> 01:29:23,920
And so they can

2384
01:29:23,920 --> 01:29:26,800
be stored internally
on these chips,

2385
01:29:26,800 --> 01:29:29,335
they can be encrypted
and put on disks.

2386
01:29:29,335 --> 01:29:31,810
Assigning can be
internal to the chip,

2387
01:29:31,810 --> 01:29:34,360
so it's a little more
resistant to hacking.

2388
01:29:34,360 --> 01:29:35,965
So there's
different levels of

2389
01:29:35,965 --> 01:29:38,800
security depending on
how you implement it.

2390
01:29:38,800 --> 01:29:40,660
And then the TPMs

2391
01:29:40,660 --> 01:29:42,715
themselves take
different forms.

2392
01:29:42,715 --> 01:29:46,030
So the word TPM
doesn't imply

2393
01:29:46,030 --> 01:29:47,770
necessarily a

2394
01:29:47,770 --> 01:29:49,750
specific physical
implementation.

2395
01:29:49,750 --> 01:29:51,595
People talk about
software TPMs.

2396
01:29:51,595 --> 01:29:53,200
They're not really
even a thing,

2397
01:29:53,200 --> 01:29:55,300
they're literally
just simulators of

2398
01:29:55,300 --> 01:29:58,045
physical TPMs that are
completely insecure.

2399
01:29:58,045 --> 01:29:59,740
And yet we find
people using

2400
01:29:59,740 --> 01:30:02,110
them like they
were really TPMs.

2401
01:30:02,110 --> 01:30:04,420
And you go up this
chain and you can get

2402
01:30:04,420 --> 01:30:06,790
higher up, that's level.

2403
01:30:06,790 --> 01:30:08,860
We're working with
discrete TPMs,

2404
01:30:08,860 --> 01:30:12,370
so on board devices
that are tamper

2405
01:30:12,370 --> 01:30:15,489
resistant and
are reasonably

2406
01:30:15,489 --> 01:30:17,320
inexpensive in the
few dollar range.

2407
01:30:17,320 --> 01:30:19,285
So that's where Operant

2408
01:30:19,285 --> 01:30:21,890
chose then to implement.

2409
01:30:22,080 --> 01:30:24,790
This is probably redundant

2410
01:30:24,790 --> 01:30:25,990
to the previous
description,

2411
01:30:25,990 --> 01:30:28,270
but I wanted to show
that we are going to use

2412
01:30:28,270 --> 01:30:31,870
the trust schemas that

2413
01:30:31,870 --> 01:30:35,380
VerSec provides to
control access.

2414
01:30:35,380 --> 01:30:36,880
Initially, it
will be a very

2415
01:30:36,880 --> 01:30:38,800
simple name based system,

2416
01:30:38,800 --> 01:30:40,690
like we'll say this
master control center

2417
01:30:40,690 --> 01:30:41,875
can talk to this site,

2418
01:30:41,875 --> 01:30:43,840
but no other site can
talk to that site.

2419
01:30:43,840 --> 01:30:46,120
Really simple
restrictions over

2420
01:30:46,120 --> 01:30:47,200
time as we learn how

2421
01:30:47,200 --> 01:30:48,910
to use these
trust schemas,

2422
01:30:48,910 --> 01:30:50,170
I'm hoping we
learn all kinds of

2423
01:30:50,170 --> 01:30:53,650
useful application
related things

2424
01:30:53,650 --> 01:30:55,180
like third-party access to

2425
01:30:55,180 --> 01:30:56,620
limited datasets
and things.

2426
01:30:56,620 --> 01:30:58,120
All these things
are necessary in

2427
01:30:58,120 --> 01:31:01,940
the industry and we're
evolving towards them.

2428
01:31:06,210 --> 01:31:09,130
This is just an
indicative diagram

2429
01:31:09,130 --> 01:31:10,660
to show that in order to

2430
01:31:10,660 --> 01:31:14,290
have a defined
trust system,

2431
01:31:14,290 --> 01:31:15,310
you need a trust anchor,

2432
01:31:15,310 --> 01:31:16,990
which is what
Tehran brought up,

2433
01:31:16,990 --> 01:31:18,640
which is a common
trust anchor,

2434
01:31:18,640 --> 01:31:20,230
very simple in a utility

2435
01:31:20,230 --> 01:31:21,520
network because
they want that,

2436
01:31:21,520 --> 01:31:24,010
they want one
corporate route

2437
01:31:24,010 --> 01:31:25,030
of trust and everything

2438
01:31:25,030 --> 01:31:26,830
to flow down from that.

2439
01:31:26,830 --> 01:31:28,600
So in our case,
we would have

2440
01:31:28,600 --> 01:31:29,830
different roles as

2441
01:31:29,830 --> 01:31:32,800
defined in the protocol.

2442
01:31:32,800 --> 01:31:34,480
And each one would
be associated with

2443
01:31:34,480 --> 01:31:37,330
a TPM private key that
is then represented

2444
01:31:37,330 --> 01:31:38,665
with a certificate that

2445
01:31:38,665 --> 01:31:40,750
fits into the trust
schema and all that goes

2446
01:31:40,750 --> 01:31:42,310
together in an
identity bundle and

2447
01:31:42,310 --> 01:31:43,600
the full signing chain is

2448
01:31:43,600 --> 01:31:46,250
the identity
of the device.

2449
01:31:46,980 --> 01:31:51,265
And then every
publication, as mentioned,

2450
01:31:51,265 --> 01:31:54,070
is validated as it's

2451
01:31:54,070 --> 01:31:55,480
received and as it's sent.

2452
01:31:55,480 --> 01:31:57,580
So it's like a belt and

2453
01:31:57,580 --> 01:31:58,900
suspenders kind
of approach

2454
01:31:58,900 --> 01:32:00,985
to security, I
like it a lot.

2455
01:32:00,985 --> 01:32:03,700
The certificate
chain is validated,

2456
01:32:03,700 --> 01:32:05,110
how far up and down the

2457
01:32:05,110 --> 01:32:06,910
chain this variable
with time,

2458
01:32:06,910 --> 01:32:08,350
so you can have
different levels of

2459
01:32:08,350 --> 01:32:11,200
persistence of keys
and certificates.

2460
01:32:11,200 --> 01:32:13,030
But all of this
is built into

2461
01:32:13,030 --> 01:32:14,575
the transport
levels so that

2462
01:32:14,575 --> 01:32:16,570
Operant only has to
know how to use it.

2463
01:32:16,570 --> 01:32:18,219
We only have to
know how to define

2464
01:32:18,219 --> 01:32:19,420
the identities
and the keys.

2465
01:32:19,420 --> 01:32:21,610
We don't have to build
the infrastructure.

2466
01:32:21,610 --> 01:32:24,655
And that's proving
to be good.

2467
01:32:24,655 --> 01:32:27,010
When our software
developers

2468
01:32:27,010 --> 01:32:29,740
take the DeftT codebase
and they look at it,

2469
01:32:29,740 --> 01:32:30,910
they go like,
this makes sense.

2470
01:32:30,910 --> 01:32:32,020
We can just use this.

2471
01:32:32,020 --> 01:32:32,815
And I think that

2472
01:32:32,815 --> 01:32:34,300
experience is
what people were

2473
01:32:34,300 --> 01:32:35,530
asking for this morning

2474
01:32:35,530 --> 01:32:36,850
and I think we're
getting closer.

2475
01:32:36,850 --> 01:32:39,530
So I want to be
encouraged in that.

2476
01:32:40,200 --> 01:32:42,280
In the interest
of time, I'm

2477
01:32:42,280 --> 01:32:43,780
probably going to
skip through this,

2478
01:32:43,780 --> 01:32:45,730
but maybe just mention

2479
01:32:45,730 --> 01:32:48,490
that we're doing a lot of

2480
01:32:48,490 --> 01:32:51,760
packet level
decrypting and

2481
01:32:51,760 --> 01:32:53,560
validation and so we

2482
01:32:53,560 --> 01:32:55,030
have to have
keys in memory,

2483
01:32:55,030 --> 01:32:56,155
so we don't want to have

2484
01:32:56,155 --> 01:32:58,180
the long term
keys in memory.

2485
01:32:58,180 --> 01:33:00,400
So we spin up
instances keys and we

2486
01:33:00,400 --> 01:33:02,980
keep ephemeral
keys and we trace

2487
01:33:02,980 --> 01:33:04,810
them back in

2488
01:33:04,810 --> 01:33:06,610
a user-defined method
so you can set

2489
01:33:06,610 --> 01:33:08,680
a period where you
want keys to be valid

2490
01:33:08,680 --> 01:33:12,140
so you can set a
security level effect.

2491
01:33:12,960 --> 01:33:15,070
Final thing I
want to mention

2492
01:33:15,070 --> 01:33:16,705
is something we're
interested in

2493
01:33:16,705 --> 01:33:20,440
pursuing and likely to
is that now that we

2494
01:33:20,440 --> 01:33:22,345
have this gateway with

2495
01:33:22,345 --> 01:33:24,430
the DeftT protocol
running on a Linux box,

2496
01:33:24,430 --> 01:33:25,090
we're realizing

2497
01:33:25,090 --> 01:33:27,385
our real
vulnerabilities as DOS.

2498
01:33:27,385 --> 01:33:29,440
We ran a security scan

2499
01:33:29,440 --> 01:33:31,270
on the latest Ubuntu
and I think there were

2500
01:33:31,270 --> 01:33:33,640
500 and something
NIST vulnerabilities

2501
01:33:33,640 --> 01:33:35,020
identified on the box.

2502
01:33:35,020 --> 01:33:36,160
Not all real,

2503
01:33:36,160 --> 01:33:40,210
but too many to be
comfortable with.

2504
01:33:40,210 --> 01:33:41,890
What I think the best way

2505
01:33:41,890 --> 01:33:43,000
forward is and
what we'd like to

2506
01:33:43,000 --> 01:33:46,495
investigate is running
the basic transport

2507
01:33:46,495 --> 01:33:48,400
and a monitor
system within

2508
01:33:48,400 --> 01:33:51,130
a trusted execution
environment processor so

2509
01:33:51,130 --> 01:33:55,149
that we can take
the basic security,

2510
01:33:55,149 --> 01:33:58,060
isolate the rich
environment from

2511
01:33:58,060 --> 01:34:00,055
the outside world and

2512
01:34:00,055 --> 01:34:02,110
provide all the security,

2513
01:34:02,110 --> 01:34:04,210
but without the OS threats

2514
01:34:04,210 --> 01:34:07,960
that otherwise become
predominantly a thing.

2515
01:34:07,960 --> 01:34:11,110
So that's our
conclusion overall,

2516
01:34:11,110 --> 01:34:12,400
is we're super happy with

2517
01:34:12,400 --> 01:34:13,915
the defined-trust thing.

2518
01:34:13,915 --> 01:34:15,520
We believe the TPMs are

2519
01:34:15,520 --> 01:34:17,020
an essential
part of securing

2520
01:34:17,020 --> 01:34:18,580
the hardware devices.

2521
01:34:18,580 --> 01:34:20,020
And we think that adding

2522
01:34:20,020 --> 01:34:21,670
a trusted execution
environment

2523
01:34:21,670 --> 01:34:22,450
at the end would create

2524
01:34:22,450 --> 01:34:24,280
a really good
overall product for

2525
01:34:24,280 --> 01:34:25,615
these energy

2526
01:34:25,615 --> 01:34:28,675
and critical infrastructure
kinds of things.

2527
01:34:28,675 --> 01:34:31,225
And I guess
that concludes.

2528
01:34:31,225 --> 01:34:37,655
Questions? [APPLAUSE]

2529
01:34:37,655 --> 01:34:39,305
>> Saw activity on Slack

2530
01:34:39,305 --> 01:34:40,580
that you might want to
take a look at too.

2531
01:34:40,580 --> 01:34:41,335
>> Okay.

2532
01:34:41,335 --> 01:34:46,970
>> Any questions? Yeah.

2533
01:34:46,970 --> 01:34:49,100
>> I just like
to understand,

2534
01:34:49,100 --> 01:34:53,000
because we talked
about earlier the

2535
01:34:53,000 --> 01:34:56,135
benefits and costs
alignment has come up,

2536
01:34:56,135 --> 01:34:58,550
so could you say

2537
01:34:58,550 --> 01:35:01,250
a little about your
business model?

2538
01:35:01,250 --> 01:35:03,590
You-all are selling
this as a service to

2539
01:35:03,590 --> 01:35:05,990
the utilities.
Is that correct?

2540
01:35:05,990 --> 01:35:07,880
>> Yes. So let me speak
to that a little bit.

2541
01:35:07,880 --> 01:35:08,990
>> And the trust

2542
01:35:08,990 --> 01:35:11,490
relationships
involved there.

2543
01:35:11,530 --> 01:35:13,850
>> A couple of
things I can say,

2544
01:35:13,850 --> 01:35:16,370
one of which is operant

2545
01:35:16,370 --> 01:35:19,310
formed out of my
own interests

2546
01:35:19,310 --> 01:35:21,470
in the renewable energy
space and it was

2547
01:35:21,470 --> 01:35:23,090
a technology push company

2548
01:35:23,090 --> 01:35:24,860
for the first
three years or so.

2549
01:35:24,860 --> 01:35:26,450
And we were
funded by the DOE

2550
01:35:26,450 --> 01:35:28,250
and Leashes group helped

2551
01:35:28,250 --> 01:35:29,570
us to define

2552
01:35:29,570 --> 01:35:31,100
some early
understandings of

2553
01:35:31,100 --> 01:35:32,555
what we could do.

2554
01:35:32,555 --> 01:35:34,550
At that point, it
became clear that

2555
01:35:34,550 --> 01:35:36,350
that's not how you build
a product company.

2556
01:35:36,350 --> 01:35:37,850
You don't start with
the technology.

2557
01:35:37,850 --> 01:35:40,925
That's silly and everybody
knows that but me.

2558
01:35:40,925 --> 01:35:44,840
But now we've managed

2559
01:35:44,840 --> 01:35:46,580
to evolve to the
state where we're

2560
01:35:46,580 --> 01:35:48,500
actually asking these
business questions.

2561
01:35:48,500 --> 01:35:49,640
We got two gentlemen in

2562
01:35:49,640 --> 01:35:50,870
the back there
that are trying to

2563
01:35:50,870 --> 01:35:52,895
avoid my eye that

2564
01:35:52,895 --> 01:35:55,550
are both new to
the company.

2565
01:35:55,550 --> 01:35:57,740
Mike Hertzberg, who's
our board member

2566
01:35:57,740 --> 01:35:59,180
is here to understand

2567
01:35:59,180 --> 01:36:01,340
enterprise business
models and how would you

2568
01:36:01,340 --> 01:36:02,870
position this
product so that you

2569
01:36:02,870 --> 01:36:04,625
can sell it to a
giant customer,

2570
01:36:04,625 --> 01:36:05,750
but you can also sell to

2571
01:36:05,750 --> 01:36:07,235
a small solar developer.

2572
01:36:07,235 --> 01:36:09,080
We don't actually know,

2573
01:36:09,080 --> 01:36:11,060
but he's qualified
to find out.

2574
01:36:11,060 --> 01:36:12,470
And then we
have Gei Foster

2575
01:36:12,470 --> 01:36:14,060
who's here to
figure out how to

2576
01:36:14,060 --> 01:36:16,070
productize something
so that a customer

2577
01:36:16,070 --> 01:36:18,920
sees the benefits,
not the technology.

2578
01:36:18,920 --> 01:36:20,420
So we're actually asking

2579
01:36:20,420 --> 01:36:21,350
those questions Kim,

2580
01:36:21,350 --> 01:36:23,180
but we don't know
the answers yet.

2581
01:36:23,180 --> 01:36:25,100
Feel free to tell
me if you know.

2582
01:36:25,100 --> 01:36:26,420
>> I don't know.

2583
01:36:26,420 --> 01:36:29,180
>> But I think those are
the right questions.

2584
01:36:29,180 --> 01:36:32,150
Exactly. Did I deflect
that sufficiently?

2585
01:36:32,150 --> 01:36:37,025
[LAUGHTER] Any
other questions?

2586
01:36:37,025 --> 01:36:40,880
>> Other questions?
Thank you, Andy.

2587
01:36:40,880 --> 01:36:41,480
>> Thank you. [APPLAUSE]

2588
01:36:41,480 --> 01:36:49,445
>> 03:40, I think we

2589
01:36:49,445 --> 01:36:51,590
can go back to

2590
01:36:51,590 --> 01:36:54,680
our next session
which is focused

2591
01:36:54,680 --> 01:36:57,830
on NDN applications and

2592
01:36:57,830 --> 01:37:00,815
would be chaired by
Susmit Shannigrahi.

2593
01:37:00,815 --> 01:37:02,750
Susmit received his PhD in

2594
01:37:02,750 --> 01:37:03,785
Computer Science from

2595
01:37:03,785 --> 01:37:05,420
Colorado State
University in

2596
01:37:05,420 --> 01:37:07,820
2018 and is currently

2597
01:37:07,820 --> 01:37:08,990
an assistant professor of

2598
01:37:08,990 --> 01:37:10,910
Computer Science
at Tennessee Tech,

2599
01:37:10,910 --> 01:37:12,110
where he runs the next

2600
01:37:12,110 --> 01:37:13,790
generation networking at.

2601
01:37:13,790 --> 01:37:15,935
Susmit, go ahead please.

2602
01:37:15,935 --> 01:37:25,160
>> Thank you. Here's
our next presenter.

2603
01:37:25,160 --> 01:37:27,170
Saurab is a PhD student

2604
01:37:27,170 --> 01:37:28,925
at the University
of Memphis.

2605
01:37:28,925 --> 01:37:32,570
He received his
Master's in 2020.

2606
01:37:32,570 --> 01:37:34,535
His research
interest involves

2607
01:37:34,535 --> 01:37:36,095
information centric
networking,

2608
01:37:36,095 --> 01:37:38,465
specimen Indian and
distributed computing.

2609
01:37:38,465 --> 01:37:39,920
He is also involved

2610
01:37:39,920 --> 01:37:41,855
in various
Indian research,

2611
01:37:41,855 --> 01:37:43,040
such as security,

2612
01:37:43,040 --> 01:37:49,520
IFT routing,
and [inaudible]

2613
01:37:49,520 --> 01:37:51,260
>> Hello everyone.
I'm Saurab.

2614
01:37:51,260 --> 01:37:52,460
Today I'm going
to be presenting

2615
01:37:52,460 --> 01:37:54,245
mHealth infrustructure.

2616
01:37:54,245 --> 01:37:56,150
My title of the talk

2617
01:37:56,150 --> 01:37:59,075
is secure mHealth
infrustructure for

2618
01:37:59,075 --> 01:38:01,415
real-time data transfer

2619
01:38:01,415 --> 01:38:04,410
with fine-gained
access control.

2620
01:38:04,750 --> 01:38:07,205
So this is our team.

2621
01:38:07,205 --> 01:38:08,720
We've been developing
this system

2622
01:38:08,720 --> 01:38:11,310
since quite a while now.

2623
01:38:12,190 --> 01:38:14,360
Whatever devices
are growing

2624
01:38:14,360 --> 01:38:16,130
exponentially as
you know that we

2625
01:38:16,130 --> 01:38:17,930
all have a smartwatches

2626
01:38:17,930 --> 01:38:19,340
that stays in our hand.

2627
01:38:19,340 --> 01:38:22,265
And we use for
various purposes,

2628
01:38:22,265 --> 01:38:25,130
for example health
wellingness and so on.

2629
01:38:25,130 --> 01:38:27,860
The mobile health
data that is produced

2630
01:38:27,860 --> 01:38:30,575
by these devices can
do a lot of things.

2631
01:38:30,575 --> 01:38:33,365
It can assist in
emergency management,

2632
01:38:33,365 --> 01:38:38,540
do a real-time medical

2633
01:38:38,540 --> 01:38:40,590
interventions and so on.

2634
01:38:40,930 --> 01:38:43,040
But there are a lot of

2635
01:38:43,040 --> 01:38:45,500
challenges in
collecting and sharing

2636
01:38:45,500 --> 01:38:47,600
the mHealth data
before we can achieve

2637
01:38:47,600 --> 01:38:48,860
those wonders that I

2638
01:38:48,860 --> 01:38:50,045
saw in the previous slide.

2639
01:38:50,045 --> 01:38:52,190
The data are highly
diverse in nature.

2640
01:38:52,190 --> 01:38:54,440
A lot of different
devices are

2641
01:38:54,440 --> 01:38:57,005
used like for example
smartwatches,

2642
01:38:57,005 --> 01:38:58,550
tensors and all
those stuff to

2643
01:38:58,550 --> 01:39:00,450
collect those ML data.

2644
01:39:00,450 --> 01:39:02,620
There are privacy
and legal concerns

2645
01:39:02,620 --> 01:39:04,390
surrounding those
data because that's

2646
01:39:04,390 --> 01:39:06,160
the participants
and the rest

2647
01:39:06,160 --> 01:39:06,760
of data and there is

2648
01:39:06,760 --> 01:39:07,810
a lot of private
information

2649
01:39:07,810 --> 01:39:09,600
about the participants
in the data.

2650
01:39:09,600 --> 01:39:12,650
That's why usually
they are protected by

2651
01:39:12,650 --> 01:39:14,600
IRBs and also by

2652
01:39:14,600 --> 01:39:15,755
the federal
laws before you

2653
01:39:15,755 --> 01:39:18,180
share this data to
do the research.

2654
01:39:19,210 --> 01:39:24,110
Maintaining a security and

2655
01:39:24,110 --> 01:39:27,455
privacy for those data
is nontrivial task,

2656
01:39:27,455 --> 01:39:29,810
especially when they
are generated at

2657
01:39:29,810 --> 01:39:31,130
a high rate and are

2658
01:39:31,130 --> 01:39:33,305
also from several sources.

2659
01:39:33,305 --> 01:39:35,990
With these challenges,

2660
01:39:35,990 --> 01:39:39,920
the main goal of our
project is to develop

2661
01:39:39,920 --> 01:39:41,150
a system that can achieve

2662
01:39:41,150 --> 01:39:42,950
an end-to-end data
collection and

2663
01:39:42,950 --> 01:39:45,110
distribution system
and that can

2664
01:39:45,110 --> 01:39:46,460
support this complex

2665
01:39:46,460 --> 01:39:48,590
heterogeneous mHealth data

2666
01:39:48,590 --> 01:39:50,330
and also can
support large scale

2667
01:39:50,330 --> 01:39:52,245
and real-time data
distribution.

2668
01:39:52,245 --> 01:39:54,775
On top of that, you
also want to achieve,

2669
01:39:54,775 --> 01:39:55,870
most importantly,

2670
01:39:55,870 --> 01:39:57,040
end-to-end security
on the data.

2671
01:39:57,040 --> 01:39:59,530
So once sharing and
collecting this data,

2672
01:39:59,530 --> 01:40:02,245
you need to have a trust

2673
01:40:02,245 --> 01:40:04,600
between these
entities involved

2674
01:40:04,600 --> 01:40:05,760
in this system,

2675
01:40:05,760 --> 01:40:07,190
for example consumer,

2676
01:40:07,190 --> 01:40:09,065
producer and operators.

2677
01:40:09,065 --> 01:40:11,360
And also, we
want to achieve

2678
01:40:11,360 --> 01:40:14,240
a fine-grained contextual
access control

2679
01:40:14,240 --> 01:40:15,725
based on the policies.

2680
01:40:15,725 --> 01:40:18,320
So contextual
access control

2681
01:40:18,320 --> 01:40:20,390
is sharing the data

2682
01:40:20,390 --> 01:40:22,385
based on the context
of the data itself.

2683
01:40:22,385 --> 01:40:24,965
For example you can
see in this example,

2684
01:40:24,965 --> 01:40:28,250
Alice wants to share her
blood sugar data and

2685
01:40:28,250 --> 01:40:29,870
heart rate data
with her doctor if

2686
01:40:29,870 --> 01:40:32,000
she's eating,
but not at home.

2687
01:40:32,000 --> 01:40:34,475
So that's like a activity
and the location,

2688
01:40:34,475 --> 01:40:36,050
that's the context
of the data.

2689
01:40:36,050 --> 01:40:37,490
Similarly, she
might want to share

2690
01:40:37,490 --> 01:40:40,130
her physical
activity data with

2691
01:40:40,130 --> 01:40:42,065
her gym instructor if

2692
01:40:42,065 --> 01:40:43,520
the data was
collected at gym

2693
01:40:43,520 --> 01:40:44,540
and at particular time.

2694
01:40:44,540 --> 01:40:45,650
So that's like
a context of

2695
01:40:45,650 --> 01:40:47,045
the data is time
and the location.

2696
01:40:47,045 --> 01:40:48,380
So we want to achieve this

2697
01:40:48,380 --> 01:40:50,940
access control based
on these contexts.

2698
01:40:51,640 --> 01:40:55,230
Before going
to our system,

2699
01:40:55,600 --> 01:40:58,580
I want to talk about
the limitations.

2700
01:40:58,580 --> 01:41:02,270
In the existing
mHealth system,

2701
01:41:02,270 --> 01:41:05,240
one of the example like
we are here is MD2K.

2702
01:41:05,240 --> 01:41:06,995
We looked at the MD2K

2703
01:41:06,995 --> 01:41:09,875
mHealth resource
cyberinfrastructure.

2704
01:41:09,875 --> 01:41:13,625
So MD2K is NIH Center
of Excellence.

2705
01:41:13,625 --> 01:41:15,500
They collect a
lot of data from

2706
01:41:15,500 --> 01:41:16,370
the participants and do

2707
01:41:16,370 --> 01:41:17,600
the sensing of those data.

2708
01:41:17,600 --> 01:41:19,970
So we are collaborating
with them

2709
01:41:19,970 --> 01:41:22,250
to the double of
this whole system.

2710
01:41:22,250 --> 01:41:23,630
So we looked at

2711
01:41:23,630 --> 01:41:26,060
their system and
then found out that

2712
01:41:26,060 --> 01:41:27,830
researchers and
other users

2713
01:41:27,830 --> 01:41:28,910
cannot retrieve
the data in

2714
01:41:28,910 --> 01:41:31,460
the real time from

2715
01:41:31,460 --> 01:41:33,065
the study
participants because

2716
01:41:33,065 --> 01:41:34,550
this data when they are

2717
01:41:34,550 --> 01:41:36,545
generated in the
sensor or devices,

2718
01:41:36,545 --> 01:41:37,970
that takes a while to get

2719
01:41:37,970 --> 01:41:40,550
to the MD2K repository,

2720
01:41:40,550 --> 01:41:41,840
that is mHealth repository

2721
01:41:41,840 --> 01:41:43,970
because it involves
a series of steps.

2722
01:41:43,970 --> 01:41:46,880
Because of that, building

2723
01:41:46,880 --> 01:41:48,080
a real-time system
becomes very

2724
01:41:48,080 --> 01:41:50,780
complicated on that
infrastructure.

2725
01:41:50,780 --> 01:41:52,670
Also, we look at
their access control

2726
01:41:52,670 --> 01:41:54,750
and it was very limited.

2727
01:41:56,010 --> 01:41:57,730
>> Username, password

2728
01:41:57,730 --> 01:41:58,840
based authentication
system was

2729
01:41:58,840 --> 01:42:01,135
used in many cases and
in some other cases,

2730
01:42:01,135 --> 01:42:03,040
the data were
manually identified,

2731
01:42:03,040 --> 01:42:04,990
encrypted and stored
flash drive and mail.

2732
01:42:04,990 --> 01:42:07,930
So obviously in
that scenario you

2733
01:42:07,930 --> 01:42:10,240
imagine a slow
process over it

2734
01:42:10,240 --> 01:42:12,760
and also human errors.

2735
01:42:12,760 --> 01:42:15,310
We also looked at
some of the state of

2736
01:42:15,310 --> 01:42:17,890
art systems and found

2737
01:42:17,890 --> 01:42:19,510
out several limitations
in them as well.

2738
01:42:19,510 --> 01:42:21,430
For example, in
this table you can

2739
01:42:21,430 --> 01:42:23,980
see some of this is
state of the art system.

2740
01:42:23,980 --> 01:42:26,230
And then we compare

2741
01:42:26,230 --> 01:42:27,880
the mHealth
matrices across

2742
01:42:27,880 --> 01:42:29,540
the systems and
found out that

2743
01:42:29,540 --> 01:42:31,140
none of these
systems supports

2744
01:42:31,140 --> 01:42:32,415
contextual access control,

2745
01:42:32,415 --> 01:42:34,305
which is very important.

2746
01:42:34,305 --> 01:42:37,095
And also in many
of the system,

2747
01:42:37,095 --> 01:42:38,640
the real-time
distribution was only

2748
01:42:38,640 --> 01:42:41,620
partially supported.
So we found out that.

2749
01:42:41,820 --> 01:42:43,690
I've already talked about

2750
01:42:43,690 --> 01:42:45,800
contextual access control.

2751
01:42:47,970 --> 01:42:50,680
Given those challenges
and limitations

2752
01:42:50,680 --> 01:42:52,660
of existing system
and the data itself,

2753
01:42:52,660 --> 01:42:54,340
we thought of building

2754
01:42:54,340 --> 01:42:58,420
the mHealth
infrastructures using NDN.

2755
01:42:58,420 --> 01:43:03,625
So this is our basic
high level diagram.

2756
01:43:03,625 --> 01:43:05,110
We want to collect

2757
01:43:05,110 --> 01:43:06,460
the data from
different sources and

2758
01:43:06,460 --> 01:43:07,660
this data will be

2759
01:43:07,660 --> 01:43:09,400
inserted into
the repository,

2760
01:43:09,400 --> 01:43:14,065
and then the consumers

2761
01:43:14,065 --> 01:43:15,640
can access this
data based on

2762
01:43:15,640 --> 01:43:17,080
their access
control policies

2763
01:43:17,080 --> 01:43:18,715
from the
repository itself.

2764
01:43:18,715 --> 01:43:21,070
There are several
benefits of using NDN.

2765
01:43:21,070 --> 01:43:23,470
We've been talking about
that since morning.

2766
01:43:23,470 --> 01:43:24,550
So some of the benefits

2767
01:43:24,550 --> 01:43:25,435
that I want to highlight

2768
01:43:25,435 --> 01:43:27,850
is that a data-centric
security,

2769
01:43:27,850 --> 01:43:29,530
because security is one
of the key component

2770
01:43:29,530 --> 01:43:31,000
of mHealth system
infrastructure.

2771
01:43:31,000 --> 01:43:32,635
So with NDN you get

2772
01:43:32,635 --> 01:43:33,880
automatic key management

2773
01:43:33,880 --> 01:43:35,545
, end-to-end protection.

2774
01:43:35,545 --> 01:43:37,330
Data encrypted in
transit is stored,

2775
01:43:37,330 --> 01:43:38,500
meaning when you
are collecting

2776
01:43:38,500 --> 01:43:39,550
you can encrypt

2777
01:43:39,550 --> 01:43:40,570
the data and then

2778
01:43:40,570 --> 01:43:42,745
also in storage when
you are storing.

2779
01:43:42,745 --> 01:43:43,840
So you don't
have to rely on

2780
01:43:43,840 --> 01:43:46,135
the channel based
security mechanism.

2781
01:43:46,135 --> 01:43:48,685
You can gain a fine-grained
access control

2782
01:43:48,685 --> 01:43:51,310
using hierarchical
semantic namings.

2783
01:43:51,310 --> 01:43:53,500
For the more you
get real-time

2784
01:43:53,500 --> 01:43:54,760
data sharing using sync,

2785
01:43:54,760 --> 01:43:56,845
sync can leverage
that thing.

2786
01:43:56,845 --> 01:43:58,600
The real time system can

2787
01:43:58,600 --> 01:43:59,845
be filled using a sync.

2788
01:43:59,845 --> 01:44:01,390
That's another benefit,

2789
01:44:01,390 --> 01:44:03,415
large-scale data
distributions.

2790
01:44:03,415 --> 01:44:05,110
And also another
important aspect for

2791
01:44:05,110 --> 01:44:07,305
our project was
NDN repository.

2792
01:44:07,305 --> 01:44:08,820
We could just use
NDN repository

2793
01:44:08,820 --> 01:44:10,350
to restore our NDN data.

2794
01:44:10,350 --> 01:44:11,865
So that's also
another benefit.

2795
01:44:11,865 --> 01:44:14,295
So given all this
benefit, we have the NDN

2796
01:44:14,295 --> 01:44:16,680
obviously stands
out as choice to

2797
01:44:16,680 --> 01:44:19,805
build a secure
infrastructure for mHealth.

2798
01:44:19,805 --> 01:44:22,300
So this is our
system overview.

2799
01:44:22,300 --> 01:44:24,760
There are a lot of
things on the system.

2800
01:44:24,760 --> 01:44:26,770
I don't know if you
can see it or not.

2801
01:44:26,770 --> 01:44:29,620
But in this talk,

2802
01:44:29,620 --> 01:44:31,195
I want to talk
about some of the

2803
01:44:31,195 --> 01:44:34,150
major elements
of our design.

2804
01:44:34,150 --> 01:44:35,860
That's naming trust model,

2805
01:44:35,860 --> 01:44:37,390
access control and the

2806
01:44:37,390 --> 01:44:39,800
publisher subscriber API.

2807
01:44:40,650 --> 01:44:43,060
So naming scheme.

2808
01:44:43,060 --> 01:44:46,585
So as we talked in
the first panel,

2809
01:44:46,585 --> 01:44:48,010
naming is very important

2810
01:44:48,010 --> 01:44:49,720
for NDN based system.

2811
01:44:49,720 --> 01:44:52,120
So we wanted to design
a hierarchal names.

2812
01:44:52,120 --> 01:44:53,410
Obviously they have
lot of benefits

2813
01:44:53,410 --> 01:44:54,955
of using a
hierarchal names.

2814
01:44:54,955 --> 01:44:57,114
We wanted to
make it flexible

2815
01:44:57,114 --> 01:44:58,660
and also generalize,

2816
01:44:58,660 --> 01:44:59,680
if not just for

2817
01:44:59,680 --> 01:45:02,470
the MD2K which we
were working with,

2818
01:45:02,470 --> 01:45:04,810
but also for other
mHealth system.

2819
01:45:04,810 --> 01:45:06,820
So for that,
we looked into

2820
01:45:06,820 --> 01:45:08,860
their existing
naming scheme for

2821
01:45:08,860 --> 01:45:10,435
the MD2K and we found

2822
01:45:10,435 --> 01:45:12,955
some loosely
defined structure.

2823
01:45:12,955 --> 01:45:14,560
We've worked on
those structures,

2824
01:45:14,560 --> 01:45:17,200
analyze hundreds of
name they had for

2825
01:45:17,200 --> 01:45:18,550
the streams that

2826
01:45:18,550 --> 01:45:20,050
the data were
produced under.

2827
01:45:20,050 --> 01:45:22,975
And then we converted
those streams,

2828
01:45:22,975 --> 01:45:25,630
their naming into NDN
hierarchal naming.

2829
01:45:25,630 --> 01:45:27,340
So this is basically

2830
01:45:27,340 --> 01:45:28,450
based on the semantics and

2831
01:45:28,450 --> 01:45:29,740
the physical property of

2832
01:45:29,740 --> 01:45:31,645
the component in
the name itself.

2833
01:45:31,645 --> 01:45:32,860
For example,
you can look at

2834
01:45:32,860 --> 01:45:34,585
here one of the example of

2835
01:45:34,585 --> 01:45:36,670
semantics and properties
like a sensor

2836
01:45:36,670 --> 01:45:38,845
can be under the devices.

2837
01:45:38,845 --> 01:45:41,290
Similarly they can be

2838
01:45:41,290 --> 01:45:42,640
stuck and have a
several participants

2839
01:45:42,640 --> 01:45:43,675
on very study name.

2840
01:45:43,675 --> 01:45:45,130
So that's the
semantics we wanted to

2841
01:45:45,130 --> 01:45:47,035
maintain while
designing this naming.

2842
01:45:47,035 --> 01:45:51,670
And so that's how we
get the stream names.

2843
01:45:51,670 --> 01:45:53,050
And for the data naming,

2844
01:45:53,050 --> 01:45:54,370
which obviously
needs to be

2845
01:45:54,370 --> 01:45:57,220
unique as Lan was
talking in the morning.

2846
01:45:57,220 --> 01:45:57,910
So we don't want to

2847
01:45:57,910 --> 01:45:58,810
repeat the name
of the data,

2848
01:45:58,810 --> 01:46:00,280
so you have to make sure

2849
01:46:00,280 --> 01:46:01,960
that the data naming
is so unique.

2850
01:46:01,960 --> 01:46:03,610
So we added the
timestamp component

2851
01:46:03,610 --> 01:46:04,150
at the end of

2852
01:46:04,150 --> 01:46:06,640
the stream name with

2853
01:46:06,640 --> 01:46:08,170
this data component
in between.

2854
01:46:08,170 --> 01:46:10,225
So that's how we get
the unique data name.

2855
01:46:10,225 --> 01:46:12,310
And we also design

2856
01:46:12,310 --> 01:46:14,710
naming for attribute
manifests and keys.

2857
01:46:14,710 --> 01:46:16,540
I'll be talking about

2858
01:46:16,540 --> 01:46:18,980
this stuff in the
later slides.

2859
01:46:18,990 --> 01:46:21,640
Another thing, as
I was mentioning,

2860
01:46:21,640 --> 01:46:22,600
like a trust model is

2861
01:46:22,600 --> 01:46:23,830
very important
when you design

2862
01:46:23,830 --> 01:46:26,290
a mHealth
infrastructure because

2863
01:46:26,290 --> 01:46:27,430
all the parties
involved in

2864
01:46:27,430 --> 01:46:28,870
the system has to
trust each other.

2865
01:46:28,870 --> 01:46:34,560
So these are the
entities of our systems.

2866
01:46:34,560 --> 01:46:36,030
So operator,
Access Manager,

2867
01:46:36,030 --> 01:46:37,985
Publisher and
Data Requester.

2868
01:46:37,985 --> 01:46:40,000
The operator will certify

2869
01:46:40,000 --> 01:46:42,280
the public key of all
these components,

2870
01:46:42,280 --> 01:46:43,405
like Access Manager,

2871
01:46:43,405 --> 01:46:45,355
Publisher, and Requester.

2872
01:46:45,355 --> 01:46:46,930
So similarly,
Access Manager

2873
01:46:46,930 --> 01:46:48,550
will sign the data
that it will produce,

2874
01:46:48,550 --> 01:46:50,905
which are obviously
public parameters

2875
01:46:50,905 --> 01:46:52,735
that are used for
encryption and decryption.

2876
01:46:52,735 --> 01:46:53,770
And also the
decryption key

2877
01:46:53,770 --> 01:46:54,940
for the consumers.

2878
01:46:54,940 --> 01:46:57,310
And the Publisher
will publish the data

2879
01:46:57,310 --> 01:46:59,200
as manifest and the data

2880
01:46:59,200 --> 01:47:01,090
so that will be signed
by the publisher.

2881
01:47:01,090 --> 01:47:02,950
For the Data Requester,

2882
01:47:02,950 --> 01:47:05,140
Data Requester can
be from outside

2883
01:47:05,140 --> 01:47:07,990
of the whole mHealth
infrastructure.

2884
01:47:07,990 --> 01:47:09,520
So they can be
from anywhere.

2885
01:47:09,520 --> 01:47:11,770
So they get the name
under the participating

2886
01:47:11,770 --> 01:47:13,840
organizes and then achieve

2887
01:47:13,840 --> 01:47:15,760
a key and the
certificate using

2888
01:47:15,760 --> 01:47:18,070
NDNCERT from the operator.

2889
01:47:18,070 --> 01:47:20,140
And then once they obtain

2890
01:47:20,140 --> 01:47:22,840
the decryption key from
the access manager,

2891
01:47:22,840 --> 01:47:24,670
they will verify
that based on

2892
01:47:24,670 --> 01:47:27,640
the trust relationship,
the trust anchor.

2893
01:47:27,640 --> 01:47:30,190
And also another
important thing is

2894
01:47:30,190 --> 01:47:31,300
access manager
verifies that

2895
01:47:31,300 --> 01:47:32,845
request to the
public-key cert.

2896
01:47:32,845 --> 01:47:35,080
So which means if the
request is requesting

2897
01:47:35,080 --> 01:47:37,555
for some further
decryption key,

2898
01:47:37,555 --> 01:47:38,770
then they will verify that

2899
01:47:38,770 --> 01:47:40,570
whether that is a
legitimate request or not.

2900
01:47:40,570 --> 01:47:46,040
So that's also important
trust relationship.

2901
01:47:48,000 --> 01:47:50,080
Another component
I want to talk

2902
01:47:50,080 --> 01:47:51,145
about is access control.

2903
01:47:51,145 --> 01:47:53,140
So when you have

2904
01:47:53,140 --> 01:47:54,670
data that has
been generated

2905
01:47:54,670 --> 01:47:56,470
by the ML system,

2906
01:47:56,470 --> 01:48:00,730
you want to provide a
fine grained access to

2907
01:48:00,730 --> 01:48:02,950
those data based
on the attributes

2908
01:48:02,950 --> 01:48:04,555
or the context
of the data.

2909
01:48:04,555 --> 01:48:06,910
And also based on

2910
01:48:06,910 --> 01:48:08,200
the access
control policies.

2911
01:48:08,200 --> 01:48:09,310
But that's the main goal

2912
01:48:09,310 --> 01:48:10,525
of the access control.

2913
01:48:10,525 --> 01:48:13,390
So given the time

2914
01:48:13,390 --> 01:48:15,070
of encryption where
the data is generated,

2915
01:48:15,070 --> 01:48:16,795
so what do you know
about the data?

2916
01:48:16,795 --> 01:48:19,645
So that's how you can
realize the encryption.

2917
01:48:19,645 --> 01:48:21,550
So at the time of the
scenarios and you

2918
01:48:21,550 --> 01:48:22,540
know the context and

2919
01:48:22,540 --> 01:48:23,545
the attributes
of the data.

2920
01:48:23,545 --> 01:48:24,670
So we want to use those

2921
01:48:24,670 --> 01:48:26,155
information to
encrypt the data.

2922
01:48:26,155 --> 01:48:28,720
So that's why ABE becomes
a natural source.

2923
01:48:28,720 --> 01:48:30,460
But the problem is, you

2924
01:48:30,460 --> 01:48:31,660
don't know who is
going to access

2925
01:48:31,660 --> 01:48:32,935
this data because they are

2926
01:48:32,935 --> 01:48:34,645
unknown during the
time of encryption.

2927
01:48:34,645 --> 01:48:36,430
So that's why among

2928
01:48:36,430 --> 01:48:37,750
different flavors of ABE,

2929
01:48:37,750 --> 01:48:39,400
which shows key policy

2930
01:48:39,400 --> 01:48:42,490
attribute-based encryption
because in KPABE,

2931
01:48:42,490 --> 01:48:44,890
your keys associated
with the policy,

2932
01:48:44,890 --> 01:48:46,000
the decryption key is

2933
01:48:46,000 --> 01:48:47,035
associated with
the policy,

2934
01:48:47,035 --> 01:48:48,640
that's the side
of encryption.

2935
01:48:48,640 --> 01:48:49,885
But the ciphertext is

2936
01:48:49,885 --> 01:48:51,505
associated with
the attributes.

2937
01:48:51,505 --> 01:48:53,770
So the ciphertexts when
you generate during

2938
01:48:53,770 --> 01:48:54,655
the encryption was

2939
01:48:54,655 --> 01:48:55,780
associated with
attributes.

2940
01:48:55,780 --> 01:48:58,840
So you don't have to
know about the policies.

2941
01:48:58,840 --> 01:49:00,700
But that's why
KPABE becomes

2942
01:49:00,700 --> 01:49:04,070
a better choice for us.

2943
01:49:04,500 --> 01:49:06,610
As I was saying
that you don't need

2944
01:49:06,610 --> 01:49:07,810
to know access
control policy.

2945
01:49:07,810 --> 01:49:09,445
So also this will

2946
01:49:09,445 --> 01:49:10,809
avoid the re-encryption

2947
01:49:10,809 --> 01:49:12,115
when the policy changes.

2948
01:49:12,115 --> 01:49:13,690
So in the policy side,

2949
01:49:13,690 --> 01:49:14,830
when the data
accesses size,

2950
01:49:14,830 --> 01:49:16,300
you can change
the policy as

2951
01:49:16,300 --> 01:49:17,455
many times as you want.

2952
01:49:17,455 --> 01:49:19,615
That does not affect
the interesting side.

2953
01:49:19,615 --> 01:49:21,820
So you're good with that.

2954
01:49:21,820 --> 01:49:24,880
This is our diagram of

2955
01:49:24,880 --> 01:49:26,320
famous diagram with which

2956
01:49:26,320 --> 01:49:27,370
we see in many papers.

2957
01:49:27,370 --> 01:49:28,510
So that's basically intact

2958
01:49:28,510 --> 01:49:29,680
in our design as well.

2959
01:49:29,680 --> 01:49:35,560
We use attribute to
encrypt the content key.

2960
01:49:35,560 --> 01:49:36,730
So this is one
thing we need to

2961
01:49:36,730 --> 01:49:37,930
note that we don't use

2962
01:49:37,930 --> 01:49:41,470
the actual ABE keys
to encrypt the data,

2963
01:49:41,470 --> 01:49:43,510
but rather we use
the symmetric key

2964
01:49:43,510 --> 01:49:45,460
which is a content key.

2965
01:49:45,460 --> 01:49:47,845
So we use ABE to encrypt
this content key,

2966
01:49:47,845 --> 01:49:49,690
meaning the attributes are

2967
01:49:49,690 --> 01:49:51,760
used to encrypt
the content key,

2968
01:49:51,760 --> 01:49:53,215
not the data directly.

2969
01:49:53,215 --> 01:49:54,970
So using a symmetric key,

2970
01:49:54,970 --> 01:49:57,970
you get faster
encryption, decryption.

2971
01:49:57,970 --> 01:50:00,310
And also, you might
wonder like when

2972
01:50:00,310 --> 01:50:01,360
do you have to re-encrypt

2973
01:50:01,360 --> 01:50:02,590
the data? There
will be some case.

2974
01:50:02,590 --> 01:50:04,120
So only case
when you have to

2975
01:50:04,120 --> 01:50:05,650
re-encrypt the data is if

2976
01:50:05,650 --> 01:50:06,940
you want to change

2977
01:50:06,940 --> 01:50:08,830
the attributes to
encrypt the data.

2978
01:50:08,830 --> 01:50:10,990
If you want to
do that, then

2979
01:50:10,990 --> 01:50:12,535
that's the time when you

2980
01:50:12,535 --> 01:50:13,900
might want to
re-encrypt the data.

2981
01:50:13,900 --> 01:50:15,190
So since we are

2982
01:50:15,190 --> 01:50:15,970
using symmetric-key,

2983
01:50:15,970 --> 01:50:16,915
you don't have to do that.

2984
01:50:16,915 --> 01:50:19,510
You can just use this
new set of attribute

2985
01:50:19,510 --> 01:50:20,650
to re-encrypt

2986
01:50:20,650 --> 01:50:22,480
this content key
and you'd be good.

2987
01:50:22,480 --> 01:50:23,590
So it does not require

2988
01:50:23,590 --> 01:50:25,150
any encryption of
the actual payload.

2989
01:50:25,150 --> 01:50:33,115
So another thing is
access control policies.

2990
01:50:33,115 --> 01:50:35,020
So little bit
Alex thoughts in

2991
01:50:35,020 --> 01:50:36,640
his presentation

2992
01:50:36,640 --> 01:50:38,395
about access
control policies.

2993
01:50:38,395 --> 01:50:40,330
So access control policy,

2994
01:50:40,330 --> 01:50:42,880
the goal is to
limit the access to

2995
01:50:42,880 --> 01:50:44,170
the data to authorize user

2996
01:50:44,170 --> 01:50:46,210
only in terms of use
and privacy risks.

2997
01:50:46,210 --> 01:50:48,459
So this access
control policies

2998
01:50:48,459 --> 01:50:50,440
defined by the
data owners.

2999
01:50:50,440 --> 01:50:53,330
So whoever
generates the data.

3000
01:50:55,130 --> 01:50:58,530
So we have a quite
relation to learn when

3001
01:50:58,530 --> 01:51:01,980
we design these policies

3002
01:51:01,980 --> 01:51:03,060
during the evolution of

3003
01:51:03,060 --> 01:51:04,905
our access
control policies.

3004
01:51:04,905 --> 01:51:06,270
So this is the
old structure,

3005
01:51:06,270 --> 01:51:08,830
what the MD2K system have.

3006
01:51:12,470 --> 01:51:15,220
This was their
only structure and

3007
01:51:15,220 --> 01:51:17,410
this structure
was converted

3008
01:51:17,410 --> 01:51:19,060
to database queries
or firewalls.

3009
01:51:19,060 --> 01:51:19,960
So that's how they were

3010
01:51:19,960 --> 01:51:20,890
doing the access control,

3011
01:51:20,890 --> 01:51:21,520
that's how they wish

3012
01:51:21,520 --> 01:51:23,905
to define their policies.

3013
01:51:23,905 --> 01:51:25,300
You'd have column name in

3014
01:51:25,300 --> 01:51:26,635
which to exact table.

3015
01:51:26,635 --> 01:51:27,790
In database, you
will look for

3016
01:51:27,790 --> 01:51:28,870
the columns and
the values.

3017
01:51:28,870 --> 01:51:29,470
What do you look?

3018
01:51:29,470 --> 01:51:30,670
And then you hit
the code is on

3019
01:51:30,670 --> 01:51:33,130
the base on those, and
then you get the data.

3020
01:51:33,130 --> 01:51:34,915
But this was pretty
hard when you

3021
01:51:34,915 --> 01:51:35,770
want it to do is design

3022
01:51:35,770 --> 01:51:36,610
a data-centric system,

3023
01:51:36,610 --> 01:51:38,620
you cannot realize
this. It's really hard.

3024
01:51:38,620 --> 01:51:41,320
So we did a couple
of iterations and

3025
01:51:41,320 --> 01:51:42,820
then redefined

3026
01:51:42,820 --> 01:51:44,260
the access control
policy structure

3027
01:51:44,260 --> 01:51:45,580
based on the attributes.

3028
01:51:45,580 --> 01:51:46,720
So once you define

3029
01:51:46,720 --> 01:51:47,830
it based on the
attributes,

3030
01:51:47,830 --> 01:51:49,225
everything becomes
very simple.

3031
01:51:49,225 --> 01:51:50,635
We can just use

3032
01:51:50,635 --> 01:51:52,150
NDN names that we

3033
01:51:52,150 --> 01:51:53,995
defined in our
naming scheme.

3034
01:51:53,995 --> 01:51:55,420
And you can use
these names

3035
01:51:55,420 --> 01:51:57,590
to do the access control.

3036
01:51:57,620 --> 01:52:00,000
Exactly these
attributes can

3037
01:52:00,000 --> 01:52:01,410
be used in the
encryption side as well.

3038
01:52:01,410 --> 01:52:03,950
So it simplifies
all the designs.

3039
01:52:03,950 --> 01:52:06,070
So that's how we come

3040
01:52:06,070 --> 01:52:07,540
up with a new
policy structure.

3041
01:52:07,540 --> 01:52:09,190
So you can see the
structure here.

3042
01:52:09,190 --> 01:52:11,770
You can just define
what attributes

3043
01:52:11,770 --> 01:52:13,150
you allow and what

3044
01:52:13,150 --> 01:52:14,380
attributes you
want to deny.

3045
01:52:14,380 --> 01:52:15,960
And based on that, you

3046
01:52:15,960 --> 01:52:18,660
can define a new access
control policies.

3047
01:52:18,660 --> 01:52:23,600
Yes.

3048
01:52:23,730 --> 01:52:25,990
>> Now, since we
have established the

3049
01:52:25,990 --> 01:52:27,880
security stuff's
trust and encryption,

3050
01:52:27,880 --> 01:52:29,410
decryption stuff
and everything,

3051
01:52:29,410 --> 01:52:31,630
we want to design

3052
01:52:31,630 --> 01:52:33,490
a pops-up system that has

3053
01:52:33,490 --> 01:52:35,935
a security embedded
inside in it.

3054
01:52:35,935 --> 01:52:37,990
The benefit that we
get with that is

3055
01:52:37,990 --> 01:52:39,790
that the consumer and

3056
01:52:39,790 --> 01:52:41,320
the publisher doesn't
have to care about

3057
01:52:41,320 --> 01:52:43,375
how the security
things is setup.

3058
01:52:43,375 --> 01:52:45,355
Once that's initialized,

3059
01:52:45,355 --> 01:52:46,345
everything is underneath,

3060
01:52:46,345 --> 01:52:49,510
so they don't have
to care about that.

3061
01:52:49,510 --> 01:52:54,160
So our pops-up system
is best of sync,

3062
01:52:54,160 --> 01:52:58,810
and it authorizes
the subscriber

3063
01:52:58,810 --> 01:53:00,685
based on their access
control policies.

3064
01:53:00,685 --> 01:53:01,780
So they don't
have to worry

3065
01:53:01,780 --> 01:53:02,740
about what the policy is.

3066
01:53:02,740 --> 01:53:04,000
They can communicate
with controller to

3067
01:53:04,000 --> 01:53:06,070
get the right
decryption keys,

3068
01:53:06,070 --> 01:53:07,660
because that's
already internally

3069
01:53:07,660 --> 01:53:09,445
built in the
controller side.

3070
01:53:09,445 --> 01:53:11,500
Who controls who
can access what

3071
01:53:11,500 --> 01:53:13,765
data based on the
policy structure.

3072
01:53:13,765 --> 01:53:15,610
And it also
helps in getting

3073
01:53:15,610 --> 01:53:17,080
real-time data and

3074
01:53:17,080 --> 01:53:19,180
the latest verified
data as well.

3075
01:53:19,180 --> 01:53:21,415
So this is a flow
of how it happens.

3076
01:53:21,415 --> 01:53:22,930
You have a publisher,

3077
01:53:22,930 --> 01:53:24,325
they will publish
the data.

3078
01:53:24,325 --> 01:53:25,645
This data will be

3079
01:53:25,645 --> 01:53:28,570
encrypted and inserted
into the repository.

3080
01:53:28,570 --> 01:53:29,830
Here you can see

3081
01:53:29,830 --> 01:53:33,505
that inside of
the repository,

3082
01:53:33,505 --> 01:53:35,320
consumer app will
subscribe for some of

3083
01:53:35,320 --> 01:53:37,020
the data streams
and they will get

3084
01:53:37,020 --> 01:53:39,510
the manifest back with

3085
01:53:39,510 --> 01:53:40,440
their subscription
list and

3086
01:53:40,440 --> 01:53:41,220
the publisher will send

3087
01:53:41,220 --> 01:53:42,990
the corresponding
manifest,

3088
01:53:42,990 --> 01:53:44,460
I'll talk about that
in the next slide,

3089
01:53:44,460 --> 01:53:46,980
back and then
they will just

3090
01:53:46,980 --> 01:53:48,390
fetch the manifest and

3091
01:53:48,390 --> 01:53:50,465
then correspondingly
fetch the data.

3092
01:53:50,465 --> 01:53:53,990
Time is running out, so
I'm going to move on.

3093
01:53:57,060 --> 01:53:59,410
So one important thing

3094
01:53:59,410 --> 01:54:00,700
to note is that
signing and

3095
01:54:00,700 --> 01:54:02,200
verifying millions
of data packets

3096
01:54:02,200 --> 01:54:03,820
using public-key crypto
is very expensive,

3097
01:54:03,820 --> 01:54:05,470
so we wanted
to avoid that.

3098
01:54:05,470 --> 01:54:07,510
Also, you can directly

3099
01:54:07,510 --> 01:54:09,040
use those data names in

3100
01:54:09,040 --> 01:54:10,735
the sync because it
will create a lot of

3101
01:54:10,735 --> 01:54:12,280
overhead so we decided

3102
01:54:12,280 --> 01:54:13,555
to use manifests instead.

3103
01:54:13,555 --> 01:54:14,800
So you just have
a manifest.

3104
01:54:14,800 --> 01:54:19,270
So manifest is only
verified using

3105
01:54:19,270 --> 01:54:21,250
public-key crypto
so we just list

3106
01:54:21,250 --> 01:54:22,930
the data and
they're digest

3107
01:54:22,930 --> 01:54:24,205
in the manifest packet.

3108
01:54:24,205 --> 01:54:25,420
So once the consumer

3109
01:54:25,420 --> 01:54:26,260
will fetch the manifest,

3110
01:54:26,260 --> 01:54:27,280
they will know
what data packet

3111
01:54:27,280 --> 01:54:28,330
to fetch and then they can

3112
01:54:28,330 --> 01:54:30,775
verify the data packet
using the digest.

3113
01:54:30,775 --> 01:54:32,320
So basically, only a

3114
01:54:32,320 --> 01:54:33,610
manifest needs to
be verified using

3115
01:54:33,610 --> 01:54:35,140
public key crypto
and the rest

3116
01:54:35,140 --> 01:54:35,860
of the things can be just

3117
01:54:35,860 --> 01:54:37,130
verified using the digest.

3118
01:54:37,130 --> 01:54:40,325
So that makes our
life much easier.

3119
01:54:40,325 --> 01:54:42,985
These are unlimited
in detail.

3120
01:54:42,985 --> 01:54:44,380
Some of the open and

3121
01:54:44,380 --> 01:54:45,430
future works I want
to talk about.

3122
01:54:45,430 --> 01:54:47,980
So the NAC-ABE
based on openABE,

3123
01:54:47,980 --> 01:54:48,850
which is very fragile,

3124
01:54:48,850 --> 01:54:50,020
not maintained
since many years.

3125
01:54:50,020 --> 01:54:51,790
So that will break in
some point in time,

3126
01:54:51,790 --> 01:54:53,260
so we will not be
able to use it.

3127
01:54:53,260 --> 01:54:55,090
We have to find
some options.

3128
01:54:55,090 --> 01:54:58,060
KP-ABE approach has some
scalability issues.

3129
01:54:58,060 --> 01:54:59,515
If the number of

3130
01:54:59,515 --> 01:55:01,120
attributes that they
are accessing is large,

3131
01:55:01,120 --> 01:55:02,440
the decryption key
becomes very big.

3132
01:55:02,440 --> 01:55:03,460
So there are some

3133
01:55:03,460 --> 01:55:05,195
problems to solve
there as well.

3134
01:55:05,195 --> 01:55:06,960
End-to-end privacy is

3135
01:55:06,960 --> 01:55:09,550
our future work, which
we'll be working on.

3136
01:55:09,890 --> 01:55:11,820
This figures,
so we've been

3137
01:55:11,820 --> 01:55:12,900
talking about this
since morning.

3138
01:55:12,900 --> 01:55:15,000
So developing a
NDN application

3139
01:55:15,000 --> 01:55:16,200
is very hard right now.

3140
01:55:16,200 --> 01:55:18,090
So in our infrastructure,

3141
01:55:18,090 --> 01:55:19,790
these are the component
that is involved.

3142
01:55:19,790 --> 01:55:21,160
Smartwatches, devices,

3143
01:55:21,160 --> 01:55:21,910
smartphones, server,

3144
01:55:21,910 --> 01:55:22,930
and client applications.

3145
01:55:22,930 --> 01:55:24,085
So you need NDN on

3146
01:55:24,085 --> 01:55:25,150
every single of

3147
01:55:25,150 --> 01:55:26,770
these devices or
in environment,

3148
01:55:26,770 --> 01:55:28,060
we don't have
that right now.

3149
01:55:28,060 --> 01:55:29,590
So if I'm an
application developer,

3150
01:55:29,590 --> 01:55:31,195
I have to use all
of these system,

3151
01:55:31,195 --> 01:55:32,440
either you develop NDN for

3152
01:55:32,440 --> 01:55:33,835
those devices
or maintain or

3153
01:55:33,835 --> 01:55:35,230
upgrade whatever is there

3154
01:55:35,230 --> 01:55:37,210
or you just give up.

3155
01:55:37,210 --> 01:55:38,860
So that's why
it's very hard.

3156
01:55:38,860 --> 01:55:40,150
We need to have
minimal NDN

3157
01:55:40,150 --> 01:55:41,650
supporting these devices.

3158
01:55:41,650 --> 01:55:43,630
That's also one
of the things to

3159
01:55:43,630 --> 01:55:44,860
note and we might be

3160
01:55:44,860 --> 01:55:47,245
working on that on
future work as well.

3161
01:55:47,245 --> 01:55:54,700
Thank you. [APPLAUSE].

3162
01:55:54,700 --> 01:55:55,030
>> Thank you,

3163
01:55:55,030 --> 01:55:57,939
Saurab. Very nice
presentation.

3164
01:55:57,939 --> 01:56:01,040
Do you have any questions?

3165
01:56:03,090 --> 01:56:06,940
>> This is just a
quick question about

3166
01:56:06,940 --> 01:56:09,745
the overall data model

3167
01:56:09,745 --> 01:56:12,295
and I guess the
security approach.

3168
01:56:12,295 --> 01:56:14,050
Do you include
the person who

3169
01:56:14,050 --> 01:56:19,390
this health data is

3170
01:56:19,390 --> 01:56:21,160
about in the
security model?

3171
01:56:21,160 --> 01:56:23,560
I only saw the researcher,

3172
01:56:23,560 --> 01:56:25,940
instructor, clinician.

3173
01:56:26,460 --> 01:56:28,600
>> So for them,

3174
01:56:28,600 --> 01:56:30,340
as an access or
the default policy

3175
01:56:30,340 --> 01:56:32,050
is they will get
access to their data,

3176
01:56:32,050 --> 01:56:34,795
everything, so that is
on the policy side.

3177
01:56:34,795 --> 01:56:35,860
So the default policy

3178
01:56:35,860 --> 01:56:36,985
is whoever data is that,

3179
01:56:36,985 --> 01:56:38,410
they will be able to
access everything.

3180
01:56:38,410 --> 01:56:39,820
That's the default policy.

3181
01:56:39,820 --> 01:56:41,980
And then that
owner can analyze

3182
01:56:41,980 --> 01:56:43,090
that policy and define new

3183
01:56:43,090 --> 01:56:44,980
policy for other people.

3184
01:56:44,980 --> 01:56:47,080
The owner

3185
01:56:47,080 --> 01:56:48,535
which means who
produces the handheld.

3186
01:56:48,535 --> 01:56:50,780
>> Got it. Sorry
if I missed that.

3187
01:56:53,940 --> 01:56:56,140
>> So I have a
quick question.

3188
01:56:56,140 --> 01:57:00,040
Do you anticipate the need

3189
01:57:00,040 --> 01:57:02,260
for revoking
access at anytime?

3190
01:57:02,260 --> 01:57:03,310
>> That's a very
good question.

3191
01:57:03,310 --> 01:57:04,600
I didn't include
that inside.

3192
01:57:04,600 --> 01:57:07,210
Yes. Revoking access on

3193
01:57:07,210 --> 01:57:09,190
ABE is really
interesting problems.

3194
01:57:09,190 --> 01:57:13,180
So we had two different
access to revocation,

3195
01:57:13,180 --> 01:57:15,025
for example, you can
do timely revocations,

3196
01:57:15,025 --> 01:57:16,600
you can define the
decryption key to

3197
01:57:16,600 --> 01:57:18,520
expire in X date,

3198
01:57:18,520 --> 01:57:19,720
and that's how you can do

3199
01:57:19,720 --> 01:57:22,430
this manual inspections.

3200
01:57:22,430 --> 01:57:24,340
Then another one is
immediate revocations

3201
01:57:24,340 --> 01:57:25,960
which is tough.

3202
01:57:25,960 --> 01:57:27,850
So for immediate
revocation,

3203
01:57:27,850 --> 01:57:29,710
which means you want
to kick someone out of

3204
01:57:29,710 --> 01:57:31,156
the system immediately
from tomorrow,

3205
01:57:31,156 --> 01:57:31,510
let's say.

3206
01:57:31,510 --> 01:57:33,070
[OVERLAPPING]

3207
01:57:33,070 --> 01:57:34,900
>> And make sure they
don't have access to

3208
01:57:34,900 --> 01:57:37,240
the data they had
access to before.

3209
01:57:37,240 --> 01:57:39,205
>> Oh, that thing
cannot be solved.

3210
01:57:39,205 --> 01:57:41,065
Felicia has a very good
point on that one.

3211
01:57:41,065 --> 01:57:42,805
Whatever is gone, is gone.

3212
01:57:42,805 --> 01:57:45,110
You can't control
that data.

3213
01:57:46,620 --> 01:57:48,820
>> If they have
it locally,

3214
01:57:48,820 --> 01:57:50,680
then yes, you
cannot control it.

3215
01:57:50,680 --> 01:57:53,020
But this shouldn't
be able to get

3216
01:57:53,020 --> 01:57:56,035
new content from your
system and decrypt it.

3217
01:57:56,035 --> 01:57:57,190
>> They will
not be able to.

3218
01:57:57,190 --> 01:57:58,330
So for that problem,

3219
01:57:58,330 --> 01:58:01,630
what we do is we
the access manager

3220
01:58:01,630 --> 01:58:03,670
or the controller
will generate

3221
01:58:03,670 --> 01:58:05,380
a new public parameters,

3222
01:58:05,380 --> 01:58:07,705
meaning data that
will be encrypted

3223
01:58:07,705 --> 01:58:09,010
afterwards will use

3224
01:58:09,010 --> 01:58:10,780
a new everything new keys.

3225
01:58:10,780 --> 01:58:12,010
So that guy will
be kicked out

3226
01:58:12,010 --> 01:58:13,120
of the system and
you'll not be able

3227
01:58:13,120 --> 01:58:14,215
to fetch the new keys

3228
01:58:14,215 --> 01:58:16,075
to access the first data.

3229
01:58:16,075 --> 01:58:17,860
Not for the old
data, old data

3230
01:58:17,860 --> 01:58:19,940
will be still going out.

3231
01:58:20,220 --> 01:58:24,740
>> Thank you. Any
other questions?

3232
01:58:28,350 --> 01:58:30,535
>> I just wanted to
try to understand

3233
01:58:30,535 --> 01:58:33,050
what's new will
be in there?

3234
01:58:33,480 --> 01:58:35,830
The data encrypted using

3235
01:58:35,830 --> 01:58:37,960
policies that
is related to

3236
01:58:37,960 --> 01:58:42,199
the [OVERLAPPING]
attributes from the data?

3237
01:58:42,199 --> 01:58:42,820
>> Yes.

3238
01:58:42,820 --> 01:58:45,730
>> But then how
can change it?

3239
01:58:45,730 --> 01:58:48,130
What will be changed?

3240
01:58:48,130 --> 01:58:51,175
>> So for the education,

3241
01:58:51,175 --> 01:58:53,320
it uses attributes for

3242
01:58:53,320 --> 01:58:54,820
public parameters
that is generated

3243
01:58:54,820 --> 01:58:56,065
by the control key.

3244
01:58:56,065 --> 01:58:57,835
so if you change
the public diameter

3245
01:58:57,835 --> 01:58:59,110
and you are [OVERLAPPING]

3246
01:58:59,110 --> 01:58:59,890
>> So you just have to

3247
01:58:59,890 --> 01:59:01,210
change the public
parameter so?

3248
01:59:01,210 --> 01:59:03,370
>> Yeah. Basically,

3249
01:59:03,370 --> 01:59:06,700
all the keys will
be regenerated.

3250
01:59:06,700 --> 01:59:09,805
That's the revocation
mechanism we have found.

3251
01:59:09,805 --> 01:59:12,890
>> Sounds good.
Thank you, Saurab.

3252
01:59:16,500 --> 01:59:21,070
So next we have Davide.

3253
01:59:21,070 --> 01:59:23,215
Davide is a researcher at

3254
01:59:23,215 --> 01:59:26,740
NIST Smart Connected
Systems Division and

3255
01:59:26,740 --> 01:59:29,140
has worked on
various aspects

3256
01:59:29,140 --> 01:59:31,990
of NDN over the
years, including IoT,

3257
01:59:31,990 --> 01:59:34,615
security, network
measurement, forwarding,

3258
01:59:34,615 --> 01:59:35,935
and bay color,

3259
01:59:35,935 --> 02:00:30,626
Ad Hoc Networks.
[BACKGROUND]

3260
02:00:30,626 --> 02:00:32,200
>> Not seen this

3261
02:00:32,200 --> 02:01:10,660
[inaudible].

3262
02:01:10,660 --> 02:01:12,800
I don't know
which one it was.

3263
02:01:21,990 --> 02:01:23,560
>> [inaudible]
We can close

3264
02:01:23,560 --> 02:01:24,970
everything and we
should be able

3265
02:01:24,970 --> 02:01:28,270
to see the desktop.

3266
02:01:28,270 --> 02:01:29,650
>> No right there.

3267
02:01:29,650 --> 02:03:23,620
[inaudible].

3268
02:03:23,620 --> 02:03:25,060
>> Even the mouse
is misbehaving.

3269
02:03:25,060 --> 02:03:40,750
[inaudible].

3270
02:03:40,750 --> 02:03:45,530
>> Anyway. I'll be brief.

3271
02:03:45,900 --> 02:03:48,970
This is very
much a work in

3272
02:03:48,970 --> 02:03:52,270
progress collaboration
between team

3273
02:03:52,270 --> 02:03:55,580
with NIST and the
team Tennessee Tech.

3274
02:03:56,910 --> 02:04:00,655
Thanks for the
introduction by the way,

3275
02:04:00,655 --> 02:04:03,410
just able to speak.

3276
02:04:07,110 --> 02:04:09,490
I'm sure many, if
not most of you

3277
02:04:09,490 --> 02:04:13,240
have needed to use

3278
02:04:13,240 --> 02:04:17,275
or generate traffic traces

3279
02:04:17,275 --> 02:04:19,135
while you were doing
your earlier research,

3280
02:04:19,135 --> 02:04:23,665
either for performance
evaluation

3281
02:04:23,665 --> 02:04:27,740
or for your
simulations, etc.

3282
02:04:28,230 --> 02:04:32,770
I think we can't deny
that traffic traces in

3283
02:04:32,770 --> 02:04:34,960
general are very important

3284
02:04:34,960 --> 02:04:36,910
for research and this
is true in general,

3285
02:04:36,910 --> 02:04:39,230
and not just for
NDN research,

3286
02:04:40,560 --> 02:04:43,570
but some particular
reasons why it's important

3287
02:04:43,570 --> 02:04:46,900
for foreign NDN is
that I often hear,

3288
02:04:46,900 --> 02:04:48,340
oh, I don't know
how to optimize

3289
02:04:48,340 --> 02:04:49,480
this algorithm or I

3290
02:04:49,480 --> 02:04:50,980
don't know how to
tune this algorithm

3291
02:04:50,980 --> 02:04:52,195
for the common case.

3292
02:04:52,195 --> 02:04:53,920
What is a common

3293
02:04:53,920 --> 02:04:55,555
naming scheme for
applications,

3294
02:04:55,555 --> 02:04:56,860
are name super long,

3295
02:04:56,860 --> 02:04:58,190
are name super short?

3296
02:04:58,190 --> 02:05:00,810
What's the average
packet size?

3297
02:05:00,810 --> 02:05:03,670
So this question is

3298
02:05:03,670 --> 02:05:04,690
don't really
have an answer

3299
02:05:04,690 --> 02:05:06,415
because we don't
really know.

3300
02:05:06,415 --> 02:05:09,115
We're building the
plane as we fly it

3301
02:05:09,115 --> 02:05:13,300
and there's no
clear answers

3302
02:05:13,300 --> 02:05:16,280
to these questions so far.

3303
02:05:16,710 --> 02:05:18,730
Another reason for why

3304
02:05:18,730 --> 02:05:20,260
traffic durations are
important is completely

3305
02:05:20,260 --> 02:05:21,280
different is the

3306
02:05:21,280 --> 02:05:23,125
network troubleshooting
and debugging.

3307
02:05:23,125 --> 02:05:25,090
They can be very
helpful to find out

3308
02:05:25,090 --> 02:05:28,090
where the problem is,

3309
02:05:28,090 --> 02:05:31,345
both in real time
and after the fact.

3310
02:05:31,345 --> 02:05:35,140
Finally, recommendation
that came

3311
02:05:35,140 --> 02:05:36,640
from the review from

3312
02:05:36,640 --> 02:05:39,610
the National
Academies of Science.

3313
02:05:39,610 --> 02:05:41,440
The National
Academy of Sciences

3314
02:05:41,440 --> 02:05:42,850
periodically
appoints a panel of

3315
02:05:42,850 --> 02:05:44,290
experts that
reviews and needs

3316
02:05:44,290 --> 02:05:46,945
activities and last year,

3317
02:05:46,945 --> 02:05:49,465
our division was
under review.

3318
02:05:49,465 --> 02:05:52,870
One specific
recommendation was given,

3319
02:05:52,870 --> 02:05:57,914
needs expertise in this
field to contribute

3320
02:05:57,914 --> 02:06:04,480
synthetic and real
traffic trace.

3321
02:06:07,470 --> 02:06:10,045
This and probably
many other reason

3322
02:06:10,045 --> 02:06:12,800
is why we're doing this.

3323
02:06:14,070 --> 02:06:17,065
The next question
is how we do it?

3324
02:06:17,065 --> 02:06:20,870
How we generate this
traffic traces?

3325
02:06:23,190 --> 02:06:27,640
One proposed solution
that I've heard is to

3326
02:06:27,640 --> 02:06:29,350
take existing traces

3327
02:06:29,350 --> 02:06:31,390
from IP-based
applications,

3328
02:06:31,390 --> 02:06:34,330
typically HDB or
network file systems,

3329
02:06:34,330 --> 02:06:36,730
because they already
have a name hierarchy,

3330
02:06:36,730 --> 02:06:39,670
built-in, an
aim hierarchy.

3331
02:06:39,670 --> 02:06:42,505
So you can take
those traces and

3332
02:06:42,505 --> 02:06:46,790
somehow convert
them an NDN name.

3333
02:06:48,900 --> 02:06:51,700
Sure it could
work, but first

3334
02:06:51,700 --> 02:06:52,900
of all it's very
complicated

3335
02:06:52,900 --> 02:06:54,310
logistically
because it's almost

3336
02:06:54,310 --> 02:06:55,660
impossible to obtain

3337
02:06:55,660 --> 02:06:56,980
the traces in
the first place.

3338
02:06:56,980 --> 02:06:58,360
And even if you
do obtain them,

3339
02:06:58,360 --> 02:07:00,039
they often come
with limitations

3340
02:07:00,039 --> 02:07:01,540
like you cannot
publish this,

3341
02:07:01,540 --> 02:07:03,400
you can not
republish this.

3342
02:07:03,400 --> 02:07:07,550
You have some NDA or
some other constant.

3343
02:07:07,800 --> 02:07:11,440
Also we did come

3344
02:07:11,440 --> 02:07:12,580
across some traces and

3345
02:07:12,580 --> 02:07:13,540
these trace is actually

3346
02:07:13,540 --> 02:07:17,320
obfuscated for privacy
reasons and they

3347
02:07:17,320 --> 02:07:19,810
basically destroy
the name hierarchy

3348
02:07:19,810 --> 02:07:21,790
that it's present in
the packet trace.

3349
02:07:21,790 --> 02:07:25,554
At that point, you just
get a flat namespace,

3350
02:07:25,554 --> 02:07:26,995
just a hash of the name

3351
02:07:26,995 --> 02:07:29,515
or the path in
the HTTP request.

3352
02:07:29,515 --> 02:07:32,770
So it's useless
for NDN purposes.

3353
02:07:32,770 --> 02:07:36,355
Even if we had the
name that's not

3354
02:07:36,355 --> 02:07:38,200
all of NDN I guess it may

3355
02:07:38,200 --> 02:07:40,180
be the proceeds
of 90% of it,

3356
02:07:40,180 --> 02:07:42,265
but still not everything.
You don't get.

3357
02:07:42,265 --> 02:07:45,890
Things like a prefix
matching, I guess.

3358
02:07:45,960 --> 02:07:50,620
And also the biggest
problem with this,

3359
02:07:50,620 --> 02:07:53,230
they hinted that
before is that,

3360
02:07:53,230 --> 02:07:55,615
okay, these are
HTTP applications.

3361
02:07:55,615 --> 02:07:57,190
Maybe one, when we

3362
02:07:57,190 --> 02:07:58,780
build the NDN
applications,

3363
02:07:58,780 --> 02:07:59,530
we will build them in

3364
02:07:59,530 --> 02:08:01,135
a completely
different way,

3365
02:08:01,135 --> 02:08:03,610
maybe based on sync.

3366
02:08:03,610 --> 02:08:08,185
So the next step
in this process,

3367
02:08:08,185 --> 02:08:10,180
this thought
process on how

3368
02:08:10,180 --> 02:08:12,025
to produce NDN
traffic traces,

3369
02:08:12,025 --> 02:08:13,405
is okay, let's
generate them.

3370
02:08:13,405 --> 02:08:15,250
Let's synthesize
the trace.

3371
02:08:15,250 --> 02:08:17,830
So you build a
traffic generator,

3372
02:08:17,830 --> 02:08:19,855
but what parameters
that you use.

3373
02:08:19,855 --> 02:08:21,160
As I said before, what's

3374
02:08:21,160 --> 02:08:22,750
the average packet size?

3375
02:08:22,750 --> 02:08:23,830
What's the
average length of

3376
02:08:23,830 --> 02:08:25,030
a name in terms of

3377
02:08:25,030 --> 02:08:26,470
name components and

3378
02:08:26,470 --> 02:08:29,755
how many different
prefixes we have.

3379
02:08:29,755 --> 02:08:32,620
it's chicken
and egg problem

3380
02:08:32,620 --> 02:08:34,870
because you would
like to already

3381
02:08:34,870 --> 02:08:36,130
have existing traces of

3382
02:08:36,130 --> 02:08:38,140
real applications and
from those you can

3383
02:08:38,140 --> 02:08:40,630
extract these metrics
from which you

3384
02:08:40,630 --> 02:08:42,205
can educate

3385
02:08:42,205 --> 02:08:43,465
your traffic generator

3386
02:08:43,465 --> 02:08:45,190
or your trace generator.

3387
02:08:45,190 --> 02:08:49,240
So eventually we
end up to capturing

3388
02:08:49,240 --> 02:08:54,500
from as real as possible
NDN deployment.

3389
02:08:55,860 --> 02:08:58,495
This is also a
problem because

3390
02:08:58,495 --> 02:08:59,770
we don't really have

3391
02:08:59,770 --> 02:09:01,930
a real realistic
NDN deployment

3392
02:09:01,930 --> 02:09:03,640
or there are very few.

3393
02:09:03,640 --> 02:09:06,685
There might be
specialized domains

3394
02:09:06,685 --> 02:09:10,330
only some specific
type of networks.

3395
02:09:10,330 --> 02:09:12,790
And then there's the
problem of real users

3396
02:09:12,790 --> 02:09:13,900
versus synthetic users,

3397
02:09:13,900 --> 02:09:17,455
meaning we don't really
have that many users.

3398
02:09:17,455 --> 02:09:20,590
So we embarked in
this journey and

3399
02:09:20,590 --> 02:09:22,030
the only way to

3400
02:09:22,030 --> 02:09:23,395
do this is really
the last one,

3401
02:09:23,395 --> 02:09:26,125
but I'll explain more
specifically how.

3402
02:09:26,125 --> 02:09:27,610
The goal of the project is

3403
02:09:27,610 --> 02:09:33,610
to publish a dataset
of traffic traces.

3404
02:09:33,610 --> 02:09:34,810
Initially it
will be probably

3405
02:09:34,810 --> 02:09:37,945
small opening certain
type of traces,

3406
02:09:37,945 --> 02:09:41,320
limited types
and hopefully

3407
02:09:41,320 --> 02:09:43,150
over time it will grow.

3408
02:09:43,150 --> 02:09:45,250
In addition, not
just the dataset,

3409
02:09:45,250 --> 02:09:46,510
but also software,

3410
02:09:46,510 --> 02:09:49,060
an open source software
toolkit that includes

3411
02:09:49,060 --> 02:09:52,180
tools to capture
the traffic,

3412
02:09:52,180 --> 02:09:55,135
anonymize the traffic,
compress the traffic,

3413
02:09:55,135 --> 02:09:59,320
create nicely packaged
traces and also,

3414
02:09:59,320 --> 02:10:01,270
and this is the
capture side and then

3415
02:10:01,270 --> 02:10:03,250
there's the replay
and analysis side.

3416
02:10:03,250 --> 02:10:05,260
So you take that, you're

3417
02:10:05,260 --> 02:10:06,430
doing your NDN sim

3418
02:10:06,430 --> 02:10:08,170
simulation and
you want to take

3419
02:10:08,170 --> 02:10:10,720
the trace and replay
it in a near sim

3420
02:10:10,720 --> 02:10:12,040
with the producers and

3421
02:10:12,040 --> 02:10:14,485
consumers and so
on, so forth.

3422
02:10:14,485 --> 02:10:15,730
And we try to
design all of

3423
02:10:15,730 --> 02:10:16,870
these to be modular so

3424
02:10:16,870 --> 02:10:19,420
that if you don't
like a piece of it,

3425
02:10:19,420 --> 02:10:21,100
you can swap it
out with yours.

3426
02:10:21,100 --> 02:10:23,140
Let's say you
want to capture

3427
02:10:23,140 --> 02:10:25,570
in 100 gigabit network
and our total is

3428
02:10:25,570 --> 02:10:26,620
too slow for
that so you use

3429
02:10:26,620 --> 02:10:28,180
your own tool to
do the damping

3430
02:10:28,180 --> 02:10:29,740
and the rest of
our toolkit to do

3431
02:10:29,740 --> 02:10:31,345
the rest of the pipeline,

3432
02:10:31,345 --> 02:10:32,740
or vice versa, you use

3433
02:10:32,740 --> 02:10:36,400
your own tools
for analyzing,

3434
02:10:36,400 --> 02:10:38,500
but you can use
our toolkits for

3435
02:10:38,500 --> 02:10:40,690
the capturing side or

3436
02:10:40,690 --> 02:10:42,490
mix-and-match combination.

3437
02:10:42,490 --> 02:10:45,340
[NOISE] So starting from

3438
02:10:45,340 --> 02:10:48,085
the first of these tools,
the traffic damper,

3439
02:10:48,085 --> 02:10:49,975
we already, as I said,

3440
02:10:49,975 --> 02:10:52,105
this project is a
work in progress,

3441
02:10:52,105 --> 02:10:54,310
some pieces are in

3442
02:10:54,310 --> 02:10:56,110
a more advanced
state and others.

3443
02:10:56,110 --> 02:10:57,700
The traffic
damper is already

3444
02:10:57,700 --> 02:11:00,040
available on GitHub.

3445
02:11:00,040 --> 02:11:05,860
It supports live capture

3446
02:11:05,860 --> 02:11:08,785
from one or more
network interfaces,

3447
02:11:08,785 --> 02:11:12,100
or you can also read
from an existing trace,

3448
02:11:12,100 --> 02:11:13,375
as I said
earlier, modular.

3449
02:11:13,375 --> 02:11:16,630
So if you want to capture
with your own tool,

3450
02:11:16,630 --> 02:11:18,490
but then you want to
use other features of

3451
02:11:18,490 --> 02:11:20,320
this tool like
anonymization you

3452
02:11:20,320 --> 02:11:22,015
can do that by reading

3453
02:11:22,015 --> 02:11:27,355
another trace from a file.

3454
02:11:27,355 --> 02:11:30,280
The trace is saved into

3455
02:11:30,280 --> 02:11:32,200
a common standard that

3456
02:11:32,200 --> 02:11:34,030
I would say formats with

3457
02:11:34,030 --> 02:11:36,370
compression and we also

3458
02:11:36,370 --> 02:11:38,440
implemented some
best effort

3459
02:11:38,440 --> 02:11:39,550
anonimization features

3460
02:11:39,550 --> 02:11:43,210
that some are implemented.

3461
02:11:43,210 --> 02:11:46,670
We'll probably do more
work in the future.

3462
02:11:48,300 --> 02:11:53,920
>> Purchase those.
The next step

3463
02:11:53,920 --> 02:11:56,200
is to actually do
the collection.

3464
02:11:56,200 --> 02:11:58,885
And our first
thought is to

3465
02:11:58,885 --> 02:12:01,825
collect these traces
on NDN testbed,

3466
02:12:01,825 --> 02:12:02,470
what we call the

3467
02:12:02,470 --> 02:12:03,850
NDN testbed and
we could open up

3468
02:12:03,850 --> 02:12:04,990
parentheses on
whether this is

3469
02:12:04,990 --> 02:12:06,400
a testbed or not actually,

3470
02:12:06,400 --> 02:12:08,830
maybe we should call
it pilot deployment,

3471
02:12:08,830 --> 02:12:12,500
but it's a separate
type of discussion.

3472
02:12:12,900 --> 02:12:15,580
And the immediate question

3473
02:12:15,580 --> 02:12:18,140
is, what are the
applications?

3474
02:12:18,150 --> 02:12:21,295
We're looking at two
applications right now,

3475
02:12:21,295 --> 02:12:24,700
just because it
was the easiest to

3476
02:12:24,700 --> 02:12:28,540
deploy and that
we know best.

3477
02:12:28,540 --> 02:12:32,355
But we're seeking
feedback and

3478
02:12:32,355 --> 02:12:33,930
other idea suggestions on

3479
02:12:33,930 --> 02:12:35,250
what other
applications we could

3480
02:12:35,250 --> 02:12:37,390
use to do this.

3481
02:12:37,390 --> 02:12:39,160
So these two applications,

3482
02:12:39,160 --> 02:12:42,475
one is coming from
the N-DISE project.

3483
02:12:42,475 --> 02:12:44,950
There's a producer
and consumer of

3484
02:12:44,950 --> 02:12:47,500
basically large files
that are used by

3485
02:12:47,500 --> 02:12:50,905
the high-energy
physics community.

3486
02:12:50,905 --> 02:12:54,610
You can see these as
a bulk data transfer,

3487
02:12:54,610 --> 02:12:57,250
I would say that
kind of application.

3488
02:12:57,250 --> 02:12:59,875
The other one is
video streaming.

3489
02:12:59,875 --> 02:13:02,200
So based on Shaka player,

3490
02:13:02,200 --> 02:13:06,650
which is a web
based or JavaScript

3491
02:13:06,650 --> 02:13:10,905
streaming video
player using

3492
02:13:10,905 --> 02:13:13,350
things like HLS and Dash.

3493
02:13:13,350 --> 02:13:18,485
But running over again
using NDNts library.

3494
02:13:18,485 --> 02:13:21,505
We are almost ready,

3495
02:13:21,505 --> 02:13:24,775
literally days away
from collecting.

3496
02:13:24,775 --> 02:13:27,010
We'll start small first.

3497
02:13:27,010 --> 02:13:29,260
We are going to have

3498
02:13:29,260 --> 02:13:32,050
a few instances
of the ndntdump,

3499
02:13:32,050 --> 02:13:33,640
the traffic dumper running

3500
02:13:33,640 --> 02:13:35,890
on a few nodes
of the testbed

3501
02:13:35,890 --> 02:13:37,960
and distributed
a certain number

3502
02:13:37,960 --> 02:13:41,050
of consumers, producers.

3503
02:13:41,050 --> 02:13:43,090
This is just a subset
of the nodes of

3504
02:13:43,090 --> 02:13:44,680
the testbed in the US,

3505
02:13:44,680 --> 02:13:46,240
then eventually
will expand to

3506
02:13:46,240 --> 02:13:49,340
a global scale, etc.

3507
02:13:50,040 --> 02:13:52,450
In the meantime, since we

3508
02:13:52,450 --> 02:13:54,280
haven't done this yet,

3509
02:13:54,280 --> 02:13:57,670
we started working on

3510
02:13:57,670 --> 02:14:01,545
some analysis and
feature extraction,

3511
02:14:01,545 --> 02:14:04,260
metrics extraction
using a sample trace

3512
02:14:04,260 --> 02:14:06,300
that we got from our
Junxiao's network,

3513
02:14:06,300 --> 02:14:09,365
this is 24 hours.

3514
02:14:09,365 --> 02:14:11,230
It's not a lot of packets,

3515
02:14:11,230 --> 02:14:13,240
1.3 million comes to

3516
02:14:13,240 --> 02:14:14,770
about 15 packets per

3517
02:14:14,770 --> 02:14:16,180
second so it's not
a lot of traffic,

3518
02:14:16,180 --> 02:14:18,220
but it's a good
starting point.

3519
02:14:18,220 --> 02:14:20,410
And this is mostly
video streaming there

3520
02:14:20,410 --> 02:14:23,450
is no N-DISE application.

3521
02:14:24,450 --> 02:14:26,560
This is the
sample trace and

3522
02:14:26,560 --> 02:14:30,460
some results
characteristics,

3523
02:14:30,460 --> 02:14:32,410
there's no results per se.

3524
02:14:32,410 --> 02:14:34,569
Characteristics
of the tracer.

3525
02:14:34,569 --> 02:14:36,280
So we can see most

3526
02:14:36,280 --> 02:14:37,690
of the time it's just
background traffic,

3527
02:14:37,690 --> 02:14:40,345
probably, sorry, analyzer

3528
02:14:40,345 --> 02:14:43,585
think there's not
much happening.

3529
02:14:43,585 --> 02:14:47,740
Not too many new nodes
are disappearing.

3530
02:14:47,740 --> 02:14:48,880
So the network is pretty

3531
02:14:48,880 --> 02:14:51,400
stable and lots of
interests here are

3532
02:14:51,400 --> 02:14:54,220
not being
answered probably

3533
02:14:54,220 --> 02:14:58,130
because the sink interests
are just expiring.

3534
02:14:58,770 --> 02:15:01,195
And once in a
while, there's

3535
02:15:01,195 --> 02:15:02,590
a few peaks and

3536
02:15:02,590 --> 02:15:03,970
this is probably
where some viewers,

3537
02:15:03,970 --> 02:15:06,830
we're watching the videos.

3538
02:15:07,410 --> 02:15:11,200
The other one is we

3539
02:15:11,200 --> 02:15:14,260
looked at the name length
in terms of bytes,

3540
02:15:14,260 --> 02:15:17,845
how many bytes, and in
terms of components.

3541
02:15:17,845 --> 02:15:19,930
So we can see

3542
02:15:19,930 --> 02:15:21,580
there's a correlation,
of course,

3543
02:15:21,580 --> 02:15:23,980
as the number of
components goes up,

3544
02:15:23,980 --> 02:15:25,990
the length in bytes

3545
02:15:25,990 --> 02:15:28,225
obviously grows
a little bit,

3546
02:15:28,225 --> 02:15:32,080
but there are some larger
clusters here with

3547
02:15:32,080 --> 02:15:35,500
a fairly large names with

3548
02:15:35,500 --> 02:15:36,955
not so many components but

3549
02:15:36,955 --> 02:15:38,170
there are some
components that

3550
02:15:38,170 --> 02:15:39,955
must be pretty long.

3551
02:15:39,955 --> 02:15:44,110
And also this one, I
think it's the darkest.

3552
02:15:44,110 --> 02:15:46,360
So the highest frequency,

3553
02:15:46,360 --> 02:15:48,715
which is consistent with
the previous graph,

3554
02:15:48,715 --> 02:15:50,830
the previous
plot of a number

3555
02:15:50,830 --> 02:15:53,725
of interests, blue
is interests.

3556
02:15:53,725 --> 02:15:56,155
We have a lot of interests
with 12 components

3557
02:15:56,155 --> 02:15:59,450
that are not
being answered.

3558
02:16:00,510 --> 02:16:03,610
So this is just
two examples of

3559
02:16:03,610 --> 02:16:06,115
all the metrics
you can extract.

3560
02:16:06,115 --> 02:16:07,480
And then the idea is

3561
02:16:07,480 --> 02:16:10,420
that you as a researcher,

3562
02:16:10,420 --> 02:16:12,220
you're working on some

3563
02:16:12,220 --> 02:16:14,680
specific caching
strategy or

3564
02:16:14,680 --> 02:16:16,540
foraging strategy
and you'll

3565
02:16:16,540 --> 02:16:18,700
want to look at some
specific traces,

3566
02:16:18,700 --> 02:16:21,185
how does your
strategy behave?

3567
02:16:21,185 --> 02:16:23,925
And you can pick
whatever suits

3568
02:16:23,925 --> 02:16:26,835
your use case or
workload best.

3569
02:16:26,835 --> 02:16:30,330
And you look at this
graph, this plots,

3570
02:16:30,330 --> 02:16:32,100
you extract metrics from

3571
02:16:32,100 --> 02:16:36,250
the traces and get

3572
02:16:36,250 --> 02:16:38,500
your trace and use it
in your simulations.

3573
02:16:38,500 --> 02:16:40,600
And that makes
your results

3574
02:16:40,600 --> 02:16:42,925
hopefully more
reproducible and

3575
02:16:42,925 --> 02:16:47,110
easier to compare
to other solutions

3576
02:16:47,110 --> 02:16:49,525
for the same problem
or similar problems.

3577
02:16:49,525 --> 02:16:53,770
So to conclude, as I said,

3578
02:16:53,770 --> 02:16:55,180
we are looking
for feedback,

3579
02:16:55,180 --> 02:16:56,695
do you have any ideas?

3580
02:16:56,695 --> 02:16:58,210
If you think this
is useful or

3581
02:16:58,210 --> 02:17:00,505
not useful, let us know.

3582
02:17:00,505 --> 02:17:02,889
But more importantly,

3583
02:17:02,889 --> 02:17:05,335
how do you think
you would use this,

3584
02:17:05,335 --> 02:17:06,955
use this and how,

3585
02:17:06,955 --> 02:17:08,290
and how we can improve

3586
02:17:08,290 --> 02:17:12,850
the usefulness
of this project,

3587
02:17:12,850 --> 02:17:14,200
make it more broadly

3588
02:17:14,200 --> 02:17:16,340
useful for the community.

3589
02:17:16,620 --> 02:17:20,800
In the future, we're

3590
02:17:20,800 --> 02:17:22,690
not saying we
will do this,

3591
02:17:22,690 --> 02:17:24,460
definitely not in
the first iteration,

3592
02:17:24,460 --> 02:17:26,260
but some ideas
are to extend

3593
02:17:26,260 --> 02:17:28,090
this ever shared database

3594
02:17:28,090 --> 02:17:29,830
where you put your traces

3595
02:17:29,830 --> 02:17:32,350
and then there's
an API to query

3596
02:17:32,350 --> 02:17:37,105
the traces and
do crazy things

3597
02:17:37,105 --> 02:17:39,190
or a dashboard for

3598
02:17:39,190 --> 02:17:40,900
real-time monitoring
of the testbed

3599
02:17:40,900 --> 02:17:42,640
or any other network

3600
02:17:42,640 --> 02:17:44,229
really for troubleshooting

3601
02:17:44,229 --> 02:17:45,985
issues in real time.

3602
02:17:45,985 --> 02:17:48,685
Finally, there's
speaking of testbeds,

3603
02:17:48,685 --> 02:17:50,755
the FABRIC testbed,

3604
02:17:50,755 --> 02:17:53,200
we might think about

3605
02:17:53,200 --> 02:17:54,640
how to integrate
it with FABRIC.

3606
02:17:54,640 --> 02:17:58,405
FABRIC has or will
have a built-in way of

3607
02:17:58,405 --> 02:18:01,030
dumping large volumes of

3608
02:18:01,030 --> 02:18:02,350
traffic as it travels

3609
02:18:02,350 --> 02:18:04,300
through their network,
their switches.

3610
02:18:04,300 --> 02:18:06,190
Maybe we can integrate it

3611
02:18:06,190 --> 02:18:11,150
dumping. That's
all I have.

3612
02:18:11,280 --> 02:18:19,780
>> Thank you,
Davida. [APPLAUSE].

3613
02:18:19,780 --> 02:18:23,290
>> Hi, is the NDNT
dump tool different

3614
02:18:23,290 --> 02:18:26,050
from the other
packet capture tools

3615
02:18:26,050 --> 02:18:27,520
we have been using,

3616
02:18:27,520 --> 02:18:31,490
like NDN dump,
and T shark.

3617
02:18:32,160 --> 02:18:34,120
>> Yeah, that's
a good question.

3618
02:18:34,120 --> 02:18:36,730
So the main feature

3619
02:18:36,730 --> 02:18:38,290
that is missing from
the other tools

3620
02:18:38,290 --> 02:18:40,105
is the anonymization.

3621
02:18:40,105 --> 02:18:46,195
That's one main advantage

3622
02:18:46,195 --> 02:18:48,355
or feature that we added.

3623
02:18:48,355 --> 02:18:50,440
The other one is that
we want to be able

3624
02:18:50,440 --> 02:18:53,890
to capture the traffic

3625
02:18:53,890 --> 02:18:57,655
and on the fly in real
time, we wanted to,

3626
02:18:57,655 --> 02:19:00,760
for instance, zero out

3627
02:19:00,760 --> 02:19:03,025
the continent
application parameters,

3628
02:19:03,025 --> 02:19:06,940
not just for
privacy reasons,

3629
02:19:06,940 --> 02:19:08,740
but also so that
the compression

3630
02:19:08,740 --> 02:19:10,465
would be more efficient.

3631
02:19:10,465 --> 02:19:12,640
Having more efficient
compressions

3632
02:19:12,640 --> 02:19:13,990
results in a smaller file,

3633
02:19:13,990 --> 02:19:17,665
which means we can
capture for longer.

3634
02:19:17,665 --> 02:19:19,570
Ideally, you would want
to be able to also to

3635
02:19:19,570 --> 02:19:21,970
capture over several
days at a time.

3636
02:19:21,970 --> 02:19:26,170
So we cannot ask
people to have

3637
02:19:26,170 --> 02:19:28,435
terabytes of space

3638
02:19:28,435 --> 02:19:31,015
when capturing
the traffic.

3639
02:19:31,015 --> 02:19:34,930
So doing this also
allows us to capture for

3640
02:19:34,930 --> 02:19:36,610
longer without asking

3641
02:19:36,610 --> 02:19:39,530
for crazy hardware
requirements.

3642
02:19:40,980 --> 02:19:44,214
>> So there's no actual

3643
02:19:44,214 --> 02:19:48,025
content in the
data packet.

3644
02:19:48,025 --> 02:19:50,815
>> So the data packets are

3645
02:19:50,815 --> 02:19:52,540
exactly as you see
them on the wire,

3646
02:19:52,540 --> 02:19:54,970
except that inside
the content DLV,

3647
02:19:54,970 --> 02:19:58,480
you only have a very
long string of zeros.

3648
02:19:58,480 --> 02:20:00,460
If your packet had,

3649
02:20:00,460 --> 02:20:02,695
I don't know 100
bytes of content,

3650
02:20:02,695 --> 02:20:05,570
you will have 100
bytes of zeros.

3651
02:20:10,110 --> 02:20:12,460
>> Do you make

3652
02:20:12,460 --> 02:20:15,460
any changes to the
name component?

3653
02:20:15,460 --> 02:20:19,610
>> No. Not at this time.

3654
02:20:19,740 --> 02:20:23,650
There may be privacy
issues from that too,

3655
02:20:23,650 --> 02:20:26,930
at some point, but
we're not there yet.

3656
02:20:28,470 --> 02:20:33,175
>> Any other
questions? If not,

3657
02:20:33,175 --> 02:20:36,370
then please give feedback

3658
02:20:36,370 --> 02:20:39,430
on the work as
Davida said,

3659
02:20:39,430 --> 02:20:41,305
how you'd like
to use this,

3660
02:20:41,305 --> 02:20:44,770
what are the use cases
and what kind of

3661
02:20:44,770 --> 02:20:46,690
traffic traces you'd like

3662
02:20:46,690 --> 02:20:48,430
to see in the future,

3663
02:20:48,430 --> 02:20:51,700
I think that would
be good to see.

3664
02:20:51,700 --> 02:20:58,770
Thank you, Davida
[APPLAUSE].

3665
02:20:58,770 --> 02:21:01,845
So next we have
Varun from UCLA.

3666
02:21:01,845 --> 02:21:03,330
He's a PhD student in

3667
02:21:03,330 --> 02:21:06,330
Lisa's group
working on NDN in

3668
02:21:06,330 --> 02:21:07,950
particular on distributed

3669
02:21:07,950 --> 02:21:11,980
dataset synchronization
and NDN APIs.

3670
02:21:12,300 --> 02:21:18,050
And his talk is NDN
Sync API overview.

3671
02:21:26,520 --> 02:21:30,940
>> Thanks, Usman. So
I'm going to try to

3672
02:21:30,940 --> 02:21:32,230
keep this short
because some of

3673
02:21:32,230 --> 02:21:35,375
this has already been
talked about before.

3674
02:21:35,375 --> 02:21:38,160
This talk is
about an overview

3675
02:21:38,160 --> 02:21:40,110
of the currently
available Sync,

3676
02:21:40,110 --> 02:21:42,090
which is the NDN
Transport APIs,

3677
02:21:42,090 --> 02:21:44,730
the high-level APIs and

3678
02:21:44,730 --> 02:21:46,365
it's also a request
for feedback.

3679
02:21:46,365 --> 02:21:49,555
This is available
right now,

3680
02:21:49,555 --> 02:21:52,135
what people are
working on and

3681
02:21:52,135 --> 02:21:53,140
how would you use it

3682
02:21:53,140 --> 02:21:55,255
and we encourage
you to use it,

3683
02:21:55,255 --> 02:21:56,470
try it out, and let

3684
02:21:56,470 --> 02:21:57,550
us know what
works for you,

3685
02:21:57,550 --> 02:21:59,260
what doesn't work
for you, what

3686
02:21:59,260 --> 02:22:01,810
could be changed
for improving it.

3687
02:22:01,810 --> 02:22:03,850
So I said that this is

3688
02:22:03,850 --> 02:22:06,280
a overview of the
NDN Transport APIs.

3689
02:22:06,280 --> 02:22:07,960
So for some background,

3690
02:22:07,960 --> 02:22:10,690
let's start with why
does NDN need transport?

3691
02:22:10,690 --> 02:22:12,820
In NDN communication is

3692
02:22:12,820 --> 02:22:14,590
based on Interest-Data
exchanges.

3693
02:22:14,590 --> 02:22:16,405
These interests
and data packets

3694
02:22:16,405 --> 02:22:17,830
are datagrams.

3695
02:22:17,830 --> 02:22:19,060
That means that
they are limited

3696
02:22:19,060 --> 02:22:20,365
by the MTU size

3697
02:22:20,365 --> 02:22:22,300
and that also means

3698
02:22:22,300 --> 02:22:23,710
that they have this
low-level API.

3699
02:22:23,710 --> 02:22:26,050
You set interest filters

3700
02:22:26,050 --> 02:22:27,445
and you get back
the data on them.

3701
02:22:27,445 --> 02:22:29,170
So that low-level
API is not

3702
02:22:29,170 --> 02:22:30,940
really for application
developers,

3703
02:22:30,940 --> 02:22:34,270
we don't use APIs to
send IP datagrams.

3704
02:22:34,270 --> 02:22:35,725
That is the first problem.

3705
02:22:35,725 --> 02:22:37,300
The second problem
is that we

3706
02:22:37,300 --> 02:22:39,400
have unpredictable
data production.

3707
02:22:39,400 --> 02:22:40,690
To get data in

3708
02:22:40,690 --> 02:22:42,220
NDN you need to
know the name of

3709
02:22:42,220 --> 02:22:43,780
the data and you

3710
02:22:43,780 --> 02:22:45,625
need to know that the
data actually exists,

3711
02:22:45,625 --> 02:22:47,395
otherwise you cannot
send the interests.

3712
02:22:47,395 --> 02:22:50,320
So we need a way to figure

3713
02:22:50,320 --> 02:22:53,350
out if a piece of data
exists and if it does,

3714
02:22:53,350 --> 02:22:54,640
then what is its name to

3715
02:22:54,640 --> 02:22:56,620
be able to face
this piece of data.

3716
02:22:56,620 --> 02:23:00,250
These two things need

3717
02:23:00,250 --> 02:23:02,050
help layer on top of NDN,

3718
02:23:02,050 --> 02:23:05,230
which is the NDN
Transport, that is Sync.

3719
02:23:05,230 --> 02:23:06,760
The Sync or distributed

3720
02:23:06,760 --> 02:23:08,440
dataset synchronization.

3721
02:23:08,440 --> 02:23:10,750
It actually
solves primarily

3722
02:23:10,750 --> 02:23:11,980
the second problem that

3723
02:23:11,980 --> 02:23:13,554
informs the group
participants

3724
02:23:13,554 --> 02:23:15,250
about the data production.

3725
02:23:15,250 --> 02:23:16,660
So if there's

3726
02:23:16,660 --> 02:23:18,445
a group of
communicating entities,

3727
02:23:18,445 --> 02:23:19,420
then as soon as data

3728
02:23:19,420 --> 02:23:20,620
is produced
inside the group,

3729
02:23:20,620 --> 02:23:22,180
Sync notifies
everyone else in

3730
02:23:22,180 --> 02:23:23,170
the group that
this new piece

3731
02:23:23,170 --> 02:23:24,145
of data is available,

3732
02:23:24,145 --> 02:23:25,750
and this is the
name of the data.

3733
02:23:25,750 --> 02:23:27,580
So this function is

3734
02:23:27,580 --> 02:23:29,290
called namespace
synchronization because

3735
02:23:29,290 --> 02:23:32,200
it synchronizes the
names of the dataset

3736
02:23:32,200 --> 02:23:34,480
and this serves as

3737
02:23:34,480 --> 02:23:37,970
a multi-party transport
protocol in NDN.

3738
02:23:37,980 --> 02:23:41,710
To use NDN in the real
world the second,

3739
02:23:41,710 --> 02:23:42,820
which was the
first problem

3740
02:23:42,820 --> 02:23:43,780
that I mentioned earlier,

3741
02:23:43,780 --> 02:23:45,730
is that application
developers are not

3742
02:23:45,730 --> 02:23:47,710
network experts
and so they

3743
02:23:47,710 --> 02:23:49,690
need familiar
high-level APIs.

3744
02:23:49,690 --> 02:23:50,860
The word familiar is

3745
02:23:50,860 --> 02:23:52,660
important here
because again,

3746
02:23:52,660 --> 02:23:54,925
they cannot use
Interest-Data directly

3747
02:23:54,925 --> 02:23:56,320
and they also cannot

3748
02:23:56,320 --> 02:23:58,075
sign and verify
each data packet.

3749
02:23:58,075 --> 02:24:01,100
They can do it but
it's very cumbersome.

3750
02:24:01,140 --> 02:24:03,745
Whatever the
Sync APIs would

3751
02:24:03,745 --> 02:24:04,990
the Sync APIs as they are

3752
02:24:04,990 --> 02:24:06,560
be able to solve
this problem.

3753
02:24:06,560 --> 02:24:08,175
Well, not really.

3754
02:24:08,175 --> 02:24:11,490
If you look at just
the pure Sync APIs

3755
02:24:11,490 --> 02:24:13,035
that Sync itself provides,

3756
02:24:13,035 --> 02:24:14,130
then I'm taking
the example

3757
02:24:14,130 --> 02:24:16,650
of data [inaudible],

3758
02:24:16,650 --> 02:24:18,245
the other protocols
are similar.

3759
02:24:18,245 --> 02:24:19,660
So Sync really
provides a very

3760
02:24:19,660 --> 02:24:21,700
simple API that you create

3761
02:24:21,700 --> 02:24:24,280
a Sync instance
which starts

3762
02:24:24,280 --> 02:24:27,505
the group then all
you can do is,

3763
02:24:27,505 --> 02:24:29,410
because Sync use a
sequential naming

3764
02:24:29,410 --> 02:24:31,150
for data for transport
layer purposes.

3765
02:24:31,150 --> 02:24:32,020
All you can do is

3766
02:24:32,020 --> 02:24:33,040
update the sequence
number like

3767
02:24:33,040 --> 02:24:34,930
increment the
sequence number for

3768
02:24:34,930 --> 02:24:36,895
your current
producer and then

3769
02:24:36,895 --> 02:24:38,020
if a sequence number

3770
02:24:38,020 --> 02:24:39,580
changes at some
other producer,

3771
02:24:39,580 --> 02:24:41,350
then you'll get
this callback.

3772
02:24:41,350 --> 02:24:42,760
I will quickly
talk about the

3773
02:24:42,760 --> 02:24:43,870
design of State
Vector Sync

3774
02:24:43,870 --> 02:24:45,160
in some later slides

3775
02:24:45,160 --> 02:24:47,245
which will make
this clear.

3776
02:24:47,245 --> 02:24:48,730
But before that, let me

3777
02:24:48,730 --> 02:24:49,750
just talk about what is

3778
02:24:49,750 --> 02:24:52,615
the high-level API that
you actually desire.

3779
02:24:52,615 --> 02:24:55,720
So we want high-level

3780
02:24:55,720 --> 02:24:56,950
multi-party communication

3781
02:24:56,950 --> 02:24:57,910
and that means there

3782
02:24:57,910 --> 02:24:58,990
should be no need
to deal with

3783
02:24:58,990 --> 02:25:01,165
these network or transport
layer primitives,

3784
02:25:01,165 --> 02:25:02,080
where by transport layer I

3785
02:25:02,080 --> 02:25:04,210
mean the sequence numbers.

3786
02:25:04,210 --> 02:25:08,980
That also means that
the application

3787
02:25:08,980 --> 02:25:10,465
should deal with
application data units,

3788
02:25:10,465 --> 02:25:12,355
not with network
layer packets.

3789
02:25:12,355 --> 02:25:14,110
There should be no
MTU size limitations

3790
02:25:14,110 --> 02:25:16,120
because this is a natural
clear limitation,

3791
02:25:16,120 --> 02:25:18,025
and we should allow using

3792
02:25:18,025 --> 02:25:19,540
semantic
application names,

3793
02:25:19,540 --> 02:25:20,830
not sequence numbers.

3794
02:25:20,830 --> 02:25:22,060
The second thing
is we should have

3795
02:25:22,060 --> 02:25:24,730
some built-in
security support.

3796
02:25:24,730 --> 02:25:26,500
So applications
don't need to sign

3797
02:25:26,500 --> 02:25:28,540
individual packets and
the security support

3798
02:25:28,540 --> 02:25:30,565
should be easy
to configure.

3799
02:25:30,565 --> 02:25:32,590
A sample API and

3800
02:25:32,590 --> 02:25:33,790
pretty much
everything looks like

3801
02:25:33,790 --> 02:25:35,470
this is the
Publish-Subscribe API,

3802
02:25:35,470 --> 02:25:37,435
which again, everyone
is familiar with.

3803
02:25:37,435 --> 02:25:38,860
We publish a
piece of data,

3804
02:25:38,860 --> 02:25:39,700
give it identifier,

3805
02:25:39,700 --> 02:25:41,620
and some content
and then we

3806
02:25:41,620 --> 02:25:43,915
subscribe to some
identify group,

3807
02:25:43,915 --> 02:25:45,835
where it corresponds
to some,

3808
02:25:45,835 --> 02:25:47,530
identifies and not
to some others,

3809
02:25:47,530 --> 02:25:48,940
and then we get a
call back as soon

3810
02:25:48,940 --> 02:25:50,320
as someone else produces

3811
02:25:50,320 --> 02:25:53,320
data for identifier
matching this group.

3812
02:25:53,320 --> 02:25:54,790
And the second
part of the API

3813
02:25:54,790 --> 02:25:56,395
would be security
configuration,

3814
02:25:56,395 --> 02:25:58,975
which I don't really
have a mockup for.

3815
02:25:58,975 --> 02:26:01,750
So the APIs that I'm
going to talk about

3816
02:26:01,750 --> 02:26:03,070
here first is

3817
02:26:03,070 --> 02:26:05,095
State Vector Sync
Pub/Sub, SVS-PS,

3818
02:26:05,095 --> 02:26:06,700
the second is
mGuard Pub/Sub,

3819
02:26:06,700 --> 02:26:08,425
which [inaudible]
already talked about,

3820
02:26:08,425 --> 02:26:09,850
and the third is I'm

3821
02:26:09,850 --> 02:26:11,065
just going to
put this here.

3822
02:26:11,065 --> 02:26:12,490
I'm not really going
to talk about it but

3823
02:26:12,490 --> 02:26:14,860
[inaudible] talk
earlier on DeftT.

3824
02:26:14,860 --> 02:26:17,020
So the Sync PS API

3825
02:26:17,020 --> 02:26:19,585
in DeftT is also
a Pub/Sub API.

3826
02:26:19,585 --> 02:26:23,470
The first one is
SVS-PS and I just put

3827
02:26:23,470 --> 02:26:24,940
the links in for the
implementation as well

3828
02:26:24,940 --> 02:26:27,010
as the spec for
SVS Pub/Sub.

3829
02:26:27,010 --> 02:26:30,340
So before I talk
about SVS Pub/Sub,

3830
02:26:30,340 --> 02:26:32,380
I'll go back to
what I said earlier

3831
02:26:32,380 --> 02:26:34,675
that Sync provides
some simple APIs,

3832
02:26:34,675 --> 02:26:36,970
and that can be
explained using if

3833
02:26:36,970 --> 02:26:38,110
I just explain how state

3834
02:26:38,110 --> 02:26:39,670
Patterson itself works.

3835
02:26:39,670 --> 02:26:41,170
So SVS represents

3836
02:26:41,170 --> 02:26:42,640
the namespace is
a list of tuples.

3837
02:26:42,640 --> 02:26:43,930
Each tuple is a producer

3838
02:26:43,930 --> 02:26:45,505
name and a
sequence number.

3839
02:26:45,505 --> 02:26:47,680
So whenever a
certain producer

3840
02:26:47,680 --> 02:26:48,895
produces a new
piece of data,

3841
02:26:48,895 --> 02:26:50,695
they increment their
local sequence number

3842
02:26:50,695 --> 02:26:52,210
and then Sync is
going to synchronize

3843
02:26:52,210 --> 02:26:54,070
this list of
tuples which is

3844
02:26:54,070 --> 02:26:56,170
the producer name and

3845
02:26:56,170 --> 02:26:57,265
the sequence number among

3846
02:26:57,265 --> 02:26:58,330
all of the participants.

3847
02:26:58,330 --> 02:26:59,290
So as soon as someone

3848
02:26:59,290 --> 02:27:00,580
purchases a new
piece of data,

3849
02:27:00,580 --> 02:27:02,140
the sequence
number increments

3850
02:27:02,140 --> 02:27:03,145
at some other place,

3851
02:27:03,145 --> 02:27:03,820
and then they know

3852
02:27:03,820 --> 02:27:05,620
that this
particular producer

3853
02:27:05,620 --> 02:27:07,120
produced a new
piece of data.

3854
02:27:07,120 --> 02:27:09,700
And now it should be
obvious why Sync has

3855
02:27:09,700 --> 02:27:11,350
this very simple API which

3856
02:27:11,350 --> 02:27:13,195
is just changing the
local sequence number.

3857
02:27:13,195 --> 02:27:15,715
So whenever you produce
a new piece of data,

3858
02:27:15,715 --> 02:27:16,960
all that Sync does is

3859
02:27:16,960 --> 02:27:18,580
update the
sequence number at

3860
02:27:18,580 --> 02:27:20,590
every other consumer to

3861
02:27:20,590 --> 02:27:21,100
let them know that

3862
02:27:21,100 --> 02:27:22,660
this new piece of
data was produced.

3863
02:27:22,660 --> 02:27:24,970
And that's why you only
get a callback saying

3864
02:27:24,970 --> 02:27:26,170
that the sequence number

3865
02:27:26,170 --> 02:27:28,700
changed for some
other producer.

3866
02:27:30,390 --> 02:27:33,040
Just for a bit more
context the way

3867
02:27:33,040 --> 02:27:35,050
SVS synchronizes
this is by

3868
02:27:35,050 --> 02:27:37,360
sending out a
state vector which

3869
02:27:37,360 --> 02:27:39,310
contains the
entire list of

3870
02:27:39,310 --> 02:27:40,450
tuples which is
the producer

3871
02:27:40,450 --> 02:27:41,875
names and the
sequence numbers.

3872
02:27:41,875 --> 02:27:44,635
And as soon as someone
has received this,

3873
02:27:44,635 --> 02:27:46,180
they know exactly
what the status

3874
02:27:46,180 --> 02:27:46,840
at the center of

3875
02:27:46,840 --> 02:27:48,505
this particular
Sync interests

3876
02:27:48,505 --> 02:27:50,800
because it contains
all state vector.

3877
02:27:50,800 --> 02:27:53,290
So why is it important is

3878
02:27:53,290 --> 02:27:55,240
that this is why you need

3879
02:27:55,240 --> 02:27:57,610
to sequence
numbers because

3880
02:27:57,610 --> 02:27:59,050
if you don't have
sequence numbers,

3881
02:27:59,050 --> 02:28:00,565
you can only put
so much inside

3882
02:28:00,565 --> 02:28:01,735
a single packet

3883
02:28:01,735 --> 02:28:02,890
that you're sending
out on the network.

3884
02:28:02,890 --> 02:28:04,060
You cannot put a lot

3885
02:28:04,060 --> 02:28:05,500
of names inside
the packet.

3886
02:28:05,500 --> 02:28:07,420
And the second
thing is that you

3887
02:28:07,420 --> 02:28:08,380
need the sequence numbers

3888
02:28:08,380 --> 02:28:09,520
for loss resiliency.

3889
02:28:09,520 --> 02:28:10,630
So for example, if one of

3890
02:28:10,630 --> 02:28:12,010
these Sync interests
gets missed,

3891
02:28:12,010 --> 02:28:12,970
then you don't have

3892
02:28:12,970 --> 02:28:14,620
the production of a
certain sequence number.

3893
02:28:14,620 --> 02:28:16,435
But if you receive the
next Sync interest,

3894
02:28:16,435 --> 02:28:17,935
it contains the next
sequence number.

3895
02:28:17,935 --> 02:28:18,520
So you know that

3896
02:28:18,520 --> 02:28:20,305
the previous one
was also produced.

3897
02:28:20,305 --> 02:28:22,870
So sequence
numbers are needed

3898
02:28:22,870 --> 02:28:26,080
in the transport layer
but at the same time,

3899
02:28:26,080 --> 02:28:27,370
applications don't want to

3900
02:28:27,370 --> 02:28:28,180
use the sequence numbers.

3901
02:28:28,180 --> 02:28:29,860
Applications want to
use sterile names.

3902
02:28:29,860 --> 02:28:30,970
So the sequence
number is like

3903
02:28:30,970 --> 02:28:33,235
a transport layer detail.

3904
02:28:33,235 --> 02:28:34,300
We don't use

3905
02:28:34,300 --> 02:28:36,670
the TCP sequence number
in applications.

3906
02:28:36,670 --> 02:28:40,570
So what applications need

3907
02:28:40,570 --> 02:28:42,775
is these semantically
meaningful data names.

3908
02:28:42,775 --> 02:28:44,830
And the second
thing that SVS or

3909
02:28:44,830 --> 02:28:46,090
any sync protocol
also needs

3910
02:28:46,090 --> 02:28:48,025
is we still need to do
data synchronization.

3911
02:28:48,025 --> 02:28:50,125
We're just
getting the names

3912
02:28:50,125 --> 02:28:52,150
of the consumers
inside the group.

3913
02:28:52,150 --> 02:28:53,230
We're not actually moving

3914
02:28:53,230 --> 02:28:54,310
the data from
the producer to

3915
02:28:54,310 --> 02:28:55,690
the consumer regardless

3916
02:28:55,690 --> 02:28:56,980
of whether the
consumer needs it.

3917
02:28:56,980 --> 02:28:59,380
So these two
things are what we

3918
02:28:59,380 --> 02:29:00,460
need to build
this high-level

3919
02:29:00,460 --> 02:29:02,200
API on top of Sync.

3920
02:29:02,200 --> 02:29:04,570
So the way SVS-PS
does it is,

3921
02:29:04,570 --> 02:29:05,800
first of all, we
need to solve

3922
02:29:05,800 --> 02:29:07,570
the problem of the
application names.

3923
02:29:07,570 --> 02:29:09,100
So we get the
sequence number.

3924
02:29:09,100 --> 02:29:11,290
The way SVS-PS gets

3925
02:29:11,290 --> 02:29:12,880
the application layer name

3926
02:29:12,880 --> 02:29:14,515
is just to send a
interest for it.

3927
02:29:14,515 --> 02:29:15,700
This interest
called the mapping

3928
02:29:15,700 --> 02:29:16,750
interest is just going to

3929
02:29:16,750 --> 02:29:17,980
ask what is the name

3930
02:29:17,980 --> 02:29:19,150
for this particular
sequence number.

3931
02:29:19,150 --> 02:29:20,620
This interest goes
to the producer

3932
02:29:20,620 --> 02:29:22,000
of the data and
the producer

3933
02:29:22,000 --> 02:29:23,500
replies with
the actual name

3934
02:29:23,500 --> 02:29:25,810
of the application data.

3935
02:29:25,810 --> 02:29:29,140
So now when the consumer

3936
02:29:29,140 --> 02:29:30,745
gets this mapping data,

3937
02:29:30,745 --> 02:29:32,230
which is the name,
then they can

3938
02:29:32,230 --> 02:29:33,100
decide using that name

3939
02:29:33,100 --> 02:29:34,420
whether they want
to face that data.

3940
02:29:34,420 --> 02:29:35,590
If they want to
face the data,

3941
02:29:35,590 --> 02:29:37,465
they'll send a interest
for the actual data

3942
02:29:37,465 --> 02:29:38,800
and then they'll

3943
02:29:38,800 --> 02:29:42,520
fetch the actual data
if they need it.

3944
02:29:42,520 --> 02:29:43,630
So the way it works is if

3945
02:29:43,630 --> 02:29:45,085
Alice, who is
the publisher,

3946
02:29:45,085 --> 02:29:46,150
produces a piece of data

3947
02:29:46,150 --> 02:29:47,485
with some
application name,

3948
02:29:47,485 --> 02:29:49,375
then Alice is just
going to increment

3949
02:29:49,375 --> 02:29:50,950
Alice's sequence
number and send out

3950
02:29:50,950 --> 02:29:51,700
the Sync interest which

3951
02:29:51,700 --> 02:29:53,095
contains a new
sequence number.

3952
02:29:53,095 --> 02:29:54,640
Whoever receives it is

3953
02:29:54,640 --> 02:29:56,470
then going to ask for
a mapping that what

3954
02:29:56,470 --> 02:29:56,920
is the name for

3955
02:29:56,920 --> 02:29:58,870
the sequence number
and then they'll

3956
02:29:58,870 --> 02:30:01,420
get this mapping data

3957
02:30:01,420 --> 02:30:02,665
which contains the name.

3958
02:30:02,665 --> 02:30:04,330
They can use it to
determine if they want

3959
02:30:04,330 --> 02:30:05,920
it and if they do want it,

3960
02:30:05,920 --> 02:30:07,060
then they can
actually send

3961
02:30:07,060 --> 02:30:09,430
an interest or
the data for

3962
02:30:09,430 --> 02:30:11,770
the sequence number and

3963
02:30:11,770 --> 02:30:13,345
then they'll get
the actual data.

3964
02:30:13,345 --> 02:30:14,770
One thing to note
here is that

3965
02:30:14,770 --> 02:30:16,960
because we are also
fetching the data

3966
02:30:16,960 --> 02:30:18,850
using the sequence
number if you just

3967
02:30:18,850 --> 02:30:20,830
encrypt all of the pieces
of data over here,

3968
02:30:20,830 --> 02:30:22,985
you also inherently
get in privacy.

3969
02:30:22,985 --> 02:30:25,500
So the application
layer name is

3970
02:30:25,500 --> 02:30:28,245
never revealed to
anyone who is moving,

3971
02:30:28,245 --> 02:30:29,970
only the sequence
numbers are equal,

3972
02:30:29,970 --> 02:30:30,600
that is the number of

3973
02:30:30,600 --> 02:30:32,920
publications
that went out.

3974
02:30:33,470 --> 02:30:35,550
So the second part is

3975
02:30:35,550 --> 02:30:36,845
segmentation and security.

3976
02:30:36,845 --> 02:30:38,455
So for segmentation,

3977
02:30:38,455 --> 02:30:40,615
SVS-PS provides
a simple API.

3978
02:30:40,615 --> 02:30:41,875
You just give it
a blob of data.

3979
02:30:41,875 --> 02:30:43,120
It is going to
segment it into

3980
02:30:43,120 --> 02:30:44,335
smaller packets

3981
02:30:44,335 --> 02:30:46,030
and then when it
receives it on

3982
02:30:46,030 --> 02:30:47,170
the subscriber then

3983
02:30:47,170 --> 02:30:48,250
it's going to
just reassemble

3984
02:30:48,250 --> 02:30:49,450
it and pass the data

3985
02:30:49,450 --> 02:30:51,145
blob back to the
application.

3986
02:30:51,145 --> 02:30:53,065
And similarly,
for security,

3987
02:30:53,065 --> 02:30:54,400
you just need to
initialize it

3988
02:30:54,400 --> 02:30:56,125
with a signer
and a validator

3989
02:30:56,125 --> 02:30:58,720
where the designers and

3990
02:30:58,720 --> 02:31:00,325
these validators are
going to be used

3991
02:31:00,325 --> 02:31:02,275
for signing and
validating data packets

3992
02:31:02,275 --> 02:31:03,355
but you don't
need to do that

3993
02:31:03,355 --> 02:31:05,305
yourself in the
application.

3994
02:31:05,305 --> 02:31:07,435
So the high-level API

3995
02:31:07,435 --> 02:31:08,290
looks something like this.

3996
02:31:08,290 --> 02:31:09,970
You initialize SES Pub/Sub

3997
02:31:09,970 --> 02:31:11,500
designer and
the validator,

3998
02:31:11,500 --> 02:31:13,540
and also the Sync prefix,

3999
02:31:13,540 --> 02:31:16,015
and then you call
subscribe on

4000
02:31:16,015 --> 02:31:17,995
a data prefix
which will get you

4001
02:31:17,995 --> 02:31:20,215
all the pieces of
the blobs of data

4002
02:31:20,215 --> 02:31:23,545
that are prefixed
with this topic.

4003
02:31:23,545 --> 02:31:26,125
And whoever needs to
publish the data,

4004
02:31:26,125 --> 02:31:27,670
they will just
call publish,

4005
02:31:27,670 --> 02:31:29,410
give the data name, and

4006
02:31:29,410 --> 02:31:30,730
then just give it
a binary blob.

4007
02:31:30,730 --> 02:31:32,170
This blob will
be segmented,

4008
02:31:32,170 --> 02:31:35,064
it will be signed, it
will be encapsulated,

4009
02:31:35,064 --> 02:31:36,955
and then the sequence
number will be changed

4010
02:31:36,955 --> 02:31:39,220
to the new one which

4011
02:31:39,220 --> 02:31:41,260
the subscriber
then fetch if

4012
02:31:41,260 --> 02:31:44,330
they're subscribed to
this particular tuple.

4013
02:31:46,340 --> 02:31:48,510
>> I'm just not going
to discuss this.

4014
02:31:48,510 --> 02:31:50,310
There's just one slide on

4015
02:31:50,310 --> 02:31:53,535
an overview of how
this works internally.

4016
02:31:53,535 --> 02:31:57,090
So the next API that I'm
going to talk about,

4017
02:31:57,090 --> 02:31:58,695
which again already did,

4018
02:31:58,695 --> 02:32:00,940
is mGuard Pub Sub.

4019
02:32:02,780 --> 02:32:05,790
So there's a link

4020
02:32:05,790 --> 02:32:07,995
to the code in some
slides I didn't have it.

4021
02:32:07,995 --> 02:32:10,380
So if you want to use
the pops up part of it,

4022
02:32:10,380 --> 02:32:11,040
you can probably go

4023
02:32:11,040 --> 02:32:13,570
there or you can
talk to Sarah.

4024
02:32:14,300 --> 02:32:17,475
mGuard is again part
of the MD2K project.

4025
02:32:17,475 --> 02:32:20,115
It's designed for
real-time data delivery.

4026
02:32:20,115 --> 02:32:21,840
In particular, an emphasis

4027
02:32:21,840 --> 02:32:23,115
on high-frequency data,

4028
02:32:23,115 --> 02:32:25,050
which relates to how

4029
02:32:25,050 --> 02:32:26,700
it's security
model is built,

4030
02:32:26,700 --> 02:32:27,900
and it gives us

4031
02:32:27,900 --> 02:32:30,090
fine-grained contextual
access control.

4032
02:32:30,090 --> 02:32:33,030
So mGuard Pub Sub is
built over PSync.

4033
02:32:33,030 --> 02:32:35,085
PSync also uses
sequence numbers.

4034
02:32:35,085 --> 02:32:36,390
Its design is
slightly different,

4035
02:32:36,390 --> 02:32:38,160
it uses an invertible
bloom filter

4036
02:32:38,160 --> 02:32:39,120
in sync interests instead

4037
02:32:39,120 --> 02:32:40,260
of sending the raw data,

4038
02:32:40,260 --> 02:32:42,480
but it's still is a
sequence numbers.

4039
02:32:42,480 --> 02:32:44,880
One difference is
that PSync replies

4040
02:32:44,880 --> 02:32:46,110
can carry the
new data name.

4041
02:32:46,110 --> 02:32:47,940
So the mapping data

4042
02:32:47,940 --> 02:32:50,910
in state vector sync
doesn't apply over here.

4043
02:32:50,910 --> 02:32:54,135
In the mGuard pops up API.

4044
02:32:54,135 --> 02:32:55,650
You publish and subscribe

4045
02:32:55,650 --> 02:32:56,865
to these data streams.

4046
02:32:56,865 --> 02:32:59,340
And the subscribers are

4047
02:32:59,340 --> 02:33:01,620
authorized using access
control policies.

4048
02:33:01,620 --> 02:33:03,900
So again, talked
about this.

4049
02:33:03,900 --> 02:33:05,955
I'll just quickly
go to the API,

4050
02:33:05,955 --> 02:33:09,765
which looks very
similar to the SVS API.

4051
02:33:09,765 --> 02:33:11,280
You subscribe to
data streams,

4052
02:33:11,280 --> 02:33:12,390
you get callbacks whenever

4053
02:33:12,390 --> 02:33:13,755
there's a new
piece of data.

4054
02:33:13,755 --> 02:33:15,000
When you're
publishing your

4055
02:33:15,000 --> 02:33:16,290
published on data name,

4056
02:33:16,290 --> 02:33:17,490
which is the
data stream is

4057
02:33:17,490 --> 02:33:19,170
just a prefix of
the data name,

4058
02:33:19,170 --> 02:33:20,805
and then you also
provide, in this case,

4059
02:33:20,805 --> 02:33:22,770
attributes because
mGuard Pub Sub also

4060
02:33:22,770 --> 02:33:25,125
has security built-in
inside the Pub Sub,

4061
02:33:25,125 --> 02:33:26,895
and then you
provide the content

4062
02:33:26,895 --> 02:33:29,595
which is going to get
to the subscriber.

4063
02:33:29,595 --> 02:33:32,520
Once again, you have

4064
02:33:32,520 --> 02:33:33,690
the manifest in mGuard

4065
02:33:33,690 --> 02:33:34,950
pops up because
as I mentioned,

4066
02:33:34,950 --> 02:33:36,660
the important
part is built

4067
02:33:36,660 --> 02:33:38,925
for sending a lot of
packets on synch.

4068
02:33:38,925 --> 02:33:41,010
So that's why it has

4069
02:33:41,010 --> 02:33:43,380
this built-in support
for data manifests,

4070
02:33:43,380 --> 02:33:45,300
which you can use to bulk

4071
02:33:45,300 --> 02:33:48,360
verify multiple
pieces of data.

4072
02:33:48,360 --> 02:33:50,130
So the manifest is just a

4073
02:33:50,130 --> 02:33:52,005
data packet which
contains the names

4074
02:33:52,005 --> 02:33:53,820
of multiple data
packets and their

4075
02:33:53,820 --> 02:33:56,610
digests to just verify
this manifest packet,

4076
02:33:56,610 --> 02:33:57,600
and then you implicitly

4077
02:33:57,600 --> 02:33:59,160
verified all of
the data packets

4078
02:33:59,160 --> 02:34:00,420
whose names and
digest are there

4079
02:34:00,420 --> 02:34:02,640
inside this
manifest packet.

4080
02:34:02,640 --> 02:34:03,360
Because the names

4081
02:34:03,360 --> 02:34:05,025
contain the
implicit digest.

4082
02:34:05,025 --> 02:34:06,660
These manifests are in

4083
02:34:06,660 --> 02:34:08,535
turn sequentially name.

4084
02:34:08,535 --> 02:34:09,480
So you can just publish

4085
02:34:09,480 --> 02:34:10,890
these manifests
on precinct,

4086
02:34:10,890 --> 02:34:12,090
and then as
soon as someone

4087
02:34:12,090 --> 02:34:13,530
receives a new
sequence number,

4088
02:34:13,530 --> 02:34:15,375
they can paste
the manifest,

4089
02:34:15,375 --> 02:34:16,530
and then they can

4090
02:34:16,530 --> 02:34:18,670
fetch the actual
pieces of data.

4091
02:34:18,850 --> 02:34:23,150
So very quickly,
mGuard pops up when

4092
02:34:23,150 --> 02:34:24,920
the publisher
publishes a piece

4093
02:34:24,920 --> 02:34:27,155
of data using
the Pub Sub API,

4094
02:34:27,155 --> 02:34:28,520
then the publisher is

4095
02:34:28,520 --> 02:34:30,125
going to insert the
encrypted data,

4096
02:34:30,125 --> 02:34:30,950
the current key and

4097
02:34:30,950 --> 02:34:32,440
the manifest
into the repo.

4098
02:34:32,440 --> 02:34:34,350
And then they're
going to send out

4099
02:34:34,350 --> 02:34:35,460
the sync interest that

4100
02:34:35,460 --> 02:34:36,885
this new manifestos
published,

4101
02:34:36,885 --> 02:34:38,190
and then the
subscriber is going to

4102
02:34:38,190 --> 02:34:39,960
fetch the manifest
content key.

4103
02:34:39,960 --> 02:34:41,640
And if they need it,

4104
02:34:41,640 --> 02:34:42,330
then they're going to get

4105
02:34:42,330 --> 02:34:44,505
the actual
content, the data,

4106
02:34:44,505 --> 02:34:46,290
and then they can
decrypt it if they're

4107
02:34:46,290 --> 02:34:50,550
authorized through.
The configuration.

4108
02:34:50,550 --> 02:34:53,895
Again, you need the
prefixes. You need.

4109
02:34:53,895 --> 02:34:56,595
Also need these
certificates for

4110
02:34:56,595 --> 02:34:58,530
the NAC-ABE to use

4111
02:34:58,530 --> 02:35:00,045
to encrypt and
decrypt the data.

4112
02:35:00,045 --> 02:35:03,600
So my point here
is that mGuard,

4113
02:35:03,600 --> 02:35:04,200
you need to do

4114
02:35:04,200 --> 02:35:05,370
a little bit of
more configuration,

4115
02:35:05,370 --> 02:35:07,470
but mGuard Pub
Sub is going to

4116
02:35:07,470 --> 02:35:08,220
come with this

4117
02:35:08,220 --> 02:35:10,380
in-built security
support as well.

4118
02:35:10,380 --> 02:35:12,750
So I just want
to summarize,

4119
02:35:12,750 --> 02:35:14,490
this is not exactly
comparison,

4120
02:35:14,490 --> 02:35:17,520
but all of the APIs

4121
02:35:17,520 --> 02:35:19,680
that we have currently
look somewhat similar.

4122
02:35:19,680 --> 02:35:22,815
We have this publish-subscribe
in SVSPubSub,

4123
02:35:22,815 --> 02:35:24,780
mGuard Pub Sub as
well as the ft,

4124
02:35:24,780 --> 02:35:27,720
where you send out
a piece of data,

4125
02:35:27,720 --> 02:35:29,820
you get back where
you subscribe

4126
02:35:29,820 --> 02:35:33,345
to prefixes,
which are topics.

4127
02:35:33,345 --> 02:35:36,885
And they have different
security support.

4128
02:35:36,885 --> 02:35:38,010
As this website provides

4129
02:35:38,010 --> 02:35:38,970
a very thin layer
of security.

4130
02:35:38,970 --> 02:35:40,695
You give it a signer
and validator.

4131
02:35:40,695 --> 02:35:43,170
And got has this
NAC-ABE security

4132
02:35:43,170 --> 02:35:45,000
built-in and DFT,

4133
02:35:45,000 --> 02:35:47,385
of course does the
trust schema security.

4134
02:35:47,385 --> 02:35:51,180
And so again, we invite

4135
02:35:51,180 --> 02:35:52,740
you to try out or use

4136
02:35:52,740 --> 02:35:54,390
these APIs in your
applications.

4137
02:35:54,390 --> 02:35:55,470
Or if you know someone

4138
02:35:55,470 --> 02:35:56,550
building an application
and then you

4139
02:35:56,550 --> 02:35:58,125
could recommend
one of these APIs

4140
02:35:58,125 --> 02:35:59,460
and then send
your criticisms,

4141
02:35:59,460 --> 02:36:01,440
suggestions, or any
general feedback.

4142
02:36:01,440 --> 02:36:02,940
Thank you.

4143
02:36:02,940 --> 02:36:11,730
>> Thank you Veron.
[APPLAUSE] Yes.

4144
02:36:11,730 --> 02:36:13,725
>> I just have a
clarification question.

4145
02:36:13,725 --> 02:36:15,945
I think are under
security support.

4146
02:36:15,945 --> 02:36:18,855
Your list, the things
it's very different.

4147
02:36:18,855 --> 02:36:22,130
For example assigning and

4148
02:36:22,130 --> 02:36:24,230
the validation I think

4149
02:36:24,230 --> 02:36:27,350
DFT does too this, not
that it doesn't do it.

4150
02:36:27,350 --> 02:36:29,825
Similarly, union would
trust the schema.

4151
02:36:29,825 --> 02:36:32,580
That's what you
need to decide.

4152
02:36:32,580 --> 02:36:33,900
Which key to sign and

4153
02:36:33,900 --> 02:36:36,615
which could use
for validation.

4154
02:36:36,615 --> 02:36:39,360
So I wasn't sure
how you listed

4155
02:36:39,360 --> 02:36:43,875
the different things on
the different nodes?

4156
02:36:43,875 --> 02:36:45,300
>> Yes. So I
was saying it's

4157
02:36:45,300 --> 02:36:46,770
not exactly a
comparison is just

4158
02:36:46,770 --> 02:36:49,590
I'm saying that there's

4159
02:36:49,590 --> 02:36:51,030
different
security support.

4160
02:36:51,030 --> 02:36:53,850
Like I'm goddess,
more security

4161
02:36:53,850 --> 02:36:56,140
coupled with the
API of solid API.

4162
02:36:56,140 --> 02:36:59,825
SVS has that a
turn earlier

4163
02:36:59,825 --> 02:37:05,450
and DFT has coupled
with the [inaudible].

4164
02:37:05,450 --> 02:37:07,710
I don't know if it's
the best way to put it.

4165
02:37:11,170 --> 02:37:12,270
>> [inaudible].

4166
02:37:12,270 --> 02:37:16,390
>> Yeah, I get
what you mean.

4167
02:37:16,390 --> 02:37:17,790
>> Any other questions.

4168
02:37:17,790 --> 02:37:20,760
So I think Ken had

4169
02:37:20,760 --> 02:37:25,240
a question about
sync, G12.

4170
02:37:27,350 --> 02:37:37,020
Thank you, Laura. So the

4171
02:37:37,020 --> 02:37:39,855
[NOISE] last talk of
the day is from Alicia.

4172
02:37:39,855 --> 02:37:43,540
We all know Alicia
is from UCLA,

4173
02:37:43,550 --> 02:37:47,025
DIE [inaudible]
Indian grant.

4174
02:37:47,025 --> 02:37:49,545
Our talk is tearing
new applications

4175
02:37:49,545 --> 02:37:53,170
away from centralized
realizing.

4176
02:37:54,830 --> 02:37:57,060
>> Between you
and the dinner,

4177
02:37:57,060 --> 02:37:58,560
I will try to go fast.

4178
02:37:58,560 --> 02:38:01,300
Also as the last

4179
02:38:13,820 --> 02:38:15,780
speaker for the day.

4180
02:38:15,780 --> 02:38:18,870
I'm not making any
new points for that.

4181
02:38:18,870 --> 02:38:20,910
My short talk I hope

4182
02:38:20,910 --> 02:38:22,800
is really short trying to

4183
02:38:22,800 --> 02:38:27,405
actually make a summary
of the previous ones,

4184
02:38:27,405 --> 02:38:31,740
I want to highlight the
points as I see it.

4185
02:38:31,740 --> 02:38:35,670
Because behind all
the great works,

4186
02:38:35,670 --> 02:38:38,340
there has to be
some SQL resource.

4187
02:38:38,340 --> 02:38:40,650
And I always wanted

4188
02:38:40,650 --> 02:38:44,505
to see what are those,
the SQL resources.

4189
02:38:44,505 --> 02:38:47,025
The others are details

4190
02:38:47,025 --> 02:38:48,300
that everyone can work out

4191
02:38:48,300 --> 02:38:51,615
the specific detail
for specific problems.

4192
02:38:51,615 --> 02:38:55,185
If you understand what
the SQL resource is,

4193
02:38:55,185 --> 02:38:56,310
then you can apply it.

4194
02:38:56,310 --> 02:39:06,370
[NOISE] Or you
should use that one

4195
02:39:08,210 --> 02:39:09,705
>> I heard that

4196
02:39:09,705 --> 02:39:12,240
there's some
family emergency.

4197
02:39:12,240 --> 02:39:13,950
He couldn't be here.
There's really

4198
02:39:13,950 --> 02:39:16,380
a joint talk in the
following sense,

4199
02:39:16,380 --> 02:39:18,430
if I know how to do it.

4200
02:39:18,440 --> 02:39:20,955
This talk could
collect the input

4201
02:39:20,955 --> 02:39:24,270
from two resources,

4202
02:39:24,270 --> 02:39:26,295
one is on a panel on

4203
02:39:26,295 --> 02:39:27,780
Internet Centralization

4204
02:39:27,780 --> 02:39:30,060
Decentralization actually

4205
02:39:30,060 --> 02:39:31,890
chaired by Alex here.

4206
02:39:31,890 --> 02:39:35,280
And then the IETF,
the decentralize,

4207
02:39:35,280 --> 02:39:37,410
the Internet
research group also

4208
02:39:37,410 --> 02:39:39,810
had a workshop
on the topic.

4209
02:39:39,810 --> 02:39:42,240
And the last
one is NDN had

4210
02:39:42,240 --> 02:39:46,425
a retreat last year
with a session on this,

4211
02:39:46,425 --> 02:39:48,180
I think [inaudible]
probably

4212
02:39:48,180 --> 02:39:49,575
hosted a live session,

4213
02:39:49,575 --> 02:39:51,300
and he had a talk there.

4214
02:39:51,300 --> 02:39:52,680
And so therefore this one

4215
02:39:52,680 --> 02:39:54,180
is some message that

4216
02:39:54,180 --> 02:39:56,865
together his talk at

4217
02:39:56,865 --> 02:39:59,850
NDN Retreat and
my summary of

4218
02:39:59,850 --> 02:40:04,120
the IETF DINRG
workshop report.

4219
02:40:05,300 --> 02:40:08,115
I'll make the
story work quick.

4220
02:40:08,115 --> 02:40:09,405
I want to tell a story

4221
02:40:09,405 --> 02:40:11,220
that I normally
say that Internet

4222
02:40:11,220 --> 02:40:14,790
started decentralized
somewhere will get

4223
02:40:14,790 --> 02:40:17,235
decentralized and
getting brighter

4224
02:40:17,235 --> 02:40:19,050
as the time goes,
getting worse.

4225
02:40:19,050 --> 02:40:23,115
So if I follow
my habit, why?

4226
02:40:23,115 --> 02:40:27,210
This is them. We started
by having an IP.

4227
02:40:27,210 --> 02:40:29,280
IP is a point-to-point
delivery,

4228
02:40:29,280 --> 02:40:32,340
then the TCP
point-to-point connection.

4229
02:40:32,340 --> 02:40:34,365
Then the driver is
really distributed.

4230
02:40:34,365 --> 02:40:37,470
You want to join the
internet IP address,

4231
02:40:37,470 --> 02:40:39,465
then set up some servers,

4232
02:40:39,465 --> 02:40:41,025
so your local users,

4233
02:40:41,025 --> 02:40:42,375
can have emails, can have

4234
02:40:42,375 --> 02:40:44,625
FTP and other things.

4235
02:40:44,625 --> 02:40:48,255
Why did you host your
own email services?

4236
02:40:48,255 --> 02:40:50,745
Well, if you want to
serve your local users,

4237
02:40:50,745 --> 02:40:52,095
that's the only
way you get it.

4238
02:40:52,095 --> 02:40:54,525
There's no
commercial services.

4239
02:40:54,525 --> 02:40:57,375
There is an AOL,
America Online,

4240
02:40:57,375 --> 02:40:59,220
but that's really
for home users per

4241
02:40:59,220 --> 02:41:01,770
se, not for institutions.

4242
02:41:01,770 --> 02:41:04,920
So therefore, individual
parties around

4243
02:41:04,920 --> 02:41:08,100
their own application
servers and the DNS

4244
02:41:08,100 --> 02:41:09,675
that's really handles

4245
02:41:09,675 --> 02:41:12,240
the gap between
network that

4246
02:41:12,240 --> 02:41:14,279
handle addresses
versus application

4247
02:41:14,279 --> 02:41:16,560
that cannot use addresses.

4248
02:41:16,560 --> 02:41:19,410
There's no a centralized
control per se,

4249
02:41:19,410 --> 02:41:22,415
although we hide the
DNS to start with,

4250
02:41:22,415 --> 02:41:26,820
it's after IP
got deployed.

4251
02:41:26,820 --> 02:41:29,925
One point I really
want to repeat,

4252
02:41:29,925 --> 02:41:33,680
perhaps more times in
future talks that a DNS

4253
02:41:33,680 --> 02:41:37,459
is not centrally controlled
name allocation,

4254
02:41:37,459 --> 02:41:39,605
please everyone
understand this.

4255
02:41:39,605 --> 02:41:41,720
ICANN, however political

4256
02:41:41,720 --> 02:41:43,475
or not political it is,

4257
02:41:43,475 --> 02:41:45,525
its job is to assure

4258
02:41:45,525 --> 02:41:47,100
the namespace uniqueness

4259
02:41:47,100 --> 02:41:49,110
and nothing beyond that.

4260
02:41:49,110 --> 02:41:51,180
Who gets a specific name?

4261
02:41:51,180 --> 02:41:53,445
I hate to flame on this.

4262
02:41:53,445 --> 02:41:55,065
That's not matter.

4263
02:41:55,065 --> 02:41:57,150
I used to work for Xerox.

4264
02:41:57,150 --> 02:42:00,120
Before Xerox company
was created,

4265
02:42:00,120 --> 02:42:01,740
did anyone know the word

4266
02:42:01,740 --> 02:42:04,620
Xerox and even
not existed?

4267
02:42:04,620 --> 02:42:07,530
Xerox made the word
and therefore,

4268
02:42:07,530 --> 02:42:10,200
you now understand
your copy paper,

4269
02:42:10,200 --> 02:42:13,275
you'll say Xeroxing,
so is the Google.

4270
02:42:13,275 --> 02:42:15,465
Before Google became fame.

4271
02:42:15,465 --> 02:42:17,805
There is no such
a word as Google.

4272
02:42:17,805 --> 02:42:21,180
Now, we don't say
search, we say Googling.

4273
02:42:21,180 --> 02:42:23,805
Individual names,
it does not matter.

4274
02:42:23,805 --> 02:42:25,320
I know that that's
trademarks and

4275
02:42:25,320 --> 02:42:27,525
pupils spend billions
for the trademark,

4276
02:42:27,525 --> 02:42:29,355
but the smart people
don't go that way.

4277
02:42:29,355 --> 02:42:30,885
If you have something,

4278
02:42:30,885 --> 02:42:32,505
you create our own brand.

4279
02:42:32,505 --> 02:42:34,980
It really doesn't matter
how you assemble of

4280
02:42:34,980 --> 02:42:37,290
you [inaudible] together
to make a name.

4281
02:42:37,290 --> 02:42:39,120
And I can merely just to

4282
02:42:39,120 --> 02:42:41,520
assure the names
are unique.

4283
02:42:41,520 --> 02:42:44,235
Flame up. So apps.

4284
02:42:44,235 --> 02:42:46,380
Like I said, in
the early days,

4285
02:42:46,380 --> 02:42:48,030
there's no
commercial services

4286
02:42:48,030 --> 02:42:49,665
for the popular apps.

4287
02:42:49,665 --> 02:42:51,720
You want your users

4288
02:42:51,720 --> 02:42:54,195
to how apps that have
your own server.

4289
02:42:54,195 --> 02:42:56,220
Those are not

4290
02:42:56,220 --> 02:42:59,115
the revenue generation
operations.

4291
02:42:59,115 --> 02:43:01,020
I want to make
that very clear.

4292
02:43:01,020 --> 02:43:04,035
But given that there's
a useful apps,

4293
02:43:04,035 --> 02:43:05,505
there's always
a smart people.

4294
02:43:05,505 --> 02:43:06,720
They are trying
to figure out how

4295
02:43:06,720 --> 02:43:07,890
I can make money
out of it.

4296
02:43:07,890 --> 02:43:08,940
And therefore, it comes

4297
02:43:08,940 --> 02:43:12,180
to commercialized
apps providers.

4298
02:43:12,180 --> 02:43:15,150
Once it become a
revenue-generating,

4299
02:43:15,150 --> 02:43:18,720
that's the market first
started that drive.

4300
02:43:18,720 --> 02:43:20,940
You'll become a
service provider,

4301
02:43:20,940 --> 02:43:22,935
you want to see how can
I get them all users,

4302
02:43:22,935 --> 02:43:24,630
you get the revenues

4303
02:43:24,630 --> 02:43:26,700
then even you, you
don't get revenues.

4304
02:43:26,700 --> 02:43:28,584
You still try to improve

4305
02:43:28,584 --> 02:43:30,200
the services
so you can get

4306
02:43:30,200 --> 02:43:32,420
more users in the future,

4307
02:43:32,420 --> 02:43:33,910
you will get the revenues.

4308
02:43:33,910 --> 02:43:36,465
And therefore,
the bigger size,

4309
02:43:36,465 --> 02:43:38,025
you can have
more investments

4310
02:43:38,025 --> 02:43:39,720
into improve
your services.

4311
02:43:39,720 --> 02:43:42,315
Not like our product
department email server

4312
02:43:42,315 --> 02:43:45,350
where single super
mail running it

4313
02:43:45,350 --> 02:43:47,670
but it doesn't have

4314
02:43:47,670 --> 02:43:48,720
the resources to

4315
02:43:48,720 --> 02:43:51,925
continuously improve
the service.

4316
02:43:51,925 --> 02:43:53,540
But once you become

4317
02:43:53,540 --> 02:43:56,900
a commercial services,
that's all you have.

4318
02:43:56,900 --> 02:43:59,315
And I think equally
importantly,

4319
02:43:59,315 --> 02:44:00,530
I want to emphasize,

4320
02:44:00,530 --> 02:44:03,460
cannot be overemphasized
in the security.

4321
02:44:03,460 --> 02:44:04,860
This days, there are still

4322
02:44:04,860 --> 02:44:06,090
people who wanted to run

4323
02:44:06,090 --> 02:44:07,560
their own servers
independent

4324
02:44:07,560 --> 02:44:10,320
from our grid,
Google email, maybe.

4325
02:44:10,320 --> 02:44:14,295
But can you survive
the security attack?

4326
02:44:14,295 --> 02:44:17,070
And that becomes
increasingly difficult.

4327
02:44:17,070 --> 02:44:18,450
Not only that, the real

4328
02:44:18,450 --> 02:44:20,685
attacks, the real
restrictions,

4329
02:44:20,685 --> 02:44:23,850
the ISVs would not allow
you to open the Port

4330
02:44:23,850 --> 02:44:27,120
25 because they're
worried that

4331
02:44:27,120 --> 02:44:29,025
there's become
potential sources

4332
02:44:29,025 --> 02:44:30,675
for exploration.

4333
02:44:30,675 --> 02:44:32,760
So running
individual services,

4334
02:44:32,760 --> 02:44:35,550
just become
increasingly difficult,

4335
02:44:35,550 --> 02:44:37,080
if not possible.

4336
02:44:37,080 --> 02:44:39,359
And then security
challenges

4337
02:44:39,359 --> 02:44:41,790
make more people
who are willing to

4338
02:44:41,790 --> 02:44:45,600
run their own services
to outsourcing because

4339
02:44:45,600 --> 02:44:49,230
the cost becomes
higher as time goes.

4340
02:44:49,230 --> 02:44:51,825
Now, I just want
to flame on where

4341
02:44:51,825 --> 02:44:54,585
we are the art of
networking today.

4342
02:44:54,585 --> 02:44:56,850
Well, how lots of
grid applications

4343
02:44:56,850 --> 02:44:58,290
as immediate streaming,

4344
02:44:58,290 --> 02:45:02,100
the people, remote
listening to the talk,

4345
02:45:02,100 --> 02:45:04,560
conferencing,
LTE smart homes.

4346
02:45:04,560 --> 02:45:06,225
I know lots of people here

4347
02:45:06,225 --> 02:45:08,070
they have smart homes.

4348
02:45:08,070 --> 02:45:10,590
We tried but we
to turn it off.

4349
02:45:10,590 --> 02:45:13,620
And then I always
use this example,

4350
02:45:13,620 --> 02:45:15,540
can laptops to talk
to each other?

4351
02:45:15,540 --> 02:45:17,550
My laptop has this talk,

4352
02:45:17,550 --> 02:45:19,140
so that's here
can affect it.

4353
02:45:19,140 --> 02:45:20,610
If you've
installed the NVA,

4354
02:45:20,610 --> 02:45:22,245
you can. Otherwise
you cannot.

4355
02:45:22,245 --> 02:45:24,585
How do I know my
laptop what that is?

4356
02:45:24,585 --> 02:45:25,890
Are you there
to connect to

4357
02:45:25,890 --> 02:45:28,455
my laptop without the TLS.

4358
02:45:28,455 --> 02:45:30,165
Why don't you have TLS?

4359
02:45:30,165 --> 02:45:31,560
My laptop doesn't have

4360
02:45:31,560 --> 02:45:34,470
a certificate
issued about NCS.

4361
02:45:34,470 --> 02:45:36,600
I don't own a DNS name.

4362
02:45:36,600 --> 02:45:38,745
So even free certificate,

4363
02:45:38,745 --> 02:45:40,200
like Let's Encrypt

4364
02:45:40,200 --> 02:45:42,670
certificate, I
cannot get one.

4365
02:45:42,920 --> 02:45:46,270
This has come
to personnel.

4366
02:45:46,610 --> 02:45:49,455
What's going on in
front of the queue?

4367
02:45:49,455 --> 02:45:51,180
This happening to me just

4368
02:45:51,180 --> 02:45:53,430
like about a week ago,

4369
02:45:53,430 --> 02:45:55,335
from my home to UCLA,

4370
02:45:55,335 --> 02:45:57,795
I go through the single
lane public land

4371
02:45:57,795 --> 02:46:01,185
and the traffic is
extremely sluggish.

4372
02:46:01,185 --> 02:46:02,730
We have no clue what.

4373
02:46:02,730 --> 02:46:05,550
It took me a half hour
to hit the front of

4374
02:46:05,550 --> 02:46:08,130
starting point
that the water

4375
02:46:08,130 --> 02:46:10,260
main break, the roadblock.

4376
02:46:10,260 --> 02:46:12,360
So I wasted total

4377
02:46:12,360 --> 02:46:13,260
half an hour and

4378
02:46:13,260 --> 02:46:15,490
everyone else
along the road.

4379
02:46:15,680 --> 02:46:19,095
You can go Google
Maps, will save you.

4380
02:46:19,095 --> 02:46:21,705
That's what was happening
in the morning.

4381
02:46:21,705 --> 02:46:25,065
At night, 07:00 PM, I
was going to go home,

4382
02:46:25,065 --> 02:46:27,060
I said hopefully
through the day

4383
02:46:27,060 --> 02:46:29,385
Google Maps already
learned the fact.

4384
02:46:29,385 --> 02:46:32,310
Google Maps go back
to the old way,

4385
02:46:32,310 --> 02:46:35,590
it's a free 20
minutes, you got home.

4386
02:46:36,350 --> 02:46:39,360
You got to the
same point in

4387
02:46:39,360 --> 02:46:42,405
the other direction,
road closed.

4388
02:46:42,405 --> 02:46:44,700
That's how much you

4389
02:46:44,700 --> 02:46:47,535
can trust centralized
services.

4390
02:46:47,535 --> 02:46:51,225
But most of the
time things work.

4391
02:46:51,225 --> 02:46:53,490
We have great
CDN services,

4392
02:46:53,490 --> 02:46:56,010
we have great
car services.

4393
02:46:56,010 --> 02:47:01,155
The desktops wants to
talk to each other,

4394
02:47:01,155 --> 02:47:03,330
even if they're
on the same desk,

4395
02:47:03,330 --> 02:47:04,500
you can still talk to each

4396
02:47:04,500 --> 02:47:06,120
other through the Cloud.

4397
02:47:06,120 --> 02:47:08,055
And with the
last question,

4398
02:47:08,055 --> 02:47:10,260
you hope that
with your finger

4399
02:47:10,260 --> 02:47:13,390
across the Google Maps
can become real time.

4400
02:47:17,690 --> 02:47:20,415
>> So last point,

4401
02:47:20,415 --> 02:47:22,709
are all the communications

4402
02:47:22,709 --> 02:47:25,515
secure? I need
to go quick.

4403
02:47:25,515 --> 02:47:27,885
I tell you for this
last question,

4404
02:47:27,885 --> 02:47:29,700
I can't give you a
positive answer.

4405
02:47:29,700 --> 02:47:32,610
All the useful
applications today,

4406
02:47:32,610 --> 02:47:35,775
I believe they're running
in some securities,

4407
02:47:35,775 --> 02:47:38,160
how? This is how.

4408
02:47:38,160 --> 02:47:41,580
You're just hanging
to the Cloud through

4409
02:47:41,580 --> 02:47:44,865
your secure TLS
connections.

4410
02:47:44,865 --> 02:47:48,540
And this picture
reminded me back in

4411
02:47:48,540 --> 02:47:50,850
1981 when I just went

4412
02:47:50,850 --> 02:47:53,940
to MIT as a
graduate student.

4413
02:47:53,940 --> 02:47:57,810
Each one of us had as
a terminal hanging on

4414
02:47:57,810 --> 02:47:59,670
the physical wire to

4415
02:47:59,670 --> 02:48:03,960
a mainframe on the 9th
floor, Impact Square.

4416
02:48:03,960 --> 02:48:06,195
So 40 some years back

4417
02:48:06,195 --> 02:48:08,295
we came back to
the same picture.

4418
02:48:08,295 --> 02:48:11,790
Just that my phone
is probably more

4419
02:48:11,790 --> 02:48:14,985
powerful than
that mainframe

4420
02:48:14,985 --> 02:48:16,830
back then in
Impact Square,

4421
02:48:16,830 --> 02:48:20,070
except that it is still
hanging to the core.

4422
02:48:20,070 --> 02:48:22,530
Is this the thing we
wanted for the future?

4423
02:48:22,530 --> 02:48:24,090
By the way, the
picture is not as

4424
02:48:24,090 --> 02:48:26,385
bad yet. You know what?

4425
02:48:26,385 --> 02:48:28,740
Call servers are
not too close to

4426
02:48:28,740 --> 02:48:30,705
you though they
are problems,

4427
02:48:30,705 --> 02:48:32,475
how do you solve
the problems,

4428
02:48:32,475 --> 02:48:34,350
you inject them patches.

4429
02:48:34,350 --> 02:48:36,030
So we can see that

4430
02:48:36,030 --> 02:48:39,120
the CDNs help you
disseminate traffic,

4431
02:48:39,120 --> 02:48:42,210
the firewalls to
assure your security.

4432
02:48:42,210 --> 02:48:46,785
And then Eric
mentioned earlier that

4433
02:48:46,785 --> 02:48:49,755
the mitigation
of the service

4434
02:48:49,755 --> 02:48:53,190
prevented the Cloud
from getting attacked.

4435
02:48:53,190 --> 02:48:56,370
And then load balancers
they have all things.

4436
02:48:56,370 --> 02:48:58,320
So picture of today for

4437
02:48:58,320 --> 02:49:00,330
the network and it's
not that pretty.

4438
02:49:00,330 --> 02:49:02,550
With all these
middle boxes

4439
02:49:02,550 --> 02:49:04,140
there's a further
fall for it.

4440
02:49:04,140 --> 02:49:05,400
If people haven't heard of

4441
02:49:05,400 --> 02:49:07,410
this talk, you may
want to find it.

4442
02:49:07,410 --> 02:49:08,430
They said the death

4443
02:49:08,430 --> 02:49:09,885
of an end-to-end Internet.

4444
02:49:09,885 --> 02:49:11,130
And this actually a pretty

4445
02:49:11,130 --> 02:49:14,110
popular talk on
the YouTube.

4446
02:49:15,200 --> 02:49:18,120
Going forward
so centralizes

4447
02:49:18,120 --> 02:49:19,350
thing is not great,

4448
02:49:19,350 --> 02:49:21,330
but I hope everyone
understand

4449
02:49:21,330 --> 02:49:24,210
the potential
danger of that.

4450
02:49:24,210 --> 02:49:25,665
There is a well-known book

4451
02:49:25,665 --> 02:49:28,020
and the people in

4452
02:49:28,020 --> 02:49:29,490
my group actually
pointed out.

4453
02:49:29,490 --> 02:49:31,095
I think you
mentioned twice

4454
02:49:31,095 --> 02:49:33,600
this week Lydia
about this book.

4455
02:49:33,600 --> 02:49:36,270
The Age of Surveillance
Capitalism,

4456
02:49:36,270 --> 02:49:37,500
I really suggest that

4457
02:49:37,500 --> 02:49:39,855
everyone take a look
at the preview.

4458
02:49:39,855 --> 02:49:41,460
When you reading it, pay

4459
02:49:41,460 --> 02:49:44,080
attention to the
centralization.

4460
02:49:44,630 --> 02:49:48,210
So why is the centralized?

4461
02:49:48,210 --> 02:49:50,100
Because you build upon

4462
02:49:50,100 --> 02:49:51,480
individual users behavior.

4463
02:49:51,480 --> 02:49:53,430
You collect their
data so that

4464
02:49:53,430 --> 02:49:55,500
you can make
money out of it.

4465
02:49:55,500 --> 02:49:57,780
But there's the fundamental
question to ask.

4466
02:49:57,780 --> 02:50:00,540
User data, who owns it?

4467
02:50:00,540 --> 02:50:04,575
And do companies
have the free right

4468
02:50:04,575 --> 02:50:09,310
to leverage my data to
make it their revenue?

4469
02:50:10,580 --> 02:50:14,670
What kind of a regulation
will be needed?

4470
02:50:14,670 --> 02:50:18,525
I think that's all
semi open questions.

4471
02:50:18,525 --> 02:50:20,640
There is a greater blog.

4472
02:50:20,640 --> 02:50:23,790
Just point out to
you by Geoff Huston,

4473
02:50:23,790 --> 02:50:26,970
I think two years ago

4474
02:50:26,970 --> 02:50:29,294
on the cyber governance.

4475
02:50:29,294 --> 02:50:31,515
And he said is a
truly amazing,

4476
02:50:31,515 --> 02:50:32,805
I really agree with that.

4477
02:50:32,805 --> 02:50:34,050
That the sum of

4478
02:50:34,050 --> 02:50:37,005
a human knowledge is
at my fingertips.

4479
02:50:37,005 --> 02:50:40,350
Instantly, you can
learn about everything.

4480
02:50:40,350 --> 02:50:41,925
At the same time,

4481
02:50:41,925 --> 02:50:44,955
it's truly frightening
to think that

4482
02:50:44,955 --> 02:50:46,860
all this
information is only

4483
02:50:46,860 --> 02:50:50,220
accessible through
a single entity.

4484
02:50:50,220 --> 02:50:53,265
And everyone knows who
that single entity is.

4485
02:50:53,265 --> 02:50:55,124
If you cannot see clearly,

4486
02:50:55,124 --> 02:50:56,490
that really shows

4487
02:50:56,490 --> 02:50:58,740
the search engine
market share

4488
02:50:58,740 --> 02:51:01,785
and everyone knows
what the top line.

4489
02:51:01,785 --> 02:51:04,395
That's the Google,
and everyone

4490
02:51:04,395 --> 02:51:07,450
else, they're noise.

4491
02:51:08,300 --> 02:51:12,240
So to sum up, that profile

4492
02:51:12,240 --> 02:51:13,200
within the networking is

4493
02:51:13,200 --> 02:51:14,790
networking shooting
the packets,

4494
02:51:14,790 --> 02:51:17,070
but this is no
longer the case.

4495
02:51:17,070 --> 02:51:19,500
We're used to be
that the network

4496
02:51:19,500 --> 02:51:21,810
can be dominated
by the carriers.

4497
02:51:21,810 --> 02:51:24,105
But today, the
focal point,

4498
02:51:24,105 --> 02:51:25,980
it really moved up to

4499
02:51:25,980 --> 02:51:30,510
the higher protocol
stack where you can

4500
02:51:30,510 --> 02:51:33,810
much easily exploit
the centralization

4501
02:51:33,810 --> 02:51:37,245
with this economy
of scale,

4502
02:51:37,245 --> 02:51:39,900
with a lot less cost.

4503
02:51:39,900 --> 02:51:41,580
Before you want to be

4504
02:51:41,580 --> 02:51:44,355
a monopoly to
provide networking.

4505
02:51:44,355 --> 02:51:46,155
You really have to
have the capital

4506
02:51:46,155 --> 02:51:47,655
to install the switches

4507
02:51:47,655 --> 02:51:50,400
and then draw the lines

4508
02:51:50,400 --> 02:51:51,945
, digging the trenches.

4509
02:51:51,945 --> 02:51:55,470
Today, that's along
centralized Cloud,

4510
02:51:55,470 --> 02:51:57,975
you can really capitalize

4511
02:51:57,975 --> 02:52:00,165
on your software
department.

4512
02:52:00,165 --> 02:52:03,359
Lower-level services
become a commodity.

4513
02:52:03,359 --> 02:52:06,150
However, personal
opinion, I feel

4514
02:52:06,150 --> 02:52:08,670
that many of the effort

4515
02:52:08,670 --> 02:52:09,690
they still focused on the

4516
02:52:09,690 --> 02:52:12,235
lower-level optimization.

4517
02:52:12,235 --> 02:52:15,915
It's very much useful
work, interesting work.

4518
02:52:15,915 --> 02:52:17,700
The question is
whether there's

4519
02:52:17,700 --> 02:52:20,205
a most critical work

4520
02:52:20,205 --> 02:52:24,250
that can help Internet
move into the future.

4521
02:52:27,200 --> 02:52:29,355
This is just saying that

4522
02:52:29,355 --> 02:52:30,945
the circle is going on

4523
02:52:30,945 --> 02:52:32,835
and moving the train

4524
02:52:32,835 --> 02:52:34,170
going into the direction,

4525
02:52:34,170 --> 02:52:38,850
not necessarily what
we want it to see.

4526
02:52:38,850 --> 02:52:41,475
There's some discussions,

4527
02:52:41,475 --> 02:52:42,645
especially in IETF,

4528
02:52:42,645 --> 02:52:44,160
to say we really need

4529
02:52:44,160 --> 02:52:47,130
to design new protocols,

4530
02:52:47,130 --> 02:52:49,845
to merge the Internet
out of centralization.

4531
02:52:49,845 --> 02:52:51,540
And then I brought
up the question,

4532
02:52:51,540 --> 02:52:52,620
to say that look,

4533
02:52:52,620 --> 02:52:54,750
the protocols
have not changed.

4534
02:52:54,750 --> 02:52:56,730
Back 40 years, we had

4535
02:52:56,730 --> 02:52:59,010
the distributed
decentralized Internet,

4536
02:52:59,010 --> 02:53:00,720
the same set
of protocol by

4537
02:53:00,720 --> 02:53:02,685
and large on the
lower layers,

4538
02:53:02,685 --> 02:53:05,760
but the operations
got decentralized.

4539
02:53:05,760 --> 02:53:08,100
So therefore, it's really

4540
02:53:08,100 --> 02:53:09,885
the protocol
not the design.

4541
02:53:09,885 --> 02:53:12,315
The protocol decides
where traffic goes,

4542
02:53:12,315 --> 02:53:14,130
or some other logic,

4543
02:53:14,130 --> 02:53:17,370
it drives where
traffic goes.

4544
02:53:17,370 --> 02:53:20,340
I brought up this
position statements

4545
02:53:20,340 --> 02:53:23,380
at the last IETF, and
it got a pushback.

4546
02:53:23,780 --> 02:53:26,010
It says that, okay, yes,

4547
02:53:26,010 --> 02:53:27,150
protocol has not changed

4548
02:53:27,150 --> 02:53:28,830
but the requirement
are changed.

4549
02:53:28,830 --> 02:53:31,635
So we need to design
new protocols

4550
02:53:31,635 --> 02:53:35,860
to prevent further
centralization.

4551
02:53:36,920 --> 02:53:40,620
The real question is
actually not so much,

4552
02:53:40,620 --> 02:53:41,790
hey, who can design

4553
02:53:41,790 --> 02:53:44,565
new protocols that
will be decentralized?

4554
02:53:44,565 --> 02:53:45,990
I think a
fundamental question

4555
02:53:45,990 --> 02:53:47,235
one must ask is,

4556
02:53:47,235 --> 02:53:49,170
what are the new
requirement?

4557
02:53:49,170 --> 02:53:51,150
Unless the new
protocols can

4558
02:53:51,150 --> 02:53:53,205
address the new
requirement.

4559
02:53:53,205 --> 02:53:57,460
Otherwise, you're not
solving the problem.

4560
02:53:59,330 --> 02:54:01,560
So to me, I think that

4561
02:54:01,560 --> 02:54:02,880
the new requirement is,

4562
02:54:02,880 --> 02:54:07,335
like I said before,
this is where we are.

4563
02:54:07,335 --> 02:54:08,880
Why we need the hanging

4564
02:54:08,880 --> 02:54:10,320
everything on the Clouds,

4565
02:54:10,320 --> 02:54:13,740
because only the Cloud
is a safety heaven.

4566
02:54:13,740 --> 02:54:15,630
The new requirement is

4567
02:54:15,630 --> 02:54:17,610
about secure
communications.

4568
02:54:17,610 --> 02:54:21,165
And all of those
little tiny devices,

4569
02:54:21,165 --> 02:54:24,060
like our laptops
cannot communicate

4570
02:54:24,060 --> 02:54:27,580
directly because they're
faceless entities.

4571
02:54:27,950 --> 02:54:31,124
Of course they are
faceless, so therefore,

4572
02:54:31,124 --> 02:54:32,190
they cannot securely

4573
02:54:32,190 --> 02:54:33,840
communicate with
each other.

4574
02:54:33,840 --> 02:54:36,210
Security start
with identities.

4575
02:54:36,210 --> 02:54:37,590
You know whom you
are talking to,

4576
02:54:37,590 --> 02:54:38,670
then you know what

4577
02:54:38,670 --> 02:54:40,920
this guy can,
or cannot do.

4578
02:54:40,920 --> 02:54:45,000
To move quickly, here's
collected small set

4579
02:54:45,000 --> 02:54:49,110
of sample applications
that's Cloud free.

4580
02:54:49,110 --> 02:54:51,345
We're talking
some here today,

4581
02:54:51,345 --> 02:54:55,380
like the DeftT, just
mentioned earlier.

4582
02:54:55,380 --> 02:54:57,855
There's no dependency
on the Cloud.

4583
02:54:57,855 --> 02:54:59,880
I put the pointer,
therefore,

4584
02:54:59,880 --> 02:55:01,005
all the things
I mentioned,

4585
02:55:01,005 --> 02:55:02,340
whoever interested can

4586
02:55:02,340 --> 02:55:04,570
do further exploration.

4587
02:55:05,180 --> 02:55:08,550
Can you guys
talk, explain how

4588
02:55:08,550 --> 02:55:11,070
we want to make hydra do

4589
02:55:11,070 --> 02:55:15,060
this semiautomatic
bootstrapping so

4590
02:55:15,060 --> 02:55:16,860
that all the
entities inside of

4591
02:55:16,860 --> 02:55:19,530
a hydra could
communicate securely.

4592
02:55:19,530 --> 02:55:22,335
I want to point out
that the hydra also is

4593
02:55:22,335 --> 02:55:26,399
entirely Cloud free
distributed application.

4594
02:55:26,399 --> 02:55:29,610
Now the next example
is something developed

4595
02:55:29,610 --> 02:55:32,610
at UCLA called
the NDN Lite,

4596
02:55:32,610 --> 02:55:35,580
is really a user
controlled smart homes.

4597
02:55:35,580 --> 02:55:37,470
Again, for people
interested,

4598
02:55:37,470 --> 02:55:38,640
you can look
at that paper,

4599
02:55:38,640 --> 02:55:39,495
that's a great paper.

4600
02:55:39,495 --> 02:55:40,905
Explain all the details.

4601
02:55:40,905 --> 02:55:43,065
Here's application

4602
02:55:43,065 --> 02:55:45,510
developed by
people at Memphis.

4603
02:55:45,510 --> 02:55:47,280
This was published in

4604
02:55:47,280 --> 02:55:50,280
ICN few years back about,

4605
02:55:50,280 --> 02:55:52,560
for social apps we
can really do it

4606
02:55:52,560 --> 02:55:54,660
in a distributed
way without

4607
02:55:54,660 --> 02:55:56,745
depending on the Clouds

4608
02:55:56,745 --> 02:55:59,055
to authenticate you,
to identify you.

4609
02:55:59,055 --> 02:56:00,540
Why we go to the Cloud to

4610
02:56:00,540 --> 02:56:01,950
communicate
because you and

4611
02:56:01,950 --> 02:56:03,405
I have no identities.

4612
02:56:03,405 --> 02:56:04,830
We go to the Cloud.

4613
02:56:04,830 --> 02:56:08,010
I would identify that
by my Gmail address.

4614
02:56:08,010 --> 02:56:11,055
There's a single
side. Now, once

4615
02:56:11,055 --> 02:56:13,200
the Google
authenticate you,

4616
02:56:13,200 --> 02:56:14,895
then you can talk to
all the other peoples,

4617
02:56:14,895 --> 02:56:17,310
but If one day,

4618
02:56:17,310 --> 02:56:19,500
I don't think
Google can do that.

4619
02:56:19,500 --> 02:56:21,180
If they drop on

4620
02:56:21,180 --> 02:56:24,265
my Gmail address,
I'll be dark.

4621
02:56:24,265 --> 02:56:27,495
I cannot communicate
with anyone.

4622
02:56:27,495 --> 02:56:30,075
That is a danger.

4623
02:56:30,075 --> 02:56:32,520
This really point us
to a new direction,

4624
02:56:32,520 --> 02:56:34,680
how you can do
social networking

4625
02:56:34,680 --> 02:56:36,600
without depending
on the Clouds.

4626
02:56:36,600 --> 02:56:39,000
What's the common
features of all of

4627
02:56:39,000 --> 02:56:41,970
this NDN based
applications?

4628
02:56:41,970 --> 02:56:45,165
We say security
designed into the apps.

4629
02:56:45,165 --> 02:56:46,410
So therefore,
we don't depend

4630
02:56:46,410 --> 02:56:47,520
on this intermediate,

4631
02:56:47,520 --> 02:56:48,960
the firewalls,
and anything

4632
02:56:48,960 --> 02:56:50,790
to protect our security.

4633
02:56:50,790 --> 02:56:52,380
But how can you have

4634
02:56:52,380 --> 02:56:54,960
the security built
into the apps?

4635
02:56:54,960 --> 02:56:57,020
Two things,
secret results.

4636
02:56:57,020 --> 02:56:59,165
That's my understanding
of secret results,

4637
02:56:59,165 --> 02:57:02,675
is that Cloud independent
user identifier

4638
02:57:02,675 --> 02:57:05,075
and Cloud independent
security.

4639
02:57:05,075 --> 02:57:07,460
With this two, then all of

4640
02:57:07,460 --> 02:57:09,865
our devices can
directly communicate.

4641
02:57:09,865 --> 02:57:11,640
Then those people
who are smart

4642
02:57:11,640 --> 02:57:13,695
enough will build
applications

4643
02:57:13,695 --> 02:57:16,410
utilizing this user owned

4644
02:57:16,410 --> 02:57:19,810
identity and user owned
security management.

4645
02:57:22,000 --> 02:57:25,940
So back to the
real serious talk

4646
02:57:25,940 --> 02:57:29,075
about we are out of our
end-to-end principle.

4647
02:57:29,075 --> 02:57:30,410
I think the end-to-end is

4648
02:57:30,410 --> 02:57:32,330
a principle and we
will stick to it.

4649
02:57:32,330 --> 02:57:33,350
The reason we have

4650
02:57:33,350 --> 02:57:36,600
so many mailboxes
is because

4651
02:57:36,600 --> 02:57:39,465
the new requirements
arrived

4652
02:57:39,465 --> 02:57:43,185
and the old protocol
stack cannot satisfy.

4653
02:57:43,185 --> 02:57:45,240
The current solution
is to inject

4654
02:57:45,240 --> 02:57:46,665
the patches in the middle

4655
02:57:46,665 --> 02:57:48,135
like the mailboxes,

4656
02:57:48,135 --> 02:57:51,300
like the CDNs, or
delivery firewall,

4657
02:57:51,300 --> 02:57:52,755
or so-called the security,

4658
02:57:52,755 --> 02:57:55,500
but they really create
all kinds of problems.

4659
02:57:55,500 --> 02:57:57,030
So therefore, this is

4660
02:57:57,030 --> 02:57:59,265
not about end-to-end
principle,

4661
02:57:59,265 --> 02:58:03,285
outdated, but rather
it's the architecture.

4662
02:58:03,285 --> 02:58:05,760
Then let another revision.

4663
02:58:05,760 --> 02:58:08,084
Once the
architecture enables

4664
02:58:08,084 --> 02:58:09,960
the end-user identities

4665
02:58:09,960 --> 02:58:11,400
and the security support,

4666
02:58:11,400 --> 02:58:13,755
we're actually not only

4667
02:58:13,755 --> 02:58:16,185
stick with the
end-to-end principle,

4668
02:58:16,185 --> 02:58:18,960
but we actually
extend it to have

4669
02:58:18,960 --> 02:58:21,390
end-to-end security
and that really

4670
02:58:21,390 --> 02:58:23,655
simplify the
future systems

4671
02:58:23,655 --> 02:58:24,750
in the fundamental ways.

4672
02:58:24,750 --> 02:58:27,630
So take a way
is what I said.

4673
02:58:27,630 --> 02:58:29,985
To enable distributed
applications,

4674
02:58:29,985 --> 02:58:31,560
we need identities and

4675
02:58:31,560 --> 02:58:34,930
securities that's
out of Clouds.

4676
02:58:35,300 --> 02:58:37,695
This is end my story.

4677
02:58:37,695 --> 02:58:39,375
I'm over by two minutes.

4678
02:58:39,375 --> 02:58:44,910
Thank you. [APPLAUSE]

4679
02:58:44,910 --> 02:58:50,680
>> Thank you, Lisa.
Questions? Yes.

4680
02:58:51,850 --> 02:58:56,870
>> So I think a
contributing factor to

4681
02:58:56,870 --> 02:58:59,120
the move to the Cloud
is the fact that

4682
02:58:59,120 --> 02:59:01,775
from the point of view
of my application,

4683
02:59:01,775 --> 02:59:04,115
there is no difference

4684
02:59:04,115 --> 02:59:05,870
between communicating with

4685
02:59:05,870 --> 02:59:08,075
something in the Cloud and

4686
02:59:08,075 --> 02:59:10,205
communicating
with the laptop

4687
02:59:10,205 --> 02:59:12,500
that's next to
me on the table.

4688
02:59:12,500 --> 02:59:16,145
IP completely
obscures that,

4689
02:59:16,145 --> 02:59:21,980
and part of that is
because of the way the

4690
02:59:21,980 --> 02:59:24,890
economics of internet
service providers

4691
02:59:24,890 --> 02:59:28,235
and the whole
infrastructure ecosystem.

4692
02:59:28,235 --> 02:59:32,190
As you pointed out,
it's a commodity now.

4693
02:59:32,440 --> 02:59:36,200
Dave Clark tells the
story about talking to

4694
02:59:36,200 --> 02:59:39,064
an economist who said,

4695
02:59:39,064 --> 02:59:40,160
this was a long time ago,

4696
02:59:40,160 --> 02:59:42,170
but he said, "You guys

4697
02:59:42,170 --> 02:59:44,630
screwed up the
money protocols."

4698
02:59:44,630 --> 02:59:46,190
Dave Clark says,
"We didn't

4699
02:59:46,190 --> 02:59:47,945
design any money
protocols."

4700
02:59:47,945 --> 02:59:49,235
The economist says, "Yeah,

4701
02:59:49,235 --> 02:59:51,050
that's what I said."

4702
02:59:51,050 --> 02:59:54,680
I sometimes wonder whether

4703
02:59:54,680 --> 02:59:56,210
things would have evolved

4704
02:59:56,210 --> 02:59:59,870
differently if we had
made the incentives and

4705
02:59:59,870 --> 03:00:02,945
the costs of the
communication

4706
03:00:02,945 --> 03:00:05,570
more explicit
and expose that.

4707
03:00:05,570 --> 03:00:08,240
Obviously it was a good
thing for the growth

4708
03:00:08,240 --> 03:00:09,380
of the Internet to

4709
03:00:09,380 --> 03:00:11,345
make things
simple like that.

4710
03:00:11,345 --> 03:00:15,200
But I think also where
we are right now,

4711
03:00:15,200 --> 03:00:18,755
which I agree with your
assessment of that,

4712
03:00:18,755 --> 03:00:21,665
is a partial
consequence of that.

4713
03:00:21,665 --> 03:00:23,615
I wonder if one
thing we might do

4714
03:00:23,615 --> 03:00:26,570
is try to unbundle

4715
03:00:26,570 --> 03:00:31,160
the incentives and expose

4716
03:00:31,160 --> 03:00:35,195
those more in our systems.

4717
03:00:35,195 --> 03:00:36,965
>> I don't know how
much time we have.

4718
03:00:36,965 --> 03:00:37,940
I think that's a great

4719
03:00:37,940 --> 03:00:39,905
[LAUGHTER] question
for discussions.

4720
03:00:39,905 --> 03:00:43,590
But I can just
reply quickly.

4721
03:00:43,720 --> 03:00:47,420
For one, I don't mind
the Cloud at all.

4722
03:00:47,420 --> 03:00:49,340
Cloud is economy of scale.

4723
03:00:49,340 --> 03:00:50,870
Use cloud as much
as possible.

4724
03:00:50,870 --> 03:00:52,685
The fundamental thing
is not whether you

4725
03:00:52,685 --> 03:00:54,230
communicate
through the Cloud

4726
03:00:54,230 --> 03:00:55,460
or not through the Cloud.

4727
03:00:55,460 --> 03:00:56,540
The fundamental thing is

4728
03:00:56,540 --> 03:00:59,315
a control power,
the control.

4729
03:00:59,315 --> 03:01:00,920
Like I said, I

4730
03:01:00,920 --> 03:01:02,855
might identify
that by my Gmail.

4731
03:01:02,855 --> 03:01:04,610
If I Google, I
would delete that

4732
03:01:04,610 --> 03:01:06,650
Gmail ID and data.

4733
03:01:06,650 --> 03:01:08,615
Data is a power.

4734
03:01:08,615 --> 03:01:11,030
Another example,
Google knows me

4735
03:01:11,030 --> 03:01:13,655
better than myself.
It is my data.

4736
03:01:13,655 --> 03:01:15,110
Do I have control over

4737
03:01:15,110 --> 03:01:16,595
the access to that data?

4738
03:01:16,595 --> 03:01:17,900
I don't mind that the data

4739
03:01:17,900 --> 03:01:19,235
is stored in Google,

4740
03:01:19,235 --> 03:01:21,365
but I should control
the access of it.

4741
03:01:21,365 --> 03:01:23,135
>> The key question
though is,

4742
03:01:23,135 --> 03:01:25,280
would you pay per

4743
03:01:25,280 --> 03:01:29,455
search for Google
for that service?

4744
03:01:29,455 --> 03:01:32,995
Because that's what leads
to the information.

4745
03:01:32,995 --> 03:01:35,080
>> I don't want to
forget David's question,

4746
03:01:35,080 --> 03:01:37,195
but I will answer
this question first.

4747
03:01:37,195 --> 03:01:38,770
Search, are we

4748
03:01:38,770 --> 03:01:40,890
doing a search with
driveway today?

4749
03:01:40,890 --> 03:01:43,370
Now withdraw
out things like

4750
03:01:43,370 --> 03:01:48,095
the maximum entropy way.

4751
03:01:48,095 --> 03:01:49,550
Then Google will do

4752
03:01:49,550 --> 03:01:53,885
the brute force browsing
to find out things.

4753
03:01:53,885 --> 03:01:55,220
We could help build

4754
03:01:55,220 --> 03:01:58,115
the search in a
fundamentally different way.

4755
03:01:58,115 --> 03:02:00,980
I had a conversation
with one long time

4756
03:02:00,980 --> 03:02:02,210
ago when we
were working on

4757
03:02:02,210 --> 03:02:03,815
this adaptable
web caching,

4758
03:02:03,815 --> 03:02:06,200
that was in '90s.

4759
03:02:06,200 --> 03:02:08,690
I think that's one
for the forerunners

4760
03:02:08,690 --> 03:02:12,509
eventually at a latitude
is the indirection.

4761
03:02:14,590 --> 03:02:17,420
When you put
out something,

4762
03:02:17,420 --> 03:02:19,700
you meant for
others to find it.

4763
03:02:19,700 --> 03:02:21,380
Why don't you
just build into

4764
03:02:21,380 --> 03:02:23,810
index service instead of

4765
03:02:23,810 --> 03:02:26,690
Google being the
only party that

4766
03:02:26,690 --> 03:02:29,885
has the power to crow
the entire world?

4767
03:02:29,885 --> 03:02:31,490
We could help build
the system in

4768
03:02:31,490 --> 03:02:34,235
a more structured way,
more fundable way,

4769
03:02:34,235 --> 03:02:36,380
more index way to make

4770
03:02:36,380 --> 03:02:37,010
your search in

4771
03:02:37,010 --> 03:02:39,020
a fundamentally
different business.

4772
03:02:39,020 --> 03:02:41,000
But now Google
has a power,

4773
03:02:41,000 --> 03:02:42,545
it utilize that power.

4774
03:02:42,545 --> 03:02:44,225
It knows what
you're looking for.

4775
03:02:44,225 --> 03:02:47,870
That's how they
learn about you.

4776
03:02:47,870 --> 03:02:49,610
>> Was asking if you're

4777
03:02:49,610 --> 03:02:51,065
willing to pay for it.

4778
03:02:51,065 --> 03:02:52,970
>> I mean,
there's different

4779
03:02:52,970 --> 03:02:54,065
ways to build a system.

4780
03:02:54,065 --> 03:02:55,250
That is today's
way building

4781
03:02:55,250 --> 03:02:56,735
system is not the way.

4782
03:02:56,735 --> 03:02:58,370
>> I'll bring back, I'm

4783
03:02:58,370 --> 03:02:59,630
following on
John's question.

4784
03:02:59,630 --> 03:03:02,550
>> Can I answer
Clark question?

4785
03:03:04,450 --> 03:03:07,745
I'm in a difficult
situation.

4786
03:03:07,745 --> 03:03:09,815
Dave is my advisor.

4787
03:03:09,815 --> 03:03:12,590
He taught me what
is networking.

4788
03:03:12,590 --> 03:03:15,410
I really learned the
architecture from him.

4789
03:03:15,410 --> 03:03:18,080
But on that particular
function to say we

4790
03:03:18,080 --> 03:03:21,845
didn't design money
into the protocol,

4791
03:03:21,845 --> 03:03:24,300
I have a different
opinion.

4792
03:03:24,340 --> 03:03:27,275
I really have a different
opinion on that,

4793
03:03:27,275 --> 03:03:29,810
but I need more
time to explore.

4794
03:03:29,810 --> 03:03:31,595
But I want to register
that question

4795
03:03:31,595 --> 03:03:34,080
with you. We
can chat later.

4796
03:03:34,960 --> 03:03:37,520
>> The obvious
question here,

4797
03:03:37,520 --> 03:03:38,000
and I think this

4798
03:03:38,000 --> 03:03:40,190
is what Ken was
getting at is that

4799
03:03:40,190 --> 03:03:45,140
the Internet today is

4800
03:03:45,140 --> 03:03:46,550
really ran on advertising.

4801
03:03:46,550 --> 03:03:48,095
Whether we like it or not,

4802
03:03:48,095 --> 03:03:49,670
the thing that
drives the internet

4803
03:03:49,670 --> 03:03:51,485
today is advertising,

4804
03:03:51,485 --> 03:03:53,030
and the advertising
business

4805
03:03:53,030 --> 03:03:54,825
has structured itself in

4806
03:03:54,825 --> 03:03:56,710
such a way that it will be

4807
03:03:56,710 --> 03:03:59,905
really hard to dismantle
what they've built.

4808
03:03:59,905 --> 03:04:02,020
We're now talking
about 500,

4809
03:04:02,020 --> 03:04:05,950
600 billion dollars
industry that

4810
03:04:05,950 --> 03:04:08,170
have mastered the ability

4811
03:04:08,170 --> 03:04:10,645
to figure out who we are,

4812
03:04:10,645 --> 03:04:13,865
packages and sell
us to advertisers.

4813
03:04:13,865 --> 03:04:14,960
Now, whether it

4814
03:04:14,960 --> 03:04:16,685
works or not, that's
a different story.

4815
03:04:16,685 --> 03:04:18,470
But this is what
we're against and

4816
03:04:18,470 --> 03:04:20,090
I don't really see people

4817
03:04:20,090 --> 03:04:22,460
complaining a lot
about that because

4818
03:04:22,460 --> 03:04:26,360
in return we get
these free services.

4819
03:04:26,360 --> 03:04:29,690
Unless somebody can figure

4820
03:04:29,690 --> 03:04:32,720
out a better way to
find the intranet,

4821
03:04:32,720 --> 03:04:33,875
back to Ken's question,

4822
03:04:33,875 --> 03:04:35,210
are we willing to pay for

4823
03:04:35,210 --> 03:04:36,740
all the free services
that we're getting?

4824
03:04:36,740 --> 03:04:38,930
>> I would point you
to a talk given by

4825
03:04:38,930 --> 03:04:43,744
Steve Bellovin in
July 2019 IETF,

4826
03:04:43,744 --> 03:04:45,440
where he gave a keynote,

4827
03:04:45,440 --> 03:04:47,150
he said that I
don't mind the

4828
03:04:47,150 --> 03:04:49,025
selling my data for money.

4829
03:04:49,025 --> 03:04:50,735
The question is now

4830
03:04:50,735 --> 03:04:53,765
data decision is
out of my hands.

4831
03:04:53,765 --> 03:04:56,000
If I have a contract with

4832
03:04:56,000 --> 03:04:58,760
Google, you can
sell my money.

4833
03:04:58,760 --> 03:05:01,460
Let us split the revenue.

4834
03:05:01,460 --> 03:05:04,520
For now that's entirely
controlled by Google.

4835
03:05:04,520 --> 03:05:06,110
The money goes to Google.

4836
03:05:06,110 --> 03:05:09,125
He didn't say
Google, I said that,

4837
03:05:09,125 --> 03:05:10,430
but that is a problem.

4838
03:05:10,430 --> 03:05:13,070
That goes back to my
original statement.

4839
03:05:13,070 --> 03:05:14,705
Who is in control?

4840
03:05:14,705 --> 03:05:17,870
We don't want
the small number

4841
03:05:17,870 --> 03:05:19,085
of separate giants

4842
03:05:19,085 --> 03:05:20,840
to control our entire life

4843
03:05:20,840 --> 03:05:23,090
and that problem needs
to be addressed.

4844
03:05:23,090 --> 03:05:24,754
It's not about
advertisement,

4845
03:05:24,754 --> 03:05:26,285
it's all about the
control power.

4846
03:05:26,285 --> 03:05:27,950
>> Well, the only way you

4847
03:05:27,950 --> 03:05:29,900
can address that is
through a regulation.

4848
03:05:29,900 --> 03:05:30,620
>> Yes.

4849
03:05:30,620 --> 03:05:31,820
>> Because the companies

4850
03:05:31,820 --> 03:05:33,335
themselves are not
going to do this.

4851
03:05:33,335 --> 03:05:35,390
Once you start going
into regulation,

4852
03:05:35,390 --> 03:05:37,970
you're opening
up a huge number

4853
03:05:37,970 --> 03:05:39,395
of cans of worms.

4854
03:05:39,395 --> 03:05:41,450
>> In my original
version of

4855
03:05:41,450 --> 03:05:44,600
this 2021 DRG workshop,

4856
03:05:44,600 --> 03:05:46,280
we're actually
talking about the

4857
03:05:46,280 --> 03:05:50,495
society turn down the
three-legged stool.

4858
03:05:50,495 --> 03:05:53,795
There's a market,
there is technology,

4859
03:05:53,795 --> 03:05:56,539
there's regulation, and
there's a constraint,

4860
03:05:56,539 --> 03:05:58,940
the growth of
each of them.

4861
03:05:58,940 --> 03:06:01,070
Now, I think the
market is taking

4862
03:06:01,070 --> 03:06:02,825
over way more power

4863
03:06:02,825 --> 03:06:05,510
because market-driven
economy

4864
03:06:05,510 --> 03:06:07,505
went really fast.

4865
03:06:07,505 --> 03:06:11,585
Of course the technology
feels that advances.

4866
03:06:11,585 --> 03:06:14,345
But the regulation
is too far behind.

4867
03:06:14,345 --> 03:06:16,730
We are yet to figure
out exactly what to

4868
03:06:16,730 --> 03:06:20,150
regulate before we can

4869
03:06:20,150 --> 03:06:22,835
bring that regulation
into the picture.

4870
03:06:22,835 --> 03:06:24,890
>> That's exactly
right. I suspect that

4871
03:06:24,890 --> 03:06:26,930
if we try to regulate
the Internet,

4872
03:06:26,930 --> 03:06:28,820
we're going to get lost in

4873
03:06:28,820 --> 03:06:30,845
trying to decide
what to regulate,

4874
03:06:30,845 --> 03:06:33,860
how to regulate, and
who is to regulate.

4875
03:06:33,860 --> 03:06:35,975
>> That's actually
the topics

4876
03:06:35,975 --> 03:06:37,520
for the DRG discussion.

4877
03:06:37,520 --> 03:06:38,300
I hope whoever

4878
03:06:38,300 --> 03:06:41,340
interested join
our discussion.

4879
03:06:44,260 --> 03:06:48,320
>> There are some
interesting comments in

4880
03:06:48,320 --> 03:06:50,060
Slack about ChatGPT

4881
03:06:50,060 --> 03:07:06,530
[inaudible].

4882
03:07:06,530 --> 03:07:08,090
>> I think for ChatGPT I

4883
03:07:08,090 --> 03:07:10,070
would have comments as

4884
03:07:10,070 --> 03:07:11,150
generally speaking for

4885
03:07:11,150 --> 03:07:13,715
all the machine
learning approaches.

4886
03:07:13,715 --> 03:07:15,845
I think machine
learning is great.

4887
03:07:15,845 --> 03:07:18,680
That's really a new tool.

4888
03:07:18,680 --> 03:07:19,310
You can think of

4889
03:07:19,310 --> 03:07:23,030
the new machine
industry revolution.

4890
03:07:23,030 --> 03:07:24,950
There's a second
level of revolution,

4891
03:07:24,950 --> 03:07:27,920
rapid, big jump into
a much higher level.

4892
03:07:27,920 --> 03:07:32,200
However, the same

4893
03:07:32,200 --> 03:07:34,510
Internet principle
will apply.

4894
03:07:34,510 --> 03:07:36,190
The ChatGPT is just

4895
03:07:36,190 --> 03:07:38,035
like all the
machine learning's,

4896
03:07:38,035 --> 03:07:40,330
something in,
something out.

4897
03:07:40,330 --> 03:07:45,320
What goes in is a
fundamental question.

4898
03:07:45,320 --> 03:07:47,945
If you don't know
what goes in,

4899
03:07:47,945 --> 03:07:51,660
then you do not trust
what comes out.

4900
03:07:52,780 --> 03:07:55,160
>> I didn't know
if you know this,

4901
03:07:55,160 --> 03:07:57,410
but there was an
article where he

4902
03:07:57,410 --> 03:07:58,970
started using ChatGPT and

4903
03:07:58,970 --> 03:08:00,695
it started trending,

4904
03:08:00,695 --> 03:08:02,870
but we'll leave that for

4905
03:08:02,870 --> 03:08:07,220
another day.
Other request?

4906
03:08:07,220 --> 03:08:08,750
>> First I have to

4907
03:08:08,750 --> 03:08:10,070
congratulate
this crowd for

4908
03:08:10,070 --> 03:08:12,320
taking so long to
mention ChatGPT.

4909
03:08:12,320 --> 03:08:15,950
[LAUGHTER] I was
at NDSS and and

4910
03:08:15,950 --> 03:08:17,990
ChatGPT was mentioned
at least 20

4911
03:08:17,990 --> 03:08:20,060
times every day
when we were there.

4912
03:08:20,060 --> 03:08:33,200
[LAUGHTER] [APPLAUSE].

4913
03:08:33,200 --> 03:08:33,560
>> Thank you,

4914
03:08:33,560 --> 03:08:35,360
Mr. Smith and all
the speakers.

4915
03:08:35,360 --> 03:08:38,540
We'll see you all
tomorrow 10:00 AM

4916
03:08:38,540 --> 03:08:41,210
for two presentation
sessions

4917
03:08:41,210 --> 03:08:42,965
and two interesting
panels.

4918
03:08:42,965 --> 03:08:44,450
We'll see you all tomorrow

4919
03:08:44,450 --> 03:08:46,920
at 10:00. Thank you all.